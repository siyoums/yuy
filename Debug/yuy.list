
yuy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da80  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  0800dc10  0800dc10  0000ec10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dff0  0800dff0  0000f2c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dff0  0800dff0  0000eff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dff8  0800dff8  0000f2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dff8  0800dff8  0000eff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dffc  0800dffc  0000effc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800e000  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f2c4  2**0
                  CONTENTS
 10 .bss          00001f44  200002c8  200002c8  0000f2c8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000220c  2000220c  0000f2c8  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000f2c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016f9e  00000000  00000000  0000f2ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b94  00000000  00000000  0002628c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001548  00000000  00000000  00029e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001056  00000000  00000000  0002b368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024863  00000000  00000000  0002c3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bb48  00000000  00000000  00050c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1d06  00000000  00000000  0006c769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013e46f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006be8  00000000  00000000  0013e4b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0014509c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c8 	.word	0x200002c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dbf8 	.word	0x0800dbf8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002cc 	.word	0x200002cc
 80001cc:	0800dbf8 	.word	0x0800dbf8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_frsub>:
 8000ba8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bac:	e002      	b.n	8000bb4 <__addsf3>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fsub>:
 8000bb0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bb4 <__addsf3>:
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	bf1f      	itttt	ne
 8000bb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bbc:	ea92 0f03 	teqne	r2, r3
 8000bc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc8:	d06a      	beq.n	8000ca0 <__addsf3+0xec>
 8000bca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd2:	bfc1      	itttt	gt
 8000bd4:	18d2      	addgt	r2, r2, r3
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	4048      	eorgt	r0, r1
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	2b19      	cmp	r3, #25
 8000be2:	bf88      	it	hi
 8000be4:	4770      	bxhi	lr
 8000be6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bee:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bfa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bfe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4249      	negne	r1, r1
 8000c06:	ea92 0f03 	teq	r2, r3
 8000c0a:	d03f      	beq.n	8000c8c <__addsf3+0xd8>
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	fa41 fc03 	asr.w	ip, r1, r3
 8000c14:	eb10 000c 	adds.w	r0, r0, ip
 8000c18:	f1c3 0320 	rsb	r3, r3, #32
 8000c1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c20:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__addsf3+0x78>
 8000c26:	4249      	negs	r1, r1
 8000c28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c2c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c30:	d313      	bcc.n	8000c5a <__addsf3+0xa6>
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c36:	d306      	bcc.n	8000c46 <__addsf3+0x92>
 8000c38:	0840      	lsrs	r0, r0, #1
 8000c3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3e:	f102 0201 	add.w	r2, r2, #1
 8000c42:	2afe      	cmp	r2, #254	@ 0xfe
 8000c44:	d251      	bcs.n	8000cea <__addsf3+0x136>
 8000c46:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	ea40 0003 	orr.w	r0, r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	eb40 0000 	adc.w	r0, r0, r0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	bf28      	it	cs
 8000c64:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c68:	d2ed      	bcs.n	8000c46 <__addsf3+0x92>
 8000c6a:	fab0 fc80 	clz	ip, r0
 8000c6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c72:	ebb2 020c 	subs.w	r2, r2, ip
 8000c76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7a:	bfaa      	itet	ge
 8000c7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c80:	4252      	neglt	r2, r2
 8000c82:	4318      	orrge	r0, r3
 8000c84:	bfbc      	itt	lt
 8000c86:	40d0      	lsrlt	r0, r2
 8000c88:	4318      	orrlt	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	f092 0f00 	teq	r2, #0
 8000c90:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c94:	bf06      	itte	eq
 8000c96:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c9a:	3201      	addeq	r2, #1
 8000c9c:	3b01      	subne	r3, #1
 8000c9e:	e7b5      	b.n	8000c0c <__addsf3+0x58>
 8000ca0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cae:	d021      	beq.n	8000cf4 <__addsf3+0x140>
 8000cb0:	ea92 0f03 	teq	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__addsf3+0x10c>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	bf08      	it	eq
 8000cbc:	4608      	moveq	r0, r1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea90 0f01 	teq	r0, r1
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	4770      	bxne	lr
 8000cca:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cce:	d104      	bne.n	8000cda <__addsf3+0x126>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cde:	bf3c      	itt	cc
 8000ce0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bxcc	lr
 8000ce6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cea:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf8:	bf16      	itet	ne
 8000cfa:	4608      	movne	r0, r1
 8000cfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d00:	4601      	movne	r1, r0
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	bf06      	itte	eq
 8000d06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0a:	ea90 0f01 	teqeq	r0, r1
 8000d0e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_ui2f>:
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e004      	b.n	8000d24 <__aeabi_i2f+0x8>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_i2f>:
 8000d1c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d20:	bf48      	it	mi
 8000d22:	4240      	negmi	r0, r0
 8000d24:	ea5f 0c00 	movs.w	ip, r0
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d30:	4601      	mov	r1, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	e01c      	b.n	8000d72 <__aeabi_l2f+0x2a>

08000d38 <__aeabi_ul2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e00a      	b.n	8000d5c <__aeabi_l2f+0x14>
 8000d46:	bf00      	nop

08000d48 <__aeabi_l2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__aeabi_l2f+0x14>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	ea5f 0c01 	movs.w	ip, r1
 8000d60:	bf02      	ittt	eq
 8000d62:	4684      	moveq	ip, r0
 8000d64:	4601      	moveq	r1, r0
 8000d66:	2000      	moveq	r0, #0
 8000d68:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d6c:	bf08      	it	eq
 8000d6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d76:	fabc f28c 	clz	r2, ip
 8000d7a:	3a08      	subs	r2, #8
 8000d7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d80:	db10      	blt.n	8000da4 <__aeabi_l2f+0x5c>
 8000d82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d94:	fa20 f202 	lsr.w	r2, r0, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f102 0220 	add.w	r2, r2, #32
 8000da8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db4:	fa21 f202 	lsr.w	r2, r1, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_fmul>:
 8000dc4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000dc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dcc:	bf1e      	ittt	ne
 8000dce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dd2:	ea92 0f0c 	teqne	r2, ip
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d06f      	beq.n	8000ebc <__aeabi_fmul+0xf8>
 8000ddc:	441a      	add	r2, r3
 8000dde:	ea80 0c01 	eor.w	ip, r0, r1
 8000de2:	0240      	lsls	r0, r0, #9
 8000de4:	bf18      	it	ne
 8000de6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dea:	d01e      	beq.n	8000e2a <__aeabi_fmul+0x66>
 8000dec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000df0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000df4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dfc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e00:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e04:	bf3e      	ittt	cc
 8000e06:	0049      	lslcc	r1, r1, #1
 8000e08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e0c:	005b      	lslcc	r3, r3, #1
 8000e0e:	ea40 0001 	orr.w	r0, r0, r1
 8000e12:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e16:	2afd      	cmp	r2, #253	@ 0xfd
 8000e18:	d81d      	bhi.n	8000e56 <__aeabi_fmul+0x92>
 8000e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e22:	bf08      	it	eq
 8000e24:	f020 0001 	biceq.w	r0, r0, #1
 8000e28:	4770      	bx	lr
 8000e2a:	f090 0f00 	teq	r0, #0
 8000e2e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e32:	bf08      	it	eq
 8000e34:	0249      	lsleq	r1, r1, #9
 8000e36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e3e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e40:	bfc2      	ittt	gt
 8000e42:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4a:	4770      	bxgt	lr
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	3a01      	subs	r2, #1
 8000e56:	dc5d      	bgt.n	8000f14 <__aeabi_fmul+0x150>
 8000e58:	f112 0f19 	cmn.w	r2, #25
 8000e5c:	bfdc      	itt	le
 8000e5e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e62:	4770      	bxle	lr
 8000e64:	f1c2 0200 	rsb	r2, r2, #0
 8000e68:	0041      	lsls	r1, r0, #1
 8000e6a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e6e:	f1c2 0220 	rsb	r2, r2, #32
 8000e72:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e76:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e7a:	f140 0000 	adc.w	r0, r0, #0
 8000e7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e82:	bf08      	it	eq
 8000e84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e88:	4770      	bx	lr
 8000e8a:	f092 0f00 	teq	r2, #0
 8000e8e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e92:	bf02      	ittt	eq
 8000e94:	0040      	lsleq	r0, r0, #1
 8000e96:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e9a:	3a01      	subeq	r2, #1
 8000e9c:	d0f9      	beq.n	8000e92 <__aeabi_fmul+0xce>
 8000e9e:	ea40 000c 	orr.w	r0, r0, ip
 8000ea2:	f093 0f00 	teq	r3, #0
 8000ea6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000eaa:	bf02      	ittt	eq
 8000eac:	0049      	lsleq	r1, r1, #1
 8000eae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eb2:	3b01      	subeq	r3, #1
 8000eb4:	d0f9      	beq.n	8000eaa <__aeabi_fmul+0xe6>
 8000eb6:	ea41 010c 	orr.w	r1, r1, ip
 8000eba:	e78f      	b.n	8000ddc <__aeabi_fmul+0x18>
 8000ebc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec0:	ea92 0f0c 	teq	r2, ip
 8000ec4:	bf18      	it	ne
 8000ec6:	ea93 0f0c 	teqne	r3, ip
 8000eca:	d00a      	beq.n	8000ee2 <__aeabi_fmul+0x11e>
 8000ecc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ed0:	bf18      	it	ne
 8000ed2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ed6:	d1d8      	bne.n	8000e8a <__aeabi_fmul+0xc6>
 8000ed8:	ea80 0001 	eor.w	r0, r0, r1
 8000edc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ee0:	4770      	bx	lr
 8000ee2:	f090 0f00 	teq	r0, #0
 8000ee6:	bf17      	itett	ne
 8000ee8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eec:	4608      	moveq	r0, r1
 8000eee:	f091 0f00 	teqne	r1, #0
 8000ef2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ef6:	d014      	beq.n	8000f22 <__aeabi_fmul+0x15e>
 8000ef8:	ea92 0f0c 	teq	r2, ip
 8000efc:	d101      	bne.n	8000f02 <__aeabi_fmul+0x13e>
 8000efe:	0242      	lsls	r2, r0, #9
 8000f00:	d10f      	bne.n	8000f22 <__aeabi_fmul+0x15e>
 8000f02:	ea93 0f0c 	teq	r3, ip
 8000f06:	d103      	bne.n	8000f10 <__aeabi_fmul+0x14c>
 8000f08:	024b      	lsls	r3, r1, #9
 8000f0a:	bf18      	it	ne
 8000f0c:	4608      	movne	r0, r1
 8000f0e:	d108      	bne.n	8000f22 <__aeabi_fmul+0x15e>
 8000f10:	ea80 0001 	eor.w	r0, r0, r1
 8000f14:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f20:	4770      	bx	lr
 8000f22:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f26:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f2a:	4770      	bx	lr

08000f2c <__aeabi_fdiv>:
 8000f2c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f34:	bf1e      	ittt	ne
 8000f36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f3a:	ea92 0f0c 	teqne	r2, ip
 8000f3e:	ea93 0f0c 	teqne	r3, ip
 8000f42:	d069      	beq.n	8001018 <__aeabi_fdiv+0xec>
 8000f44:	eba2 0203 	sub.w	r2, r2, r3
 8000f48:	ea80 0c01 	eor.w	ip, r0, r1
 8000f4c:	0249      	lsls	r1, r1, #9
 8000f4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f52:	d037      	beq.n	8000fc4 <__aeabi_fdiv+0x98>
 8000f54:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f60:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f64:	428b      	cmp	r3, r1
 8000f66:	bf38      	it	cc
 8000f68:	005b      	lslcc	r3, r3, #1
 8000f6a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f6e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f72:	428b      	cmp	r3, r1
 8000f74:	bf24      	itt	cs
 8000f76:	1a5b      	subcs	r3, r3, r1
 8000f78:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f80:	bf24      	itt	cs
 8000f82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f8e:	bf24      	itt	cs
 8000f90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f9c:	bf24      	itt	cs
 8000f9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fa2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	bf18      	it	ne
 8000faa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fae:	d1e0      	bne.n	8000f72 <__aeabi_fdiv+0x46>
 8000fb0:	2afd      	cmp	r2, #253	@ 0xfd
 8000fb2:	f63f af50 	bhi.w	8000e56 <__aeabi_fmul+0x92>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fbc:	bf08      	it	eq
 8000fbe:	f020 0001 	biceq.w	r0, r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fc8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fcc:	327f      	adds	r2, #127	@ 0x7f
 8000fce:	bfc2      	ittt	gt
 8000fd0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fd4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd8:	4770      	bxgt	lr
 8000fda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	3a01      	subs	r2, #1
 8000fe4:	e737      	b.n	8000e56 <__aeabi_fmul+0x92>
 8000fe6:	f092 0f00 	teq	r2, #0
 8000fea:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fee:	bf02      	ittt	eq
 8000ff0:	0040      	lsleq	r0, r0, #1
 8000ff2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ff6:	3a01      	subeq	r2, #1
 8000ff8:	d0f9      	beq.n	8000fee <__aeabi_fdiv+0xc2>
 8000ffa:	ea40 000c 	orr.w	r0, r0, ip
 8000ffe:	f093 0f00 	teq	r3, #0
 8001002:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001006:	bf02      	ittt	eq
 8001008:	0049      	lsleq	r1, r1, #1
 800100a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800100e:	3b01      	subeq	r3, #1
 8001010:	d0f9      	beq.n	8001006 <__aeabi_fdiv+0xda>
 8001012:	ea41 010c 	orr.w	r1, r1, ip
 8001016:	e795      	b.n	8000f44 <__aeabi_fdiv+0x18>
 8001018:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800101c:	ea92 0f0c 	teq	r2, ip
 8001020:	d108      	bne.n	8001034 <__aeabi_fdiv+0x108>
 8001022:	0242      	lsls	r2, r0, #9
 8001024:	f47f af7d 	bne.w	8000f22 <__aeabi_fmul+0x15e>
 8001028:	ea93 0f0c 	teq	r3, ip
 800102c:	f47f af70 	bne.w	8000f10 <__aeabi_fmul+0x14c>
 8001030:	4608      	mov	r0, r1
 8001032:	e776      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001034:	ea93 0f0c 	teq	r3, ip
 8001038:	d104      	bne.n	8001044 <__aeabi_fdiv+0x118>
 800103a:	024b      	lsls	r3, r1, #9
 800103c:	f43f af4c 	beq.w	8000ed8 <__aeabi_fmul+0x114>
 8001040:	4608      	mov	r0, r1
 8001042:	e76e      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001044:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001048:	bf18      	it	ne
 800104a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800104e:	d1ca      	bne.n	8000fe6 <__aeabi_fdiv+0xba>
 8001050:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001054:	f47f af5c 	bne.w	8000f10 <__aeabi_fmul+0x14c>
 8001058:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800105c:	f47f af3c 	bne.w	8000ed8 <__aeabi_fmul+0x114>
 8001060:	e75f      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001062:	bf00      	nop

08001064 <__gesf2>:
 8001064:	f04f 3cff 	mov.w	ip, #4294967295
 8001068:	e006      	b.n	8001078 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__lesf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	e002      	b.n	8001078 <__cmpsf2+0x4>
 8001072:	bf00      	nop

08001074 <__cmpsf2>:
 8001074:	f04f 0c01 	mov.w	ip, #1
 8001078:	f84d cd04 	str.w	ip, [sp, #-4]!
 800107c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001080:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001084:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001088:	bf18      	it	ne
 800108a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800108e:	d011      	beq.n	80010b4 <__cmpsf2+0x40>
 8001090:	b001      	add	sp, #4
 8001092:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001096:	bf18      	it	ne
 8001098:	ea90 0f01 	teqne	r0, r1
 800109c:	bf58      	it	pl
 800109e:	ebb2 0003 	subspl.w	r0, r2, r3
 80010a2:	bf88      	it	hi
 80010a4:	17c8      	asrhi	r0, r1, #31
 80010a6:	bf38      	it	cc
 80010a8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010ac:	bf18      	it	ne
 80010ae:	f040 0001 	orrne.w	r0, r0, #1
 80010b2:	4770      	bx	lr
 80010b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b8:	d102      	bne.n	80010c0 <__cmpsf2+0x4c>
 80010ba:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010be:	d105      	bne.n	80010cc <__cmpsf2+0x58>
 80010c0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c4:	d1e4      	bne.n	8001090 <__cmpsf2+0x1c>
 80010c6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ca:	d0e1      	beq.n	8001090 <__cmpsf2+0x1c>
 80010cc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop

080010d4 <__aeabi_cfrcmple>:
 80010d4:	4684      	mov	ip, r0
 80010d6:	4608      	mov	r0, r1
 80010d8:	4661      	mov	r1, ip
 80010da:	e7ff      	b.n	80010dc <__aeabi_cfcmpeq>

080010dc <__aeabi_cfcmpeq>:
 80010dc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010de:	f7ff ffc9 	bl	8001074 <__cmpsf2>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	bf48      	it	mi
 80010e6:	f110 0f00 	cmnmi.w	r0, #0
 80010ea:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ec <__aeabi_fcmpeq>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff fff4 	bl	80010dc <__aeabi_cfcmpeq>
 80010f4:	bf0c      	ite	eq
 80010f6:	2001      	moveq	r0, #1
 80010f8:	2000      	movne	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_fcmplt>:
 8001100:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001104:	f7ff ffea 	bl	80010dc <__aeabi_cfcmpeq>
 8001108:	bf34      	ite	cc
 800110a:	2001      	movcc	r0, #1
 800110c:	2000      	movcs	r0, #0
 800110e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001112:	bf00      	nop

08001114 <__aeabi_fcmple>:
 8001114:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001118:	f7ff ffe0 	bl	80010dc <__aeabi_cfcmpeq>
 800111c:	bf94      	ite	ls
 800111e:	2001      	movls	r0, #1
 8001120:	2000      	movhi	r0, #0
 8001122:	f85d fb08 	ldr.w	pc, [sp], #8
 8001126:	bf00      	nop

08001128 <__aeabi_fcmpge>:
 8001128:	f84d ed08 	str.w	lr, [sp, #-8]!
 800112c:	f7ff ffd2 	bl	80010d4 <__aeabi_cfrcmple>
 8001130:	bf94      	ite	ls
 8001132:	2001      	movls	r0, #1
 8001134:	2000      	movhi	r0, #0
 8001136:	f85d fb08 	ldr.w	pc, [sp], #8
 800113a:	bf00      	nop

0800113c <__aeabi_fcmpgt>:
 800113c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001140:	f7ff ffc8 	bl	80010d4 <__aeabi_cfrcmple>
 8001144:	bf34      	ite	cc
 8001146:	2001      	movcc	r0, #1
 8001148:	2000      	movcs	r0, #0
 800114a:	f85d fb08 	ldr.w	pc, [sp], #8
 800114e:	bf00      	nop

08001150 <__aeabi_f2uiz>:
 8001150:	0042      	lsls	r2, r0, #1
 8001152:	d20e      	bcs.n	8001172 <__aeabi_f2uiz+0x22>
 8001154:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001158:	d30b      	bcc.n	8001172 <__aeabi_f2uiz+0x22>
 800115a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800115e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001162:	d409      	bmi.n	8001178 <__aeabi_f2uiz+0x28>
 8001164:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001168:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800116c:	fa23 f002 	lsr.w	r0, r3, r2
 8001170:	4770      	bx	lr
 8001172:	f04f 0000 	mov.w	r0, #0
 8001176:	4770      	bx	lr
 8001178:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800117c:	d101      	bne.n	8001182 <__aeabi_f2uiz+0x32>
 800117e:	0242      	lsls	r2, r0, #9
 8001180:	d102      	bne.n	8001188 <__aeabi_f2uiz+0x38>
 8001182:	f04f 30ff 	mov.w	r0, #4294967295
 8001186:	4770      	bx	lr
 8001188:	f04f 0000 	mov.w	r0, #0
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop

08001190 <__aeabi_uldivmod>:
 8001190:	b953      	cbnz	r3, 80011a8 <__aeabi_uldivmod+0x18>
 8001192:	b94a      	cbnz	r2, 80011a8 <__aeabi_uldivmod+0x18>
 8001194:	2900      	cmp	r1, #0
 8001196:	bf08      	it	eq
 8001198:	2800      	cmpeq	r0, #0
 800119a:	bf1c      	itt	ne
 800119c:	f04f 31ff 	movne.w	r1, #4294967295
 80011a0:	f04f 30ff 	movne.w	r0, #4294967295
 80011a4:	f000 b96a 	b.w	800147c <__aeabi_idiv0>
 80011a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80011ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011b0:	f000 f806 	bl	80011c0 <__udivmoddi4>
 80011b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011bc:	b004      	add	sp, #16
 80011be:	4770      	bx	lr

080011c0 <__udivmoddi4>:
 80011c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011c4:	9d08      	ldr	r5, [sp, #32]
 80011c6:	460c      	mov	r4, r1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d14e      	bne.n	800126a <__udivmoddi4+0xaa>
 80011cc:	4694      	mov	ip, r2
 80011ce:	458c      	cmp	ip, r1
 80011d0:	4686      	mov	lr, r0
 80011d2:	fab2 f282 	clz	r2, r2
 80011d6:	d962      	bls.n	800129e <__udivmoddi4+0xde>
 80011d8:	b14a      	cbz	r2, 80011ee <__udivmoddi4+0x2e>
 80011da:	f1c2 0320 	rsb	r3, r2, #32
 80011de:	4091      	lsls	r1, r2
 80011e0:	fa20 f303 	lsr.w	r3, r0, r3
 80011e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80011e8:	4319      	orrs	r1, r3
 80011ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80011ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011f2:	fa1f f68c 	uxth.w	r6, ip
 80011f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80011fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011fe:	fb07 1114 	mls	r1, r7, r4, r1
 8001202:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001206:	fb04 f106 	mul.w	r1, r4, r6
 800120a:	4299      	cmp	r1, r3
 800120c:	d90a      	bls.n	8001224 <__udivmoddi4+0x64>
 800120e:	eb1c 0303 	adds.w	r3, ip, r3
 8001212:	f104 30ff 	add.w	r0, r4, #4294967295
 8001216:	f080 8112 	bcs.w	800143e <__udivmoddi4+0x27e>
 800121a:	4299      	cmp	r1, r3
 800121c:	f240 810f 	bls.w	800143e <__udivmoddi4+0x27e>
 8001220:	3c02      	subs	r4, #2
 8001222:	4463      	add	r3, ip
 8001224:	1a59      	subs	r1, r3, r1
 8001226:	fa1f f38e 	uxth.w	r3, lr
 800122a:	fbb1 f0f7 	udiv	r0, r1, r7
 800122e:	fb07 1110 	mls	r1, r7, r0, r1
 8001232:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001236:	fb00 f606 	mul.w	r6, r0, r6
 800123a:	429e      	cmp	r6, r3
 800123c:	d90a      	bls.n	8001254 <__udivmoddi4+0x94>
 800123e:	eb1c 0303 	adds.w	r3, ip, r3
 8001242:	f100 31ff 	add.w	r1, r0, #4294967295
 8001246:	f080 80fc 	bcs.w	8001442 <__udivmoddi4+0x282>
 800124a:	429e      	cmp	r6, r3
 800124c:	f240 80f9 	bls.w	8001442 <__udivmoddi4+0x282>
 8001250:	4463      	add	r3, ip
 8001252:	3802      	subs	r0, #2
 8001254:	1b9b      	subs	r3, r3, r6
 8001256:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800125a:	2100      	movs	r1, #0
 800125c:	b11d      	cbz	r5, 8001266 <__udivmoddi4+0xa6>
 800125e:	40d3      	lsrs	r3, r2
 8001260:	2200      	movs	r2, #0
 8001262:	e9c5 3200 	strd	r3, r2, [r5]
 8001266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800126a:	428b      	cmp	r3, r1
 800126c:	d905      	bls.n	800127a <__udivmoddi4+0xba>
 800126e:	b10d      	cbz	r5, 8001274 <__udivmoddi4+0xb4>
 8001270:	e9c5 0100 	strd	r0, r1, [r5]
 8001274:	2100      	movs	r1, #0
 8001276:	4608      	mov	r0, r1
 8001278:	e7f5      	b.n	8001266 <__udivmoddi4+0xa6>
 800127a:	fab3 f183 	clz	r1, r3
 800127e:	2900      	cmp	r1, #0
 8001280:	d146      	bne.n	8001310 <__udivmoddi4+0x150>
 8001282:	42a3      	cmp	r3, r4
 8001284:	d302      	bcc.n	800128c <__udivmoddi4+0xcc>
 8001286:	4290      	cmp	r0, r2
 8001288:	f0c0 80f0 	bcc.w	800146c <__udivmoddi4+0x2ac>
 800128c:	1a86      	subs	r6, r0, r2
 800128e:	eb64 0303 	sbc.w	r3, r4, r3
 8001292:	2001      	movs	r0, #1
 8001294:	2d00      	cmp	r5, #0
 8001296:	d0e6      	beq.n	8001266 <__udivmoddi4+0xa6>
 8001298:	e9c5 6300 	strd	r6, r3, [r5]
 800129c:	e7e3      	b.n	8001266 <__udivmoddi4+0xa6>
 800129e:	2a00      	cmp	r2, #0
 80012a0:	f040 8090 	bne.w	80013c4 <__udivmoddi4+0x204>
 80012a4:	eba1 040c 	sub.w	r4, r1, ip
 80012a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012ac:	fa1f f78c 	uxth.w	r7, ip
 80012b0:	2101      	movs	r1, #1
 80012b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80012b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80012ba:	fb08 4416 	mls	r4, r8, r6, r4
 80012be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012c2:	fb07 f006 	mul.w	r0, r7, r6
 80012c6:	4298      	cmp	r0, r3
 80012c8:	d908      	bls.n	80012dc <__udivmoddi4+0x11c>
 80012ca:	eb1c 0303 	adds.w	r3, ip, r3
 80012ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80012d2:	d202      	bcs.n	80012da <__udivmoddi4+0x11a>
 80012d4:	4298      	cmp	r0, r3
 80012d6:	f200 80cd 	bhi.w	8001474 <__udivmoddi4+0x2b4>
 80012da:	4626      	mov	r6, r4
 80012dc:	1a1c      	subs	r4, r3, r0
 80012de:	fa1f f38e 	uxth.w	r3, lr
 80012e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80012e6:	fb08 4410 	mls	r4, r8, r0, r4
 80012ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012ee:	fb00 f707 	mul.w	r7, r0, r7
 80012f2:	429f      	cmp	r7, r3
 80012f4:	d908      	bls.n	8001308 <__udivmoddi4+0x148>
 80012f6:	eb1c 0303 	adds.w	r3, ip, r3
 80012fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80012fe:	d202      	bcs.n	8001306 <__udivmoddi4+0x146>
 8001300:	429f      	cmp	r7, r3
 8001302:	f200 80b0 	bhi.w	8001466 <__udivmoddi4+0x2a6>
 8001306:	4620      	mov	r0, r4
 8001308:	1bdb      	subs	r3, r3, r7
 800130a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800130e:	e7a5      	b.n	800125c <__udivmoddi4+0x9c>
 8001310:	f1c1 0620 	rsb	r6, r1, #32
 8001314:	408b      	lsls	r3, r1
 8001316:	fa22 f706 	lsr.w	r7, r2, r6
 800131a:	431f      	orrs	r7, r3
 800131c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001320:	fa04 f301 	lsl.w	r3, r4, r1
 8001324:	ea43 030c 	orr.w	r3, r3, ip
 8001328:	40f4      	lsrs	r4, r6
 800132a:	fa00 f801 	lsl.w	r8, r0, r1
 800132e:	0c38      	lsrs	r0, r7, #16
 8001330:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001334:	fbb4 fef0 	udiv	lr, r4, r0
 8001338:	fa1f fc87 	uxth.w	ip, r7
 800133c:	fb00 441e 	mls	r4, r0, lr, r4
 8001340:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001344:	fb0e f90c 	mul.w	r9, lr, ip
 8001348:	45a1      	cmp	r9, r4
 800134a:	fa02 f201 	lsl.w	r2, r2, r1
 800134e:	d90a      	bls.n	8001366 <__udivmoddi4+0x1a6>
 8001350:	193c      	adds	r4, r7, r4
 8001352:	f10e 3aff 	add.w	sl, lr, #4294967295
 8001356:	f080 8084 	bcs.w	8001462 <__udivmoddi4+0x2a2>
 800135a:	45a1      	cmp	r9, r4
 800135c:	f240 8081 	bls.w	8001462 <__udivmoddi4+0x2a2>
 8001360:	f1ae 0e02 	sub.w	lr, lr, #2
 8001364:	443c      	add	r4, r7
 8001366:	eba4 0409 	sub.w	r4, r4, r9
 800136a:	fa1f f983 	uxth.w	r9, r3
 800136e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001372:	fb00 4413 	mls	r4, r0, r3, r4
 8001376:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800137a:	fb03 fc0c 	mul.w	ip, r3, ip
 800137e:	45a4      	cmp	ip, r4
 8001380:	d907      	bls.n	8001392 <__udivmoddi4+0x1d2>
 8001382:	193c      	adds	r4, r7, r4
 8001384:	f103 30ff 	add.w	r0, r3, #4294967295
 8001388:	d267      	bcs.n	800145a <__udivmoddi4+0x29a>
 800138a:	45a4      	cmp	ip, r4
 800138c:	d965      	bls.n	800145a <__udivmoddi4+0x29a>
 800138e:	3b02      	subs	r3, #2
 8001390:	443c      	add	r4, r7
 8001392:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001396:	fba0 9302 	umull	r9, r3, r0, r2
 800139a:	eba4 040c 	sub.w	r4, r4, ip
 800139e:	429c      	cmp	r4, r3
 80013a0:	46ce      	mov	lr, r9
 80013a2:	469c      	mov	ip, r3
 80013a4:	d351      	bcc.n	800144a <__udivmoddi4+0x28a>
 80013a6:	d04e      	beq.n	8001446 <__udivmoddi4+0x286>
 80013a8:	b155      	cbz	r5, 80013c0 <__udivmoddi4+0x200>
 80013aa:	ebb8 030e 	subs.w	r3, r8, lr
 80013ae:	eb64 040c 	sbc.w	r4, r4, ip
 80013b2:	fa04 f606 	lsl.w	r6, r4, r6
 80013b6:	40cb      	lsrs	r3, r1
 80013b8:	431e      	orrs	r6, r3
 80013ba:	40cc      	lsrs	r4, r1
 80013bc:	e9c5 6400 	strd	r6, r4, [r5]
 80013c0:	2100      	movs	r1, #0
 80013c2:	e750      	b.n	8001266 <__udivmoddi4+0xa6>
 80013c4:	f1c2 0320 	rsb	r3, r2, #32
 80013c8:	fa20 f103 	lsr.w	r1, r0, r3
 80013cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80013d0:	fa24 f303 	lsr.w	r3, r4, r3
 80013d4:	4094      	lsls	r4, r2
 80013d6:	430c      	orrs	r4, r1
 80013d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80013dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80013e0:	fa1f f78c 	uxth.w	r7, ip
 80013e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80013e8:	fb08 3110 	mls	r1, r8, r0, r3
 80013ec:	0c23      	lsrs	r3, r4, #16
 80013ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013f2:	fb00 f107 	mul.w	r1, r0, r7
 80013f6:	4299      	cmp	r1, r3
 80013f8:	d908      	bls.n	800140c <__udivmoddi4+0x24c>
 80013fa:	eb1c 0303 	adds.w	r3, ip, r3
 80013fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8001402:	d22c      	bcs.n	800145e <__udivmoddi4+0x29e>
 8001404:	4299      	cmp	r1, r3
 8001406:	d92a      	bls.n	800145e <__udivmoddi4+0x29e>
 8001408:	3802      	subs	r0, #2
 800140a:	4463      	add	r3, ip
 800140c:	1a5b      	subs	r3, r3, r1
 800140e:	b2a4      	uxth	r4, r4
 8001410:	fbb3 f1f8 	udiv	r1, r3, r8
 8001414:	fb08 3311 	mls	r3, r8, r1, r3
 8001418:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800141c:	fb01 f307 	mul.w	r3, r1, r7
 8001420:	42a3      	cmp	r3, r4
 8001422:	d908      	bls.n	8001436 <__udivmoddi4+0x276>
 8001424:	eb1c 0404 	adds.w	r4, ip, r4
 8001428:	f101 36ff 	add.w	r6, r1, #4294967295
 800142c:	d213      	bcs.n	8001456 <__udivmoddi4+0x296>
 800142e:	42a3      	cmp	r3, r4
 8001430:	d911      	bls.n	8001456 <__udivmoddi4+0x296>
 8001432:	3902      	subs	r1, #2
 8001434:	4464      	add	r4, ip
 8001436:	1ae4      	subs	r4, r4, r3
 8001438:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800143c:	e739      	b.n	80012b2 <__udivmoddi4+0xf2>
 800143e:	4604      	mov	r4, r0
 8001440:	e6f0      	b.n	8001224 <__udivmoddi4+0x64>
 8001442:	4608      	mov	r0, r1
 8001444:	e706      	b.n	8001254 <__udivmoddi4+0x94>
 8001446:	45c8      	cmp	r8, r9
 8001448:	d2ae      	bcs.n	80013a8 <__udivmoddi4+0x1e8>
 800144a:	ebb9 0e02 	subs.w	lr, r9, r2
 800144e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001452:	3801      	subs	r0, #1
 8001454:	e7a8      	b.n	80013a8 <__udivmoddi4+0x1e8>
 8001456:	4631      	mov	r1, r6
 8001458:	e7ed      	b.n	8001436 <__udivmoddi4+0x276>
 800145a:	4603      	mov	r3, r0
 800145c:	e799      	b.n	8001392 <__udivmoddi4+0x1d2>
 800145e:	4630      	mov	r0, r6
 8001460:	e7d4      	b.n	800140c <__udivmoddi4+0x24c>
 8001462:	46d6      	mov	lr, sl
 8001464:	e77f      	b.n	8001366 <__udivmoddi4+0x1a6>
 8001466:	4463      	add	r3, ip
 8001468:	3802      	subs	r0, #2
 800146a:	e74d      	b.n	8001308 <__udivmoddi4+0x148>
 800146c:	4606      	mov	r6, r0
 800146e:	4623      	mov	r3, r4
 8001470:	4608      	mov	r0, r1
 8001472:	e70f      	b.n	8001294 <__udivmoddi4+0xd4>
 8001474:	3e02      	subs	r6, #2
 8001476:	4463      	add	r3, ip
 8001478:	e730      	b.n	80012dc <__udivmoddi4+0x11c>
 800147a:	bf00      	nop

0800147c <__aeabi_idiv0>:
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop

08001480 <lp_filter_init>:
 *      Author: siyoums
 */
#include "filter.h"


void lp_filter_init(LPFilter_t *filt, float cutoff_freq, float sample_time_s) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
	float rc = 1.0f / (6.28318530718f * cutoff_freq);
 800148c:	4918      	ldr	r1, [pc, #96]	@ (80014f0 <lp_filter_init+0x70>)
 800148e:	68b8      	ldr	r0, [r7, #8]
 8001490:	f7ff fc98 	bl	8000dc4 <__aeabi_fmul>
 8001494:	4603      	mov	r3, r0
 8001496:	4619      	mov	r1, r3
 8001498:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800149c:	f7ff fd46 	bl	8000f2c <__aeabi_fdiv>
 80014a0:	4603      	mov	r3, r0
 80014a2:	617b      	str	r3, [r7, #20]

	filt->coeff[0] = sample_time_s / (sample_time_s + rc);
 80014a4:	6979      	ldr	r1, [r7, #20]
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fb84 	bl	8000bb4 <__addsf3>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4619      	mov	r1, r3
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff fd3b 	bl	8000f2c <__aeabi_fdiv>
 80014b6:	4603      	mov	r3, r0
 80014b8:	461a      	mov	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	601a      	str	r2, [r3, #0]
	filt->coeff[1] = rc / (sample_time_s + rc);
 80014be:	6979      	ldr	r1, [r7, #20]
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff fb77 	bl	8000bb4 <__addsf3>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4619      	mov	r1, r3
 80014ca:	6978      	ldr	r0, [r7, #20]
 80014cc:	f7ff fd2e 	bl	8000f2c <__aeabi_fdiv>
 80014d0:	4603      	mov	r3, r0
 80014d2:	461a      	mov	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	605a      	str	r2, [r3, #4]

	filt->out[0] = 0.0f;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
	filt->out[1] = 0.0f;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]

}
 80014e8:	bf00      	nop
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40c90fdb 	.word	0x40c90fdb

080014f4 <lp_filter_update>:

float lp_filter_update(LPFilter_t *filt, float inp) {
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
	// shift the new sample to the old one evey time an update happens
	filt->out[1] = filt->out[0];
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	60da      	str	r2, [r3, #12]

	// difference equation in discrete time (from backwards euler)
	filt->out[0] = (filt->coeff[0] * inp) + (filt->coeff[1] * filt->out[1]);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6839      	ldr	r1, [r7, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fc59 	bl	8000dc4 <__aeabi_fmul>
 8001512:	4603      	mov	r3, r0
 8001514:	461c      	mov	r4, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	4619      	mov	r1, r3
 8001520:	4610      	mov	r0, r2
 8001522:	f7ff fc4f 	bl	8000dc4 <__aeabi_fmul>
 8001526:	4603      	mov	r3, r0
 8001528:	4619      	mov	r1, r3
 800152a:	4620      	mov	r0, r4
 800152c:	f7ff fb42 	bl	8000bb4 <__addsf3>
 8001530:	4603      	mov	r3, r0
 8001532:	461a      	mov	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	609a      	str	r2, [r3, #8]

	return (filt->out[0]);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bd90      	pop	{r4, r7, pc}

08001544 <fir_filter_init>:

// fir

float fir_filter_response[]= {-0.0032906f,-0.0052635f,-0.0068811f,0.0000000f,0.0254209f,0.0724719f,0.1311260f,0.1805961f,0.2000000f,0.1805961f,0.1311260f,0.0724719f,0.0254209f,0.0000000f,-0.0068811f,-0.0052635f};

void fir_filter_init(FIRFilter_t *filt) {
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	// clear filter buffer
	for (uint8_t i = 0; i < FIR_FILTER_LENGTH; i++) {
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e008      	b.n	8001564 <fir_filter_init+0x20>
		filt->buf[i] = 0.0f;
 8001552:	7bfa      	ldrb	r2, [r7, #15]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f04f 0100 	mov.w	r1, #0
 800155a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint8_t i = 0; i < FIR_FILTER_LENGTH; i++) {
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	3301      	adds	r3, #1
 8001562:	73fb      	strb	r3, [r7, #15]
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	2b0f      	cmp	r3, #15
 8001568:	d9f3      	bls.n	8001552 <fir_filter_init+0xe>
	}

	filt->buf_index = 0;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	filt->out = 0.0f;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	645a      	str	r2, [r3, #68]	@ 0x44
}
 800157a:	bf00      	nop
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <HAL_GPIO_EXTI_Callback>:
//	HAL_I2C_ER_IRQHandler(&hi2c1);
//}

char buffer[60];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
		if (GPIO_Pin == INT_MPU_Pin) {
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	2b04      	cmp	r3, #4
 8001592:	d103      	bne.n	800159c <HAL_GPIO_EXTI_Callback+0x18>
			mpu6050_read_accel_dma(&hi2c1, &accelerometer);
 8001594:	4903      	ldr	r1, [pc, #12]	@ (80015a4 <HAL_GPIO_EXTI_Callback+0x20>)
 8001596:	4804      	ldr	r0, [pc, #16]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x24>)
 8001598:	f000 fafc 	bl	8001b94 <mpu6050_read_accel_dma>
	}
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000438 	.word	0x20000438
 80015a8:	200002e4 	.word	0x200002e4

080015ac <HAL_I2C_MemRxCpltCallback>:

// handle dma complete inturrept
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0f      	ldr	r2, [pc, #60]	@ (80015f8 <HAL_I2C_MemRxCpltCallback+0x4c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d117      	bne.n	80015ee <HAL_I2C_MemRxCpltCallback+0x42>
    	mpu6050_read_accel_dma_complete(&hi2c1, &accelerometer);
 80015be:	490f      	ldr	r1, [pc, #60]	@ (80015fc <HAL_I2C_MemRxCpltCallback+0x50>)
 80015c0:	480f      	ldr	r0, [pc, #60]	@ (8001600 <HAL_I2C_MemRxCpltCallback+0x54>)
 80015c2:	f000 fb00 	bl	8001bc6 <mpu6050_read_accel_dma_complete>
    	accelerometer.Accel_X_RAW = lp_filter_update(&lpf_acc, accelerometer.Accel_X_RAW);
 80015c6:	4b0d      	ldr	r3, [pc, #52]	@ (80015fc <HAL_I2C_MemRxCpltCallback+0x50>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	4619      	mov	r1, r3
 80015cc:	480d      	ldr	r0, [pc, #52]	@ (8001604 <HAL_I2C_MemRxCpltCallback+0x58>)
 80015ce:	f7ff ff91 	bl	80014f4 <lp_filter_update>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4a09      	ldr	r2, [pc, #36]	@ (80015fc <HAL_I2C_MemRxCpltCallback+0x50>)
 80015d6:	60d3      	str	r3, [r2, #12]
    	mpu6050_process_after_filter(&hi2c1, &accelerometer); // conversion to g's
 80015d8:	4908      	ldr	r1, [pc, #32]	@ (80015fc <HAL_I2C_MemRxCpltCallback+0x50>)
 80015da:	4809      	ldr	r0, [pc, #36]	@ (8001600 <HAL_I2C_MemRxCpltCallback+0x54>)
 80015dc:	f000 fb2c 	bl	8001c38 <mpu6050_process_after_filter>
    	sprintf(buffer, "%.4f\r\n", accelerometer.Ax);
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <HAL_I2C_MemRxCpltCallback+0x50>)
 80015e2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015e6:	4908      	ldr	r1, [pc, #32]	@ (8001608 <HAL_I2C_MemRxCpltCallback+0x5c>)
 80015e8:	4808      	ldr	r0, [pc, #32]	@ (800160c <HAL_I2C_MemRxCpltCallback+0x60>)
 80015ea:	f00a f9dd 	bl	800b9a8 <siprintf>
    }
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40005400 	.word	0x40005400
 80015fc:	20000438 	.word	0x20000438
 8001600:	200002e4 	.word	0x200002e4
 8001604:	200003e0 	.word	0x200003e0
 8001608:	0800dc10 	.word	0x0800dc10
 800160c:	20000498 	.word	0x20000498

08001610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001616:	f000 fd83 	bl	8002120 <HAL_Init>

  /* USER CODE BEGIN Init */
  lp_filter_init(&lpf_acc, 5.0f, 0.01f);
 800161a:	4a2f      	ldr	r2, [pc, #188]	@ (80016d8 <main+0xc8>)
 800161c:	492f      	ldr	r1, [pc, #188]	@ (80016dc <main+0xcc>)
 800161e:	4830      	ldr	r0, [pc, #192]	@ (80016e0 <main+0xd0>)
 8001620:	f7ff ff2e 	bl	8001480 <lp_filter_init>
  fir_filter_init(&firAcc);
 8001624:	482f      	ldr	r0, [pc, #188]	@ (80016e4 <main+0xd4>)
 8001626:	f7ff ff8d 	bl	8001544 <fir_filter_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800162a:	f000 f869 	bl	8001700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800162e:	f000 f995 	bl	800195c <MX_GPIO_Init>
  MX_DMA_Init();
 8001632:	f000 f973 	bl	800191c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8001636:	f008 ff89 	bl	800a54c <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800163a:	f000 f8cb 	bl	80017d4 <MX_I2C1_Init>
  MX_TIM4_Init();
 800163e:	f000 f8f7 	bl	8001830 <MX_TIM4_Init>

  /* USER CODE BEGIN 2 */
  while (mpu6050_init(&hi2c1, &accelerometer) == 1);
 8001642:	bf00      	nop
 8001644:	4928      	ldr	r1, [pc, #160]	@ (80016e8 <main+0xd8>)
 8001646:	4829      	ldr	r0, [pc, #164]	@ (80016ec <main+0xdc>)
 8001648:	f000 f9fc 	bl	8001a44 <mpu6050_init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b01      	cmp	r3, #1
 8001650:	d0f8      	beq.n	8001644 <main+0x34>
  float duty_cycle = 0.0f;
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  uint32_t tim4_start_time = HAL_GetTick();
 8001658:	f000 fdc6 	bl	80021e8 <HAL_GetTick>
 800165c:	60b8      	str	r0, [r7, #8]
  uint32_t cdc_start_time = HAL_GetTick();
 800165e:	f000 fdc3 	bl	80021e8 <HAL_GetTick>
 8001662:	6078      	str	r0, [r7, #4]


  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001664:	2104      	movs	r1, #4
 8001666:	4822      	ldr	r0, [pc, #136]	@ (80016f0 <main+0xe0>)
 8001668:	f004 feb4 	bl	80063d4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GetTick() - tim4_start_time >= 10) {
 800166c:	f000 fdbc 	bl	80021e8 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b09      	cmp	r3, #9
 8001678:	d919      	bls.n	80016ae <main+0x9e>
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, (uint32_t)duty_cycle);
 800167a:	4b1d      	ldr	r3, [pc, #116]	@ (80016f0 <main+0xe0>)
 800167c:	681c      	ldr	r4, [r3, #0]
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f7ff fd66 	bl	8001150 <__aeabi_f2uiz>
 8001684:	4603      	mov	r3, r0
 8001686:	63a3      	str	r3, [r4, #56]	@ 0x38
		  duty_cycle += 10.0f;
 8001688:	491a      	ldr	r1, [pc, #104]	@ (80016f4 <main+0xe4>)
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f7ff fa92 	bl	8000bb4 <__addsf3>
 8001690:	4603      	mov	r3, r0
 8001692:	60fb      	str	r3, [r7, #12]
		  if (duty_cycle > 1000.0) {
 8001694:	4918      	ldr	r1, [pc, #96]	@ (80016f8 <main+0xe8>)
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f7ff fd50 	bl	800113c <__aeabi_fcmpgt>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d002      	beq.n	80016a8 <main+0x98>
			  duty_cycle = 0.0f;
 80016a2:	f04f 0300 	mov.w	r3, #0
 80016a6:	60fb      	str	r3, [r7, #12]
		  }
		  tim4_start_time = HAL_GetTick();
 80016a8:	f000 fd9e 	bl	80021e8 <HAL_GetTick>
 80016ac:	60b8      	str	r0, [r7, #8]
	  }

	  if (HAL_GetTick() - cdc_start_time >= 10) {
 80016ae:	f000 fd9b 	bl	80021e8 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b09      	cmp	r3, #9
 80016ba:	d9d7      	bls.n	800166c <main+0x5c>

		  CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
 80016bc:	480f      	ldr	r0, [pc, #60]	@ (80016fc <main+0xec>)
 80016be:	f7fe fdd7 	bl	8000270 <strlen>
 80016c2:	4603      	mov	r3, r0
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	4619      	mov	r1, r3
 80016c8:	480c      	ldr	r0, [pc, #48]	@ (80016fc <main+0xec>)
 80016ca:	f008 fffd 	bl	800a6c8 <CDC_Transmit_FS>
		  cdc_start_time = HAL_GetTick();
 80016ce:	f000 fd8b 	bl	80021e8 <HAL_GetTick>
 80016d2:	6078      	str	r0, [r7, #4]
	  if (HAL_GetTick() - tim4_start_time >= 10) {
 80016d4:	e7ca      	b.n	800166c <main+0x5c>
 80016d6:	bf00      	nop
 80016d8:	3c23d70a 	.word	0x3c23d70a
 80016dc:	40a00000 	.word	0x40a00000
 80016e0:	200003e0 	.word	0x200003e0
 80016e4:	200003f0 	.word	0x200003f0
 80016e8:	20000438 	.word	0x20000438
 80016ec:	200002e4 	.word	0x200002e4
 80016f0:	20000398 	.word	0x20000398
 80016f4:	41200000 	.word	0x41200000
 80016f8:	447a0000 	.word	0x447a0000
 80016fc:	20000498 	.word	0x20000498

08001700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b094      	sub	sp, #80	@ 0x50
 8001704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001706:	f107 0320 	add.w	r3, r7, #32
 800170a:	2230      	movs	r2, #48	@ 0x30
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f00a f9ad 	bl	800ba6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	4b28      	ldr	r3, [pc, #160]	@ (80017cc <SystemClock_Config+0xcc>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172c:	4a27      	ldr	r2, [pc, #156]	@ (80017cc <SystemClock_Config+0xcc>)
 800172e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001732:	6413      	str	r3, [r2, #64]	@ 0x40
 8001734:	4b25      	ldr	r3, [pc, #148]	@ (80017cc <SystemClock_Config+0xcc>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	4b22      	ldr	r3, [pc, #136]	@ (80017d0 <SystemClock_Config+0xd0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a21      	ldr	r2, [pc, #132]	@ (80017d0 <SystemClock_Config+0xd0>)
 800174a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	4b1f      	ldr	r3, [pc, #124]	@ (80017d0 <SystemClock_Config+0xd0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800175c:	2301      	movs	r3, #1
 800175e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001760:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001764:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001766:	2302      	movs	r3, #2
 8001768:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800176a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800176e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001770:	2304      	movs	r3, #4
 8001772:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001774:	23a8      	movs	r3, #168	@ 0xa8
 8001776:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001778:	2302      	movs	r3, #2
 800177a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800177c:	2307      	movs	r3, #7
 800177e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001780:	f107 0320 	add.w	r3, r7, #32
 8001784:	4618      	mov	r0, r3
 8001786:	f004 f8f5 	bl	8005974 <HAL_RCC_OscConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001790:	f000 f952 	bl	8001a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001794:	230f      	movs	r3, #15
 8001796:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001798:	2302      	movs	r3, #2
 800179a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017a0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	2105      	movs	r1, #5
 80017b2:	4618      	mov	r0, r3
 80017b4:	f004 fb56 	bl	8005e64 <HAL_RCC_ClockConfig>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017be:	f000 f93b 	bl	8001a38 <Error_Handler>
  }
}
 80017c2:	bf00      	nop
 80017c4:	3750      	adds	r7, #80	@ 0x50
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40007000 	.word	0x40007000

080017d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017d8:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <MX_I2C1_Init+0x50>)
 80017da:	4a13      	ldr	r2, [pc, #76]	@ (8001828 <MX_I2C1_Init+0x54>)
 80017dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017de:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <MX_I2C1_Init+0x50>)
 80017e0:	4a12      	ldr	r2, [pc, #72]	@ (800182c <MX_I2C1_Init+0x58>)
 80017e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <MX_I2C1_Init+0x50>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <MX_I2C1_Init+0x50>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <MX_I2C1_Init+0x50>)
 80017f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001824 <MX_I2C1_Init+0x50>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017fe:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <MX_I2C1_Init+0x50>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001804:	4b07      	ldr	r3, [pc, #28]	@ (8001824 <MX_I2C1_Init+0x50>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <MX_I2C1_Init+0x50>)
 800180c:	2200      	movs	r2, #0
 800180e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001810:	4804      	ldr	r0, [pc, #16]	@ (8001824 <MX_I2C1_Init+0x50>)
 8001812:	f001 fb6f 	bl	8002ef4 <HAL_I2C_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800181c:	f000 f90c 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}
 8001824:	200002e4 	.word	0x200002e4
 8001828:	40005400 	.word	0x40005400
 800182c:	000186a0 	.word	0x000186a0

08001830 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08e      	sub	sp, #56	@ 0x38
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001836:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001844:	f107 0320 	add.w	r3, r7, #32
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
 800185c:	615a      	str	r2, [r3, #20]
 800185e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001860:	4b2c      	ldr	r3, [pc, #176]	@ (8001914 <MX_TIM4_Init+0xe4>)
 8001862:	4a2d      	ldr	r2, [pc, #180]	@ (8001918 <MX_TIM4_Init+0xe8>)
 8001864:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001866:	4b2b      	ldr	r3, [pc, #172]	@ (8001914 <MX_TIM4_Init+0xe4>)
 8001868:	2253      	movs	r2, #83	@ 0x53
 800186a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186c:	4b29      	ldr	r3, [pc, #164]	@ (8001914 <MX_TIM4_Init+0xe4>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001872:	4b28      	ldr	r3, [pc, #160]	@ (8001914 <MX_TIM4_Init+0xe4>)
 8001874:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001878:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187a:	4b26      	ldr	r3, [pc, #152]	@ (8001914 <MX_TIM4_Init+0xe4>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001880:	4b24      	ldr	r3, [pc, #144]	@ (8001914 <MX_TIM4_Init+0xe4>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001886:	4823      	ldr	r0, [pc, #140]	@ (8001914 <MX_TIM4_Init+0xe4>)
 8001888:	f004 fcfc 	bl	8006284 <HAL_TIM_Base_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001892:	f000 f8d1 	bl	8001a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001896:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800189a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800189c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018a0:	4619      	mov	r1, r3
 80018a2:	481c      	ldr	r0, [pc, #112]	@ (8001914 <MX_TIM4_Init+0xe4>)
 80018a4:	f004 ff20 	bl	80066e8 <HAL_TIM_ConfigClockSource>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80018ae:	f000 f8c3 	bl	8001a38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80018b2:	4818      	ldr	r0, [pc, #96]	@ (8001914 <MX_TIM4_Init+0xe4>)
 80018b4:	f004 fd35 	bl	8006322 <HAL_TIM_PWM_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80018be:	f000 f8bb 	bl	8001a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018ca:	f107 0320 	add.w	r3, r7, #32
 80018ce:	4619      	mov	r1, r3
 80018d0:	4810      	ldr	r0, [pc, #64]	@ (8001914 <MX_TIM4_Init+0xe4>)
 80018d2:	f005 fae1 	bl	8006e98 <HAL_TIMEx_MasterConfigSynchronization>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80018dc:	f000 f8ac 	bl	8001a38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e0:	2360      	movs	r3, #96	@ 0x60
 80018e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	2204      	movs	r2, #4
 80018f4:	4619      	mov	r1, r3
 80018f6:	4807      	ldr	r0, [pc, #28]	@ (8001914 <MX_TIM4_Init+0xe4>)
 80018f8:	f004 fe34 	bl	8006564 <HAL_TIM_PWM_ConfigChannel>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001902:	f000 f899 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001906:	4803      	ldr	r0, [pc, #12]	@ (8001914 <MX_TIM4_Init+0xe4>)
 8001908:	f000 fa96 	bl	8001e38 <HAL_TIM_MspPostInit>

}
 800190c:	bf00      	nop
 800190e:	3738      	adds	r7, #56	@ 0x38
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000398 	.word	0x20000398
 8001918:	40000800 	.word	0x40000800

0800191c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <MX_DMA_Init+0x3c>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4a0b      	ldr	r2, [pc, #44]	@ (8001958 <MX_DMA_Init+0x3c>)
 800192c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <MX_DMA_Init+0x3c>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	2100      	movs	r1, #0
 8001942:	2010      	movs	r0, #16
 8001944:	f000 fd55 	bl	80023f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001948:	2010      	movs	r0, #16
 800194a:	f000 fd6e 	bl	800242a <HAL_NVIC_EnableIRQ>

}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800

0800195c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	@ 0x28
 8001960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	4b2e      	ldr	r3, [pc, #184]	@ (8001a30 <MX_GPIO_Init+0xd4>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	4a2d      	ldr	r2, [pc, #180]	@ (8001a30 <MX_GPIO_Init+0xd4>)
 800197c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001980:	6313      	str	r3, [r2, #48]	@ 0x30
 8001982:	4b2b      	ldr	r3, [pc, #172]	@ (8001a30 <MX_GPIO_Init+0xd4>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b27      	ldr	r3, [pc, #156]	@ (8001a30 <MX_GPIO_Init+0xd4>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	4a26      	ldr	r2, [pc, #152]	@ (8001a30 <MX_GPIO_Init+0xd4>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	6313      	str	r3, [r2, #48]	@ 0x30
 800199e:	4b24      	ldr	r3, [pc, #144]	@ (8001a30 <MX_GPIO_Init+0xd4>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	4b20      	ldr	r3, [pc, #128]	@ (8001a30 <MX_GPIO_Init+0xd4>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001a30 <MX_GPIO_Init+0xd4>)
 80019b4:	f043 0308 	orr.w	r3, r3, #8
 80019b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001a30 <MX_GPIO_Init+0xd4>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <MX_GPIO_Init+0xd4>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	4a18      	ldr	r2, [pc, #96]	@ (8001a30 <MX_GPIO_Init+0xd4>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d6:	4b16      	ldr	r3, [pc, #88]	@ (8001a30 <MX_GPIO_Init+0xd4>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <MX_GPIO_Init+0xd4>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	4a11      	ldr	r2, [pc, #68]	@ (8001a30 <MX_GPIO_Init+0xd4>)
 80019ec:	f043 0302 	orr.w	r3, r3, #2
 80019f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <MX_GPIO_Init+0xd4>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : INT_MPU_Pin */
  GPIO_InitStruct.Pin = INT_MPU_Pin;
 80019fe:	2304      	movs	r3, #4
 8001a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a02:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_MPU_GPIO_Port, &GPIO_InitStruct);
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	4619      	mov	r1, r3
 8001a12:	4808      	ldr	r0, [pc, #32]	@ (8001a34 <MX_GPIO_Init+0xd8>)
 8001a14:	f001 f8bc 	bl	8002b90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	2008      	movs	r0, #8
 8001a1e:	f000 fce8 	bl	80023f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001a22:	2008      	movs	r0, #8
 8001a24:	f000 fd01 	bl	800242a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a28:	bf00      	nop
 8001a2a:	3728      	adds	r7, #40	@ 0x28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020800 	.word	0x40020800

08001a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3c:	b672      	cpsid	i
}
 8001a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <Error_Handler+0x8>

08001a44 <mpu6050_init>:
#define MPU6050_ADDR 0xD0 //

const uint16_t i2c_timeout = 100;
const double  Accel_Z_corrector = 14418.0;

uint8_t mpu6050_init(I2C_HandleTypeDef *I2Cx, MPU6050_t* imu) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af04      	add	r7, sp, #16
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
    uint8_t check;
	uint8_t Data;

    HAL_Delay(50);
 8001a4e:	2032      	movs	r0, #50	@ 0x32
 8001a50:	f000 fbd4 	bl	80021fc <HAL_Delay>

    // check device ID WHO_AM_ I
  HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001a54:	2364      	movs	r3, #100	@ 0x64
 8001a56:	9302      	str	r3, [sp, #8]
 8001a58:	2301      	movs	r3, #1
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	2301      	movs	r3, #1
 8001a64:	2275      	movs	r2, #117	@ 0x75
 8001a66:	21d0      	movs	r1, #208	@ 0xd0
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f001 fc81 	bl	8003370 <HAL_I2C_Mem_Read>

	   if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001a6e:	7b3b      	ldrb	r3, [r7, #12]
 8001a70:	2b68      	cmp	r3, #104	@ 0x68
 8001a72:	f040 808a 	bne.w	8001b8a <mpu6050_init+0x146>
	     {
	         // reset, clksel, power management register 0X6B we should write all 0's to wake the sensor up
	         Data = 0x80;
 8001a76:	2380      	movs	r3, #128	@ 0x80
 8001a78:	72fb      	strb	r3, [r7, #11]
	         HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001a7a:	2364      	movs	r3, #100	@ 0x64
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	2301      	movs	r3, #1
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	f107 030b 	add.w	r3, r7, #11
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2301      	movs	r3, #1
 8001a8a:	226b      	movs	r2, #107	@ 0x6b
 8001a8c:	21d0      	movs	r1, #208	@ 0xd0
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f001 fb74 	bl	800317c <HAL_I2C_Mem_Write>
	         HAL_Delay(100);
 8001a94:	2064      	movs	r0, #100	@ 0x64
 8001a96:	f000 fbb1 	bl	80021fc <HAL_Delay>

	         // select clock source
	         Data = 0x09;
 8001a9a:	2309      	movs	r3, #9
 8001a9c:	72fb      	strb	r3, [r7, #11]
	         HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001a9e:	2364      	movs	r3, #100	@ 0x64
 8001aa0:	9302      	str	r3, [sp, #8]
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	f107 030b 	add.w	r3, r7, #11
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	2301      	movs	r3, #1
 8001aae:	226b      	movs	r2, #107	@ 0x6b
 8001ab0:	21d0      	movs	r1, #208	@ 0xd0
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f001 fb62 	bl	800317c <HAL_I2C_Mem_Write>

	         // wake up sensor

	         // Set DATA RATE of 100Hz by writing SMPLRT_DIV register
	         Data = 79;
 8001ab8:	234f      	movs	r3, #79	@ 0x4f
 8001aba:	72fb      	strb	r3, [r7, #11]
	         HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001abc:	2364      	movs	r3, #100	@ 0x64
 8001abe:	9302      	str	r3, [sp, #8]
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	9301      	str	r3, [sp, #4]
 8001ac4:	f107 030b 	add.w	r3, r7, #11
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2301      	movs	r3, #1
 8001acc:	2219      	movs	r2, #25
 8001ace:	21d0      	movs	r1, #208	@ 0xd0
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f001 fb53 	bl	800317c <HAL_I2C_Mem_Write>
	         HAL_Delay(50);
 8001ad6:	2032      	movs	r0, #50	@ 0x32
 8001ad8:	f000 fb90 	bl	80021fc <HAL_Delay>
//	         HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_CONFIG, 1, &Data, 1, i2c_timeout);
//	         HAL_Delay(50);

	         // Set accelerometer configuration in ACCEL_CONFIG Register
	         // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
	         Data = 0x00;
 8001adc:	2300      	movs	r3, #0
 8001ade:	72fb      	strb	r3, [r7, #11]
	         HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001ae0:	2364      	movs	r3, #100	@ 0x64
 8001ae2:	9302      	str	r3, [sp, #8]
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	f107 030b 	add.w	r3, r7, #11
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	2301      	movs	r3, #1
 8001af0:	221c      	movs	r2, #28
 8001af2:	21d0      	movs	r1, #208	@ 0xd0
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f001 fb41 	bl	800317c <HAL_I2C_Mem_Write>

	         // Set Gyroscopic configuration in GYRO_CONFIG Register
	         // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
	         Data = 0x00;
 8001afa:	2300      	movs	r3, #0
 8001afc:	72fb      	strb	r3, [r7, #11]
	         HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001afe:	2364      	movs	r3, #100	@ 0x64
 8001b00:	9302      	str	r3, [sp, #8]
 8001b02:	2301      	movs	r3, #1
 8001b04:	9301      	str	r3, [sp, #4]
 8001b06:	f107 030b 	add.w	r3, r7, #11
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	221b      	movs	r2, #27
 8001b10:	21d0      	movs	r1, #208	@ 0xd0
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f001 fb32 	bl	800317c <HAL_I2C_Mem_Write>

	         // Configure INT pin to generate an interrupt whenever data is available / conversion complete
	         uint8_t INT_LEVEL = 0x0; // 0 - active high, 1 - active low
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73fb      	strb	r3, [r7, #15]
	         uint8_t LATCH_INT_EN = 0x0; // /0 - INT 50us pulse, 1 - interrupt clear required
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	73bb      	strb	r3, [r7, #14]
	         uint8_t INT_RD_CLEAR = 0x1; //0 - INT flag cleared by reading INT_STATUS, 1 - INT flag cleared by any read operation
 8001b20:	2301      	movs	r3, #1
 8001b22:	737b      	strb	r3, [r7, #13]

	         Data = (INT_LEVEL<<7 | LATCH_INT_EN<<5 | INT_RD_CLEAR<<4);
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	01db      	lsls	r3, r3, #7
 8001b28:	b25a      	sxtb	r2, r3
 8001b2a:	7bbb      	ldrb	r3, [r7, #14]
 8001b2c:	015b      	lsls	r3, r3, #5
 8001b2e:	b25b      	sxtb	r3, r3
 8001b30:	4313      	orrs	r3, r2
 8001b32:	b25a      	sxtb	r2, r3
 8001b34:	7b7b      	ldrb	r3, [r7, #13]
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	b25b      	sxtb	r3, r3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	72fb      	strb	r3, [r7, #11]
	         HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_INT_PIN_CFG, 1, &Data, 1, i2c_timeout);
 8001b42:	2364      	movs	r3, #100	@ 0x64
 8001b44:	9302      	str	r3, [sp, #8]
 8001b46:	2301      	movs	r3, #1
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	f107 030b 	add.w	r3, r7, #11
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	2301      	movs	r3, #1
 8001b52:	2237      	movs	r2, #55	@ 0x37
 8001b54:	21d0      	movs	r1, #208	@ 0xd0
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f001 fb10 	bl	800317c <HAL_I2C_Mem_Write>
	         HAL_Delay(50);
 8001b5c:	2032      	movs	r0, #50	@ 0x32
 8001b5e:	f000 fb4d 	bl	80021fc <HAL_Delay>

	         //interrupt enable settings
	     	uint8_t DATA_RDY_EN = 0x1; // 1 - enable, 0 - disable
 8001b62:	2301      	movs	r3, #1
 8001b64:	72bb      	strb	r3, [r7, #10]
	         HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_INT_ENABLE, 1, &DATA_RDY_EN, 1, i2c_timeout);
 8001b66:	2364      	movs	r3, #100	@ 0x64
 8001b68:	9302      	str	r3, [sp, #8]
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	9301      	str	r3, [sp, #4]
 8001b6e:	f107 030a 	add.w	r3, r7, #10
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	2301      	movs	r3, #1
 8001b76:	2238      	movs	r2, #56	@ 0x38
 8001b78:	21d0      	movs	r1, #208	@ 0xd0
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f001 fafe 	bl	800317c <HAL_I2C_Mem_Write>
	         HAL_Delay(50);
 8001b80:	2032      	movs	r0, #50	@ 0x32
 8001b82:	f000 fb3b 	bl	80021fc <HAL_Delay>


	         return 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	e000      	b.n	8001b8c <mpu6050_init+0x148>
	     }
	   return 1;
 8001b8a:	2301      	movs	r3, #1


}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <mpu6050_read_accel_dma>:

uint8_t mpu6050_read_accel_dma(I2C_HandleTypeDef* i2c_handle, MPU6050_t *imu) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af02      	add	r7, sp, #8
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
	if (HAL_I2C_Mem_Read_DMA(i2c_handle, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, imu->Rec_Data, 6) == HAL_OK) {
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2206      	movs	r2, #6
 8001ba2:	9201      	str	r2, [sp, #4]
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	223b      	movs	r2, #59	@ 0x3b
 8001baa:	21d0      	movs	r1, #208	@ 0xd0
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f001 fe11 	bl	80037d4 <HAL_I2C_Mem_Read_DMA>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <mpu6050_read_accel_dma+0x28>
		return 1;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <mpu6050_read_accel_dma+0x2a>
	}
	return 0;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <mpu6050_read_accel_dma_complete>:

// process imu data
void mpu6050_read_accel_dma_complete(I2C_HandleTypeDef *i2c_handle, MPU6050_t *imu) {
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]

	imu->Accel_X_RAW = (int16_t)(imu->Rec_Data[0] << 8 | imu->Rec_Data[1]);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	021b      	lsls	r3, r3, #8
 8001bd6:	b21a      	sxth	r2, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	785b      	ldrb	r3, [r3, #1]
 8001bdc:	b21b      	sxth	r3, r3
 8001bde:	4313      	orrs	r3, r2
 8001be0:	b21b      	sxth	r3, r3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff f89a 	bl	8000d1c <__aeabi_i2f>
 8001be8:	4602      	mov	r2, r0
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	60da      	str	r2, [r3, #12]
	imu->Accel_Y_RAW = (int16_t)(imu->Rec_Data[2] << 8 | imu->Rec_Data[3]);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	789b      	ldrb	r3, [r3, #2]
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	b21a      	sxth	r2, r3
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	78db      	ldrb	r3, [r3, #3]
 8001bfa:	b21b      	sxth	r3, r3
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	b21b      	sxth	r3, r3
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff f88b 	bl	8000d1c <__aeabi_i2f>
 8001c06:	4602      	mov	r2, r0
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	611a      	str	r2, [r3, #16]
	imu->Accel_Z_RAW = (int16_t)(imu->Rec_Data[4] << 8 | imu->Rec_Data[5]);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	791b      	ldrb	r3, [r3, #4]
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	b21a      	sxth	r2, r3
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	795b      	ldrb	r3, [r3, #5]
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	b21b      	sxth	r3, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff f87c 	bl	8000d1c <__aeabi_i2f>
 8001c24:	4602      	mov	r2, r0
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	615a      	str	r2, [r3, #20]

//	imu->Ax = imu->Accel_X_RAW / 16384.0;
//	imu->Ay = imu->Accel_Y_RAW / 16384.0;
//	imu->Az = imu->Accel_Z_RAW / Accel_Z_corrector;
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	0000      	movs	r0, r0
 8001c34:	0000      	movs	r0, r0
	...

08001c38 <mpu6050_process_after_filter>:

void mpu6050_process_after_filter(I2C_HandleTypeDef * i2c_handle, MPU6050_t *imu) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
		imu->Ax = imu->Accel_X_RAW / 16384.0;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fc7e 	bl	8000548 <__aeabi_f2d>
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	4b17      	ldr	r3, [pc, #92]	@ (8001cb0 <mpu6050_process_after_filter+0x78>)
 8001c52:	f7fe fdfb 	bl	800084c <__aeabi_ddiv>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	6839      	ldr	r1, [r7, #0]
 8001c5c:	e9c1 2306 	strd	r2, r3, [r1, #24]
		imu->Ay = imu->Accel_Y_RAW / 16384.0;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fc6f 	bl	8000548 <__aeabi_f2d>
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	4b10      	ldr	r3, [pc, #64]	@ (8001cb0 <mpu6050_process_after_filter+0x78>)
 8001c70:	f7fe fdec 	bl	800084c <__aeabi_ddiv>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	6839      	ldr	r1, [r7, #0]
 8001c7a:	e9c1 2308 	strd	r2, r3, [r1, #32]
		imu->Az = imu->Accel_Z_RAW / Accel_Z_corrector;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fc60 	bl	8000548 <__aeabi_f2d>
 8001c88:	a307      	add	r3, pc, #28	@ (adr r3, 8001ca8 <mpu6050_process_after_filter+0x70>)
 8001c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8e:	f7fe fddd 	bl	800084c <__aeabi_ddiv>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	6839      	ldr	r1, [r7, #0]
 8001c98:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	f3af 8000 	nop.w
 8001ca8:	00000000 	.word	0x00000000
 8001cac:	40cc2900 	.word	0x40cc2900
 8001cb0:	40d00000 	.word	0x40d00000

08001cb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	4b10      	ldr	r3, [pc, #64]	@ (8001d00 <HAL_MspInit+0x4c>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	4a0f      	ldr	r2, [pc, #60]	@ (8001d00 <HAL_MspInit+0x4c>)
 8001cc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cca:	4b0d      	ldr	r3, [pc, #52]	@ (8001d00 <HAL_MspInit+0x4c>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	603b      	str	r3, [r7, #0]
 8001cda:	4b09      	ldr	r3, [pc, #36]	@ (8001d00 <HAL_MspInit+0x4c>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	4a08      	ldr	r2, [pc, #32]	@ (8001d00 <HAL_MspInit+0x4c>)
 8001ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ce4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ce6:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <HAL_MspInit+0x4c>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cf2:	2007      	movs	r0, #7
 8001cf4:	f000 fb72 	bl	80023dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40023800 	.word	0x40023800

08001d04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	@ 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a30      	ldr	r2, [pc, #192]	@ (8001de4 <HAL_I2C_MspInit+0xe0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d15a      	bne.n	8001ddc <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001de8 <HAL_I2C_MspInit+0xe4>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	4a2e      	ldr	r2, [pc, #184]	@ (8001de8 <HAL_I2C_MspInit+0xe4>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d36:	4b2c      	ldr	r3, [pc, #176]	@ (8001de8 <HAL_I2C_MspInit+0xe4>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d42:	23c0      	movs	r3, #192	@ 0xc0
 8001d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d46:	2312      	movs	r3, #18
 8001d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d52:	2304      	movs	r3, #4
 8001d54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4823      	ldr	r0, [pc, #140]	@ (8001dec <HAL_I2C_MspInit+0xe8>)
 8001d5e:	f000 ff17 	bl	8002b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b20      	ldr	r3, [pc, #128]	@ (8001de8 <HAL_I2C_MspInit+0xe4>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8001de8 <HAL_I2C_MspInit+0xe4>)
 8001d6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d72:	4b1d      	ldr	r3, [pc, #116]	@ (8001de8 <HAL_I2C_MspInit+0xe4>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8001d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001df0 <HAL_I2C_MspInit+0xec>)
 8001d80:	4a1c      	ldr	r2, [pc, #112]	@ (8001df4 <HAL_I2C_MspInit+0xf0>)
 8001d82:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001d84:	4b1a      	ldr	r3, [pc, #104]	@ (8001df0 <HAL_I2C_MspInit+0xec>)
 8001d86:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d8a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d8c:	4b18      	ldr	r3, [pc, #96]	@ (8001df0 <HAL_I2C_MspInit+0xec>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d92:	4b17      	ldr	r3, [pc, #92]	@ (8001df0 <HAL_I2C_MspInit+0xec>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d98:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <HAL_I2C_MspInit+0xec>)
 8001d9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d9e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001da0:	4b13      	ldr	r3, [pc, #76]	@ (8001df0 <HAL_I2C_MspInit+0xec>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001da6:	4b12      	ldr	r3, [pc, #72]	@ (8001df0 <HAL_I2C_MspInit+0xec>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001dac:	4b10      	ldr	r3, [pc, #64]	@ (8001df0 <HAL_I2C_MspInit+0xec>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001db2:	4b0f      	ldr	r3, [pc, #60]	@ (8001df0 <HAL_I2C_MspInit+0xec>)
 8001db4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001db8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dba:	4b0d      	ldr	r3, [pc, #52]	@ (8001df0 <HAL_I2C_MspInit+0xec>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001dc0:	480b      	ldr	r0, [pc, #44]	@ (8001df0 <HAL_I2C_MspInit+0xec>)
 8001dc2:	f000 fb4d 	bl	8002460 <HAL_DMA_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001dcc:	f7ff fe34 	bl	8001a38 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a07      	ldr	r2, [pc, #28]	@ (8001df0 <HAL_I2C_MspInit+0xec>)
 8001dd4:	639a      	str	r2, [r3, #56]	@ 0x38
 8001dd6:	4a06      	ldr	r2, [pc, #24]	@ (8001df0 <HAL_I2C_MspInit+0xec>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ddc:	bf00      	nop
 8001dde:	3728      	adds	r7, #40	@ 0x28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40005400 	.word	0x40005400
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40020400 	.word	0x40020400
 8001df0:	20000338 	.word	0x20000338
 8001df4:	40026088 	.word	0x40026088

08001df8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0a      	ldr	r2, [pc, #40]	@ (8001e30 <HAL_TIM_Base_MspInit+0x38>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d10d      	bne.n	8001e26 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	4b09      	ldr	r3, [pc, #36]	@ (8001e34 <HAL_TIM_Base_MspInit+0x3c>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e12:	4a08      	ldr	r2, [pc, #32]	@ (8001e34 <HAL_TIM_Base_MspInit+0x3c>)
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e1a:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <HAL_TIM_Base_MspInit+0x3c>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e26:	bf00      	nop
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	40000800 	.word	0x40000800
 8001e34:	40023800 	.word	0x40023800

08001e38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a12      	ldr	r2, [pc, #72]	@ (8001ea0 <HAL_TIM_MspPostInit+0x68>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d11e      	bne.n	8001e98 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ea4 <HAL_TIM_MspPostInit+0x6c>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	4a10      	ldr	r2, [pc, #64]	@ (8001ea4 <HAL_TIM_MspPostInit+0x6c>)
 8001e64:	f043 0308 	orr.w	r3, r3, #8
 8001e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea4 <HAL_TIM_MspPostInit+0x6c>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	4619      	mov	r1, r3
 8001e92:	4805      	ldr	r0, [pc, #20]	@ (8001ea8 <HAL_TIM_MspPostInit+0x70>)
 8001e94:	f000 fe7c 	bl	8002b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e98:	bf00      	nop
 8001e9a:	3720      	adds	r7, #32
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40000800 	.word	0x40000800
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40020c00 	.word	0x40020c00

08001eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001eb0:	bf00      	nop
 8001eb2:	e7fd      	b.n	8001eb0 <NMI_Handler+0x4>

08001eb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb8:	bf00      	nop
 8001eba:	e7fd      	b.n	8001eb8 <HardFault_Handler+0x4>

08001ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec0:	bf00      	nop
 8001ec2:	e7fd      	b.n	8001ec0 <MemManage_Handler+0x4>

08001ec4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec8:	bf00      	nop
 8001eca:	e7fd      	b.n	8001ec8 <BusFault_Handler+0x4>

08001ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <UsageFault_Handler+0x4>

08001ed4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001efc:	f000 f962 	bl	80021c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_MPU_Pin);
 8001f08:	2004      	movs	r0, #4
 8001f0a:	f000 ffdb 	bl	8002ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001f18:	4802      	ldr	r0, [pc, #8]	@ (8001f24 <DMA1_Stream5_IRQHandler+0x10>)
 8001f1a:	f000 fbc9 	bl	80026b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000338 	.word	0x20000338

08001f28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f2c:	4802      	ldr	r0, [pc, #8]	@ (8001f38 <OTG_FS_IRQHandler+0x10>)
 8001f2e:	f002 fc18 	bl	8004762 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	200019bc 	.word	0x200019bc

08001f3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return 1;
 8001f40:	2301      	movs	r3, #1
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr

08001f4a <_kill>:

int _kill(int pid, int sig)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f54:	f009 fdde 	bl	800bb14 <__errno>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2216      	movs	r2, #22
 8001f5c:	601a      	str	r2, [r3, #0]
  return -1;
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <_exit>:

void _exit (int status)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f72:	f04f 31ff 	mov.w	r1, #4294967295
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff ffe7 	bl	8001f4a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <_exit+0x12>

08001f80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	e00a      	b.n	8001fa8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f92:	f3af 8000 	nop.w
 8001f96:	4601      	mov	r1, r0
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	60ba      	str	r2, [r7, #8]
 8001f9e:	b2ca      	uxtb	r2, r1
 8001fa0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	dbf0      	blt.n	8001f92 <_read+0x12>
  }

  return len;
 8001fb0:	687b      	ldr	r3, [r7, #4]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	e009      	b.n	8001fe0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	60ba      	str	r2, [r7, #8]
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	dbf1      	blt.n	8001fcc <_write+0x12>
  }
  return len;
 8001fe8:	687b      	ldr	r3, [r7, #4]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <_close>:

int _close(int file)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ffa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002018:	605a      	str	r2, [r3, #4]
  return 0;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr

08002026 <_isatty>:

int _isatty(int file)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800202e:	2301      	movs	r3, #1
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr

0800203a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800203a:	b480      	push	{r7}
 800203c:	b085      	sub	sp, #20
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr
	...

08002054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800205c:	4a14      	ldr	r2, [pc, #80]	@ (80020b0 <_sbrk+0x5c>)
 800205e:	4b15      	ldr	r3, [pc, #84]	@ (80020b4 <_sbrk+0x60>)
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002068:	4b13      	ldr	r3, [pc, #76]	@ (80020b8 <_sbrk+0x64>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d102      	bne.n	8002076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002070:	4b11      	ldr	r3, [pc, #68]	@ (80020b8 <_sbrk+0x64>)
 8002072:	4a12      	ldr	r2, [pc, #72]	@ (80020bc <_sbrk+0x68>)
 8002074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002076:	4b10      	ldr	r3, [pc, #64]	@ (80020b8 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	429a      	cmp	r2, r3
 8002082:	d207      	bcs.n	8002094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002084:	f009 fd46 	bl	800bb14 <__errno>
 8002088:	4603      	mov	r3, r0
 800208a:	220c      	movs	r2, #12
 800208c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
 8002092:	e009      	b.n	80020a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002094:	4b08      	ldr	r3, [pc, #32]	@ (80020b8 <_sbrk+0x64>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209a:	4b07      	ldr	r3, [pc, #28]	@ (80020b8 <_sbrk+0x64>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	4a05      	ldr	r2, [pc, #20]	@ (80020b8 <_sbrk+0x64>)
 80020a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020a6:	68fb      	ldr	r3, [r7, #12]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20020000 	.word	0x20020000
 80020b4:	00000400 	.word	0x00000400
 80020b8:	200004d4 	.word	0x200004d4
 80020bc:	20002210 	.word	0x20002210

080020c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002104 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020d0:	f7ff fff6 	bl	80020c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020d4:	480c      	ldr	r0, [pc, #48]	@ (8002108 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020d6:	490d      	ldr	r1, [pc, #52]	@ (800210c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002110 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020dc:	e002      	b.n	80020e4 <LoopCopyDataInit>

080020de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e2:	3304      	adds	r3, #4

080020e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e8:	d3f9      	bcc.n	80020de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002114 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002118 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f0:	e001      	b.n	80020f6 <LoopFillZerobss>

080020f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f4:	3204      	adds	r2, #4

080020f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f8:	d3fb      	bcc.n	80020f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020fa:	f009 fd11 	bl	800bb20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020fe:	f7ff fa87 	bl	8001610 <main>
  bx  lr    
 8002102:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002104:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800210c:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8002110:	0800e000 	.word	0x0800e000
  ldr r2, =_sbss
 8002114:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8002118:	2000220c 	.word	0x2000220c

0800211c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800211c:	e7fe      	b.n	800211c <ADC_IRQHandler>
	...

08002120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002124:	4b0e      	ldr	r3, [pc, #56]	@ (8002160 <HAL_Init+0x40>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0d      	ldr	r2, [pc, #52]	@ (8002160 <HAL_Init+0x40>)
 800212a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800212e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002130:	4b0b      	ldr	r3, [pc, #44]	@ (8002160 <HAL_Init+0x40>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0a      	ldr	r2, [pc, #40]	@ (8002160 <HAL_Init+0x40>)
 8002136:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800213a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800213c:	4b08      	ldr	r3, [pc, #32]	@ (8002160 <HAL_Init+0x40>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a07      	ldr	r2, [pc, #28]	@ (8002160 <HAL_Init+0x40>)
 8002142:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002146:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002148:	2003      	movs	r0, #3
 800214a:	f000 f947 	bl	80023dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800214e:	2000      	movs	r0, #0
 8002150:	f000 f808 	bl	8002164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002154:	f7ff fdae 	bl	8001cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40023c00 	.word	0x40023c00

08002164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800216c:	4b12      	ldr	r3, [pc, #72]	@ (80021b8 <HAL_InitTick+0x54>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4b12      	ldr	r3, [pc, #72]	@ (80021bc <HAL_InitTick+0x58>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	4619      	mov	r1, r3
 8002176:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800217a:	fbb3 f3f1 	udiv	r3, r3, r1
 800217e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002182:	4618      	mov	r0, r3
 8002184:	f000 f95f 	bl	8002446 <HAL_SYSTICK_Config>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e00e      	b.n	80021b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b0f      	cmp	r3, #15
 8002196:	d80a      	bhi.n	80021ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002198:	2200      	movs	r2, #0
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	f04f 30ff 	mov.w	r0, #4294967295
 80021a0:	f000 f927 	bl	80023f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021a4:	4a06      	ldr	r2, [pc, #24]	@ (80021c0 <HAL_InitTick+0x5c>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	e000      	b.n	80021b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000000 	.word	0x20000000
 80021bc:	20000008 	.word	0x20000008
 80021c0:	20000004 	.word	0x20000004

080021c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c8:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <HAL_IncTick+0x1c>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b05      	ldr	r3, [pc, #20]	@ (80021e4 <HAL_IncTick+0x20>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	4a03      	ldr	r2, [pc, #12]	@ (80021e4 <HAL_IncTick+0x20>)
 80021d6:	6013      	str	r3, [r2, #0]
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	20000008 	.word	0x20000008
 80021e4:	200004d8 	.word	0x200004d8

080021e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return uwTick;
 80021ec:	4b02      	ldr	r3, [pc, #8]	@ (80021f8 <HAL_GetTick+0x10>)
 80021ee:	681b      	ldr	r3, [r3, #0]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	200004d8 	.word	0x200004d8

080021fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002204:	f7ff fff0 	bl	80021e8 <HAL_GetTick>
 8002208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002214:	d005      	beq.n	8002222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002216:	4b0a      	ldr	r3, [pc, #40]	@ (8002240 <HAL_Delay+0x44>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002222:	bf00      	nop
 8002224:	f7ff ffe0 	bl	80021e8 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	429a      	cmp	r2, r3
 8002232:	d8f7      	bhi.n	8002224 <HAL_Delay+0x28>
  {
  }
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000008 	.word	0x20000008

08002244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002254:	4b0c      	ldr	r3, [pc, #48]	@ (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002260:	4013      	ands	r3, r2
 8002262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800226c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002276:	4a04      	ldr	r2, [pc, #16]	@ (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	60d3      	str	r3, [r2, #12]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002290:	4b04      	ldr	r3, [pc, #16]	@ (80022a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	f003 0307 	and.w	r3, r3, #7
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	db0b      	blt.n	80022d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	f003 021f 	and.w	r2, r3, #31
 80022c0:	4906      	ldr	r1, [pc, #24]	@ (80022dc <__NVIC_EnableIRQ+0x34>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	2001      	movs	r0, #1
 80022ca:	fa00 f202 	lsl.w	r2, r0, r2
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	e000e100 	.word	0xe000e100

080022e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	db0a      	blt.n	800230a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	490c      	ldr	r1, [pc, #48]	@ (800232c <__NVIC_SetPriority+0x4c>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	0112      	lsls	r2, r2, #4
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	440b      	add	r3, r1
 8002304:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002308:	e00a      	b.n	8002320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4908      	ldr	r1, [pc, #32]	@ (8002330 <__NVIC_SetPriority+0x50>)
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	3b04      	subs	r3, #4
 8002318:	0112      	lsls	r2, r2, #4
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	440b      	add	r3, r1
 800231e:	761a      	strb	r2, [r3, #24]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000e100 	.word	0xe000e100
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	@ 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f1c3 0307 	rsb	r3, r3, #7
 800234e:	2b04      	cmp	r3, #4
 8002350:	bf28      	it	cs
 8002352:	2304      	movcs	r3, #4
 8002354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3304      	adds	r3, #4
 800235a:	2b06      	cmp	r3, #6
 800235c:	d902      	bls.n	8002364 <NVIC_EncodePriority+0x30>
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3b03      	subs	r3, #3
 8002362:	e000      	b.n	8002366 <NVIC_EncodePriority+0x32>
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	f04f 32ff 	mov.w	r2, #4294967295
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43da      	mvns	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	401a      	ands	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800237c:	f04f 31ff 	mov.w	r1, #4294967295
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fa01 f303 	lsl.w	r3, r1, r3
 8002386:	43d9      	mvns	r1, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	4313      	orrs	r3, r2
         );
}
 800238e:	4618      	mov	r0, r3
 8002390:	3724      	adds	r7, #36	@ 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023a8:	d301      	bcc.n	80023ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023aa:	2301      	movs	r3, #1
 80023ac:	e00f      	b.n	80023ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ae:	4a0a      	ldr	r2, [pc, #40]	@ (80023d8 <SysTick_Config+0x40>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b6:	210f      	movs	r1, #15
 80023b8:	f04f 30ff 	mov.w	r0, #4294967295
 80023bc:	f7ff ff90 	bl	80022e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c0:	4b05      	ldr	r3, [pc, #20]	@ (80023d8 <SysTick_Config+0x40>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c6:	4b04      	ldr	r3, [pc, #16]	@ (80023d8 <SysTick_Config+0x40>)
 80023c8:	2207      	movs	r2, #7
 80023ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	e000e010 	.word	0xe000e010

080023dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff ff2d 	bl	8002244 <__NVIC_SetPriorityGrouping>
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002404:	f7ff ff42 	bl	800228c <__NVIC_GetPriorityGrouping>
 8002408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	6978      	ldr	r0, [r7, #20]
 8002410:	f7ff ff90 	bl	8002334 <NVIC_EncodePriority>
 8002414:	4602      	mov	r2, r0
 8002416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff5f 	bl	80022e0 <__NVIC_SetPriority>
}
 8002422:	bf00      	nop
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff35 	bl	80022a8 <__NVIC_EnableIRQ>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ffa2 	bl	8002398 <SysTick_Config>
 8002454:	4603      	mov	r3, r0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800246c:	f7ff febc 	bl	80021e8 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e099      	b.n	80025b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800249c:	e00f      	b.n	80024be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800249e:	f7ff fea3 	bl	80021e8 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b05      	cmp	r3, #5
 80024aa:	d908      	bls.n	80024be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2220      	movs	r2, #32
 80024b0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2203      	movs	r2, #3
 80024b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e078      	b.n	80025b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1e8      	bne.n	800249e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	4b38      	ldr	r3, [pc, #224]	@ (80025b8 <HAL_DMA_Init+0x158>)
 80024d8:	4013      	ands	r3, r2
 80024da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002502:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4313      	orrs	r3, r2
 800250e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002514:	2b04      	cmp	r3, #4
 8002516:	d107      	bne.n	8002528 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002520:	4313      	orrs	r3, r2
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4313      	orrs	r3, r2
 8002526:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f023 0307 	bic.w	r3, r3, #7
 800253e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	4313      	orrs	r3, r2
 8002548:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254e:	2b04      	cmp	r3, #4
 8002550:	d117      	bne.n	8002582 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	4313      	orrs	r3, r2
 800255a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00e      	beq.n	8002582 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 fa99 	bl	8002a9c <DMA_CheckFifoParam>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2240      	movs	r2, #64	@ 0x40
 8002574:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800257e:	2301      	movs	r3, #1
 8002580:	e016      	b.n	80025b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fa52 	bl	8002a34 <DMA_CalcBaseAndBitshift>
 8002590:	4603      	mov	r3, r0
 8002592:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002598:	223f      	movs	r2, #63	@ 0x3f
 800259a:	409a      	lsls	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	f010803f 	.word	0xf010803f

080025bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_DMA_Start_IT+0x26>
 80025de:	2302      	movs	r3, #2
 80025e0:	e040      	b.n	8002664 <HAL_DMA_Start_IT+0xa8>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d12f      	bne.n	8002656 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2202      	movs	r2, #2
 80025fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	68b9      	ldr	r1, [r7, #8]
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 f9e5 	bl	80029da <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002614:	223f      	movs	r2, #63	@ 0x3f
 8002616:	409a      	lsls	r2, r3
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0216 	orr.w	r2, r2, #22
 800262a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002630:	2b00      	cmp	r3, #0
 8002632:	d007      	beq.n	8002644 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0208 	orr.w	r2, r2, #8
 8002642:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0201 	orr.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	e005      	b.n	8002662 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800265e:	2302      	movs	r3, #2
 8002660:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002662:	7dfb      	ldrb	r3, [r7, #23]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d004      	beq.n	800268a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2280      	movs	r2, #128	@ 0x80
 8002684:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e00c      	b.n	80026a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2205      	movs	r2, #5
 800268e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0201 	bic.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026bc:	4b8e      	ldr	r3, [pc, #568]	@ (80028f8 <HAL_DMA_IRQHandler+0x248>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a8e      	ldr	r2, [pc, #568]	@ (80028fc <HAL_DMA_IRQHandler+0x24c>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	0a9b      	lsrs	r3, r3, #10
 80026c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026da:	2208      	movs	r2, #8
 80026dc:	409a      	lsls	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d01a      	beq.n	800271c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d013      	beq.n	800271c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0204 	bic.w	r2, r2, #4
 8002702:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002708:	2208      	movs	r2, #8
 800270a:	409a      	lsls	r2, r3
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002714:	f043 0201 	orr.w	r2, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002720:	2201      	movs	r2, #1
 8002722:	409a      	lsls	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d012      	beq.n	8002752 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273e:	2201      	movs	r2, #1
 8002740:	409a      	lsls	r2, r3
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274a:	f043 0202 	orr.w	r2, r3, #2
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002756:	2204      	movs	r2, #4
 8002758:	409a      	lsls	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4013      	ands	r3, r2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d012      	beq.n	8002788 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00b      	beq.n	8002788 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002774:	2204      	movs	r2, #4
 8002776:	409a      	lsls	r2, r3
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002780:	f043 0204 	orr.w	r2, r3, #4
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278c:	2210      	movs	r2, #16
 800278e:	409a      	lsls	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d043      	beq.n	8002820 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d03c      	beq.n	8002820 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027aa:	2210      	movs	r2, #16
 80027ac:	409a      	lsls	r2, r3
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d018      	beq.n	80027f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d108      	bne.n	80027e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d024      	beq.n	8002820 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	4798      	blx	r3
 80027de:	e01f      	b.n	8002820 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d01b      	beq.n	8002820 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	4798      	blx	r3
 80027f0:	e016      	b.n	8002820 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d107      	bne.n	8002810 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0208 	bic.w	r2, r2, #8
 800280e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002824:	2220      	movs	r2, #32
 8002826:	409a      	lsls	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 808f 	beq.w	8002950 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 8087 	beq.w	8002950 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002846:	2220      	movs	r2, #32
 8002848:	409a      	lsls	r2, r3
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b05      	cmp	r3, #5
 8002858:	d136      	bne.n	80028c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0216 	bic.w	r2, r2, #22
 8002868:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002878:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287e:	2b00      	cmp	r3, #0
 8002880:	d103      	bne.n	800288a <HAL_DMA_IRQHandler+0x1da>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002886:	2b00      	cmp	r3, #0
 8002888:	d007      	beq.n	800289a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0208 	bic.w	r2, r2, #8
 8002898:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289e:	223f      	movs	r2, #63	@ 0x3f
 80028a0:	409a      	lsls	r2, r3
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d07e      	beq.n	80029bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	4798      	blx	r3
        }
        return;
 80028c6:	e079      	b.n	80029bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d01d      	beq.n	8002912 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10d      	bne.n	8002900 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d031      	beq.n	8002950 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	4798      	blx	r3
 80028f4:	e02c      	b.n	8002950 <HAL_DMA_IRQHandler+0x2a0>
 80028f6:	bf00      	nop
 80028f8:	20000000 	.word	0x20000000
 80028fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002904:	2b00      	cmp	r3, #0
 8002906:	d023      	beq.n	8002950 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	4798      	blx	r3
 8002910:	e01e      	b.n	8002950 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10f      	bne.n	8002940 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0210 	bic.w	r2, r2, #16
 800292e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002954:	2b00      	cmp	r3, #0
 8002956:	d032      	beq.n	80029be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d022      	beq.n	80029aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2205      	movs	r2, #5
 8002968:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0201 	bic.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	3301      	adds	r3, #1
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	429a      	cmp	r2, r3
 8002986:	d307      	bcc.n	8002998 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f2      	bne.n	800297c <HAL_DMA_IRQHandler+0x2cc>
 8002996:	e000      	b.n	800299a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002998:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d005      	beq.n	80029be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	4798      	blx	r3
 80029ba:	e000      	b.n	80029be <HAL_DMA_IRQHandler+0x30e>
        return;
 80029bc:	bf00      	nop
    }
  }
}
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr

080029da <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029da:	b480      	push	{r7}
 80029dc:	b085      	sub	sp, #20
 80029de:	af00      	add	r7, sp, #0
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	607a      	str	r2, [r7, #4]
 80029e6:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80029f6:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b40      	cmp	r3, #64	@ 0x40
 8002a06:	d108      	bne.n	8002a1a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a18:	e007      	b.n	8002a2a <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	60da      	str	r2, [r3, #12]
}
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	3b10      	subs	r3, #16
 8002a44:	4a13      	ldr	r2, [pc, #76]	@ (8002a94 <DMA_CalcBaseAndBitshift+0x60>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	091b      	lsrs	r3, r3, #4
 8002a4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a4e:	4a12      	ldr	r2, [pc, #72]	@ (8002a98 <DMA_CalcBaseAndBitshift+0x64>)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4413      	add	r3, r2
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d909      	bls.n	8002a76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a6a:	f023 0303 	bic.w	r3, r3, #3
 8002a6e:	1d1a      	adds	r2, r3, #4
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a74:	e007      	b.n	8002a86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a7e:	f023 0303 	bic.w	r3, r3, #3
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	aaaaaaab 	.word	0xaaaaaaab
 8002a98:	0800dc78 	.word	0x0800dc78

08002a9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d11f      	bne.n	8002af6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d856      	bhi.n	8002b6a <DMA_CheckFifoParam+0xce>
 8002abc:	a201      	add	r2, pc, #4	@ (adr r2, 8002ac4 <DMA_CheckFifoParam+0x28>)
 8002abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac2:	bf00      	nop
 8002ac4:	08002ad5 	.word	0x08002ad5
 8002ac8:	08002ae7 	.word	0x08002ae7
 8002acc:	08002ad5 	.word	0x08002ad5
 8002ad0:	08002b6b 	.word	0x08002b6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d046      	beq.n	8002b6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae4:	e043      	b.n	8002b6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002aee:	d140      	bne.n	8002b72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af4:	e03d      	b.n	8002b72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002afe:	d121      	bne.n	8002b44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d837      	bhi.n	8002b76 <DMA_CheckFifoParam+0xda>
 8002b06:	a201      	add	r2, pc, #4	@ (adr r2, 8002b0c <DMA_CheckFifoParam+0x70>)
 8002b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0c:	08002b1d 	.word	0x08002b1d
 8002b10:	08002b23 	.word	0x08002b23
 8002b14:	08002b1d 	.word	0x08002b1d
 8002b18:	08002b35 	.word	0x08002b35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b20:	e030      	b.n	8002b84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d025      	beq.n	8002b7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b32:	e022      	b.n	8002b7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b38:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b3c:	d11f      	bne.n	8002b7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b42:	e01c      	b.n	8002b7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d903      	bls.n	8002b52 <DMA_CheckFifoParam+0xb6>
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d003      	beq.n	8002b58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b50:	e018      	b.n	8002b84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	73fb      	strb	r3, [r7, #15]
      break;
 8002b56:	e015      	b.n	8002b84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00e      	beq.n	8002b82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
      break;
 8002b68:	e00b      	b.n	8002b82 <DMA_CheckFifoParam+0xe6>
      break;
 8002b6a:	bf00      	nop
 8002b6c:	e00a      	b.n	8002b84 <DMA_CheckFifoParam+0xe8>
      break;
 8002b6e:	bf00      	nop
 8002b70:	e008      	b.n	8002b84 <DMA_CheckFifoParam+0xe8>
      break;
 8002b72:	bf00      	nop
 8002b74:	e006      	b.n	8002b84 <DMA_CheckFifoParam+0xe8>
      break;
 8002b76:	bf00      	nop
 8002b78:	e004      	b.n	8002b84 <DMA_CheckFifoParam+0xe8>
      break;
 8002b7a:	bf00      	nop
 8002b7c:	e002      	b.n	8002b84 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b7e:	bf00      	nop
 8002b80:	e000      	b.n	8002b84 <DMA_CheckFifoParam+0xe8>
      break;
 8002b82:	bf00      	nop
    }
  } 
  
  return status; 
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b089      	sub	sp, #36	@ 0x24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
 8002baa:	e16b      	b.n	8002e84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bac:	2201      	movs	r2, #1
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	f040 815a 	bne.w	8002e7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d005      	beq.n	8002be2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d130      	bne.n	8002c44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	2203      	movs	r2, #3
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c18:	2201      	movs	r2, #1
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f003 0201 	and.w	r2, r3, #1
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d017      	beq.n	8002c80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d123      	bne.n	8002cd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	08da      	lsrs	r2, r3, #3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3208      	adds	r2, #8
 8002c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	220f      	movs	r2, #15
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	08da      	lsrs	r2, r3, #3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3208      	adds	r2, #8
 8002cce:	69b9      	ldr	r1, [r7, #24]
 8002cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	2203      	movs	r2, #3
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 0203 	and.w	r2, r3, #3
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80b4 	beq.w	8002e7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002e98 <HAL_GPIO_Init+0x308>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1e:	4a5e      	ldr	r2, [pc, #376]	@ (8002e98 <HAL_GPIO_Init+0x308>)
 8002d20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d26:	4b5c      	ldr	r3, [pc, #368]	@ (8002e98 <HAL_GPIO_Init+0x308>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d32:	4a5a      	ldr	r2, [pc, #360]	@ (8002e9c <HAL_GPIO_Init+0x30c>)
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	3302      	adds	r3, #2
 8002d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	220f      	movs	r2, #15
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a51      	ldr	r2, [pc, #324]	@ (8002ea0 <HAL_GPIO_Init+0x310>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d02b      	beq.n	8002db6 <HAL_GPIO_Init+0x226>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a50      	ldr	r2, [pc, #320]	@ (8002ea4 <HAL_GPIO_Init+0x314>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d025      	beq.n	8002db2 <HAL_GPIO_Init+0x222>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a4f      	ldr	r2, [pc, #316]	@ (8002ea8 <HAL_GPIO_Init+0x318>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d01f      	beq.n	8002dae <HAL_GPIO_Init+0x21e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4e      	ldr	r2, [pc, #312]	@ (8002eac <HAL_GPIO_Init+0x31c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d019      	beq.n	8002daa <HAL_GPIO_Init+0x21a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a4d      	ldr	r2, [pc, #308]	@ (8002eb0 <HAL_GPIO_Init+0x320>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d013      	beq.n	8002da6 <HAL_GPIO_Init+0x216>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4c      	ldr	r2, [pc, #304]	@ (8002eb4 <HAL_GPIO_Init+0x324>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00d      	beq.n	8002da2 <HAL_GPIO_Init+0x212>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4b      	ldr	r2, [pc, #300]	@ (8002eb8 <HAL_GPIO_Init+0x328>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d007      	beq.n	8002d9e <HAL_GPIO_Init+0x20e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a4a      	ldr	r2, [pc, #296]	@ (8002ebc <HAL_GPIO_Init+0x32c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d101      	bne.n	8002d9a <HAL_GPIO_Init+0x20a>
 8002d96:	2307      	movs	r3, #7
 8002d98:	e00e      	b.n	8002db8 <HAL_GPIO_Init+0x228>
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	e00c      	b.n	8002db8 <HAL_GPIO_Init+0x228>
 8002d9e:	2306      	movs	r3, #6
 8002da0:	e00a      	b.n	8002db8 <HAL_GPIO_Init+0x228>
 8002da2:	2305      	movs	r3, #5
 8002da4:	e008      	b.n	8002db8 <HAL_GPIO_Init+0x228>
 8002da6:	2304      	movs	r3, #4
 8002da8:	e006      	b.n	8002db8 <HAL_GPIO_Init+0x228>
 8002daa:	2303      	movs	r3, #3
 8002dac:	e004      	b.n	8002db8 <HAL_GPIO_Init+0x228>
 8002dae:	2302      	movs	r3, #2
 8002db0:	e002      	b.n	8002db8 <HAL_GPIO_Init+0x228>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <HAL_GPIO_Init+0x228>
 8002db6:	2300      	movs	r3, #0
 8002db8:	69fa      	ldr	r2, [r7, #28]
 8002dba:	f002 0203 	and.w	r2, r2, #3
 8002dbe:	0092      	lsls	r2, r2, #2
 8002dc0:	4093      	lsls	r3, r2
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dc8:	4934      	ldr	r1, [pc, #208]	@ (8002e9c <HAL_GPIO_Init+0x30c>)
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	089b      	lsrs	r3, r3, #2
 8002dce:	3302      	adds	r3, #2
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dd6:	4b3a      	ldr	r3, [pc, #232]	@ (8002ec0 <HAL_GPIO_Init+0x330>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dfa:	4a31      	ldr	r2, [pc, #196]	@ (8002ec0 <HAL_GPIO_Init+0x330>)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e00:	4b2f      	ldr	r3, [pc, #188]	@ (8002ec0 <HAL_GPIO_Init+0x330>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e24:	4a26      	ldr	r2, [pc, #152]	@ (8002ec0 <HAL_GPIO_Init+0x330>)
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e2a:	4b25      	ldr	r3, [pc, #148]	@ (8002ec0 <HAL_GPIO_Init+0x330>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	43db      	mvns	r3, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ec0 <HAL_GPIO_Init+0x330>)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e54:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec0 <HAL_GPIO_Init+0x330>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e78:	4a11      	ldr	r2, [pc, #68]	@ (8002ec0 <HAL_GPIO_Init+0x330>)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3301      	adds	r3, #1
 8002e82:	61fb      	str	r3, [r7, #28]
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	2b0f      	cmp	r3, #15
 8002e88:	f67f ae90 	bls.w	8002bac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	bf00      	nop
 8002e90:	3724      	adds	r7, #36	@ 0x24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40013800 	.word	0x40013800
 8002ea0:	40020000 	.word	0x40020000
 8002ea4:	40020400 	.word	0x40020400
 8002ea8:	40020800 	.word	0x40020800
 8002eac:	40020c00 	.word	0x40020c00
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40021400 	.word	0x40021400
 8002eb8:	40021800 	.word	0x40021800
 8002ebc:	40021c00 	.word	0x40021c00
 8002ec0:	40013c00 	.word	0x40013c00

08002ec4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ece:	4b08      	ldr	r3, [pc, #32]	@ (8002ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d006      	beq.n	8002ee8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eda:	4a05      	ldr	r2, [pc, #20]	@ (8002ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe fb4e 	bl	8001584 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ee8:	bf00      	nop
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40013c00 	.word	0x40013c00

08002ef4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e12b      	b.n	800315e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fe fef2 	bl	8001d04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2224      	movs	r2, #36	@ 0x24
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0201 	bic.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f58:	f003 f980 	bl	800625c <HAL_RCC_GetPCLK1Freq>
 8002f5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	4a81      	ldr	r2, [pc, #516]	@ (8003168 <HAL_I2C_Init+0x274>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d807      	bhi.n	8002f78 <HAL_I2C_Init+0x84>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4a80      	ldr	r2, [pc, #512]	@ (800316c <HAL_I2C_Init+0x278>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	bf94      	ite	ls
 8002f70:	2301      	movls	r3, #1
 8002f72:	2300      	movhi	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	e006      	b.n	8002f86 <HAL_I2C_Init+0x92>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4a7d      	ldr	r2, [pc, #500]	@ (8003170 <HAL_I2C_Init+0x27c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	bf94      	ite	ls
 8002f80:	2301      	movls	r3, #1
 8002f82:	2300      	movhi	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e0e7      	b.n	800315e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4a78      	ldr	r2, [pc, #480]	@ (8003174 <HAL_I2C_Init+0x280>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	0c9b      	lsrs	r3, r3, #18
 8002f98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4a6a      	ldr	r2, [pc, #424]	@ (8003168 <HAL_I2C_Init+0x274>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d802      	bhi.n	8002fc8 <HAL_I2C_Init+0xd4>
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	e009      	b.n	8002fdc <HAL_I2C_Init+0xe8>
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002fce:	fb02 f303 	mul.w	r3, r2, r3
 8002fd2:	4a69      	ldr	r2, [pc, #420]	@ (8003178 <HAL_I2C_Init+0x284>)
 8002fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd8:	099b      	lsrs	r3, r3, #6
 8002fda:	3301      	adds	r3, #1
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002fee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	495c      	ldr	r1, [pc, #368]	@ (8003168 <HAL_I2C_Init+0x274>)
 8002ff8:	428b      	cmp	r3, r1
 8002ffa:	d819      	bhi.n	8003030 <HAL_I2C_Init+0x13c>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1e59      	subs	r1, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	fbb1 f3f3 	udiv	r3, r1, r3
 800300a:	1c59      	adds	r1, r3, #1
 800300c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003010:	400b      	ands	r3, r1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <HAL_I2C_Init+0x138>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1e59      	subs	r1, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	fbb1 f3f3 	udiv	r3, r1, r3
 8003024:	3301      	adds	r3, #1
 8003026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302a:	e051      	b.n	80030d0 <HAL_I2C_Init+0x1dc>
 800302c:	2304      	movs	r3, #4
 800302e:	e04f      	b.n	80030d0 <HAL_I2C_Init+0x1dc>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d111      	bne.n	800305c <HAL_I2C_Init+0x168>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1e58      	subs	r0, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6859      	ldr	r1, [r3, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	440b      	add	r3, r1
 8003046:	fbb0 f3f3 	udiv	r3, r0, r3
 800304a:	3301      	adds	r3, #1
 800304c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	e012      	b.n	8003082 <HAL_I2C_Init+0x18e>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	1e58      	subs	r0, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6859      	ldr	r1, [r3, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	0099      	lsls	r1, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003072:	3301      	adds	r3, #1
 8003074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_I2C_Init+0x196>
 8003086:	2301      	movs	r3, #1
 8003088:	e022      	b.n	80030d0 <HAL_I2C_Init+0x1dc>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10e      	bne.n	80030b0 <HAL_I2C_Init+0x1bc>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	1e58      	subs	r0, r3, #1
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6859      	ldr	r1, [r3, #4]
 800309a:	460b      	mov	r3, r1
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	440b      	add	r3, r1
 80030a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80030a4:	3301      	adds	r3, #1
 80030a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030ae:	e00f      	b.n	80030d0 <HAL_I2C_Init+0x1dc>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1e58      	subs	r0, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6859      	ldr	r1, [r3, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	0099      	lsls	r1, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c6:	3301      	adds	r3, #1
 80030c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	6809      	ldr	r1, [r1, #0]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69da      	ldr	r2, [r3, #28]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80030fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6911      	ldr	r1, [r2, #16]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	68d2      	ldr	r2, [r2, #12]
 800310a:	4311      	orrs	r1, r2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	430b      	orrs	r3, r1
 8003112:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	000186a0 	.word	0x000186a0
 800316c:	001e847f 	.word	0x001e847f
 8003170:	003d08ff 	.word	0x003d08ff
 8003174:	431bde83 	.word	0x431bde83
 8003178:	10624dd3 	.word	0x10624dd3

0800317c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af02      	add	r7, sp, #8
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	4608      	mov	r0, r1
 8003186:	4611      	mov	r1, r2
 8003188:	461a      	mov	r2, r3
 800318a:	4603      	mov	r3, r0
 800318c:	817b      	strh	r3, [r7, #10]
 800318e:	460b      	mov	r3, r1
 8003190:	813b      	strh	r3, [r7, #8]
 8003192:	4613      	mov	r3, r2
 8003194:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003196:	f7ff f827 	bl	80021e8 <HAL_GetTick>
 800319a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b20      	cmp	r3, #32
 80031a6:	f040 80d9 	bne.w	800335c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	2319      	movs	r3, #25
 80031b0:	2201      	movs	r2, #1
 80031b2:	496d      	ldr	r1, [pc, #436]	@ (8003368 <HAL_I2C_Mem_Write+0x1ec>)
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 ff5b 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80031c0:	2302      	movs	r3, #2
 80031c2:	e0cc      	b.n	800335e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_I2C_Mem_Write+0x56>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e0c5      	b.n	800335e <HAL_I2C_Mem_Write+0x1e2>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d007      	beq.n	80031f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003206:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2221      	movs	r2, #33	@ 0x21
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2240      	movs	r2, #64	@ 0x40
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a3a      	ldr	r2, [r7, #32]
 8003222:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003228:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4a4d      	ldr	r2, [pc, #308]	@ (800336c <HAL_I2C_Mem_Write+0x1f0>)
 8003238:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800323a:	88f8      	ldrh	r0, [r7, #6]
 800323c:	893a      	ldrh	r2, [r7, #8]
 800323e:	8979      	ldrh	r1, [r7, #10]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	9301      	str	r3, [sp, #4]
 8003244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	4603      	mov	r3, r0
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 fc76 	bl	8003b3c <I2C_RequestMemoryWrite>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d052      	beq.n	80032fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e081      	b.n	800335e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f001 f820 	bl	80042a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00d      	beq.n	8003286 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	2b04      	cmp	r3, #4
 8003270:	d107      	bne.n	8003282 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003280:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e06b      	b.n	800335e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328a:	781a      	ldrb	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d11b      	bne.n	80032fc <HAL_I2C_Mem_Write+0x180>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d017      	beq.n	80032fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d0:	781a      	ldrb	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1aa      	bne.n	800325a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f001 f813 	bl	8004334 <I2C_WaitOnBTFFlagUntilTimeout>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00d      	beq.n	8003330 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	2b04      	cmp	r3, #4
 800331a:	d107      	bne.n	800332c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800332a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e016      	b.n	800335e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800333e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	e000      	b.n	800335e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800335c:	2302      	movs	r3, #2
  }
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	00100002 	.word	0x00100002
 800336c:	ffff0000 	.word	0xffff0000

08003370 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08c      	sub	sp, #48	@ 0x30
 8003374:	af02      	add	r7, sp, #8
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	4608      	mov	r0, r1
 800337a:	4611      	mov	r1, r2
 800337c:	461a      	mov	r2, r3
 800337e:	4603      	mov	r3, r0
 8003380:	817b      	strh	r3, [r7, #10]
 8003382:	460b      	mov	r3, r1
 8003384:	813b      	strh	r3, [r7, #8]
 8003386:	4613      	mov	r3, r2
 8003388:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800338a:	f7fe ff2d 	bl	80021e8 <HAL_GetTick>
 800338e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b20      	cmp	r3, #32
 800339a:	f040 8214 	bne.w	80037c6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800339e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	2319      	movs	r3, #25
 80033a4:	2201      	movs	r2, #1
 80033a6:	497b      	ldr	r1, [pc, #492]	@ (8003594 <HAL_I2C_Mem_Read+0x224>)
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 fe61 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80033b4:	2302      	movs	r3, #2
 80033b6:	e207      	b.n	80037c8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_I2C_Mem_Read+0x56>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e200      	b.n	80037c8 <HAL_I2C_Mem_Read+0x458>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d007      	beq.n	80033ec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0201 	orr.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2222      	movs	r2, #34	@ 0x22
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2240      	movs	r2, #64	@ 0x40
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003416:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800341c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4a5b      	ldr	r2, [pc, #364]	@ (8003598 <HAL_I2C_Mem_Read+0x228>)
 800342c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800342e:	88f8      	ldrh	r0, [r7, #6]
 8003430:	893a      	ldrh	r2, [r7, #8]
 8003432:	8979      	ldrh	r1, [r7, #10]
 8003434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	4603      	mov	r3, r0
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 fc12 	bl	8003c68 <I2C_RequestMemoryRead>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e1bc      	b.n	80037c8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003452:	2b00      	cmp	r3, #0
 8003454:	d113      	bne.n	800347e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003456:	2300      	movs	r3, #0
 8003458:	623b      	str	r3, [r7, #32]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	623b      	str	r3, [r7, #32]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	623b      	str	r3, [r7, #32]
 800346a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	e190      	b.n	80037a0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003482:	2b01      	cmp	r3, #1
 8003484:	d11b      	bne.n	80034be <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003494:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003496:	2300      	movs	r3, #0
 8003498:	61fb      	str	r3, [r7, #28]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	61fb      	str	r3, [r7, #28]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	61fb      	str	r3, [r7, #28]
 80034aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	e170      	b.n	80037a0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d11b      	bne.n	80034fe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e6:	2300      	movs	r3, #0
 80034e8:	61bb      	str	r3, [r7, #24]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	61bb      	str	r3, [r7, #24]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	61bb      	str	r3, [r7, #24]
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	e150      	b.n	80037a0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003514:	e144      	b.n	80037a0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800351a:	2b03      	cmp	r3, #3
 800351c:	f200 80f1 	bhi.w	8003702 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003524:	2b01      	cmp	r3, #1
 8003526:	d123      	bne.n	8003570 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003528:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800352a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 ff49 	bl	80043c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e145      	b.n	80037c8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800356e:	e117      	b.n	80037a0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003574:	2b02      	cmp	r3, #2
 8003576:	d14e      	bne.n	8003616 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800357e:	2200      	movs	r2, #0
 8003580:	4906      	ldr	r1, [pc, #24]	@ (800359c <HAL_I2C_Mem_Read+0x22c>)
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 fd74 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d008      	beq.n	80035a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e11a      	b.n	80037c8 <HAL_I2C_Mem_Read+0x458>
 8003592:	bf00      	nop
 8003594:	00100002 	.word	0x00100002
 8003598:	ffff0000 	.word	0xffff0000
 800359c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003614:	e0c4      	b.n	80037a0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800361c:	2200      	movs	r2, #0
 800361e:	496c      	ldr	r1, [pc, #432]	@ (80037d0 <HAL_I2C_Mem_Read+0x460>)
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 fd25 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e0cb      	b.n	80037c8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800363e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003678:	2200      	movs	r2, #0
 800367a:	4955      	ldr	r1, [pc, #340]	@ (80037d0 <HAL_I2C_Mem_Read+0x460>)
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 fcf7 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e09d      	b.n	80037c8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800369a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003700:	e04e      	b.n	80037a0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003704:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 fe5c 	bl	80043c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e058      	b.n	80037c8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003732:	3b01      	subs	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	2b04      	cmp	r3, #4
 8003754:	d124      	bne.n	80037a0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800375a:	2b03      	cmp	r3, #3
 800375c:	d107      	bne.n	800376e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800376c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378a:	3b01      	subs	r3, #1
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003796:	b29b      	uxth	r3, r3
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f47f aeb6 	bne.w	8003516 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	e000      	b.n	80037c8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80037c6:	2302      	movs	r3, #2
  }
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3728      	adds	r7, #40	@ 0x28
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	00010004 	.word	0x00010004

080037d4 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08c      	sub	sp, #48	@ 0x30
 80037d8:	af02      	add	r7, sp, #8
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	4608      	mov	r0, r1
 80037de:	4611      	mov	r1, r2
 80037e0:	461a      	mov	r2, r3
 80037e2:	4603      	mov	r3, r0
 80037e4:	817b      	strh	r3, [r7, #10]
 80037e6:	460b      	mov	r3, r1
 80037e8:	813b      	strh	r3, [r7, #8]
 80037ea:	4613      	mov	r3, r2
 80037ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037ee:	f7fe fcfb 	bl	80021e8 <HAL_GetTick>
 80037f2:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b20      	cmp	r3, #32
 8003802:	f040 8172 	bne.w	8003aea <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003806:	4b93      	ldr	r3, [pc, #588]	@ (8003a54 <HAL_I2C_Mem_Read_DMA+0x280>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	08db      	lsrs	r3, r3, #3
 800380c:	4a92      	ldr	r2, [pc, #584]	@ (8003a58 <HAL_I2C_Mem_Read_DMA+0x284>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	0a1a      	lsrs	r2, r3, #8
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	009a      	lsls	r2, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	3b01      	subs	r3, #1
 8003824:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d112      	bne.n	8003852 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003846:	f043 0220 	orr.w	r2, r3, #32
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800384e:	2302      	movs	r3, #2
 8003850:	e14c      	b.n	8003aec <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b02      	cmp	r3, #2
 800385e:	d0df      	beq.n	8003820 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_I2C_Mem_Read_DMA+0x9a>
 800386a:	2302      	movs	r3, #2
 800386c:	e13e      	b.n	8003aec <HAL_I2C_Mem_Read_DMA+0x318>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b01      	cmp	r3, #1
 8003882:	d007      	beq.n	8003894 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2222      	movs	r2, #34	@ 0x22
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2240      	movs	r2, #64	@ 0x40
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80038c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4a62      	ldr	r2, [pc, #392]	@ (8003a5c <HAL_I2C_Mem_Read_DMA+0x288>)
 80038d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80038d6:	897a      	ldrh	r2, [r7, #10]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80038dc:	893a      	ldrh	r2, [r7, #8]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80038e2:	88fa      	ldrh	r2, [r7, #6]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 80cc 	beq.w	8003a90 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d02d      	beq.n	800395c <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003904:	4a56      	ldr	r2, [pc, #344]	@ (8003a60 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8003906:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390c:	4a55      	ldr	r2, [pc, #340]	@ (8003a64 <HAL_I2C_Mem_Read_DMA+0x290>)
 800390e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003914:	2200      	movs	r2, #0
 8003916:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391c:	2200      	movs	r2, #0
 800391e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003924:	2200      	movs	r2, #0
 8003926:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392c:	2200      	movs	r2, #0
 800392e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3310      	adds	r3, #16
 800393a:	4619      	mov	r1, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003940:	461a      	mov	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003946:	f7fe fe39 	bl	80025bc <HAL_DMA_Start_IT>
 800394a:	4603      	mov	r3, r0
 800394c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003950:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003954:	2b00      	cmp	r3, #0
 8003956:	f040 8087 	bne.w	8003a68 <HAL_I2C_Mem_Read_DMA+0x294>
 800395a:	e013      	b.n	8003984 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0b3      	b.n	8003aec <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003984:	88f8      	ldrh	r0, [r7, #6]
 8003986:	893a      	ldrh	r2, [r7, #8]
 8003988:	8979      	ldrh	r1, [r7, #10]
 800398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398c:	9301      	str	r3, [sp, #4]
 800398e:	2323      	movs	r3, #35	@ 0x23
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	4603      	mov	r3, r0
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f967 	bl	8003c68 <I2C_RequestMemoryRead>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d023      	beq.n	80039e8 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fe fe61 	bl	800266c <HAL_DMA_Abort_IT>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b4:	2200      	movs	r2, #0
 80039b6:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039c6:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0201 	bic.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e081      	b.n	8003aec <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d108      	bne.n	8003a02 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	e007      	b.n	8003a12 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a10:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a12:	2300      	movs	r3, #0
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	61bb      	str	r3, [r7, #24]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a3e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a4e:	605a      	str	r2, [r3, #4]
 8003a50:	e049      	b.n	8003ae6 <HAL_I2C_Mem_Read_DMA+0x312>
 8003a52:	bf00      	nop
 8003a54:	20000000 	.word	0x20000000
 8003a58:	14f8b589 	.word	0x14f8b589
 8003a5c:	ffff0000 	.word	0xffff0000
 8003a60:	08003e39 	.word	0x08003e39
 8003a64:	08003ff7 	.word	0x08003ff7
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7c:	f043 0210 	orr.w	r2, r3, #16
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e02d      	b.n	8003aec <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003a90:	88f8      	ldrh	r0, [r7, #6]
 8003a92:	893a      	ldrh	r2, [r7, #8]
 8003a94:	8979      	ldrh	r1, [r7, #10]
 8003a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a98:	9301      	str	r3, [sp, #4]
 8003a9a:	2323      	movs	r3, #35	@ 0x23
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f8e1 	bl	8003c68 <I2C_RequestMemoryRead>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e01d      	b.n	8003aec <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ad4:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	e000      	b.n	8003aec <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8003aea:	2302      	movs	r3, #2
  }
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3728      	adds	r7, #40	@ 0x28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr

08003b06 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr

08003b18 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr

08003b2a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	4608      	mov	r0, r1
 8003b46:	4611      	mov	r1, r2
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	817b      	strh	r3, [r7, #10]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	813b      	strh	r3, [r7, #8]
 8003b52:	4613      	mov	r3, r2
 8003b54:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 fa7c 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00d      	beq.n	8003b9a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b8c:	d103      	bne.n	8003b96 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b94:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e05f      	b.n	8003c5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b9a:	897b      	ldrh	r3, [r7, #10]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ba8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	6a3a      	ldr	r2, [r7, #32]
 8003bae:	492d      	ldr	r1, [pc, #180]	@ (8003c64 <I2C_RequestMemoryWrite+0x128>)
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 fad7 	bl	8004164 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e04c      	b.n	8003c5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd8:	6a39      	ldr	r1, [r7, #32]
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 fb62 	bl	80042a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00d      	beq.n	8003c02 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d107      	bne.n	8003bfe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bfc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e02b      	b.n	8003c5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c02:	88fb      	ldrh	r3, [r7, #6]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d105      	bne.n	8003c14 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c08:	893b      	ldrh	r3, [r7, #8]
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	611a      	str	r2, [r3, #16]
 8003c12:	e021      	b.n	8003c58 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c14:	893b      	ldrh	r3, [r7, #8]
 8003c16:	0a1b      	lsrs	r3, r3, #8
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c24:	6a39      	ldr	r1, [r7, #32]
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 fb3c 	bl	80042a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00d      	beq.n	8003c4e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d107      	bne.n	8003c4a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e005      	b.n	8003c5a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c4e:	893b      	ldrh	r3, [r7, #8]
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	00010002 	.word	0x00010002

08003c68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	4608      	mov	r0, r1
 8003c72:	4611      	mov	r1, r2
 8003c74:	461a      	mov	r2, r3
 8003c76:	4603      	mov	r3, r0
 8003c78:	817b      	strh	r3, [r7, #10]
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	813b      	strh	r3, [r7, #8]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c90:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f9de 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00d      	beq.n	8003cd6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cc8:	d103      	bne.n	8003cd2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cd0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e0aa      	b.n	8003e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cd6:	897b      	ldrh	r3, [r7, #10]
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ce4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce8:	6a3a      	ldr	r2, [r7, #32]
 8003cea:	4952      	ldr	r1, [pc, #328]	@ (8003e34 <I2C_RequestMemoryRead+0x1cc>)
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 fa39 	bl	8004164 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e097      	b.n	8003e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d14:	6a39      	ldr	r1, [r7, #32]
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 fac4 	bl	80042a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00d      	beq.n	8003d3e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d107      	bne.n	8003d3a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e076      	b.n	8003e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d3e:	88fb      	ldrh	r3, [r7, #6]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d105      	bne.n	8003d50 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d44:	893b      	ldrh	r3, [r7, #8]
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	611a      	str	r2, [r3, #16]
 8003d4e:	e021      	b.n	8003d94 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d50:	893b      	ldrh	r3, [r7, #8]
 8003d52:	0a1b      	lsrs	r3, r3, #8
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d60:	6a39      	ldr	r1, [r7, #32]
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 fa9e 	bl	80042a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00d      	beq.n	8003d8a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d107      	bne.n	8003d86 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e050      	b.n	8003e2c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d8a:	893b      	ldrh	r3, [r7, #8]
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d96:	6a39      	ldr	r1, [r7, #32]
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 fa83 	bl	80042a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00d      	beq.n	8003dc0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d107      	bne.n	8003dbc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e035      	b.n	8003e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f947 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00d      	beq.n	8003e04 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003df6:	d103      	bne.n	8003e00 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dfe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e013      	b.n	8003e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e04:	897b      	ldrh	r3, [r7, #10]
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e16:	6a3a      	ldr	r2, [r7, #32]
 8003e18:	4906      	ldr	r1, [pc, #24]	@ (8003e34 <I2C_RequestMemoryRead+0x1cc>)
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f9a2 	bl	8004164 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	00010002 	.word	0x00010002

08003e38 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e44:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e4c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e54:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003e6a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e78:	2200      	movs	r2, #0
 8003e7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e88:	2200      	movs	r2, #0
 8003e8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003e8c:	7cfb      	ldrb	r3, [r7, #19]
 8003e8e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003e92:	2b21      	cmp	r3, #33	@ 0x21
 8003e94:	d007      	beq.n	8003ea6 <I2C_DMAXferCplt+0x6e>
 8003e96:	7cfb      	ldrb	r3, [r7, #19]
 8003e98:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8003e9c:	2b22      	cmp	r3, #34	@ 0x22
 8003e9e:	d131      	bne.n	8003f04 <I2C_DMAXferCplt+0xcc>
 8003ea0:	7cbb      	ldrb	r3, [r7, #18]
 8003ea2:	2b20      	cmp	r3, #32
 8003ea4:	d12e      	bne.n	8003f04 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003eb4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003ebc:	7cfb      	ldrb	r3, [r7, #19]
 8003ebe:	2b29      	cmp	r3, #41	@ 0x29
 8003ec0:	d10a      	bne.n	8003ed8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2221      	movs	r2, #33	@ 0x21
 8003ec6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2228      	movs	r2, #40	@ 0x28
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ed0:	6978      	ldr	r0, [r7, #20]
 8003ed2:	f7ff fe18 	bl	8003b06 <HAL_I2C_SlaveTxCpltCallback>
 8003ed6:	e00c      	b.n	8003ef2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ed8:	7cfb      	ldrb	r3, [r7, #19]
 8003eda:	2b2a      	cmp	r3, #42	@ 0x2a
 8003edc:	d109      	bne.n	8003ef2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2222      	movs	r2, #34	@ 0x22
 8003ee2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2228      	movs	r2, #40	@ 0x28
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003eec:	6978      	ldr	r0, [r7, #20]
 8003eee:	f7ff fe13 	bl	8003b18 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003f00:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003f02:	e074      	b.n	8003fee <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d06e      	beq.n	8003fee <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d107      	bne.n	8003f2a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f28:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003f38:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f40:	d009      	beq.n	8003f56 <I2C_DMAXferCplt+0x11e>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d006      	beq.n	8003f56 <I2C_DMAXferCplt+0x11e>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003f4e:	d002      	beq.n	8003f56 <I2C_DMAXferCplt+0x11e>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	d107      	bne.n	8003f66 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f64:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f74:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f84:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003f94:	6978      	ldr	r0, [r7, #20]
 8003f96:	f7ff fdc8 	bl	8003b2a <HAL_I2C_ErrorCallback>
}
 8003f9a:	e028      	b.n	8003fee <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b40      	cmp	r3, #64	@ 0x40
 8003fae:	d10a      	bne.n	8003fc6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003fbe:	6978      	ldr	r0, [r7, #20]
 8003fc0:	f7fd faf4 	bl	80015ac <HAL_I2C_MemRxCpltCallback>
}
 8003fc4:	e013      	b.n	8003fee <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d002      	beq.n	8003fda <I2C_DMAXferCplt+0x1a2>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b20      	cmp	r3, #32
 8003fd8:	d103      	bne.n	8003fe2 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fe0:	e002      	b.n	8003fe8 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2212      	movs	r2, #18
 8003fe6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003fe8:	6978      	ldr	r0, [r7, #20]
 8003fea:	f7ff fd83 	bl	8003af4 <HAL_I2C_MasterRxCpltCallback>
}
 8003fee:	bf00      	nop
 8003ff0:	3718      	adds	r7, #24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004002:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004010:	2200      	movs	r2, #0
 8004012:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004020:	2200      	movs	r2, #0
 8004022:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7fe fccd 	bl	80029c4 <HAL_DMA_GetError>
 800402a:	4603      	mov	r3, r0
 800402c:	2b02      	cmp	r3, #2
 800402e:	d01b      	beq.n	8004068 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800403e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2220      	movs	r2, #32
 800404a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405a:	f043 0210 	orr.w	r2, r3, #16
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f7ff fd61 	bl	8003b2a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004068:	bf00      	nop
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	4613      	mov	r3, r2
 800407e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004080:	e048      	b.n	8004114 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004088:	d044      	beq.n	8004114 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408a:	f7fe f8ad 	bl	80021e8 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d302      	bcc.n	80040a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d139      	bne.n	8004114 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	0c1b      	lsrs	r3, r3, #16
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d10d      	bne.n	80040c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	43da      	mvns	r2, r3
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	4013      	ands	r3, r2
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	bf0c      	ite	eq
 80040bc:	2301      	moveq	r3, #1
 80040be:	2300      	movne	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	461a      	mov	r2, r3
 80040c4:	e00c      	b.n	80040e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	43da      	mvns	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	4013      	ands	r3, r2
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bf0c      	ite	eq
 80040d8:	2301      	moveq	r3, #1
 80040da:	2300      	movne	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	461a      	mov	r2, r3
 80040e0:	79fb      	ldrb	r3, [r7, #7]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d116      	bne.n	8004114 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004100:	f043 0220 	orr.w	r2, r3, #32
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e023      	b.n	800415c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	0c1b      	lsrs	r3, r3, #16
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b01      	cmp	r3, #1
 800411c:	d10d      	bne.n	800413a <I2C_WaitOnFlagUntilTimeout+0xca>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	43da      	mvns	r2, r3
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	4013      	ands	r3, r2
 800412a:	b29b      	uxth	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	bf0c      	ite	eq
 8004130:	2301      	moveq	r3, #1
 8004132:	2300      	movne	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	461a      	mov	r2, r3
 8004138:	e00c      	b.n	8004154 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	43da      	mvns	r2, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	4013      	ands	r3, r2
 8004146:	b29b      	uxth	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	bf0c      	ite	eq
 800414c:	2301      	moveq	r3, #1
 800414e:	2300      	movne	r3, #0
 8004150:	b2db      	uxtb	r3, r3
 8004152:	461a      	mov	r2, r3
 8004154:	79fb      	ldrb	r3, [r7, #7]
 8004156:	429a      	cmp	r2, r3
 8004158:	d093      	beq.n	8004082 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004172:	e071      	b.n	8004258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800417e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004182:	d123      	bne.n	80041cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004192:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800419c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b8:	f043 0204 	orr.w	r2, r3, #4
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e067      	b.n	800429c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d2:	d041      	beq.n	8004258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d4:	f7fe f808 	bl	80021e8 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d302      	bcc.n	80041ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d136      	bne.n	8004258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	0c1b      	lsrs	r3, r3, #16
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d10c      	bne.n	800420e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	43da      	mvns	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	4013      	ands	r3, r2
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	bf14      	ite	ne
 8004206:	2301      	movne	r3, #1
 8004208:	2300      	moveq	r3, #0
 800420a:	b2db      	uxtb	r3, r3
 800420c:	e00b      	b.n	8004226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	43da      	mvns	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	4013      	ands	r3, r2
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	bf14      	ite	ne
 8004220:	2301      	movne	r3, #1
 8004222:	2300      	moveq	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d016      	beq.n	8004258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004244:	f043 0220 	orr.w	r2, r3, #32
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e021      	b.n	800429c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	0c1b      	lsrs	r3, r3, #16
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b01      	cmp	r3, #1
 8004260:	d10c      	bne.n	800427c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	43da      	mvns	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	4013      	ands	r3, r2
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	bf14      	ite	ne
 8004274:	2301      	movne	r3, #1
 8004276:	2300      	moveq	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	e00b      	b.n	8004294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	43da      	mvns	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4013      	ands	r3, r2
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	bf14      	ite	ne
 800428e:	2301      	movne	r3, #1
 8004290:	2300      	moveq	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	f47f af6d 	bne.w	8004174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042b0:	e034      	b.n	800431c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 f8e3 	bl	800447e <I2C_IsAcknowledgeFailed>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e034      	b.n	800432c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c8:	d028      	beq.n	800431c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ca:	f7fd ff8d 	bl	80021e8 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d302      	bcc.n	80042e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d11d      	bne.n	800431c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ea:	2b80      	cmp	r3, #128	@ 0x80
 80042ec:	d016      	beq.n	800431c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004308:	f043 0220 	orr.w	r2, r3, #32
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e007      	b.n	800432c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004326:	2b80      	cmp	r3, #128	@ 0x80
 8004328:	d1c3      	bne.n	80042b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004340:	e034      	b.n	80043ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f89b 	bl	800447e <I2C_IsAcknowledgeFailed>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e034      	b.n	80043bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004358:	d028      	beq.n	80043ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800435a:	f7fd ff45 	bl	80021e8 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	429a      	cmp	r2, r3
 8004368:	d302      	bcc.n	8004370 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d11d      	bne.n	80043ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b04      	cmp	r3, #4
 800437c:	d016      	beq.n	80043ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004398:	f043 0220 	orr.w	r2, r3, #32
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e007      	b.n	80043bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d1c3      	bne.n	8004342 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043d0:	e049      	b.n	8004466 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	f003 0310 	and.w	r3, r3, #16
 80043dc:	2b10      	cmp	r3, #16
 80043de:	d119      	bne.n	8004414 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f06f 0210 	mvn.w	r2, #16
 80043e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e030      	b.n	8004476 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004414:	f7fd fee8 	bl	80021e8 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	429a      	cmp	r2, r3
 8004422:	d302      	bcc.n	800442a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d11d      	bne.n	8004466 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004434:	2b40      	cmp	r3, #64	@ 0x40
 8004436:	d016      	beq.n	8004466 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	f043 0220 	orr.w	r2, r3, #32
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e007      	b.n	8004476 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004470:	2b40      	cmp	r3, #64	@ 0x40
 8004472:	d1ae      	bne.n	80043d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004490:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004494:	d11b      	bne.n	80044ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800449e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ba:	f043 0204 	orr.w	r2, r3, #4
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr

080044da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b086      	sub	sp, #24
 80044de:	af02      	add	r7, sp, #8
 80044e0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e101      	b.n	80046f0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d106      	bne.n	800450c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f006 fa22 	bl	800a950 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2203      	movs	r2, #3
 8004510:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800451a:	d102      	bne.n	8004522 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f002 fe46 	bl	80071b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6818      	ldr	r0, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	7c1a      	ldrb	r2, [r3, #16]
 8004534:	f88d 2000 	strb.w	r2, [sp]
 8004538:	3304      	adds	r3, #4
 800453a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800453c:	f002 fd26 	bl	8006f8c <USB_CoreInit>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2202      	movs	r2, #2
 800454a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e0ce      	b.n	80046f0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2100      	movs	r1, #0
 8004558:	4618      	mov	r0, r3
 800455a:	f002 fe3d 	bl	80071d8 <USB_SetCurrentMode>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0bf      	b.n	80046f0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004570:	2300      	movs	r3, #0
 8004572:	73fb      	strb	r3, [r7, #15]
 8004574:	e04a      	b.n	800460c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004576:	7bfa      	ldrb	r2, [r7, #15]
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	4613      	mov	r3, r2
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	4413      	add	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	440b      	add	r3, r1
 8004584:	3315      	adds	r3, #21
 8004586:	2201      	movs	r2, #1
 8004588:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800458a:	7bfa      	ldrb	r2, [r7, #15]
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	4613      	mov	r3, r2
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	4413      	add	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	440b      	add	r3, r1
 8004598:	3314      	adds	r3, #20
 800459a:	7bfa      	ldrb	r2, [r7, #15]
 800459c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800459e:	7bfa      	ldrb	r2, [r7, #15]
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	b298      	uxth	r0, r3
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	4413      	add	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	332e      	adds	r3, #46	@ 0x2e
 80045b2:	4602      	mov	r2, r0
 80045b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045b6:	7bfa      	ldrb	r2, [r7, #15]
 80045b8:	6879      	ldr	r1, [r7, #4]
 80045ba:	4613      	mov	r3, r2
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	4413      	add	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	440b      	add	r3, r1
 80045c4:	3318      	adds	r3, #24
 80045c6:	2200      	movs	r2, #0
 80045c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045ca:	7bfa      	ldrb	r2, [r7, #15]
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	4413      	add	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	331c      	adds	r3, #28
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045de:	7bfa      	ldrb	r2, [r7, #15]
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	4413      	add	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	3320      	adds	r3, #32
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045f2:	7bfa      	ldrb	r2, [r7, #15]
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	4413      	add	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	3324      	adds	r3, #36	@ 0x24
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	3301      	adds	r3, #1
 800460a:	73fb      	strb	r3, [r7, #15]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	791b      	ldrb	r3, [r3, #4]
 8004610:	7bfa      	ldrb	r2, [r7, #15]
 8004612:	429a      	cmp	r2, r3
 8004614:	d3af      	bcc.n	8004576 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004616:	2300      	movs	r3, #0
 8004618:	73fb      	strb	r3, [r7, #15]
 800461a:	e044      	b.n	80046a6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800461c:	7bfa      	ldrb	r2, [r7, #15]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800462e:	2200      	movs	r2, #0
 8004630:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004632:	7bfa      	ldrb	r2, [r7, #15]
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	4413      	add	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	440b      	add	r3, r1
 8004640:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004644:	7bfa      	ldrb	r2, [r7, #15]
 8004646:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004648:	7bfa      	ldrb	r2, [r7, #15]
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800465a:	2200      	movs	r2, #0
 800465c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800465e:	7bfa      	ldrb	r2, [r7, #15]
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	4613      	mov	r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	4413      	add	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	440b      	add	r3, r1
 800466c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004674:	7bfa      	ldrb	r2, [r7, #15]
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004686:	2200      	movs	r2, #0
 8004688:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800468a:	7bfa      	ldrb	r2, [r7, #15]
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	4613      	mov	r3, r2
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	4413      	add	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	440b      	add	r3, r1
 8004698:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	3301      	adds	r3, #1
 80046a4:	73fb      	strb	r3, [r7, #15]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	791b      	ldrb	r3, [r3, #4]
 80046aa:	7bfa      	ldrb	r2, [r7, #15]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d3b5      	bcc.n	800461c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6818      	ldr	r0, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	7c1a      	ldrb	r2, [r3, #16]
 80046b8:	f88d 2000 	strb.w	r2, [sp]
 80046bc:	3304      	adds	r3, #4
 80046be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046c0:	f002 fdd6 	bl	8007270 <USB_DevInit>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d005      	beq.n	80046d6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2202      	movs	r2, #2
 80046ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e00c      	b.n	80046f0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f003 fe0d 	bl	8008308 <USB_DevDisconnect>

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_PCD_Start+0x1c>
 8004710:	2302      	movs	r3, #2
 8004712:	e022      	b.n	800475a <HAL_PCD_Start+0x62>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004724:	2b00      	cmp	r3, #0
 8004726:	d009      	beq.n	800473c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800472c:	2b01      	cmp	r3, #1
 800472e:	d105      	bne.n	800473c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004734:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4618      	mov	r0, r3
 8004742:	f002 fd29 	bl	8007198 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f003 fdbc 	bl	80082c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004762:	b590      	push	{r4, r7, lr}
 8004764:	b08d      	sub	sp, #52	@ 0x34
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f003 fe73 	bl	8008464 <USB_GetMode>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	f040 848c 	bne.w	800509e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f003 fddc 	bl	8008348 <USB_ReadInterrupts>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 8482 	beq.w	800509c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	0a1b      	lsrs	r3, r3, #8
 80047a2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f003 fdc9 	bl	8008348 <USB_ReadInterrupts>
 80047b6:	4603      	mov	r3, r0
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d107      	bne.n	80047d0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695a      	ldr	r2, [r3, #20]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f002 0202 	and.w	r2, r2, #2
 80047ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f003 fdb7 	bl	8008348 <USB_ReadInterrupts>
 80047da:	4603      	mov	r3, r0
 80047dc:	f003 0310 	and.w	r3, r3, #16
 80047e0:	2b10      	cmp	r3, #16
 80047e2:	d161      	bne.n	80048a8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699a      	ldr	r2, [r3, #24]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0210 	bic.w	r2, r2, #16
 80047f2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	f003 020f 	and.w	r2, r3, #15
 8004800:	4613      	mov	r3, r2
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	4413      	add	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	4413      	add	r3, r2
 8004810:	3304      	adds	r3, #4
 8004812:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	0c5b      	lsrs	r3, r3, #17
 8004818:	f003 030f 	and.w	r3, r3, #15
 800481c:	2b02      	cmp	r3, #2
 800481e:	d124      	bne.n	800486a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004826:	4013      	ands	r3, r2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d035      	beq.n	8004898 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	091b      	lsrs	r3, r3, #4
 8004834:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004836:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800483a:	b29b      	uxth	r3, r3
 800483c:	461a      	mov	r2, r3
 800483e:	6a38      	ldr	r0, [r7, #32]
 8004840:	f003 fbf4 	bl	800802c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	091b      	lsrs	r3, r3, #4
 800484c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004850:	441a      	add	r2, r3
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	091b      	lsrs	r3, r3, #4
 800485e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004862:	441a      	add	r2, r3
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	615a      	str	r2, [r3, #20]
 8004868:	e016      	b.n	8004898 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	0c5b      	lsrs	r3, r3, #17
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	2b06      	cmp	r3, #6
 8004874:	d110      	bne.n	8004898 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800487c:	2208      	movs	r2, #8
 800487e:	4619      	mov	r1, r3
 8004880:	6a38      	ldr	r0, [r7, #32]
 8004882:	f003 fbd3 	bl	800802c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	695a      	ldr	r2, [r3, #20]
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	091b      	lsrs	r3, r3, #4
 800488e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004892:	441a      	add	r2, r3
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699a      	ldr	r2, [r3, #24]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0210 	orr.w	r2, r2, #16
 80048a6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f003 fd4b 	bl	8008348 <USB_ReadInterrupts>
 80048b2:	4603      	mov	r3, r0
 80048b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048b8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80048bc:	f040 80a7 	bne.w	8004a0e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f003 fd4f 	bl	800836c <USB_ReadDevAllOutEpInterrupt>
 80048ce:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80048d0:	e099      	b.n	8004a06 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80048d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 808e 	beq.w	80049fa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	4611      	mov	r1, r2
 80048e8:	4618      	mov	r0, r3
 80048ea:	f003 fd71 	bl	80083d0 <USB_ReadDevOutEPInterrupt>
 80048ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00c      	beq.n	8004914 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80048fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004906:	461a      	mov	r2, r3
 8004908:	2301      	movs	r3, #1
 800490a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800490c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fea0 	bl	8005654 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00c      	beq.n	8004938 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800491e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800492a:	461a      	mov	r2, r3
 800492c:	2308      	movs	r3, #8
 800492e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004930:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 ff76 	bl	8005824 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f003 0310 	and.w	r3, r3, #16
 800493e:	2b00      	cmp	r3, #0
 8004940:	d008      	beq.n	8004954 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800494e:	461a      	mov	r2, r3
 8004950:	2310      	movs	r3, #16
 8004952:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d030      	beq.n	80049c0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004966:	2b80      	cmp	r3, #128	@ 0x80
 8004968:	d109      	bne.n	800497e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	69fa      	ldr	r2, [r7, #28]
 8004974:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004978:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800497c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800497e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004980:	4613      	mov	r3, r2
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	4413      	add	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	4413      	add	r3, r2
 8004990:	3304      	adds	r3, #4
 8004992:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	78db      	ldrb	r3, [r3, #3]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d108      	bne.n	80049ae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2200      	movs	r2, #0
 80049a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80049a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	4619      	mov	r1, r3
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f006 f8d7 	bl	800ab5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80049ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ba:	461a      	mov	r2, r3
 80049bc:	2302      	movs	r3, #2
 80049be:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d008      	beq.n	80049dc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049d6:	461a      	mov	r2, r3
 80049d8:	2320      	movs	r3, #32
 80049da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d009      	beq.n	80049fa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80049e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049f2:	461a      	mov	r2, r3
 80049f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80049f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80049fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fc:	3301      	adds	r3, #1
 80049fe:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a02:	085b      	lsrs	r3, r3, #1
 8004a04:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f47f af62 	bne.w	80048d2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f003 fc98 	bl	8008348 <USB_ReadInterrupts>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a22:	f040 80db 	bne.w	8004bdc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f003 fcb7 	bl	800839e <USB_ReadDevAllInEpInterrupt>
 8004a30:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004a36:	e0cd      	b.n	8004bd4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 80c2 	beq.w	8004bc8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f003 fcdb 	bl	800840a <USB_ReadDevInEPInterrupt>
 8004a54:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d057      	beq.n	8004b10 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a62:	f003 030f 	and.w	r3, r3, #15
 8004a66:	2201      	movs	r2, #1
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	43db      	mvns	r3, r3
 8004a7a:	69f9      	ldr	r1, [r7, #28]
 8004a7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a80:	4013      	ands	r3, r2
 8004a82:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a90:	461a      	mov	r2, r3
 8004a92:	2301      	movs	r3, #1
 8004a94:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	799b      	ldrb	r3, [r3, #6]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d132      	bne.n	8004b04 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	3320      	adds	r3, #32
 8004aae:	6819      	ldr	r1, [r3, #0]
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	4413      	add	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4403      	add	r3, r0
 8004abe:	331c      	adds	r3, #28
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4419      	add	r1, r3
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac8:	4613      	mov	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4403      	add	r3, r0
 8004ad2:	3320      	adds	r3, #32
 8004ad4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d113      	bne.n	8004b04 <HAL_PCD_IRQHandler+0x3a2>
 8004adc:	6879      	ldr	r1, [r7, #4]
 8004ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	4413      	add	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	440b      	add	r3, r1
 8004aea:	3324      	adds	r3, #36	@ 0x24
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d108      	bne.n	8004b04 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004afc:	461a      	mov	r2, r3
 8004afe:	2101      	movs	r1, #1
 8004b00:	f003 fce0 	bl	80084c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	4619      	mov	r1, r3
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f005 ffa1 	bl	800aa52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d008      	beq.n	8004b2c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b26:	461a      	mov	r2, r3
 8004b28:	2308      	movs	r3, #8
 8004b2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f003 0310 	and.w	r3, r3, #16
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d008      	beq.n	8004b48 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b42:	461a      	mov	r2, r3
 8004b44:	2310      	movs	r3, #16
 8004b46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d008      	beq.n	8004b64 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b5e:	461a      	mov	r2, r3
 8004b60:	2340      	movs	r3, #64	@ 0x40
 8004b62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d023      	beq.n	8004bb6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004b6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b70:	6a38      	ldr	r0, [r7, #32]
 8004b72:	f002 fce1 	bl	8007538 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b78:	4613      	mov	r3, r2
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	3310      	adds	r3, #16
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	4413      	add	r3, r2
 8004b86:	3304      	adds	r3, #4
 8004b88:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	78db      	ldrb	r3, [r3, #3]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d108      	bne.n	8004ba4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2200      	movs	r2, #0
 8004b96:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f005 ffee 	bl	800ab80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004bc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fcba 	bl	800553c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bca:	3301      	adds	r3, #1
 8004bcc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd0:	085b      	lsrs	r3, r3, #1
 8004bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f47f af2e 	bne.w	8004a38 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f003 fbb1 	bl	8008348 <USB_ReadInterrupts>
 8004be6:	4603      	mov	r3, r0
 8004be8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bf0:	d122      	bne.n	8004c38 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	69fa      	ldr	r2, [r7, #28]
 8004bfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c00:	f023 0301 	bic.w	r3, r3, #1
 8004c04:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d108      	bne.n	8004c22 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004c18:	2100      	movs	r1, #0
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fe9e 	bl	800595c <HAL_PCDEx_LPM_Callback>
 8004c20:	e002      	b.n	8004c28 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f005 ff8c 	bl	800ab40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695a      	ldr	r2, [r3, #20]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004c36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f003 fb83 	bl	8008348 <USB_ReadInterrupts>
 8004c42:	4603      	mov	r3, r0
 8004c44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c4c:	d112      	bne.n	8004c74 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d102      	bne.n	8004c64 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f005 ff48 	bl	800aaf4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695a      	ldr	r2, [r3, #20]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004c72:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f003 fb65 	bl	8008348 <USB_ReadInterrupts>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c88:	f040 80b7 	bne.w	8004dfa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	69fa      	ldr	r2, [r7, #28]
 8004c96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c9a:	f023 0301 	bic.w	r3, r3, #1
 8004c9e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2110      	movs	r1, #16
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f002 fc46 	bl	8007538 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cac:	2300      	movs	r3, #0
 8004cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cb0:	e046      	b.n	8004d40 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004cc4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cd6:	0151      	lsls	r1, r2, #5
 8004cd8:	69fa      	ldr	r2, [r7, #28]
 8004cda:	440a      	add	r2, r1
 8004cdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ce0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004ce4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004cf8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d0a:	0151      	lsls	r1, r2, #5
 8004d0c:	69fa      	ldr	r2, [r7, #28]
 8004d0e:	440a      	add	r2, r1
 8004d10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d14:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d18:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d2a:	0151      	lsls	r1, r2, #5
 8004d2c:	69fa      	ldr	r2, [r7, #28]
 8004d2e:	440a      	add	r2, r1
 8004d30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d34:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004d38:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	791b      	ldrb	r3, [r3, #4]
 8004d44:	461a      	mov	r2, r3
 8004d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d3b2      	bcc.n	8004cb2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	69fa      	ldr	r2, [r7, #28]
 8004d56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d5a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004d5e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	7bdb      	ldrb	r3, [r3, #15]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d016      	beq.n	8004d96 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d78:	f043 030b 	orr.w	r3, r3, #11
 8004d7c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d88:	69fa      	ldr	r2, [r7, #28]
 8004d8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d8e:	f043 030b 	orr.w	r3, r3, #11
 8004d92:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d94:	e015      	b.n	8004dc2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	69fa      	ldr	r2, [r7, #28]
 8004da0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004da4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004da8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004dac:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	69fa      	ldr	r2, [r7, #28]
 8004db8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dbc:	f043 030b 	orr.w	r3, r3, #11
 8004dc0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69fa      	ldr	r2, [r7, #28]
 8004dcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dd0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004dd4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6818      	ldr	r0, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004de4:	461a      	mov	r2, r3
 8004de6:	f003 fb6d 	bl	80084c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695a      	ldr	r2, [r3, #20]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004df8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f003 faa2 	bl	8008348 <USB_ReadInterrupts>
 8004e04:	4603      	mov	r3, r0
 8004e06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e0e:	d123      	bne.n	8004e58 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f003 fb32 	bl	800847e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f002 fc00 	bl	8007624 <USB_GetDevSpeed>
 8004e24:	4603      	mov	r3, r0
 8004e26:	461a      	mov	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681c      	ldr	r4, [r3, #0]
 8004e30:	f001 fa0a 	bl	8006248 <HAL_RCC_GetHCLKFreq>
 8004e34:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	f002 f909 	bl	8007054 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f005 fe2d 	bl	800aaa2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695a      	ldr	r2, [r3, #20]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004e56:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f003 fa73 	bl	8008348 <USB_ReadInterrupts>
 8004e62:	4603      	mov	r3, r0
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d10a      	bne.n	8004e82 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f005 fe0a 	bl	800aa86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	695a      	ldr	r2, [r3, #20]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f002 0208 	and.w	r2, r2, #8
 8004e80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f003 fa5e 	bl	8008348 <USB_ReadInterrupts>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e92:	2b80      	cmp	r3, #128	@ 0x80
 8004e94:	d123      	bne.n	8004ede <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ea6:	e014      	b.n	8004ed2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004ea8:	6879      	ldr	r1, [r7, #4]
 8004eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eac:	4613      	mov	r3, r2
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d105      	bne.n	8004ecc <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fb07 	bl	80054da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ece:	3301      	adds	r3, #1
 8004ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	791b      	ldrb	r3, [r3, #4]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d3e4      	bcc.n	8004ea8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f003 fa30 	bl	8008348 <USB_ReadInterrupts>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004eee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ef2:	d13c      	bne.n	8004f6e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ef8:	e02b      	b.n	8004f52 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f0e:	4613      	mov	r3, r2
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	4413      	add	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	440b      	add	r3, r1
 8004f18:	3318      	adds	r3, #24
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d115      	bne.n	8004f4c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004f20:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	da12      	bge.n	8004f4c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	4413      	add	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	3317      	adds	r3, #23
 8004f36:	2201      	movs	r2, #1
 8004f38:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	4619      	mov	r1, r3
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fac7 	bl	80054da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4e:	3301      	adds	r3, #1
 8004f50:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	791b      	ldrb	r3, [r3, #4]
 8004f56:	461a      	mov	r2, r3
 8004f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d3cd      	bcc.n	8004efa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695a      	ldr	r2, [r3, #20]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004f6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f003 f9e8 	bl	8008348 <USB_ReadInterrupts>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f82:	d156      	bne.n	8005032 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f84:	2301      	movs	r3, #1
 8004f86:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f88:	e045      	b.n	8005016 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	4413      	add	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d12e      	bne.n	8005010 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004fb2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	da2b      	bge.n	8005010 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004fc4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d121      	bne.n	8005010 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004fde:	2201      	movs	r2, #1
 8004fe0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10a      	bne.n	8005010 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	69fa      	ldr	r2, [r7, #28]
 8005004:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005008:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800500c:	6053      	str	r3, [r2, #4]
            break;
 800500e:	e008      	b.n	8005022 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005012:	3301      	adds	r3, #1
 8005014:	627b      	str	r3, [r7, #36]	@ 0x24
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	791b      	ldrb	r3, [r3, #4]
 800501a:	461a      	mov	r2, r3
 800501c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501e:	4293      	cmp	r3, r2
 8005020:	d3b3      	bcc.n	8004f8a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695a      	ldr	r2, [r3, #20]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005030:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4618      	mov	r0, r3
 8005038:	f003 f986 	bl	8008348 <USB_ReadInterrupts>
 800503c:	4603      	mov	r3, r0
 800503e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005046:	d10a      	bne.n	800505e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f005 fdab 	bl	800aba4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	695a      	ldr	r2, [r3, #20]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800505c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f003 f970 	bl	8008348 <USB_ReadInterrupts>
 8005068:	4603      	mov	r3, r0
 800506a:	f003 0304 	and.w	r3, r3, #4
 800506e:	2b04      	cmp	r3, #4
 8005070:	d115      	bne.n	800509e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f005 fd9b 	bl	800abc0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6859      	ldr	r1, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	430a      	orrs	r2, r1
 8005098:	605a      	str	r2, [r3, #4]
 800509a:	e000      	b.n	800509e <HAL_PCD_IRQHandler+0x93c>
      return;
 800509c:	bf00      	nop
    }
  }
}
 800509e:	3734      	adds	r7, #52	@ 0x34
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd90      	pop	{r4, r7, pc}

080050a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	460b      	mov	r3, r1
 80050ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d101      	bne.n	80050be <HAL_PCD_SetAddress+0x1a>
 80050ba:	2302      	movs	r3, #2
 80050bc:	e012      	b.n	80050e4 <HAL_PCD_SetAddress+0x40>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	78fa      	ldrb	r2, [r7, #3]
 80050ca:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	78fa      	ldrb	r2, [r7, #3]
 80050d2:	4611      	mov	r1, r2
 80050d4:	4618      	mov	r0, r3
 80050d6:	f003 f8d2 	bl	800827e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	4608      	mov	r0, r1
 80050f6:	4611      	mov	r1, r2
 80050f8:	461a      	mov	r2, r3
 80050fa:	4603      	mov	r3, r0
 80050fc:	70fb      	strb	r3, [r7, #3]
 80050fe:	460b      	mov	r3, r1
 8005100:	803b      	strh	r3, [r7, #0]
 8005102:	4613      	mov	r3, r2
 8005104:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800510a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800510e:	2b00      	cmp	r3, #0
 8005110:	da0f      	bge.n	8005132 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005112:	78fb      	ldrb	r3, [r7, #3]
 8005114:	f003 020f 	and.w	r2, r3, #15
 8005118:	4613      	mov	r3, r2
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	3310      	adds	r3, #16
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	4413      	add	r3, r2
 8005126:	3304      	adds	r3, #4
 8005128:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2201      	movs	r2, #1
 800512e:	705a      	strb	r2, [r3, #1]
 8005130:	e00f      	b.n	8005152 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005132:	78fb      	ldrb	r3, [r7, #3]
 8005134:	f003 020f 	and.w	r2, r3, #15
 8005138:	4613      	mov	r3, r2
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	4413      	add	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	4413      	add	r3, r2
 8005148:	3304      	adds	r3, #4
 800514a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005152:	78fb      	ldrb	r3, [r7, #3]
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	b2da      	uxtb	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800515e:	883a      	ldrh	r2, [r7, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	78ba      	ldrb	r2, [r7, #2]
 8005168:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	785b      	ldrb	r3, [r3, #1]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d004      	beq.n	800517c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800517c:	78bb      	ldrb	r3, [r7, #2]
 800517e:	2b02      	cmp	r3, #2
 8005180:	d102      	bne.n	8005188 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800518e:	2b01      	cmp	r3, #1
 8005190:	d101      	bne.n	8005196 <HAL_PCD_EP_Open+0xaa>
 8005192:	2302      	movs	r3, #2
 8005194:	e00e      	b.n	80051b4 <HAL_PCD_EP_Open+0xc8>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68f9      	ldr	r1, [r7, #12]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f002 fa61 	bl	800766c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80051b2:	7afb      	ldrb	r3, [r7, #11]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80051c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	da0f      	bge.n	80051f0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	f003 020f 	and.w	r2, r3, #15
 80051d6:	4613      	mov	r3, r2
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	4413      	add	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	3310      	adds	r3, #16
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	4413      	add	r3, r2
 80051e4:	3304      	adds	r3, #4
 80051e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2201      	movs	r2, #1
 80051ec:	705a      	strb	r2, [r3, #1]
 80051ee:	e00f      	b.n	8005210 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051f0:	78fb      	ldrb	r3, [r7, #3]
 80051f2:	f003 020f 	and.w	r2, r3, #15
 80051f6:	4613      	mov	r3, r2
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	4413      	add	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	4413      	add	r3, r2
 8005206:	3304      	adds	r3, #4
 8005208:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005210:	78fb      	ldrb	r3, [r7, #3]
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	b2da      	uxtb	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005222:	2b01      	cmp	r3, #1
 8005224:	d101      	bne.n	800522a <HAL_PCD_EP_Close+0x6e>
 8005226:	2302      	movs	r3, #2
 8005228:	e00e      	b.n	8005248 <HAL_PCD_EP_Close+0x8c>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68f9      	ldr	r1, [r7, #12]
 8005238:	4618      	mov	r0, r3
 800523a:	f002 fa9d 	bl	8007778 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	607a      	str	r2, [r7, #4]
 800525a:	603b      	str	r3, [r7, #0]
 800525c:	460b      	mov	r3, r1
 800525e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005260:	7afb      	ldrb	r3, [r7, #11]
 8005262:	f003 020f 	and.w	r2, r3, #15
 8005266:	4613      	mov	r3, r2
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	4413      	add	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4413      	add	r3, r2
 8005276:	3304      	adds	r3, #4
 8005278:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2200      	movs	r2, #0
 800528a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	2200      	movs	r2, #0
 8005290:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005292:	7afb      	ldrb	r3, [r7, #11]
 8005294:	f003 030f 	and.w	r3, r3, #15
 8005298:	b2da      	uxtb	r2, r3
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	799b      	ldrb	r3, [r3, #6]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d102      	bne.n	80052ac <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6818      	ldr	r0, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	799b      	ldrb	r3, [r3, #6]
 80052b4:	461a      	mov	r2, r3
 80052b6:	6979      	ldr	r1, [r7, #20]
 80052b8:	f002 fb3a 	bl	8007930 <USB_EPStartXfer>

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3718      	adds	r7, #24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	460b      	mov	r3, r1
 80052d0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80052d2:	78fb      	ldrb	r3, [r7, #3]
 80052d4:	f003 020f 	and.w	r2, r3, #15
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	4613      	mov	r3, r2
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	4413      	add	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	440b      	add	r3, r1
 80052e4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80052e8:	681b      	ldr	r3, [r3, #0]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr

080052f4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	607a      	str	r2, [r7, #4]
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	460b      	mov	r3, r1
 8005302:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005304:	7afb      	ldrb	r3, [r7, #11]
 8005306:	f003 020f 	and.w	r2, r3, #15
 800530a:	4613      	mov	r3, r2
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	3310      	adds	r3, #16
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	4413      	add	r3, r2
 8005318:	3304      	adds	r3, #4
 800531a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	2200      	movs	r2, #0
 800532c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2201      	movs	r2, #1
 8005332:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005334:	7afb      	ldrb	r3, [r7, #11]
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	b2da      	uxtb	r2, r3
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	799b      	ldrb	r3, [r3, #6]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d102      	bne.n	800534e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	799b      	ldrb	r3, [r3, #6]
 8005356:	461a      	mov	r2, r3
 8005358:	6979      	ldr	r1, [r7, #20]
 800535a:	f002 fae9 	bl	8007930 <USB_EPStartXfer>

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3718      	adds	r7, #24
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	460b      	mov	r3, r1
 8005372:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	7912      	ldrb	r2, [r2, #4]
 800537e:	4293      	cmp	r3, r2
 8005380:	d901      	bls.n	8005386 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e04f      	b.n	8005426 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005386:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800538a:	2b00      	cmp	r3, #0
 800538c:	da0f      	bge.n	80053ae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800538e:	78fb      	ldrb	r3, [r7, #3]
 8005390:	f003 020f 	and.w	r2, r3, #15
 8005394:	4613      	mov	r3, r2
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	3310      	adds	r3, #16
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	4413      	add	r3, r2
 80053a2:	3304      	adds	r3, #4
 80053a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2201      	movs	r2, #1
 80053aa:	705a      	strb	r2, [r3, #1]
 80053ac:	e00d      	b.n	80053ca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80053ae:	78fa      	ldrb	r2, [r7, #3]
 80053b0:	4613      	mov	r3, r2
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	4413      	add	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	4413      	add	r3, r2
 80053c0:	3304      	adds	r3, #4
 80053c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053d0:	78fb      	ldrb	r3, [r7, #3]
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d101      	bne.n	80053ea <HAL_PCD_EP_SetStall+0x82>
 80053e6:	2302      	movs	r3, #2
 80053e8:	e01d      	b.n	8005426 <HAL_PCD_EP_SetStall+0xbe>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68f9      	ldr	r1, [r7, #12]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f002 fe6e 	bl	80080da <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053fe:	78fb      	ldrb	r3, [r7, #3]
 8005400:	f003 030f 	and.w	r3, r3, #15
 8005404:	2b00      	cmp	r3, #0
 8005406:	d109      	bne.n	800541c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6818      	ldr	r0, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	7999      	ldrb	r1, [r3, #6]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005416:	461a      	mov	r2, r3
 8005418:	f003 f854 	bl	80084c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b084      	sub	sp, #16
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	460b      	mov	r3, r1
 8005438:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800543a:	78fb      	ldrb	r3, [r7, #3]
 800543c:	f003 030f 	and.w	r3, r3, #15
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	7912      	ldrb	r2, [r2, #4]
 8005444:	4293      	cmp	r3, r2
 8005446:	d901      	bls.n	800544c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e042      	b.n	80054d2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800544c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005450:	2b00      	cmp	r3, #0
 8005452:	da0f      	bge.n	8005474 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005454:	78fb      	ldrb	r3, [r7, #3]
 8005456:	f003 020f 	and.w	r2, r3, #15
 800545a:	4613      	mov	r3, r2
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	4413      	add	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	3310      	adds	r3, #16
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	4413      	add	r3, r2
 8005468:	3304      	adds	r3, #4
 800546a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	705a      	strb	r2, [r3, #1]
 8005472:	e00f      	b.n	8005494 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	f003 020f 	and.w	r2, r3, #15
 800547a:	4613      	mov	r3, r2
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	4413      	add	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	4413      	add	r3, r2
 800548a:	3304      	adds	r3, #4
 800548c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800549a:	78fb      	ldrb	r3, [r7, #3]
 800549c:	f003 030f 	and.w	r3, r3, #15
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_PCD_EP_ClrStall+0x86>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e00e      	b.n	80054d2 <HAL_PCD_EP_ClrStall+0xa4>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68f9      	ldr	r1, [r7, #12]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f002 fe76 	bl	80081b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	460b      	mov	r3, r1
 80054e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80054e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	da0c      	bge.n	8005508 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054ee:	78fb      	ldrb	r3, [r7, #3]
 80054f0:	f003 020f 	and.w	r2, r3, #15
 80054f4:	4613      	mov	r3, r2
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	4413      	add	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	3310      	adds	r3, #16
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	4413      	add	r3, r2
 8005502:	3304      	adds	r3, #4
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	e00c      	b.n	8005522 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005508:	78fb      	ldrb	r3, [r7, #3]
 800550a:	f003 020f 	and.w	r2, r3, #15
 800550e:	4613      	mov	r3, r2
 8005510:	00db      	lsls	r3, r3, #3
 8005512:	4413      	add	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	4413      	add	r3, r2
 800551e:	3304      	adds	r3, #4
 8005520:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68f9      	ldr	r1, [r7, #12]
 8005528:	4618      	mov	r0, r3
 800552a:	f002 fc99 	bl	8007e60 <USB_EPStopXfer>
 800552e:	4603      	mov	r3, r0
 8005530:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005532:	7afb      	ldrb	r3, [r7, #11]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08a      	sub	sp, #40	@ 0x28
 8005540:	af02      	add	r7, sp, #8
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	4613      	mov	r3, r2
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	4413      	add	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	3310      	adds	r3, #16
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	4413      	add	r3, r2
 8005560:	3304      	adds	r3, #4
 8005562:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	695a      	ldr	r2, [r3, #20]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	429a      	cmp	r2, r3
 800556e:	d901      	bls.n	8005574 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e06b      	b.n	800564c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	69fa      	ldr	r2, [r7, #28]
 8005586:	429a      	cmp	r2, r3
 8005588:	d902      	bls.n	8005590 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	3303      	adds	r3, #3
 8005594:	089b      	lsrs	r3, r3, #2
 8005596:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005598:	e02a      	b.n	80055f0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	691a      	ldr	r2, [r3, #16]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	69fa      	ldr	r2, [r7, #28]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d902      	bls.n	80055b6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	3303      	adds	r3, #3
 80055ba:	089b      	lsrs	r3, r3, #2
 80055bc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	68d9      	ldr	r1, [r3, #12]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	4603      	mov	r3, r0
 80055d2:	6978      	ldr	r0, [r7, #20]
 80055d4:	f002 fced 	bl	8007fb2 <USB_WritePacket>

    ep->xfer_buff  += len;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	68da      	ldr	r2, [r3, #12]
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	441a      	add	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	695a      	ldr	r2, [r3, #20]
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	441a      	add	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	015a      	lsls	r2, r3, #5
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	429a      	cmp	r2, r3
 8005604:	d809      	bhi.n	800561a <PCD_WriteEmptyTxFifo+0xde>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	695a      	ldr	r2, [r3, #20]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800560e:	429a      	cmp	r2, r3
 8005610:	d203      	bcs.n	800561a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1bf      	bne.n	800559a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	691a      	ldr	r2, [r3, #16]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	429a      	cmp	r2, r3
 8005624:	d811      	bhi.n	800564a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	2201      	movs	r2, #1
 800562e:	fa02 f303 	lsl.w	r3, r2, r3
 8005632:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800563a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	43db      	mvns	r3, r3
 8005640:	6939      	ldr	r1, [r7, #16]
 8005642:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005646:	4013      	ands	r3, r2
 8005648:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3720      	adds	r7, #32
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	333c      	adds	r3, #60	@ 0x3c
 800566c:	3304      	adds	r3, #4
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	799b      	ldrb	r3, [r3, #6]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d17b      	bne.n	8005782 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f003 0308 	and.w	r3, r3, #8
 8005690:	2b00      	cmp	r3, #0
 8005692:	d015      	beq.n	80056c0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	4a61      	ldr	r2, [pc, #388]	@ (800581c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	f240 80b9 	bls.w	8005810 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 80b3 	beq.w	8005810 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b6:	461a      	mov	r2, r3
 80056b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056bc:	6093      	str	r3, [r2, #8]
 80056be:	e0a7      	b.n	8005810 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d009      	beq.n	80056de <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d6:	461a      	mov	r2, r3
 80056d8:	2320      	movs	r3, #32
 80056da:	6093      	str	r3, [r2, #8]
 80056dc:	e098      	b.n	8005810 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f040 8093 	bne.w	8005810 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	4a4b      	ldr	r2, [pc, #300]	@ (800581c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d90f      	bls.n	8005712 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00a      	beq.n	8005712 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005708:	461a      	mov	r2, r3
 800570a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800570e:	6093      	str	r3, [r2, #8]
 8005710:	e07e      	b.n	8005810 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	4613      	mov	r3, r2
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	4413      	add	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	4413      	add	r3, r2
 8005724:	3304      	adds	r3, #4
 8005726:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a1a      	ldr	r2, [r3, #32]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	0159      	lsls	r1, r3, #5
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	440b      	add	r3, r1
 8005734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800573e:	1ad2      	subs	r2, r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d114      	bne.n	8005774 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d109      	bne.n	8005766 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800575c:	461a      	mov	r2, r3
 800575e:	2101      	movs	r1, #1
 8005760:	f002 feb0 	bl	80084c4 <USB_EP0_OutStart>
 8005764:	e006      	b.n	8005774 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	441a      	add	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	b2db      	uxtb	r3, r3
 8005778:	4619      	mov	r1, r3
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f005 f94e 	bl	800aa1c <HAL_PCD_DataOutStageCallback>
 8005780:	e046      	b.n	8005810 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	4a26      	ldr	r2, [pc, #152]	@ (8005820 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d124      	bne.n	80057d4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00a      	beq.n	80057aa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a0:	461a      	mov	r2, r3
 80057a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057a6:	6093      	str	r3, [r2, #8]
 80057a8:	e032      	b.n	8005810 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f003 0320 	and.w	r3, r3, #32
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d008      	beq.n	80057c6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c0:	461a      	mov	r2, r3
 80057c2:	2320      	movs	r3, #32
 80057c4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	4619      	mov	r1, r3
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f005 f925 	bl	800aa1c <HAL_PCD_DataOutStageCallback>
 80057d2:	e01d      	b.n	8005810 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d114      	bne.n	8005804 <PCD_EP_OutXfrComplete_int+0x1b0>
 80057da:	6879      	ldr	r1, [r7, #4]
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	4613      	mov	r3, r2
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	4413      	add	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	440b      	add	r3, r1
 80057e8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d108      	bne.n	8005804 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6818      	ldr	r0, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80057fc:	461a      	mov	r2, r3
 80057fe:	2100      	movs	r1, #0
 8005800:	f002 fe60 	bl	80084c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	b2db      	uxtb	r3, r3
 8005808:	4619      	mov	r1, r3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f005 f906 	bl	800aa1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3720      	adds	r7, #32
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	4f54300a 	.word	0x4f54300a
 8005820:	4f54310a 	.word	0x4f54310a

08005824 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	333c      	adds	r3, #60	@ 0x3c
 800583c:	3304      	adds	r3, #4
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	4413      	add	r3, r2
 800584a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4a15      	ldr	r2, [pc, #84]	@ (80058ac <PCD_EP_OutSetupPacket_int+0x88>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d90e      	bls.n	8005878 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005860:	2b00      	cmp	r3, #0
 8005862:	d009      	beq.n	8005878 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005870:	461a      	mov	r2, r3
 8005872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005876:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f005 f8bd 	bl	800a9f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4a0a      	ldr	r2, [pc, #40]	@ (80058ac <PCD_EP_OutSetupPacket_int+0x88>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d90c      	bls.n	80058a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	799b      	ldrb	r3, [r3, #6]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d108      	bne.n	80058a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6818      	ldr	r0, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005898:	461a      	mov	r2, r3
 800589a:	2101      	movs	r1, #1
 800589c:	f002 fe12 	bl	80084c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3718      	adds	r7, #24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	4f54300a 	.word	0x4f54300a

080058b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	460b      	mov	r3, r1
 80058ba:	70fb      	strb	r3, [r7, #3]
 80058bc:	4613      	mov	r3, r2
 80058be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80058c8:	78fb      	ldrb	r3, [r7, #3]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d107      	bne.n	80058de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80058ce:	883b      	ldrh	r3, [r7, #0]
 80058d0:	0419      	lsls	r1, r3, #16
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	430a      	orrs	r2, r1
 80058da:	629a      	str	r2, [r3, #40]	@ 0x28
 80058dc:	e028      	b.n	8005930 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e4:	0c1b      	lsrs	r3, r3, #16
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	4413      	add	r3, r2
 80058ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80058ec:	2300      	movs	r3, #0
 80058ee:	73fb      	strb	r3, [r7, #15]
 80058f0:	e00d      	b.n	800590e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
 80058f8:	3340      	adds	r3, #64	@ 0x40
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	0c1b      	lsrs	r3, r3, #16
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	4413      	add	r3, r2
 8005906:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	3301      	adds	r3, #1
 800590c:	73fb      	strb	r3, [r7, #15]
 800590e:	7bfa      	ldrb	r2, [r7, #15]
 8005910:	78fb      	ldrb	r3, [r7, #3]
 8005912:	3b01      	subs	r3, #1
 8005914:	429a      	cmp	r2, r3
 8005916:	d3ec      	bcc.n	80058f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005918:	883b      	ldrh	r3, [r7, #0]
 800591a:	0418      	lsls	r0, r3, #16
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6819      	ldr	r1, [r3, #0]
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	3b01      	subs	r3, #1
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	4302      	orrs	r2, r0
 8005928:	3340      	adds	r3, #64	@ 0x40
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	440b      	add	r3, r1
 800592e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	bc80      	pop	{r7}
 800593a:	4770      	bx	lr

0800593c <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	460b      	mov	r3, r1
 8005946:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	887a      	ldrh	r2, [r7, #2]
 800594e:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	bc80      	pop	{r7}
 800595a:	4770      	bx	lr

0800595c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	bc80      	pop	{r7}
 8005970:	4770      	bx	lr
	...

08005974 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e267      	b.n	8005e56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	d075      	beq.n	8005a7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005992:	4b88      	ldr	r3, [pc, #544]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 030c 	and.w	r3, r3, #12
 800599a:	2b04      	cmp	r3, #4
 800599c:	d00c      	beq.n	80059b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800599e:	4b85      	ldr	r3, [pc, #532]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059a6:	2b08      	cmp	r3, #8
 80059a8:	d112      	bne.n	80059d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059aa:	4b82      	ldr	r3, [pc, #520]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059b6:	d10b      	bne.n	80059d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059b8:	4b7e      	ldr	r3, [pc, #504]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d05b      	beq.n	8005a7c <HAL_RCC_OscConfig+0x108>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d157      	bne.n	8005a7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e242      	b.n	8005e56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059d8:	d106      	bne.n	80059e8 <HAL_RCC_OscConfig+0x74>
 80059da:	4b76      	ldr	r3, [pc, #472]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a75      	ldr	r2, [pc, #468]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 80059e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059e4:	6013      	str	r3, [r2, #0]
 80059e6:	e01d      	b.n	8005a24 <HAL_RCC_OscConfig+0xb0>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059f0:	d10c      	bne.n	8005a0c <HAL_RCC_OscConfig+0x98>
 80059f2:	4b70      	ldr	r3, [pc, #448]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a6f      	ldr	r2, [pc, #444]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 80059f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	4b6d      	ldr	r3, [pc, #436]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a6c      	ldr	r2, [pc, #432]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 8005a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a08:	6013      	str	r3, [r2, #0]
 8005a0a:	e00b      	b.n	8005a24 <HAL_RCC_OscConfig+0xb0>
 8005a0c:	4b69      	ldr	r3, [pc, #420]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a68      	ldr	r2, [pc, #416]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 8005a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a16:	6013      	str	r3, [r2, #0]
 8005a18:	4b66      	ldr	r3, [pc, #408]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a65      	ldr	r2, [pc, #404]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 8005a1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d013      	beq.n	8005a54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a2c:	f7fc fbdc 	bl	80021e8 <HAL_GetTick>
 8005a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a32:	e008      	b.n	8005a46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a34:	f7fc fbd8 	bl	80021e8 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b64      	cmp	r3, #100	@ 0x64
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e207      	b.n	8005e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a46:	4b5b      	ldr	r3, [pc, #364]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d0f0      	beq.n	8005a34 <HAL_RCC_OscConfig+0xc0>
 8005a52:	e014      	b.n	8005a7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a54:	f7fc fbc8 	bl	80021e8 <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a5a:	e008      	b.n	8005a6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a5c:	f7fc fbc4 	bl	80021e8 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b64      	cmp	r3, #100	@ 0x64
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e1f3      	b.n	8005e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a6e:	4b51      	ldr	r3, [pc, #324]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1f0      	bne.n	8005a5c <HAL_RCC_OscConfig+0xe8>
 8005a7a:	e000      	b.n	8005a7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d063      	beq.n	8005b52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 030c 	and.w	r3, r3, #12
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00b      	beq.n	8005aae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a96:	4b47      	ldr	r3, [pc, #284]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a9e:	2b08      	cmp	r3, #8
 8005aa0:	d11c      	bne.n	8005adc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aa2:	4b44      	ldr	r3, [pc, #272]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d116      	bne.n	8005adc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aae:	4b41      	ldr	r3, [pc, #260]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d005      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x152>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d001      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e1c7      	b.n	8005e56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	4937      	ldr	r1, [pc, #220]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ada:	e03a      	b.n	8005b52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d020      	beq.n	8005b26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ae4:	4b34      	ldr	r3, [pc, #208]	@ (8005bb8 <HAL_RCC_OscConfig+0x244>)
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aea:	f7fc fb7d 	bl	80021e8 <HAL_GetTick>
 8005aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005af0:	e008      	b.n	8005b04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005af2:	f7fc fb79 	bl	80021e8 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d901      	bls.n	8005b04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e1a8      	b.n	8005e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b04:	4b2b      	ldr	r3, [pc, #172]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d0f0      	beq.n	8005af2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b10:	4b28      	ldr	r3, [pc, #160]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	4925      	ldr	r1, [pc, #148]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	600b      	str	r3, [r1, #0]
 8005b24:	e015      	b.n	8005b52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b26:	4b24      	ldr	r3, [pc, #144]	@ (8005bb8 <HAL_RCC_OscConfig+0x244>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b2c:	f7fc fb5c 	bl	80021e8 <HAL_GetTick>
 8005b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b32:	e008      	b.n	8005b46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b34:	f7fc fb58 	bl	80021e8 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e187      	b.n	8005e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b46:	4b1b      	ldr	r3, [pc, #108]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1f0      	bne.n	8005b34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0308 	and.w	r3, r3, #8
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d036      	beq.n	8005bcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d016      	beq.n	8005b94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b66:	4b15      	ldr	r3, [pc, #84]	@ (8005bbc <HAL_RCC_OscConfig+0x248>)
 8005b68:	2201      	movs	r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b6c:	f7fc fb3c 	bl	80021e8 <HAL_GetTick>
 8005b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b72:	e008      	b.n	8005b86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b74:	f7fc fb38 	bl	80021e8 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e167      	b.n	8005e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b86:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb4 <HAL_RCC_OscConfig+0x240>)
 8005b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d0f0      	beq.n	8005b74 <HAL_RCC_OscConfig+0x200>
 8005b92:	e01b      	b.n	8005bcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b94:	4b09      	ldr	r3, [pc, #36]	@ (8005bbc <HAL_RCC_OscConfig+0x248>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b9a:	f7fc fb25 	bl	80021e8 <HAL_GetTick>
 8005b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ba0:	e00e      	b.n	8005bc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ba2:	f7fc fb21 	bl	80021e8 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d907      	bls.n	8005bc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e150      	b.n	8005e56 <HAL_RCC_OscConfig+0x4e2>
 8005bb4:	40023800 	.word	0x40023800
 8005bb8:	42470000 	.word	0x42470000
 8005bbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bc0:	4b88      	ldr	r3, [pc, #544]	@ (8005de4 <HAL_RCC_OscConfig+0x470>)
 8005bc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1ea      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0304 	and.w	r3, r3, #4
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 8097 	beq.w	8005d08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bde:	4b81      	ldr	r3, [pc, #516]	@ (8005de4 <HAL_RCC_OscConfig+0x470>)
 8005be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10f      	bne.n	8005c0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bea:	2300      	movs	r3, #0
 8005bec:	60bb      	str	r3, [r7, #8]
 8005bee:	4b7d      	ldr	r3, [pc, #500]	@ (8005de4 <HAL_RCC_OscConfig+0x470>)
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf2:	4a7c      	ldr	r2, [pc, #496]	@ (8005de4 <HAL_RCC_OscConfig+0x470>)
 8005bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005bfa:	4b7a      	ldr	r3, [pc, #488]	@ (8005de4 <HAL_RCC_OscConfig+0x470>)
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c02:	60bb      	str	r3, [r7, #8]
 8005c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c06:	2301      	movs	r3, #1
 8005c08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c0a:	4b77      	ldr	r3, [pc, #476]	@ (8005de8 <HAL_RCC_OscConfig+0x474>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d118      	bne.n	8005c48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c16:	4b74      	ldr	r3, [pc, #464]	@ (8005de8 <HAL_RCC_OscConfig+0x474>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a73      	ldr	r2, [pc, #460]	@ (8005de8 <HAL_RCC_OscConfig+0x474>)
 8005c1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c22:	f7fc fae1 	bl	80021e8 <HAL_GetTick>
 8005c26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c28:	e008      	b.n	8005c3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c2a:	f7fc fadd 	bl	80021e8 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d901      	bls.n	8005c3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e10c      	b.n	8005e56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c3c:	4b6a      	ldr	r3, [pc, #424]	@ (8005de8 <HAL_RCC_OscConfig+0x474>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d0f0      	beq.n	8005c2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d106      	bne.n	8005c5e <HAL_RCC_OscConfig+0x2ea>
 8005c50:	4b64      	ldr	r3, [pc, #400]	@ (8005de4 <HAL_RCC_OscConfig+0x470>)
 8005c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c54:	4a63      	ldr	r2, [pc, #396]	@ (8005de4 <HAL_RCC_OscConfig+0x470>)
 8005c56:	f043 0301 	orr.w	r3, r3, #1
 8005c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c5c:	e01c      	b.n	8005c98 <HAL_RCC_OscConfig+0x324>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	2b05      	cmp	r3, #5
 8005c64:	d10c      	bne.n	8005c80 <HAL_RCC_OscConfig+0x30c>
 8005c66:	4b5f      	ldr	r3, [pc, #380]	@ (8005de4 <HAL_RCC_OscConfig+0x470>)
 8005c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c6a:	4a5e      	ldr	r2, [pc, #376]	@ (8005de4 <HAL_RCC_OscConfig+0x470>)
 8005c6c:	f043 0304 	orr.w	r3, r3, #4
 8005c70:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c72:	4b5c      	ldr	r3, [pc, #368]	@ (8005de4 <HAL_RCC_OscConfig+0x470>)
 8005c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c76:	4a5b      	ldr	r2, [pc, #364]	@ (8005de4 <HAL_RCC_OscConfig+0x470>)
 8005c78:	f043 0301 	orr.w	r3, r3, #1
 8005c7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c7e:	e00b      	b.n	8005c98 <HAL_RCC_OscConfig+0x324>
 8005c80:	4b58      	ldr	r3, [pc, #352]	@ (8005de4 <HAL_RCC_OscConfig+0x470>)
 8005c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c84:	4a57      	ldr	r2, [pc, #348]	@ (8005de4 <HAL_RCC_OscConfig+0x470>)
 8005c86:	f023 0301 	bic.w	r3, r3, #1
 8005c8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c8c:	4b55      	ldr	r3, [pc, #340]	@ (8005de4 <HAL_RCC_OscConfig+0x470>)
 8005c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c90:	4a54      	ldr	r2, [pc, #336]	@ (8005de4 <HAL_RCC_OscConfig+0x470>)
 8005c92:	f023 0304 	bic.w	r3, r3, #4
 8005c96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d015      	beq.n	8005ccc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca0:	f7fc faa2 	bl	80021e8 <HAL_GetTick>
 8005ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ca6:	e00a      	b.n	8005cbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ca8:	f7fc fa9e 	bl	80021e8 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e0cb      	b.n	8005e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cbe:	4b49      	ldr	r3, [pc, #292]	@ (8005de4 <HAL_RCC_OscConfig+0x470>)
 8005cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0ee      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x334>
 8005cca:	e014      	b.n	8005cf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ccc:	f7fc fa8c 	bl	80021e8 <HAL_GetTick>
 8005cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cd2:	e00a      	b.n	8005cea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cd4:	f7fc fa88 	bl	80021e8 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e0b5      	b.n	8005e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cea:	4b3e      	ldr	r3, [pc, #248]	@ (8005de4 <HAL_RCC_OscConfig+0x470>)
 8005cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1ee      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cf6:	7dfb      	ldrb	r3, [r7, #23]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d105      	bne.n	8005d08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cfc:	4b39      	ldr	r3, [pc, #228]	@ (8005de4 <HAL_RCC_OscConfig+0x470>)
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d00:	4a38      	ldr	r2, [pc, #224]	@ (8005de4 <HAL_RCC_OscConfig+0x470>)
 8005d02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 80a1 	beq.w	8005e54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d12:	4b34      	ldr	r3, [pc, #208]	@ (8005de4 <HAL_RCC_OscConfig+0x470>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f003 030c 	and.w	r3, r3, #12
 8005d1a:	2b08      	cmp	r3, #8
 8005d1c:	d05c      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d141      	bne.n	8005daa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d26:	4b31      	ldr	r3, [pc, #196]	@ (8005dec <HAL_RCC_OscConfig+0x478>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d2c:	f7fc fa5c 	bl	80021e8 <HAL_GetTick>
 8005d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d32:	e008      	b.n	8005d46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d34:	f7fc fa58 	bl	80021e8 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e087      	b.n	8005e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d46:	4b27      	ldr	r3, [pc, #156]	@ (8005de4 <HAL_RCC_OscConfig+0x470>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1f0      	bne.n	8005d34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	69da      	ldr	r2, [r3, #28]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d60:	019b      	lsls	r3, r3, #6
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d68:	085b      	lsrs	r3, r3, #1
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	041b      	lsls	r3, r3, #16
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d74:	061b      	lsls	r3, r3, #24
 8005d76:	491b      	ldr	r1, [pc, #108]	@ (8005de4 <HAL_RCC_OscConfig+0x470>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005dec <HAL_RCC_OscConfig+0x478>)
 8005d7e:	2201      	movs	r2, #1
 8005d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d82:	f7fc fa31 	bl	80021e8 <HAL_GetTick>
 8005d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d88:	e008      	b.n	8005d9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d8a:	f7fc fa2d 	bl	80021e8 <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d901      	bls.n	8005d9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e05c      	b.n	8005e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d9c:	4b11      	ldr	r3, [pc, #68]	@ (8005de4 <HAL_RCC_OscConfig+0x470>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d0f0      	beq.n	8005d8a <HAL_RCC_OscConfig+0x416>
 8005da8:	e054      	b.n	8005e54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005daa:	4b10      	ldr	r3, [pc, #64]	@ (8005dec <HAL_RCC_OscConfig+0x478>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db0:	f7fc fa1a 	bl	80021e8 <HAL_GetTick>
 8005db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005db8:	f7fc fa16 	bl	80021e8 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e045      	b.n	8005e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dca:	4b06      	ldr	r3, [pc, #24]	@ (8005de4 <HAL_RCC_OscConfig+0x470>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1f0      	bne.n	8005db8 <HAL_RCC_OscConfig+0x444>
 8005dd6:	e03d      	b.n	8005e54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d107      	bne.n	8005df0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e038      	b.n	8005e56 <HAL_RCC_OscConfig+0x4e2>
 8005de4:	40023800 	.word	0x40023800
 8005de8:	40007000 	.word	0x40007000
 8005dec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005df0:	4b1b      	ldr	r3, [pc, #108]	@ (8005e60 <HAL_RCC_OscConfig+0x4ec>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d028      	beq.n	8005e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d121      	bne.n	8005e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d11a      	bne.n	8005e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005e20:	4013      	ands	r3, r2
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d111      	bne.n	8005e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e36:	085b      	lsrs	r3, r3, #1
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d107      	bne.n	8005e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d001      	beq.n	8005e54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e000      	b.n	8005e56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	40023800 	.word	0x40023800

08005e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e0cc      	b.n	8006012 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e78:	4b68      	ldr	r3, [pc, #416]	@ (800601c <HAL_RCC_ClockConfig+0x1b8>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0307 	and.w	r3, r3, #7
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d90c      	bls.n	8005ea0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e86:	4b65      	ldr	r3, [pc, #404]	@ (800601c <HAL_RCC_ClockConfig+0x1b8>)
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	b2d2      	uxtb	r2, r2
 8005e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e8e:	4b63      	ldr	r3, [pc, #396]	@ (800601c <HAL_RCC_ClockConfig+0x1b8>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d001      	beq.n	8005ea0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e0b8      	b.n	8006012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d020      	beq.n	8005eee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d005      	beq.n	8005ec4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005eb8:	4b59      	ldr	r3, [pc, #356]	@ (8006020 <HAL_RCC_ClockConfig+0x1bc>)
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	4a58      	ldr	r2, [pc, #352]	@ (8006020 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005ec2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0308 	and.w	r3, r3, #8
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d005      	beq.n	8005edc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ed0:	4b53      	ldr	r3, [pc, #332]	@ (8006020 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	4a52      	ldr	r2, [pc, #328]	@ (8006020 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005eda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005edc:	4b50      	ldr	r3, [pc, #320]	@ (8006020 <HAL_RCC_ClockConfig+0x1bc>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	494d      	ldr	r1, [pc, #308]	@ (8006020 <HAL_RCC_ClockConfig+0x1bc>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d044      	beq.n	8005f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d107      	bne.n	8005f12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f02:	4b47      	ldr	r3, [pc, #284]	@ (8006020 <HAL_RCC_ClockConfig+0x1bc>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d119      	bne.n	8005f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e07f      	b.n	8006012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d003      	beq.n	8005f22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f1e:	2b03      	cmp	r3, #3
 8005f20:	d107      	bne.n	8005f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f22:	4b3f      	ldr	r3, [pc, #252]	@ (8006020 <HAL_RCC_ClockConfig+0x1bc>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d109      	bne.n	8005f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e06f      	b.n	8006012 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f32:	4b3b      	ldr	r3, [pc, #236]	@ (8006020 <HAL_RCC_ClockConfig+0x1bc>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e067      	b.n	8006012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f42:	4b37      	ldr	r3, [pc, #220]	@ (8006020 <HAL_RCC_ClockConfig+0x1bc>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f023 0203 	bic.w	r2, r3, #3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	4934      	ldr	r1, [pc, #208]	@ (8006020 <HAL_RCC_ClockConfig+0x1bc>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f54:	f7fc f948 	bl	80021e8 <HAL_GetTick>
 8005f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f5a:	e00a      	b.n	8005f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f5c:	f7fc f944 	bl	80021e8 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e04f      	b.n	8006012 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f72:	4b2b      	ldr	r3, [pc, #172]	@ (8006020 <HAL_RCC_ClockConfig+0x1bc>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f003 020c 	and.w	r2, r3, #12
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d1eb      	bne.n	8005f5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f84:	4b25      	ldr	r3, [pc, #148]	@ (800601c <HAL_RCC_ClockConfig+0x1b8>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0307 	and.w	r3, r3, #7
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d20c      	bcs.n	8005fac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f92:	4b22      	ldr	r3, [pc, #136]	@ (800601c <HAL_RCC_ClockConfig+0x1b8>)
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	b2d2      	uxtb	r2, r2
 8005f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f9a:	4b20      	ldr	r3, [pc, #128]	@ (800601c <HAL_RCC_ClockConfig+0x1b8>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0307 	and.w	r3, r3, #7
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d001      	beq.n	8005fac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e032      	b.n	8006012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d008      	beq.n	8005fca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fb8:	4b19      	ldr	r3, [pc, #100]	@ (8006020 <HAL_RCC_ClockConfig+0x1bc>)
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	4916      	ldr	r1, [pc, #88]	@ (8006020 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0308 	and.w	r3, r3, #8
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d009      	beq.n	8005fea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fd6:	4b12      	ldr	r3, [pc, #72]	@ (8006020 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	490e      	ldr	r1, [pc, #56]	@ (8006020 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fea:	f000 f821 	bl	8006030 <HAL_RCC_GetSysClockFreq>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8006020 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	091b      	lsrs	r3, r3, #4
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	490a      	ldr	r1, [pc, #40]	@ (8006024 <HAL_RCC_ClockConfig+0x1c0>)
 8005ffc:	5ccb      	ldrb	r3, [r1, r3]
 8005ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8006002:	4a09      	ldr	r2, [pc, #36]	@ (8006028 <HAL_RCC_ClockConfig+0x1c4>)
 8006004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006006:	4b09      	ldr	r3, [pc, #36]	@ (800602c <HAL_RCC_ClockConfig+0x1c8>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4618      	mov	r0, r3
 800600c:	f7fc f8aa 	bl	8002164 <HAL_InitTick>

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	40023c00 	.word	0x40023c00
 8006020:	40023800 	.word	0x40023800
 8006024:	0800dc60 	.word	0x0800dc60
 8006028:	20000000 	.word	0x20000000
 800602c:	20000004 	.word	0x20000004

08006030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006034:	b094      	sub	sp, #80	@ 0x50
 8006036:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006038:	2300      	movs	r3, #0
 800603a:	647b      	str	r3, [r7, #68]	@ 0x44
 800603c:	2300      	movs	r3, #0
 800603e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006040:	2300      	movs	r3, #0
 8006042:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006048:	4b7c      	ldr	r3, [pc, #496]	@ (800623c <HAL_RCC_GetSysClockFreq+0x20c>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f003 030c 	and.w	r3, r3, #12
 8006050:	2b08      	cmp	r3, #8
 8006052:	d00d      	beq.n	8006070 <HAL_RCC_GetSysClockFreq+0x40>
 8006054:	2b08      	cmp	r3, #8
 8006056:	f200 80e7 	bhi.w	8006228 <HAL_RCC_GetSysClockFreq+0x1f8>
 800605a:	2b00      	cmp	r3, #0
 800605c:	d002      	beq.n	8006064 <HAL_RCC_GetSysClockFreq+0x34>
 800605e:	2b04      	cmp	r3, #4
 8006060:	d003      	beq.n	800606a <HAL_RCC_GetSysClockFreq+0x3a>
 8006062:	e0e1      	b.n	8006228 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006064:	4b76      	ldr	r3, [pc, #472]	@ (8006240 <HAL_RCC_GetSysClockFreq+0x210>)
 8006066:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006068:	e0e1      	b.n	800622e <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800606a:	4b76      	ldr	r3, [pc, #472]	@ (8006244 <HAL_RCC_GetSysClockFreq+0x214>)
 800606c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800606e:	e0de      	b.n	800622e <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006070:	4b72      	ldr	r3, [pc, #456]	@ (800623c <HAL_RCC_GetSysClockFreq+0x20c>)
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006078:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800607a:	4b70      	ldr	r3, [pc, #448]	@ (800623c <HAL_RCC_GetSysClockFreq+0x20c>)
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d065      	beq.n	8006152 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006086:	4b6d      	ldr	r3, [pc, #436]	@ (800623c <HAL_RCC_GetSysClockFreq+0x20c>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	099b      	lsrs	r3, r3, #6
 800608c:	2200      	movs	r2, #0
 800608e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006090:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006098:	633b      	str	r3, [r7, #48]	@ 0x30
 800609a:	2300      	movs	r3, #0
 800609c:	637b      	str	r3, [r7, #52]	@ 0x34
 800609e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80060a2:	4622      	mov	r2, r4
 80060a4:	462b      	mov	r3, r5
 80060a6:	f04f 0000 	mov.w	r0, #0
 80060aa:	f04f 0100 	mov.w	r1, #0
 80060ae:	0159      	lsls	r1, r3, #5
 80060b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060b4:	0150      	lsls	r0, r2, #5
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4621      	mov	r1, r4
 80060bc:	1a51      	subs	r1, r2, r1
 80060be:	6139      	str	r1, [r7, #16]
 80060c0:	4629      	mov	r1, r5
 80060c2:	eb63 0301 	sbc.w	r3, r3, r1
 80060c6:	617b      	str	r3, [r7, #20]
 80060c8:	f04f 0200 	mov.w	r2, #0
 80060cc:	f04f 0300 	mov.w	r3, #0
 80060d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060d4:	4659      	mov	r1, fp
 80060d6:	018b      	lsls	r3, r1, #6
 80060d8:	4651      	mov	r1, sl
 80060da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060de:	4651      	mov	r1, sl
 80060e0:	018a      	lsls	r2, r1, #6
 80060e2:	46d4      	mov	ip, sl
 80060e4:	ebb2 080c 	subs.w	r8, r2, ip
 80060e8:	4659      	mov	r1, fp
 80060ea:	eb63 0901 	sbc.w	r9, r3, r1
 80060ee:	f04f 0200 	mov.w	r2, #0
 80060f2:	f04f 0300 	mov.w	r3, #0
 80060f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006102:	4690      	mov	r8, r2
 8006104:	4699      	mov	r9, r3
 8006106:	4623      	mov	r3, r4
 8006108:	eb18 0303 	adds.w	r3, r8, r3
 800610c:	60bb      	str	r3, [r7, #8]
 800610e:	462b      	mov	r3, r5
 8006110:	eb49 0303 	adc.w	r3, r9, r3
 8006114:	60fb      	str	r3, [r7, #12]
 8006116:	f04f 0200 	mov.w	r2, #0
 800611a:	f04f 0300 	mov.w	r3, #0
 800611e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006122:	4629      	mov	r1, r5
 8006124:	024b      	lsls	r3, r1, #9
 8006126:	4620      	mov	r0, r4
 8006128:	4629      	mov	r1, r5
 800612a:	4604      	mov	r4, r0
 800612c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8006130:	4601      	mov	r1, r0
 8006132:	024a      	lsls	r2, r1, #9
 8006134:	4610      	mov	r0, r2
 8006136:	4619      	mov	r1, r3
 8006138:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800613a:	2200      	movs	r2, #0
 800613c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800613e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006140:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006144:	f7fb f824 	bl	8001190 <__aeabi_uldivmod>
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	4613      	mov	r3, r2
 800614e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006150:	e05c      	b.n	800620c <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006152:	4b3a      	ldr	r3, [pc, #232]	@ (800623c <HAL_RCC_GetSysClockFreq+0x20c>)
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	099b      	lsrs	r3, r3, #6
 8006158:	2200      	movs	r2, #0
 800615a:	4618      	mov	r0, r3
 800615c:	4611      	mov	r1, r2
 800615e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006162:	623b      	str	r3, [r7, #32]
 8006164:	2300      	movs	r3, #0
 8006166:	627b      	str	r3, [r7, #36]	@ 0x24
 8006168:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800616c:	4642      	mov	r2, r8
 800616e:	464b      	mov	r3, r9
 8006170:	f04f 0000 	mov.w	r0, #0
 8006174:	f04f 0100 	mov.w	r1, #0
 8006178:	0159      	lsls	r1, r3, #5
 800617a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800617e:	0150      	lsls	r0, r2, #5
 8006180:	4602      	mov	r2, r0
 8006182:	460b      	mov	r3, r1
 8006184:	46c4      	mov	ip, r8
 8006186:	ebb2 0a0c 	subs.w	sl, r2, ip
 800618a:	4640      	mov	r0, r8
 800618c:	4649      	mov	r1, r9
 800618e:	468c      	mov	ip, r1
 8006190:	eb63 0b0c 	sbc.w	fp, r3, ip
 8006194:	f04f 0200 	mov.w	r2, #0
 8006198:	f04f 0300 	mov.w	r3, #0
 800619c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80061a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80061a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80061a8:	ebb2 040a 	subs.w	r4, r2, sl
 80061ac:	eb63 050b 	sbc.w	r5, r3, fp
 80061b0:	f04f 0200 	mov.w	r2, #0
 80061b4:	f04f 0300 	mov.w	r3, #0
 80061b8:	00eb      	lsls	r3, r5, #3
 80061ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061be:	00e2      	lsls	r2, r4, #3
 80061c0:	4614      	mov	r4, r2
 80061c2:	461d      	mov	r5, r3
 80061c4:	4603      	mov	r3, r0
 80061c6:	18e3      	adds	r3, r4, r3
 80061c8:	603b      	str	r3, [r7, #0]
 80061ca:	460b      	mov	r3, r1
 80061cc:	eb45 0303 	adc.w	r3, r5, r3
 80061d0:	607b      	str	r3, [r7, #4]
 80061d2:	f04f 0200 	mov.w	r2, #0
 80061d6:	f04f 0300 	mov.w	r3, #0
 80061da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061de:	4629      	mov	r1, r5
 80061e0:	028b      	lsls	r3, r1, #10
 80061e2:	4620      	mov	r0, r4
 80061e4:	4629      	mov	r1, r5
 80061e6:	4604      	mov	r4, r0
 80061e8:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80061ec:	4601      	mov	r1, r0
 80061ee:	028a      	lsls	r2, r1, #10
 80061f0:	4610      	mov	r0, r2
 80061f2:	4619      	mov	r1, r3
 80061f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061f6:	2200      	movs	r2, #0
 80061f8:	61bb      	str	r3, [r7, #24]
 80061fa:	61fa      	str	r2, [r7, #28]
 80061fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006200:	f7fa ffc6 	bl	8001190 <__aeabi_uldivmod>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	4613      	mov	r3, r2
 800620a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800620c:	4b0b      	ldr	r3, [pc, #44]	@ (800623c <HAL_RCC_GetSysClockFreq+0x20c>)
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	0c1b      	lsrs	r3, r3, #16
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	3301      	adds	r3, #1
 8006218:	005b      	lsls	r3, r3, #1
 800621a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800621c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800621e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006220:	fbb2 f3f3 	udiv	r3, r2, r3
 8006224:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006226:	e002      	b.n	800622e <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006228:	4b05      	ldr	r3, [pc, #20]	@ (8006240 <HAL_RCC_GetSysClockFreq+0x210>)
 800622a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800622c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800622e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006230:	4618      	mov	r0, r3
 8006232:	3750      	adds	r7, #80	@ 0x50
 8006234:	46bd      	mov	sp, r7
 8006236:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800623a:	bf00      	nop
 800623c:	40023800 	.word	0x40023800
 8006240:	00f42400 	.word	0x00f42400
 8006244:	007a1200 	.word	0x007a1200

08006248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800624c:	4b02      	ldr	r3, [pc, #8]	@ (8006258 <HAL_RCC_GetHCLKFreq+0x10>)
 800624e:	681b      	ldr	r3, [r3, #0]
}
 8006250:	4618      	mov	r0, r3
 8006252:	46bd      	mov	sp, r7
 8006254:	bc80      	pop	{r7}
 8006256:	4770      	bx	lr
 8006258:	20000000 	.word	0x20000000

0800625c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006260:	f7ff fff2 	bl	8006248 <HAL_RCC_GetHCLKFreq>
 8006264:	4602      	mov	r2, r0
 8006266:	4b05      	ldr	r3, [pc, #20]	@ (800627c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	0a9b      	lsrs	r3, r3, #10
 800626c:	f003 0307 	and.w	r3, r3, #7
 8006270:	4903      	ldr	r1, [pc, #12]	@ (8006280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006272:	5ccb      	ldrb	r3, [r1, r3]
 8006274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006278:	4618      	mov	r0, r3
 800627a:	bd80      	pop	{r7, pc}
 800627c:	40023800 	.word	0x40023800
 8006280:	0800dc70 	.word	0x0800dc70

08006284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e041      	b.n	800631a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d106      	bne.n	80062b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fb fda4 	bl	8001df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3304      	adds	r3, #4
 80062c0:	4619      	mov	r1, r3
 80062c2:	4610      	mov	r0, r2
 80062c4:	f000 fad8 	bl	8006878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b082      	sub	sp, #8
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e041      	b.n	80063b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b00      	cmp	r3, #0
 800633e:	d106      	bne.n	800634e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f839 	bl	80063c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2202      	movs	r2, #2
 8006352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	3304      	adds	r3, #4
 800635e:	4619      	mov	r1, r3
 8006360:	4610      	mov	r0, r2
 8006362:	f000 fa89 	bl	8006878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bc80      	pop	{r7}
 80063d0:	4770      	bx	lr
	...

080063d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d109      	bne.n	80063f8 <HAL_TIM_PWM_Start+0x24>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	bf14      	ite	ne
 80063f0:	2301      	movne	r3, #1
 80063f2:	2300      	moveq	r3, #0
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	e022      	b.n	800643e <HAL_TIM_PWM_Start+0x6a>
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d109      	bne.n	8006412 <HAL_TIM_PWM_Start+0x3e>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b01      	cmp	r3, #1
 8006408:	bf14      	ite	ne
 800640a:	2301      	movne	r3, #1
 800640c:	2300      	moveq	r3, #0
 800640e:	b2db      	uxtb	r3, r3
 8006410:	e015      	b.n	800643e <HAL_TIM_PWM_Start+0x6a>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b08      	cmp	r3, #8
 8006416:	d109      	bne.n	800642c <HAL_TIM_PWM_Start+0x58>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b01      	cmp	r3, #1
 8006422:	bf14      	ite	ne
 8006424:	2301      	movne	r3, #1
 8006426:	2300      	moveq	r3, #0
 8006428:	b2db      	uxtb	r3, r3
 800642a:	e008      	b.n	800643e <HAL_TIM_PWM_Start+0x6a>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b01      	cmp	r3, #1
 8006436:	bf14      	ite	ne
 8006438:	2301      	movne	r3, #1
 800643a:	2300      	moveq	r3, #0
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e07c      	b.n	8006540 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d104      	bne.n	8006456 <HAL_TIM_PWM_Start+0x82>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006454:	e013      	b.n	800647e <HAL_TIM_PWM_Start+0xaa>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b04      	cmp	r3, #4
 800645a:	d104      	bne.n	8006466 <HAL_TIM_PWM_Start+0x92>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2202      	movs	r2, #2
 8006460:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006464:	e00b      	b.n	800647e <HAL_TIM_PWM_Start+0xaa>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b08      	cmp	r3, #8
 800646a:	d104      	bne.n	8006476 <HAL_TIM_PWM_Start+0xa2>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006474:	e003      	b.n	800647e <HAL_TIM_PWM_Start+0xaa>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2202      	movs	r2, #2
 800647a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2201      	movs	r2, #1
 8006484:	6839      	ldr	r1, [r7, #0]
 8006486:	4618      	mov	r0, r3
 8006488:	f000 fce2 	bl	8006e50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a2d      	ldr	r2, [pc, #180]	@ (8006548 <HAL_TIM_PWM_Start+0x174>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d004      	beq.n	80064a0 <HAL_TIM_PWM_Start+0xcc>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a2c      	ldr	r2, [pc, #176]	@ (800654c <HAL_TIM_PWM_Start+0x178>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d101      	bne.n	80064a4 <HAL_TIM_PWM_Start+0xd0>
 80064a0:	2301      	movs	r3, #1
 80064a2:	e000      	b.n	80064a6 <HAL_TIM_PWM_Start+0xd2>
 80064a4:	2300      	movs	r3, #0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d007      	beq.n	80064ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a22      	ldr	r2, [pc, #136]	@ (8006548 <HAL_TIM_PWM_Start+0x174>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d022      	beq.n	800650a <HAL_TIM_PWM_Start+0x136>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064cc:	d01d      	beq.n	800650a <HAL_TIM_PWM_Start+0x136>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a1f      	ldr	r2, [pc, #124]	@ (8006550 <HAL_TIM_PWM_Start+0x17c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d018      	beq.n	800650a <HAL_TIM_PWM_Start+0x136>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006554 <HAL_TIM_PWM_Start+0x180>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d013      	beq.n	800650a <HAL_TIM_PWM_Start+0x136>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006558 <HAL_TIM_PWM_Start+0x184>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d00e      	beq.n	800650a <HAL_TIM_PWM_Start+0x136>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a16      	ldr	r2, [pc, #88]	@ (800654c <HAL_TIM_PWM_Start+0x178>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d009      	beq.n	800650a <HAL_TIM_PWM_Start+0x136>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a18      	ldr	r2, [pc, #96]	@ (800655c <HAL_TIM_PWM_Start+0x188>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d004      	beq.n	800650a <HAL_TIM_PWM_Start+0x136>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a16      	ldr	r2, [pc, #88]	@ (8006560 <HAL_TIM_PWM_Start+0x18c>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d111      	bne.n	800652e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2b06      	cmp	r3, #6
 800651a:	d010      	beq.n	800653e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f042 0201 	orr.w	r2, r2, #1
 800652a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800652c:	e007      	b.n	800653e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f042 0201 	orr.w	r2, r2, #1
 800653c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	40010000 	.word	0x40010000
 800654c:	40010400 	.word	0x40010400
 8006550:	40000400 	.word	0x40000400
 8006554:	40000800 	.word	0x40000800
 8006558:	40000c00 	.word	0x40000c00
 800655c:	40014000 	.word	0x40014000
 8006560:	40001800 	.word	0x40001800

08006564 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006570:	2300      	movs	r3, #0
 8006572:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800657a:	2b01      	cmp	r3, #1
 800657c:	d101      	bne.n	8006582 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800657e:	2302      	movs	r3, #2
 8006580:	e0ae      	b.n	80066e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b0c      	cmp	r3, #12
 800658e:	f200 809f 	bhi.w	80066d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006592:	a201      	add	r2, pc, #4	@ (adr r2, 8006598 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006598:	080065cd 	.word	0x080065cd
 800659c:	080066d1 	.word	0x080066d1
 80065a0:	080066d1 	.word	0x080066d1
 80065a4:	080066d1 	.word	0x080066d1
 80065a8:	0800660d 	.word	0x0800660d
 80065ac:	080066d1 	.word	0x080066d1
 80065b0:	080066d1 	.word	0x080066d1
 80065b4:	080066d1 	.word	0x080066d1
 80065b8:	0800664f 	.word	0x0800664f
 80065bc:	080066d1 	.word	0x080066d1
 80065c0:	080066d1 	.word	0x080066d1
 80065c4:	080066d1 	.word	0x080066d1
 80065c8:	0800668f 	.word	0x0800668f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68b9      	ldr	r1, [r7, #8]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 f9fa 	bl	80069cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	699a      	ldr	r2, [r3, #24]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0208 	orr.w	r2, r2, #8
 80065e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	699a      	ldr	r2, [r3, #24]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0204 	bic.w	r2, r2, #4
 80065f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6999      	ldr	r1, [r3, #24]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	691a      	ldr	r2, [r3, #16]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	619a      	str	r2, [r3, #24]
      break;
 800660a:	e064      	b.n	80066d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fa4a 	bl	8006aac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699a      	ldr	r2, [r3, #24]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699a      	ldr	r2, [r3, #24]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6999      	ldr	r1, [r3, #24]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	021a      	lsls	r2, r3, #8
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	619a      	str	r2, [r3, #24]
      break;
 800664c:	e043      	b.n	80066d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68b9      	ldr	r1, [r7, #8]
 8006654:	4618      	mov	r0, r3
 8006656:	f000 fa9d 	bl	8006b94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	69da      	ldr	r2, [r3, #28]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f042 0208 	orr.w	r2, r2, #8
 8006668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	69da      	ldr	r2, [r3, #28]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 0204 	bic.w	r2, r2, #4
 8006678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	69d9      	ldr	r1, [r3, #28]
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	691a      	ldr	r2, [r3, #16]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	430a      	orrs	r2, r1
 800668a:	61da      	str	r2, [r3, #28]
      break;
 800668c:	e023      	b.n	80066d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68b9      	ldr	r1, [r7, #8]
 8006694:	4618      	mov	r0, r3
 8006696:	f000 faf1 	bl	8006c7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	69da      	ldr	r2, [r3, #28]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	69da      	ldr	r2, [r3, #28]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	69d9      	ldr	r1, [r3, #28]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	021a      	lsls	r2, r3, #8
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	61da      	str	r2, [r3, #28]
      break;
 80066ce:	e002      	b.n	80066d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	75fb      	strb	r3, [r7, #23]
      break;
 80066d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066de:	7dfb      	ldrb	r3, [r7, #23]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066f2:	2300      	movs	r3, #0
 80066f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d101      	bne.n	8006704 <HAL_TIM_ConfigClockSource+0x1c>
 8006700:	2302      	movs	r3, #2
 8006702:	e0b4      	b.n	800686e <HAL_TIM_ConfigClockSource+0x186>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800672a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800673c:	d03e      	beq.n	80067bc <HAL_TIM_ConfigClockSource+0xd4>
 800673e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006742:	f200 8087 	bhi.w	8006854 <HAL_TIM_ConfigClockSource+0x16c>
 8006746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800674a:	f000 8086 	beq.w	800685a <HAL_TIM_ConfigClockSource+0x172>
 800674e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006752:	d87f      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x16c>
 8006754:	2b70      	cmp	r3, #112	@ 0x70
 8006756:	d01a      	beq.n	800678e <HAL_TIM_ConfigClockSource+0xa6>
 8006758:	2b70      	cmp	r3, #112	@ 0x70
 800675a:	d87b      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x16c>
 800675c:	2b60      	cmp	r3, #96	@ 0x60
 800675e:	d050      	beq.n	8006802 <HAL_TIM_ConfigClockSource+0x11a>
 8006760:	2b60      	cmp	r3, #96	@ 0x60
 8006762:	d877      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x16c>
 8006764:	2b50      	cmp	r3, #80	@ 0x50
 8006766:	d03c      	beq.n	80067e2 <HAL_TIM_ConfigClockSource+0xfa>
 8006768:	2b50      	cmp	r3, #80	@ 0x50
 800676a:	d873      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x16c>
 800676c:	2b40      	cmp	r3, #64	@ 0x40
 800676e:	d058      	beq.n	8006822 <HAL_TIM_ConfigClockSource+0x13a>
 8006770:	2b40      	cmp	r3, #64	@ 0x40
 8006772:	d86f      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x16c>
 8006774:	2b30      	cmp	r3, #48	@ 0x30
 8006776:	d064      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x15a>
 8006778:	2b30      	cmp	r3, #48	@ 0x30
 800677a:	d86b      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x16c>
 800677c:	2b20      	cmp	r3, #32
 800677e:	d060      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x15a>
 8006780:	2b20      	cmp	r3, #32
 8006782:	d867      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x16c>
 8006784:	2b00      	cmp	r3, #0
 8006786:	d05c      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x15a>
 8006788:	2b10      	cmp	r3, #16
 800678a:	d05a      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x15a>
 800678c:	e062      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800679e:	f000 fb38 	bl	8006e12 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80067b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	609a      	str	r2, [r3, #8]
      break;
 80067ba:	e04f      	b.n	800685c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067cc:	f000 fb21 	bl	8006e12 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067de:	609a      	str	r2, [r3, #8]
      break;
 80067e0:	e03c      	b.n	800685c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ee:	461a      	mov	r2, r3
 80067f0:	f000 fa98 	bl	8006d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2150      	movs	r1, #80	@ 0x50
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 faef 	bl	8006dde <TIM_ITRx_SetConfig>
      break;
 8006800:	e02c      	b.n	800685c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800680e:	461a      	mov	r2, r3
 8006810:	f000 fab6 	bl	8006d80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2160      	movs	r1, #96	@ 0x60
 800681a:	4618      	mov	r0, r3
 800681c:	f000 fadf 	bl	8006dde <TIM_ITRx_SetConfig>
      break;
 8006820:	e01c      	b.n	800685c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800682e:	461a      	mov	r2, r3
 8006830:	f000 fa78 	bl	8006d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2140      	movs	r1, #64	@ 0x40
 800683a:	4618      	mov	r0, r3
 800683c:	f000 facf 	bl	8006dde <TIM_ITRx_SetConfig>
      break;
 8006840:	e00c      	b.n	800685c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4619      	mov	r1, r3
 800684c:	4610      	mov	r0, r2
 800684e:	f000 fac6 	bl	8006dde <TIM_ITRx_SetConfig>
      break;
 8006852:	e003      	b.n	800685c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	73fb      	strb	r3, [r7, #15]
      break;
 8006858:	e000      	b.n	800685c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800685a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800686c:	7bfb      	ldrb	r3, [r7, #15]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
	...

08006878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a45      	ldr	r2, [pc, #276]	@ (80069a0 <TIM_Base_SetConfig+0x128>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d013      	beq.n	80068b8 <TIM_Base_SetConfig+0x40>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006896:	d00f      	beq.n	80068b8 <TIM_Base_SetConfig+0x40>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a42      	ldr	r2, [pc, #264]	@ (80069a4 <TIM_Base_SetConfig+0x12c>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d00b      	beq.n	80068b8 <TIM_Base_SetConfig+0x40>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a41      	ldr	r2, [pc, #260]	@ (80069a8 <TIM_Base_SetConfig+0x130>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d007      	beq.n	80068b8 <TIM_Base_SetConfig+0x40>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a40      	ldr	r2, [pc, #256]	@ (80069ac <TIM_Base_SetConfig+0x134>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d003      	beq.n	80068b8 <TIM_Base_SetConfig+0x40>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a3f      	ldr	r2, [pc, #252]	@ (80069b0 <TIM_Base_SetConfig+0x138>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d108      	bne.n	80068ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a34      	ldr	r2, [pc, #208]	@ (80069a0 <TIM_Base_SetConfig+0x128>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d02b      	beq.n	800692a <TIM_Base_SetConfig+0xb2>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068d8:	d027      	beq.n	800692a <TIM_Base_SetConfig+0xb2>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a31      	ldr	r2, [pc, #196]	@ (80069a4 <TIM_Base_SetConfig+0x12c>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d023      	beq.n	800692a <TIM_Base_SetConfig+0xb2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a30      	ldr	r2, [pc, #192]	@ (80069a8 <TIM_Base_SetConfig+0x130>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d01f      	beq.n	800692a <TIM_Base_SetConfig+0xb2>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a2f      	ldr	r2, [pc, #188]	@ (80069ac <TIM_Base_SetConfig+0x134>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d01b      	beq.n	800692a <TIM_Base_SetConfig+0xb2>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a2e      	ldr	r2, [pc, #184]	@ (80069b0 <TIM_Base_SetConfig+0x138>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d017      	beq.n	800692a <TIM_Base_SetConfig+0xb2>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a2d      	ldr	r2, [pc, #180]	@ (80069b4 <TIM_Base_SetConfig+0x13c>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d013      	beq.n	800692a <TIM_Base_SetConfig+0xb2>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a2c      	ldr	r2, [pc, #176]	@ (80069b8 <TIM_Base_SetConfig+0x140>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d00f      	beq.n	800692a <TIM_Base_SetConfig+0xb2>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a2b      	ldr	r2, [pc, #172]	@ (80069bc <TIM_Base_SetConfig+0x144>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d00b      	beq.n	800692a <TIM_Base_SetConfig+0xb2>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a2a      	ldr	r2, [pc, #168]	@ (80069c0 <TIM_Base_SetConfig+0x148>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d007      	beq.n	800692a <TIM_Base_SetConfig+0xb2>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a29      	ldr	r2, [pc, #164]	@ (80069c4 <TIM_Base_SetConfig+0x14c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d003      	beq.n	800692a <TIM_Base_SetConfig+0xb2>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a28      	ldr	r2, [pc, #160]	@ (80069c8 <TIM_Base_SetConfig+0x150>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d108      	bne.n	800693c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	4313      	orrs	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a0f      	ldr	r2, [pc, #60]	@ (80069a0 <TIM_Base_SetConfig+0x128>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d003      	beq.n	8006970 <TIM_Base_SetConfig+0xf8>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a11      	ldr	r2, [pc, #68]	@ (80069b0 <TIM_Base_SetConfig+0x138>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d103      	bne.n	8006978 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	691a      	ldr	r2, [r3, #16]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b01      	cmp	r3, #1
 8006988:	d105      	bne.n	8006996 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f023 0201 	bic.w	r2, r3, #1
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	611a      	str	r2, [r3, #16]
  }
}
 8006996:	bf00      	nop
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	bc80      	pop	{r7}
 800699e:	4770      	bx	lr
 80069a0:	40010000 	.word	0x40010000
 80069a4:	40000400 	.word	0x40000400
 80069a8:	40000800 	.word	0x40000800
 80069ac:	40000c00 	.word	0x40000c00
 80069b0:	40010400 	.word	0x40010400
 80069b4:	40014000 	.word	0x40014000
 80069b8:	40014400 	.word	0x40014400
 80069bc:	40014800 	.word	0x40014800
 80069c0:	40001800 	.word	0x40001800
 80069c4:	40001c00 	.word	0x40001c00
 80069c8:	40002000 	.word	0x40002000

080069cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b087      	sub	sp, #28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a1b      	ldr	r3, [r3, #32]
 80069e0:	f023 0201 	bic.w	r2, r3, #1
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0303 	bic.w	r3, r3, #3
 8006a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f023 0302 	bic.w	r3, r3, #2
 8006a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a20      	ldr	r2, [pc, #128]	@ (8006aa4 <TIM_OC1_SetConfig+0xd8>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d003      	beq.n	8006a30 <TIM_OC1_SetConfig+0x64>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a1f      	ldr	r2, [pc, #124]	@ (8006aa8 <TIM_OC1_SetConfig+0xdc>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d10c      	bne.n	8006a4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f023 0308 	bic.w	r3, r3, #8
 8006a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f023 0304 	bic.w	r3, r3, #4
 8006a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a15      	ldr	r2, [pc, #84]	@ (8006aa4 <TIM_OC1_SetConfig+0xd8>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d003      	beq.n	8006a5a <TIM_OC1_SetConfig+0x8e>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a14      	ldr	r2, [pc, #80]	@ (8006aa8 <TIM_OC1_SetConfig+0xdc>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d111      	bne.n	8006a7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	621a      	str	r2, [r3, #32]
}
 8006a98:	bf00      	nop
 8006a9a:	371c      	adds	r7, #28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bc80      	pop	{r7}
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	40010000 	.word	0x40010000
 8006aa8:	40010400 	.word	0x40010400

08006aac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b087      	sub	sp, #28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	f023 0210 	bic.w	r2, r3, #16
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	021b      	lsls	r3, r3, #8
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f023 0320 	bic.w	r3, r3, #32
 8006af6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	011b      	lsls	r3, r3, #4
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a21      	ldr	r2, [pc, #132]	@ (8006b8c <TIM_OC2_SetConfig+0xe0>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d003      	beq.n	8006b14 <TIM_OC2_SetConfig+0x68>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a20      	ldr	r2, [pc, #128]	@ (8006b90 <TIM_OC2_SetConfig+0xe4>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d10d      	bne.n	8006b30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	011b      	lsls	r3, r3, #4
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a16      	ldr	r2, [pc, #88]	@ (8006b8c <TIM_OC2_SetConfig+0xe0>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d003      	beq.n	8006b40 <TIM_OC2_SetConfig+0x94>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a15      	ldr	r2, [pc, #84]	@ (8006b90 <TIM_OC2_SetConfig+0xe4>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d113      	bne.n	8006b68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	621a      	str	r2, [r3, #32]
}
 8006b82:	bf00      	nop
 8006b84:	371c      	adds	r7, #28
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bc80      	pop	{r7}
 8006b8a:	4770      	bx	lr
 8006b8c:	40010000 	.word	0x40010000
 8006b90:	40010400 	.word	0x40010400

08006b94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0303 	bic.w	r3, r3, #3
 8006bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	021b      	lsls	r3, r3, #8
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a21      	ldr	r2, [pc, #132]	@ (8006c74 <TIM_OC3_SetConfig+0xe0>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d003      	beq.n	8006bfa <TIM_OC3_SetConfig+0x66>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a20      	ldr	r2, [pc, #128]	@ (8006c78 <TIM_OC3_SetConfig+0xe4>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d10d      	bne.n	8006c16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	021b      	lsls	r3, r3, #8
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a16      	ldr	r2, [pc, #88]	@ (8006c74 <TIM_OC3_SetConfig+0xe0>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d003      	beq.n	8006c26 <TIM_OC3_SetConfig+0x92>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a15      	ldr	r2, [pc, #84]	@ (8006c78 <TIM_OC3_SetConfig+0xe4>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d113      	bne.n	8006c4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	011b      	lsls	r3, r3, #4
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	621a      	str	r2, [r3, #32]
}
 8006c68:	bf00      	nop
 8006c6a:	371c      	adds	r7, #28
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bc80      	pop	{r7}
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	40010000 	.word	0x40010000
 8006c78:	40010400 	.word	0x40010400

08006c7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b087      	sub	sp, #28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	021b      	lsls	r3, r3, #8
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006cc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	031b      	lsls	r3, r3, #12
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a11      	ldr	r2, [pc, #68]	@ (8006d1c <TIM_OC4_SetConfig+0xa0>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d003      	beq.n	8006ce4 <TIM_OC4_SetConfig+0x68>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a10      	ldr	r2, [pc, #64]	@ (8006d20 <TIM_OC4_SetConfig+0xa4>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d109      	bne.n	8006cf8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006cea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	019b      	lsls	r3, r3, #6
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	685a      	ldr	r2, [r3, #4]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	621a      	str	r2, [r3, #32]
}
 8006d12:	bf00      	nop
 8006d14:	371c      	adds	r7, #28
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bc80      	pop	{r7}
 8006d1a:	4770      	bx	lr
 8006d1c:	40010000 	.word	0x40010000
 8006d20:	40010400 	.word	0x40010400

08006d24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b087      	sub	sp, #28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	f023 0201 	bic.w	r2, r3, #1
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	011b      	lsls	r3, r3, #4
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f023 030a 	bic.w	r3, r3, #10
 8006d60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	621a      	str	r2, [r3, #32]
}
 8006d76:	bf00      	nop
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bc80      	pop	{r7}
 8006d7e:	4770      	bx	lr

08006d80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	f023 0210 	bic.w	r2, r3, #16
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	031b      	lsls	r3, r3, #12
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	011b      	lsls	r3, r3, #4
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	621a      	str	r2, [r3, #32]
}
 8006dd4:	bf00      	nop
 8006dd6:	371c      	adds	r7, #28
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bc80      	pop	{r7}
 8006ddc:	4770      	bx	lr

08006dde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b085      	sub	sp, #20
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006df4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	f043 0307 	orr.w	r3, r3, #7
 8006e00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	609a      	str	r2, [r3, #8]
}
 8006e08:	bf00      	nop
 8006e0a:	3714      	adds	r7, #20
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bc80      	pop	{r7}
 8006e10:	4770      	bx	lr

08006e12 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b087      	sub	sp, #28
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	60f8      	str	r0, [r7, #12]
 8006e1a:	60b9      	str	r1, [r7, #8]
 8006e1c:	607a      	str	r2, [r7, #4]
 8006e1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e2c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	021a      	lsls	r2, r3, #8
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	431a      	orrs	r2, r3
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	609a      	str	r2, [r3, #8]
}
 8006e46:	bf00      	nop
 8006e48:	371c      	adds	r7, #28
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bc80      	pop	{r7}
 8006e4e:	4770      	bx	lr

08006e50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	f003 031f 	and.w	r3, r3, #31
 8006e62:	2201      	movs	r2, #1
 8006e64:	fa02 f303 	lsl.w	r3, r2, r3
 8006e68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6a1a      	ldr	r2, [r3, #32]
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	43db      	mvns	r3, r3
 8006e72:	401a      	ands	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6a1a      	ldr	r2, [r3, #32]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	f003 031f 	and.w	r3, r3, #31
 8006e82:	6879      	ldr	r1, [r7, #4]
 8006e84:	fa01 f303 	lsl.w	r3, r1, r3
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	621a      	str	r2, [r3, #32]
}
 8006e8e:	bf00      	nop
 8006e90:	371c      	adds	r7, #28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bc80      	pop	{r7}
 8006e96:	4770      	bx	lr

08006e98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d101      	bne.n	8006eb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006eac:	2302      	movs	r3, #2
 8006eae:	e05a      	b.n	8006f66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ed6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a20      	ldr	r2, [pc, #128]	@ (8006f70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d022      	beq.n	8006f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006efc:	d01d      	beq.n	8006f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a1c      	ldr	r2, [pc, #112]	@ (8006f74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d018      	beq.n	8006f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a1a      	ldr	r2, [pc, #104]	@ (8006f78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d013      	beq.n	8006f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a19      	ldr	r2, [pc, #100]	@ (8006f7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d00e      	beq.n	8006f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a17      	ldr	r2, [pc, #92]	@ (8006f80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d009      	beq.n	8006f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a16      	ldr	r2, [pc, #88]	@ (8006f84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d004      	beq.n	8006f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a14      	ldr	r2, [pc, #80]	@ (8006f88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d10c      	bne.n	8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bc80      	pop	{r7}
 8006f6e:	4770      	bx	lr
 8006f70:	40010000 	.word	0x40010000
 8006f74:	40000400 	.word	0x40000400
 8006f78:	40000800 	.word	0x40000800
 8006f7c:	40000c00 	.word	0x40000c00
 8006f80:	40010400 	.word	0x40010400
 8006f84:	40014000 	.word	0x40014000
 8006f88:	40001800 	.word	0x40001800

08006f8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b084      	sub	sp, #16
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
 8006f96:	f107 001c 	add.w	r0, r7, #28
 8006f9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f9e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d123      	bne.n	8006fee <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006faa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006fba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006fce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d105      	bne.n	8006fe2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f001 faca 	bl	800857c <USB_CoreReset>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	73fb      	strb	r3, [r7, #15]
 8006fec:	e01b      	b.n	8007026 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f001 fabe 	bl	800857c <USB_CoreReset>
 8007000:	4603      	mov	r3, r0
 8007002:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007004:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007008:	2b00      	cmp	r3, #0
 800700a:	d106      	bne.n	800701a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007010:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	639a      	str	r2, [r3, #56]	@ 0x38
 8007018:	e005      	b.n	8007026 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007026:	7fbb      	ldrb	r3, [r7, #30]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d10b      	bne.n	8007044 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f043 0206 	orr.w	r2, r3, #6
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f043 0220 	orr.w	r2, r3, #32
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007044:	7bfb      	ldrb	r3, [r7, #15]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007050:	b004      	add	sp, #16
 8007052:	4770      	bx	lr

08007054 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007054:	b480      	push	{r7}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	4613      	mov	r3, r2
 8007060:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007062:	79fb      	ldrb	r3, [r7, #7]
 8007064:	2b02      	cmp	r3, #2
 8007066:	d165      	bne.n	8007134 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	4a41      	ldr	r2, [pc, #260]	@ (8007170 <USB_SetTurnaroundTime+0x11c>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d906      	bls.n	800707e <USB_SetTurnaroundTime+0x2a>
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	4a40      	ldr	r2, [pc, #256]	@ (8007174 <USB_SetTurnaroundTime+0x120>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d202      	bcs.n	800707e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007078:	230f      	movs	r3, #15
 800707a:	617b      	str	r3, [r7, #20]
 800707c:	e062      	b.n	8007144 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	4a3c      	ldr	r2, [pc, #240]	@ (8007174 <USB_SetTurnaroundTime+0x120>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d306      	bcc.n	8007094 <USB_SetTurnaroundTime+0x40>
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	4a3b      	ldr	r2, [pc, #236]	@ (8007178 <USB_SetTurnaroundTime+0x124>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d202      	bcs.n	8007094 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800708e:	230e      	movs	r3, #14
 8007090:	617b      	str	r3, [r7, #20]
 8007092:	e057      	b.n	8007144 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	4a38      	ldr	r2, [pc, #224]	@ (8007178 <USB_SetTurnaroundTime+0x124>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d306      	bcc.n	80070aa <USB_SetTurnaroundTime+0x56>
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	4a37      	ldr	r2, [pc, #220]	@ (800717c <USB_SetTurnaroundTime+0x128>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d202      	bcs.n	80070aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80070a4:	230d      	movs	r3, #13
 80070a6:	617b      	str	r3, [r7, #20]
 80070a8:	e04c      	b.n	8007144 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	4a33      	ldr	r2, [pc, #204]	@ (800717c <USB_SetTurnaroundTime+0x128>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d306      	bcc.n	80070c0 <USB_SetTurnaroundTime+0x6c>
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	4a32      	ldr	r2, [pc, #200]	@ (8007180 <USB_SetTurnaroundTime+0x12c>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d802      	bhi.n	80070c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80070ba:	230c      	movs	r3, #12
 80070bc:	617b      	str	r3, [r7, #20]
 80070be:	e041      	b.n	8007144 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	4a2f      	ldr	r2, [pc, #188]	@ (8007180 <USB_SetTurnaroundTime+0x12c>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d906      	bls.n	80070d6 <USB_SetTurnaroundTime+0x82>
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	4a2e      	ldr	r2, [pc, #184]	@ (8007184 <USB_SetTurnaroundTime+0x130>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d802      	bhi.n	80070d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80070d0:	230b      	movs	r3, #11
 80070d2:	617b      	str	r3, [r7, #20]
 80070d4:	e036      	b.n	8007144 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	4a2a      	ldr	r2, [pc, #168]	@ (8007184 <USB_SetTurnaroundTime+0x130>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d906      	bls.n	80070ec <USB_SetTurnaroundTime+0x98>
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	4a29      	ldr	r2, [pc, #164]	@ (8007188 <USB_SetTurnaroundTime+0x134>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d802      	bhi.n	80070ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80070e6:	230a      	movs	r3, #10
 80070e8:	617b      	str	r3, [r7, #20]
 80070ea:	e02b      	b.n	8007144 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	4a26      	ldr	r2, [pc, #152]	@ (8007188 <USB_SetTurnaroundTime+0x134>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d906      	bls.n	8007102 <USB_SetTurnaroundTime+0xae>
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	4a25      	ldr	r2, [pc, #148]	@ (800718c <USB_SetTurnaroundTime+0x138>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d202      	bcs.n	8007102 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80070fc:	2309      	movs	r3, #9
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	e020      	b.n	8007144 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	4a21      	ldr	r2, [pc, #132]	@ (800718c <USB_SetTurnaroundTime+0x138>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d306      	bcc.n	8007118 <USB_SetTurnaroundTime+0xc4>
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	4a20      	ldr	r2, [pc, #128]	@ (8007190 <USB_SetTurnaroundTime+0x13c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d802      	bhi.n	8007118 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007112:	2308      	movs	r3, #8
 8007114:	617b      	str	r3, [r7, #20]
 8007116:	e015      	b.n	8007144 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	4a1d      	ldr	r2, [pc, #116]	@ (8007190 <USB_SetTurnaroundTime+0x13c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d906      	bls.n	800712e <USB_SetTurnaroundTime+0xda>
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	4a1c      	ldr	r2, [pc, #112]	@ (8007194 <USB_SetTurnaroundTime+0x140>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d202      	bcs.n	800712e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007128:	2307      	movs	r3, #7
 800712a:	617b      	str	r3, [r7, #20]
 800712c:	e00a      	b.n	8007144 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800712e:	2306      	movs	r3, #6
 8007130:	617b      	str	r3, [r7, #20]
 8007132:	e007      	b.n	8007144 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007134:	79fb      	ldrb	r3, [r7, #7]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d102      	bne.n	8007140 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800713a:	2309      	movs	r3, #9
 800713c:	617b      	str	r3, [r7, #20]
 800713e:	e001      	b.n	8007144 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007140:	2309      	movs	r3, #9
 8007142:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	68da      	ldr	r2, [r3, #12]
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	029b      	lsls	r3, r3, #10
 8007158:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800715c:	431a      	orrs	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	371c      	adds	r7, #28
 8007168:	46bd      	mov	sp, r7
 800716a:	bc80      	pop	{r7}
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	00d8acbf 	.word	0x00d8acbf
 8007174:	00e4e1c0 	.word	0x00e4e1c0
 8007178:	00f42400 	.word	0x00f42400
 800717c:	01067380 	.word	0x01067380
 8007180:	011a499f 	.word	0x011a499f
 8007184:	01312cff 	.word	0x01312cff
 8007188:	014ca43f 	.word	0x014ca43f
 800718c:	016e3600 	.word	0x016e3600
 8007190:	01a6ab1f 	.word	0x01a6ab1f
 8007194:	01e84800 	.word	0x01e84800

08007198 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f043 0201 	orr.w	r2, r3, #1
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bc80      	pop	{r7}
 80071b6:	4770      	bx	lr

080071b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f023 0201 	bic.w	r2, r3, #1
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bc80      	pop	{r7}
 80071d6:	4770      	bx	lr

080071d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	460b      	mov	r3, r1
 80071e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80071e4:	2300      	movs	r3, #0
 80071e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80071f4:	78fb      	ldrb	r3, [r7, #3]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d115      	bne.n	8007226 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007206:	200a      	movs	r0, #10
 8007208:	f7fa fff8 	bl	80021fc <HAL_Delay>
      ms += 10U;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	330a      	adds	r3, #10
 8007210:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f001 f926 	bl	8008464 <USB_GetMode>
 8007218:	4603      	mov	r3, r0
 800721a:	2b01      	cmp	r3, #1
 800721c:	d01e      	beq.n	800725c <USB_SetCurrentMode+0x84>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2bc7      	cmp	r3, #199	@ 0xc7
 8007222:	d9f0      	bls.n	8007206 <USB_SetCurrentMode+0x2e>
 8007224:	e01a      	b.n	800725c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007226:	78fb      	ldrb	r3, [r7, #3]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d115      	bne.n	8007258 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007238:	200a      	movs	r0, #10
 800723a:	f7fa ffdf 	bl	80021fc <HAL_Delay>
      ms += 10U;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	330a      	adds	r3, #10
 8007242:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f001 f90d 	bl	8008464 <USB_GetMode>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d005      	beq.n	800725c <USB_SetCurrentMode+0x84>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2bc7      	cmp	r3, #199	@ 0xc7
 8007254:	d9f0      	bls.n	8007238 <USB_SetCurrentMode+0x60>
 8007256:	e001      	b.n	800725c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e005      	b.n	8007268 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2bc8      	cmp	r3, #200	@ 0xc8
 8007260:	d101      	bne.n	8007266 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e000      	b.n	8007268 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007270:	b084      	sub	sp, #16
 8007272:	b580      	push	{r7, lr}
 8007274:	b086      	sub	sp, #24
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800727e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800728a:	2300      	movs	r3, #0
 800728c:	613b      	str	r3, [r7, #16]
 800728e:	e009      	b.n	80072a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	3340      	adds	r3, #64	@ 0x40
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	4413      	add	r3, r2
 800729a:	2200      	movs	r2, #0
 800729c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	3301      	adds	r3, #1
 80072a2:	613b      	str	r3, [r7, #16]
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	2b0e      	cmp	r3, #14
 80072a8:	d9f2      	bls.n	8007290 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80072aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d11c      	bne.n	80072ec <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072c0:	f043 0302 	orr.w	r3, r3, #2
 80072c4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80072ea:	e00b      	b.n	8007304 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072fc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800730a:	461a      	mov	r2, r3
 800730c:	2300      	movs	r3, #0
 800730e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007310:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007314:	2b01      	cmp	r3, #1
 8007316:	d10d      	bne.n	8007334 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007318:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800731c:	2b00      	cmp	r3, #0
 800731e:	d104      	bne.n	800732a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007320:	2100      	movs	r1, #0
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f966 	bl	80075f4 <USB_SetDevSpeed>
 8007328:	e008      	b.n	800733c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800732a:	2101      	movs	r1, #1
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f961 	bl	80075f4 <USB_SetDevSpeed>
 8007332:	e003      	b.n	800733c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007334:	2103      	movs	r1, #3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f95c 	bl	80075f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800733c:	2110      	movs	r1, #16
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f8fa 	bl	8007538 <USB_FlushTxFifo>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f923 	bl	800759a <USB_FlushRxFifo>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007364:	461a      	mov	r2, r3
 8007366:	2300      	movs	r3, #0
 8007368:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007370:	461a      	mov	r2, r3
 8007372:	2300      	movs	r3, #0
 8007374:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800737c:	461a      	mov	r2, r3
 800737e:	2300      	movs	r3, #0
 8007380:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007382:	2300      	movs	r3, #0
 8007384:	613b      	str	r3, [r7, #16]
 8007386:	e043      	b.n	8007410 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800739a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800739e:	d118      	bne.n	80073d2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10a      	bne.n	80073bc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	015a      	lsls	r2, r3, #5
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	4413      	add	r3, r2
 80073ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073b2:	461a      	mov	r2, r3
 80073b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80073b8:	6013      	str	r3, [r2, #0]
 80073ba:	e013      	b.n	80073e4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073c8:	461a      	mov	r2, r3
 80073ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80073ce:	6013      	str	r3, [r2, #0]
 80073d0:	e008      	b.n	80073e4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	015a      	lsls	r2, r3, #5
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	4413      	add	r3, r2
 80073da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073de:	461a      	mov	r2, r3
 80073e0:	2300      	movs	r3, #0
 80073e2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	015a      	lsls	r2, r3, #5
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073f0:	461a      	mov	r2, r3
 80073f2:	2300      	movs	r3, #0
 80073f4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007402:	461a      	mov	r2, r3
 8007404:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007408:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	3301      	adds	r3, #1
 800740e:	613b      	str	r3, [r7, #16]
 8007410:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007414:	461a      	mov	r2, r3
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	4293      	cmp	r3, r2
 800741a:	d3b5      	bcc.n	8007388 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800741c:	2300      	movs	r3, #0
 800741e:	613b      	str	r3, [r7, #16]
 8007420:	e043      	b.n	80074aa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	4413      	add	r3, r2
 800742a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007434:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007438:	d118      	bne.n	800746c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10a      	bne.n	8007456 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4413      	add	r3, r2
 8007448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800744c:	461a      	mov	r2, r3
 800744e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007452:	6013      	str	r3, [r2, #0]
 8007454:	e013      	b.n	800747e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	015a      	lsls	r2, r3, #5
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	4413      	add	r3, r2
 800745e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007462:	461a      	mov	r2, r3
 8007464:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007468:	6013      	str	r3, [r2, #0]
 800746a:	e008      	b.n	800747e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	015a      	lsls	r2, r3, #5
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	4413      	add	r3, r2
 8007474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007478:	461a      	mov	r2, r3
 800747a:	2300      	movs	r3, #0
 800747c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	015a      	lsls	r2, r3, #5
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	4413      	add	r3, r2
 8007486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800748a:	461a      	mov	r2, r3
 800748c:	2300      	movs	r3, #0
 800748e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4413      	add	r3, r2
 8007498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800749c:	461a      	mov	r2, r3
 800749e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80074a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	3301      	adds	r3, #1
 80074a8:	613b      	str	r3, [r7, #16]
 80074aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80074ae:	461a      	mov	r2, r3
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d3b5      	bcc.n	8007422 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074c8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80074d6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80074d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d105      	bne.n	80074ec <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	f043 0210 	orr.w	r2, r3, #16
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	699a      	ldr	r2, [r3, #24]
 80074f0:	4b10      	ldr	r3, [pc, #64]	@ (8007534 <USB_DevInit+0x2c4>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80074f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d005      	beq.n	800750c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	f043 0208 	orr.w	r2, r3, #8
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800750c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007510:	2b01      	cmp	r3, #1
 8007512:	d107      	bne.n	8007524 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800751c:	f043 0304 	orr.w	r3, r3, #4
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007524:	7dfb      	ldrb	r3, [r7, #23]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3718      	adds	r7, #24
 800752a:	46bd      	mov	sp, r7
 800752c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007530:	b004      	add	sp, #16
 8007532:	4770      	bx	lr
 8007534:	803c3800 	.word	0x803c3800

08007538 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007542:	2300      	movs	r3, #0
 8007544:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	3301      	adds	r3, #1
 800754a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007552:	d901      	bls.n	8007558 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e01b      	b.n	8007590 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	2b00      	cmp	r3, #0
 800755e:	daf2      	bge.n	8007546 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007560:	2300      	movs	r3, #0
 8007562:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	019b      	lsls	r3, r3, #6
 8007568:	f043 0220 	orr.w	r2, r3, #32
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	3301      	adds	r3, #1
 8007574:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800757c:	d901      	bls.n	8007582 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e006      	b.n	8007590 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	f003 0320 	and.w	r3, r3, #32
 800758a:	2b20      	cmp	r3, #32
 800758c:	d0f0      	beq.n	8007570 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	bc80      	pop	{r7}
 8007598:	4770      	bx	lr

0800759a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800759a:	b480      	push	{r7}
 800759c:	b085      	sub	sp, #20
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	3301      	adds	r3, #1
 80075aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075b2:	d901      	bls.n	80075b8 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e018      	b.n	80075ea <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	daf2      	bge.n	80075a6 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80075c0:	2300      	movs	r3, #0
 80075c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2210      	movs	r2, #16
 80075c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3301      	adds	r3, #1
 80075ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075d6:	d901      	bls.n	80075dc <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e006      	b.n	80075ea <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	f003 0310 	and.w	r3, r3, #16
 80075e4:	2b10      	cmp	r3, #16
 80075e6:	d0f0      	beq.n	80075ca <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bc80      	pop	{r7}
 80075f2:	4770      	bx	lr

080075f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	78fb      	ldrb	r3, [r7, #3]
 800760e:	68f9      	ldr	r1, [r7, #12]
 8007610:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007614:	4313      	orrs	r3, r2
 8007616:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	bc80      	pop	{r7}
 8007622:	4770      	bx	lr

08007624 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007624:	b480      	push	{r7}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f003 0306 	and.w	r3, r3, #6
 800763c:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d102      	bne.n	800764a <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007644:	2300      	movs	r3, #0
 8007646:	75fb      	strb	r3, [r7, #23]
 8007648:	e00a      	b.n	8007660 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2b02      	cmp	r3, #2
 800764e:	d002      	beq.n	8007656 <USB_GetDevSpeed+0x32>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2b06      	cmp	r3, #6
 8007654:	d102      	bne.n	800765c <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007656:	2302      	movs	r3, #2
 8007658:	75fb      	strb	r3, [r7, #23]
 800765a:	e001      	b.n	8007660 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800765c:	230f      	movs	r3, #15
 800765e:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007660:	7dfb      	ldrb	r3, [r7, #23]
}
 8007662:	4618      	mov	r0, r3
 8007664:	371c      	adds	r7, #28
 8007666:	46bd      	mov	sp, r7
 8007668:	bc80      	pop	{r7}
 800766a:	4770      	bx	lr

0800766c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	785b      	ldrb	r3, [r3, #1]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d13a      	bne.n	80076fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800768e:	69da      	ldr	r2, [r3, #28]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	f003 030f 	and.w	r3, r3, #15
 8007698:	2101      	movs	r1, #1
 800769a:	fa01 f303 	lsl.w	r3, r1, r3
 800769e:	b29b      	uxth	r3, r3
 80076a0:	68f9      	ldr	r1, [r7, #12]
 80076a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076a6:	4313      	orrs	r3, r2
 80076a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	015a      	lsls	r2, r3, #5
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	4413      	add	r3, r2
 80076b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d155      	bne.n	800776c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	015a      	lsls	r2, r3, #5
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	4413      	add	r3, r2
 80076c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	791b      	ldrb	r3, [r3, #4]
 80076da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	059b      	lsls	r3, r3, #22
 80076e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076e4:	4313      	orrs	r3, r2
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	0151      	lsls	r1, r2, #5
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	440a      	add	r2, r1
 80076ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076fa:	6013      	str	r3, [r2, #0]
 80076fc:	e036      	b.n	800776c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007704:	69da      	ldr	r2, [r3, #28]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	f003 030f 	and.w	r3, r3, #15
 800770e:	2101      	movs	r1, #1
 8007710:	fa01 f303 	lsl.w	r3, r1, r3
 8007714:	041b      	lsls	r3, r3, #16
 8007716:	68f9      	ldr	r1, [r7, #12]
 8007718:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800771c:	4313      	orrs	r3, r2
 800771e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	4413      	add	r3, r2
 8007728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d11a      	bne.n	800776c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	015a      	lsls	r2, r3, #5
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	4413      	add	r3, r2
 800773e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	791b      	ldrb	r3, [r3, #4]
 8007750:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007752:	430b      	orrs	r3, r1
 8007754:	4313      	orrs	r3, r2
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	0151      	lsls	r1, r2, #5
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	440a      	add	r2, r1
 800775e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800776a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	bc80      	pop	{r7}
 8007776:	4770      	bx	lr

08007778 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	785b      	ldrb	r3, [r3, #1]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d161      	bne.n	8007858 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4413      	add	r3, r2
 800779c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077aa:	d11f      	bne.n	80077ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	015a      	lsls	r2, r3, #5
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	4413      	add	r3, r2
 80077b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	0151      	lsls	r1, r2, #5
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	440a      	add	r2, r1
 80077c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80077ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	015a      	lsls	r2, r3, #5
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	0151      	lsls	r1, r2, #5
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	440a      	add	r2, r1
 80077e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	f003 030f 	and.w	r3, r3, #15
 80077fc:	2101      	movs	r1, #1
 80077fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007802:	b29b      	uxth	r3, r3
 8007804:	43db      	mvns	r3, r3
 8007806:	68f9      	ldr	r1, [r7, #12]
 8007808:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800780c:	4013      	ands	r3, r2
 800780e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007816:	69da      	ldr	r2, [r3, #28]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	f003 030f 	and.w	r3, r3, #15
 8007820:	2101      	movs	r1, #1
 8007822:	fa01 f303 	lsl.w	r3, r1, r3
 8007826:	b29b      	uxth	r3, r3
 8007828:	43db      	mvns	r3, r3
 800782a:	68f9      	ldr	r1, [r7, #12]
 800782c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007830:	4013      	ands	r3, r2
 8007832:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	4413      	add	r3, r2
 800783c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	0159      	lsls	r1, r3, #5
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	440b      	add	r3, r1
 800784a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800784e:	4619      	mov	r1, r3
 8007850:	4b35      	ldr	r3, [pc, #212]	@ (8007928 <USB_DeactivateEndpoint+0x1b0>)
 8007852:	4013      	ands	r3, r2
 8007854:	600b      	str	r3, [r1, #0]
 8007856:	e060      	b.n	800791a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4413      	add	r3, r2
 8007860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800786a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800786e:	d11f      	bne.n	80078b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	015a      	lsls	r2, r3, #5
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	4413      	add	r3, r2
 8007878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	0151      	lsls	r1, r2, #5
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	440a      	add	r2, r1
 8007886:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800788a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800788e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4413      	add	r3, r2
 8007898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	0151      	lsls	r1, r2, #5
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	440a      	add	r2, r1
 80078a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80078ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	f003 030f 	and.w	r3, r3, #15
 80078c0:	2101      	movs	r1, #1
 80078c2:	fa01 f303 	lsl.w	r3, r1, r3
 80078c6:	041b      	lsls	r3, r3, #16
 80078c8:	43db      	mvns	r3, r3
 80078ca:	68f9      	ldr	r1, [r7, #12]
 80078cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078d0:	4013      	ands	r3, r2
 80078d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078da:	69da      	ldr	r2, [r3, #28]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	f003 030f 	and.w	r3, r3, #15
 80078e4:	2101      	movs	r1, #1
 80078e6:	fa01 f303 	lsl.w	r3, r1, r3
 80078ea:	041b      	lsls	r3, r3, #16
 80078ec:	43db      	mvns	r3, r3
 80078ee:	68f9      	ldr	r1, [r7, #12]
 80078f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078f4:	4013      	ands	r3, r2
 80078f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	015a      	lsls	r2, r3, #5
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4413      	add	r3, r2
 8007900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	0159      	lsls	r1, r3, #5
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	440b      	add	r3, r1
 800790e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007912:	4619      	mov	r1, r3
 8007914:	4b05      	ldr	r3, [pc, #20]	@ (800792c <USB_DeactivateEndpoint+0x1b4>)
 8007916:	4013      	ands	r3, r2
 8007918:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	bc80      	pop	{r7}
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	ec337800 	.word	0xec337800
 800792c:	eff37800 	.word	0xeff37800

08007930 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b08a      	sub	sp, #40	@ 0x28
 8007934:	af02      	add	r7, sp, #8
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	4613      	mov	r3, r2
 800793c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	785b      	ldrb	r3, [r3, #1]
 800794c:	2b01      	cmp	r3, #1
 800794e:	f040 817a 	bne.w	8007c46 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d132      	bne.n	80079c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	015a      	lsls	r2, r3, #5
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	4413      	add	r3, r2
 8007962:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	0151      	lsls	r1, r2, #5
 800796c:	69fa      	ldr	r2, [r7, #28]
 800796e:	440a      	add	r2, r1
 8007970:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007974:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007978:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800797c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	015a      	lsls	r2, r3, #5
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	4413      	add	r3, r2
 8007986:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	69ba      	ldr	r2, [r7, #24]
 800798e:	0151      	lsls	r1, r2, #5
 8007990:	69fa      	ldr	r2, [r7, #28]
 8007992:	440a      	add	r2, r1
 8007994:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007998:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800799c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	0151      	lsls	r1, r2, #5
 80079b0:	69fa      	ldr	r2, [r7, #28]
 80079b2:	440a      	add	r2, r1
 80079b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079b8:	0cdb      	lsrs	r3, r3, #19
 80079ba:	04db      	lsls	r3, r3, #19
 80079bc:	6113      	str	r3, [r2, #16]
 80079be:	e092      	b.n	8007ae6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	015a      	lsls	r2, r3, #5
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	69ba      	ldr	r2, [r7, #24]
 80079d0:	0151      	lsls	r1, r2, #5
 80079d2:	69fa      	ldr	r2, [r7, #28]
 80079d4:	440a      	add	r2, r1
 80079d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079da:	0cdb      	lsrs	r3, r3, #19
 80079dc:	04db      	lsls	r3, r3, #19
 80079de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	015a      	lsls	r2, r3, #5
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	4413      	add	r3, r2
 80079e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	69ba      	ldr	r2, [r7, #24]
 80079f0:	0151      	lsls	r1, r2, #5
 80079f2:	69fa      	ldr	r2, [r7, #28]
 80079f4:	440a      	add	r2, r1
 80079f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079fa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80079fe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007a02:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d11a      	bne.n	8007a40 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	691a      	ldr	r2, [r3, #16]
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d903      	bls.n	8007a1e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	689a      	ldr	r2, [r3, #8]
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	0151      	lsls	r1, r2, #5
 8007a30:	69fa      	ldr	r2, [r7, #28]
 8007a32:	440a      	add	r2, r1
 8007a34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a3c:	6113      	str	r3, [r2, #16]
 8007a3e:	e01b      	b.n	8007a78 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a4c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	6919      	ldr	r1, [r3, #16]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	440b      	add	r3, r1
 8007a58:	1e59      	subs	r1, r3, #1
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a62:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007a64:	4ba2      	ldr	r3, [pc, #648]	@ (8007cf0 <USB_EPStartXfer+0x3c0>)
 8007a66:	400b      	ands	r3, r1
 8007a68:	69b9      	ldr	r1, [r7, #24]
 8007a6a:	0148      	lsls	r0, r1, #5
 8007a6c:	69f9      	ldr	r1, [r7, #28]
 8007a6e:	4401      	add	r1, r0
 8007a70:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007a74:	4313      	orrs	r3, r2
 8007a76:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a84:	691a      	ldr	r2, [r3, #16]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a8e:	69b9      	ldr	r1, [r7, #24]
 8007a90:	0148      	lsls	r0, r1, #5
 8007a92:	69f9      	ldr	r1, [r7, #28]
 8007a94:	4401      	add	r1, r0
 8007a96:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	791b      	ldrb	r3, [r3, #4]
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d11f      	bne.n	8007ae6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	015a      	lsls	r2, r3, #5
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	4413      	add	r3, r2
 8007aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	69ba      	ldr	r2, [r7, #24]
 8007ab6:	0151      	lsls	r1, r2, #5
 8007ab8:	69fa      	ldr	r2, [r7, #28]
 8007aba:	440a      	add	r2, r1
 8007abc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ac0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007ac4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	015a      	lsls	r2, r3, #5
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	0151      	lsls	r1, r2, #5
 8007ad8:	69fa      	ldr	r2, [r7, #28]
 8007ada:	440a      	add	r2, r1
 8007adc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ae0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007ae4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007ae6:	79fb      	ldrb	r3, [r7, #7]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d14b      	bne.n	8007b84 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	69db      	ldr	r3, [r3, #28]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d009      	beq.n	8007b08 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b00:	461a      	mov	r2, r3
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	69db      	ldr	r3, [r3, #28]
 8007b06:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	791b      	ldrb	r3, [r3, #4]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d128      	bne.n	8007b62 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d110      	bne.n	8007b42 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	69ba      	ldr	r2, [r7, #24]
 8007b30:	0151      	lsls	r1, r2, #5
 8007b32:	69fa      	ldr	r2, [r7, #28]
 8007b34:	440a      	add	r2, r1
 8007b36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b3a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	e00f      	b.n	8007b62 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	015a      	lsls	r2, r3, #5
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	4413      	add	r3, r2
 8007b4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	69ba      	ldr	r2, [r7, #24]
 8007b52:	0151      	lsls	r1, r2, #5
 8007b54:	69fa      	ldr	r2, [r7, #28]
 8007b56:	440a      	add	r2, r1
 8007b58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b60:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	0151      	lsls	r1, r2, #5
 8007b74:	69fa      	ldr	r2, [r7, #28]
 8007b76:	440a      	add	r2, r1
 8007b78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b7c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007b80:	6013      	str	r3, [r2, #0]
 8007b82:	e165      	b.n	8007e50 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	015a      	lsls	r2, r3, #5
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	0151      	lsls	r1, r2, #5
 8007b96:	69fa      	ldr	r2, [r7, #28]
 8007b98:	440a      	add	r2, r1
 8007b9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b9e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007ba2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	791b      	ldrb	r3, [r3, #4]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d015      	beq.n	8007bd8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f000 814d 	beq.w	8007e50 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	f003 030f 	and.w	r3, r3, #15
 8007bc6:	2101      	movs	r1, #1
 8007bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bcc:	69f9      	ldr	r1, [r7, #28]
 8007bce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	634b      	str	r3, [r1, #52]	@ 0x34
 8007bd6:	e13b      	b.n	8007e50 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d110      	bne.n	8007c0a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	0151      	lsls	r1, r2, #5
 8007bfa:	69fa      	ldr	r2, [r7, #28]
 8007bfc:	440a      	add	r2, r1
 8007bfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c02:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007c06:	6013      	str	r3, [r2, #0]
 8007c08:	e00f      	b.n	8007c2a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	015a      	lsls	r2, r3, #5
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	4413      	add	r3, r2
 8007c12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	69ba      	ldr	r2, [r7, #24]
 8007c1a:	0151      	lsls	r1, r2, #5
 8007c1c:	69fa      	ldr	r2, [r7, #28]
 8007c1e:	440a      	add	r2, r1
 8007c20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c28:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	68d9      	ldr	r1, [r3, #12]
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	781a      	ldrb	r2, [r3, #0]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	b298      	uxth	r0, r3
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f000 f9b7 	bl	8007fb2 <USB_WritePacket>
 8007c44:	e104      	b.n	8007e50 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	69ba      	ldr	r2, [r7, #24]
 8007c56:	0151      	lsls	r1, r2, #5
 8007c58:	69fa      	ldr	r2, [r7, #28]
 8007c5a:	440a      	add	r2, r1
 8007c5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c60:	0cdb      	lsrs	r3, r3, #19
 8007c62:	04db      	lsls	r3, r3, #19
 8007c64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	69ba      	ldr	r2, [r7, #24]
 8007c76:	0151      	lsls	r1, r2, #5
 8007c78:	69fa      	ldr	r2, [r7, #28]
 8007c7a:	440a      	add	r2, r1
 8007c7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c80:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007c84:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007c88:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d131      	bne.n	8007cf4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d003      	beq.n	8007ca0 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	689a      	ldr	r2, [r3, #8]
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	689a      	ldr	r2, [r3, #8]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	015a      	lsls	r2, r3, #5
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	4413      	add	r3, r2
 8007cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cb4:	691a      	ldr	r2, [r3, #16]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cbe:	69b9      	ldr	r1, [r7, #24]
 8007cc0:	0148      	lsls	r0, r1, #5
 8007cc2:	69f9      	ldr	r1, [r7, #28]
 8007cc4:	4401      	add	r1, r0
 8007cc6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	015a      	lsls	r2, r3, #5
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	69ba      	ldr	r2, [r7, #24]
 8007cde:	0151      	lsls	r1, r2, #5
 8007ce0:	69fa      	ldr	r2, [r7, #28]
 8007ce2:	440a      	add	r2, r1
 8007ce4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ce8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007cec:	6113      	str	r3, [r2, #16]
 8007cee:	e061      	b.n	8007db4 <USB_EPStartXfer+0x484>
 8007cf0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d123      	bne.n	8007d44 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d08:	691a      	ldr	r2, [r3, #16]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d12:	69b9      	ldr	r1, [r7, #24]
 8007d14:	0148      	lsls	r0, r1, #5
 8007d16:	69f9      	ldr	r1, [r7, #28]
 8007d18:	4401      	add	r1, r0
 8007d1a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	015a      	lsls	r2, r3, #5
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	4413      	add	r3, r2
 8007d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	0151      	lsls	r1, r2, #5
 8007d34:	69fa      	ldr	r2, [r7, #28]
 8007d36:	440a      	add	r2, r1
 8007d38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d40:	6113      	str	r3, [r2, #16]
 8007d42:	e037      	b.n	8007db4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	691a      	ldr	r2, [r3, #16]
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	1e5a      	subs	r2, r3, #1
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d58:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	8afa      	ldrh	r2, [r7, #22]
 8007d60:	fb03 f202 	mul.w	r2, r3, r2
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d74:	691a      	ldr	r2, [r3, #16]
 8007d76:	8afb      	ldrh	r3, [r7, #22]
 8007d78:	04d9      	lsls	r1, r3, #19
 8007d7a:	4b38      	ldr	r3, [pc, #224]	@ (8007e5c <USB_EPStartXfer+0x52c>)
 8007d7c:	400b      	ands	r3, r1
 8007d7e:	69b9      	ldr	r1, [r7, #24]
 8007d80:	0148      	lsls	r0, r1, #5
 8007d82:	69f9      	ldr	r1, [r7, #28]
 8007d84:	4401      	add	r1, r0
 8007d86:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	015a      	lsls	r2, r3, #5
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	4413      	add	r3, r2
 8007d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d9a:	691a      	ldr	r2, [r3, #16]
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	6a1b      	ldr	r3, [r3, #32]
 8007da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007da4:	69b9      	ldr	r1, [r7, #24]
 8007da6:	0148      	lsls	r0, r1, #5
 8007da8:	69f9      	ldr	r1, [r7, #28]
 8007daa:	4401      	add	r1, r0
 8007dac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007db0:	4313      	orrs	r3, r2
 8007db2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007db4:	79fb      	ldrb	r3, [r7, #7]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d10d      	bne.n	8007dd6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d009      	beq.n	8007dd6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	68d9      	ldr	r1, [r3, #12]
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	015a      	lsls	r2, r3, #5
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	4413      	add	r3, r2
 8007dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dd2:	460a      	mov	r2, r1
 8007dd4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	791b      	ldrb	r3, [r3, #4]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d128      	bne.n	8007e30 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d110      	bne.n	8007e10 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	015a      	lsls	r2, r3, #5
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	69ba      	ldr	r2, [r7, #24]
 8007dfe:	0151      	lsls	r1, r2, #5
 8007e00:	69fa      	ldr	r2, [r7, #28]
 8007e02:	440a      	add	r2, r1
 8007e04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e0c:	6013      	str	r3, [r2, #0]
 8007e0e:	e00f      	b.n	8007e30 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	015a      	lsls	r2, r3, #5
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	4413      	add	r3, r2
 8007e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	0151      	lsls	r1, r2, #5
 8007e22:	69fa      	ldr	r2, [r7, #28]
 8007e24:	440a      	add	r2, r1
 8007e26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e2e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	015a      	lsls	r2, r3, #5
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	4413      	add	r3, r2
 8007e38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	69ba      	ldr	r2, [r7, #24]
 8007e40:	0151      	lsls	r1, r2, #5
 8007e42:	69fa      	ldr	r2, [r7, #28]
 8007e44:	440a      	add	r2, r1
 8007e46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e4a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007e4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3720      	adds	r7, #32
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	1ff80000 	.word	0x1ff80000

08007e60 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b087      	sub	sp, #28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	785b      	ldrb	r3, [r3, #1]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d14a      	bne.n	8007f14 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	015a      	lsls	r2, r3, #5
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	4413      	add	r3, r2
 8007e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e96:	f040 8086 	bne.w	8007fa6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	7812      	ldrb	r2, [r2, #0]
 8007eae:	0151      	lsls	r1, r2, #5
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	440a      	add	r2, r1
 8007eb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007eb8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007ebc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	7812      	ldrb	r2, [r2, #0]
 8007ed2:	0151      	lsls	r1, r2, #5
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	440a      	add	r2, r1
 8007ed8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007edc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ee0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d902      	bls.n	8007ef8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ef6:	e056      	b.n	8007fa6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f10:	d0e7      	beq.n	8007ee2 <USB_EPStopXfer+0x82>
 8007f12:	e048      	b.n	8007fa6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	015a      	lsls	r2, r3, #5
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f2c:	d13b      	bne.n	8007fa6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	7812      	ldrb	r2, [r2, #0]
 8007f42:	0151      	lsls	r1, r2, #5
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	440a      	add	r2, r1
 8007f48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007f50:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	683a      	ldr	r2, [r7, #0]
 8007f64:	7812      	ldrb	r2, [r2, #0]
 8007f66:	0151      	lsls	r1, r2, #5
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	440a      	add	r2, r1
 8007f6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d902      	bls.n	8007f8c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	75fb      	strb	r3, [r7, #23]
          break;
 8007f8a:	e00c      	b.n	8007fa6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	015a      	lsls	r2, r3, #5
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	4413      	add	r3, r2
 8007f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fa4:	d0e7      	beq.n	8007f76 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	371c      	adds	r7, #28
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bc80      	pop	{r7}
 8007fb0:	4770      	bx	lr

08007fb2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b089      	sub	sp, #36	@ 0x24
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	4611      	mov	r1, r2
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	71fb      	strb	r3, [r7, #7]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007fd0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d123      	bne.n	8008020 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007fd8:	88bb      	ldrh	r3, [r7, #4]
 8007fda:	3303      	adds	r3, #3
 8007fdc:	089b      	lsrs	r3, r3, #2
 8007fde:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	61bb      	str	r3, [r7, #24]
 8007fe4:	e018      	b.n	8008018 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007fe6:	79fb      	ldrb	r3, [r7, #7]
 8007fe8:	031a      	lsls	r2, r3, #12
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	3301      	adds	r3, #1
 8008004:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	3301      	adds	r3, #1
 800800a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	3301      	adds	r3, #1
 8008010:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	3301      	adds	r3, #1
 8008016:	61bb      	str	r3, [r7, #24]
 8008018:	69ba      	ldr	r2, [r7, #24]
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	429a      	cmp	r2, r3
 800801e:	d3e2      	bcc.n	8007fe6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3724      	adds	r7, #36	@ 0x24
 8008026:	46bd      	mov	sp, r7
 8008028:	bc80      	pop	{r7}
 800802a:	4770      	bx	lr

0800802c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800802c:	b480      	push	{r7}
 800802e:	b08b      	sub	sp, #44	@ 0x2c
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	4613      	mov	r3, r2
 8008038:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008042:	88fb      	ldrh	r3, [r7, #6]
 8008044:	089b      	lsrs	r3, r3, #2
 8008046:	b29b      	uxth	r3, r3
 8008048:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800804a:	88fb      	ldrh	r3, [r7, #6]
 800804c:	f003 0303 	and.w	r3, r3, #3
 8008050:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008052:	2300      	movs	r3, #0
 8008054:	623b      	str	r3, [r7, #32]
 8008056:	e014      	b.n	8008082 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008062:	601a      	str	r2, [r3, #0]
    pDest++;
 8008064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008066:	3301      	adds	r3, #1
 8008068:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800806a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806c:	3301      	adds	r3, #1
 800806e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008072:	3301      	adds	r3, #1
 8008074:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008078:	3301      	adds	r3, #1
 800807a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	3301      	adds	r3, #1
 8008080:	623b      	str	r3, [r7, #32]
 8008082:	6a3a      	ldr	r2, [r7, #32]
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	429a      	cmp	r2, r3
 8008088:	d3e6      	bcc.n	8008058 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800808a:	8bfb      	ldrh	r3, [r7, #30]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d01e      	beq.n	80080ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008090:	2300      	movs	r3, #0
 8008092:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800809a:	461a      	mov	r2, r3
 800809c:	f107 0310 	add.w	r3, r7, #16
 80080a0:	6812      	ldr	r2, [r2, #0]
 80080a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80080a4:	693a      	ldr	r2, [r7, #16]
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	00db      	lsls	r3, r3, #3
 80080ac:	fa22 f303 	lsr.w	r3, r2, r3
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b4:	701a      	strb	r2, [r3, #0]
      i++;
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	3301      	adds	r3, #1
 80080ba:	623b      	str	r3, [r7, #32]
      pDest++;
 80080bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080be:	3301      	adds	r3, #1
 80080c0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80080c2:	8bfb      	ldrh	r3, [r7, #30]
 80080c4:	3b01      	subs	r3, #1
 80080c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80080c8:	8bfb      	ldrh	r3, [r7, #30]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1ea      	bne.n	80080a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80080ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	372c      	adds	r7, #44	@ 0x2c
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bc80      	pop	{r7}
 80080d8:	4770      	bx	lr

080080da <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80080da:	b480      	push	{r7}
 80080dc:	b085      	sub	sp, #20
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	785b      	ldrb	r3, [r3, #1]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d12c      	bne.n	8008150 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	015a      	lsls	r2, r3, #5
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	4413      	add	r3, r2
 80080fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	db12      	blt.n	800812e <USB_EPSetStall+0x54>
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00f      	beq.n	800812e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	015a      	lsls	r2, r3, #5
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	4413      	add	r3, r2
 8008116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	0151      	lsls	r1, r2, #5
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	440a      	add	r2, r1
 8008124:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008128:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800812c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	4413      	add	r3, r2
 8008136:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	0151      	lsls	r1, r2, #5
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	440a      	add	r2, r1
 8008144:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008148:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800814c:	6013      	str	r3, [r2, #0]
 800814e:	e02b      	b.n	80081a8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	4413      	add	r3, r2
 8008158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	db12      	blt.n	8008188 <USB_EPSetStall+0xae>
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00f      	beq.n	8008188 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	0151      	lsls	r1, r2, #5
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	440a      	add	r2, r1
 800817e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008182:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008186:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	0151      	lsls	r1, r2, #5
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	440a      	add	r2, r1
 800819e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80081a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3714      	adds	r7, #20
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bc80      	pop	{r7}
 80081b2:	4770      	bx	lr

080081b4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	785b      	ldrb	r3, [r3, #1]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d128      	bne.n	8008222 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	015a      	lsls	r2, r3, #5
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	4413      	add	r3, r2
 80081d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	0151      	lsls	r1, r2, #5
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	440a      	add	r2, r1
 80081e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80081ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	791b      	ldrb	r3, [r3, #4]
 80081f4:	2b03      	cmp	r3, #3
 80081f6:	d003      	beq.n	8008200 <USB_EPClearStall+0x4c>
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	791b      	ldrb	r3, [r3, #4]
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d138      	bne.n	8008272 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	015a      	lsls	r2, r3, #5
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	4413      	add	r3, r2
 8008208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	0151      	lsls	r1, r2, #5
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	440a      	add	r2, r1
 8008216:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800821a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800821e:	6013      	str	r3, [r2, #0]
 8008220:	e027      	b.n	8008272 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	015a      	lsls	r2, r3, #5
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	4413      	add	r3, r2
 800822a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	0151      	lsls	r1, r2, #5
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	440a      	add	r2, r1
 8008238:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800823c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008240:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	791b      	ldrb	r3, [r3, #4]
 8008246:	2b03      	cmp	r3, #3
 8008248:	d003      	beq.n	8008252 <USB_EPClearStall+0x9e>
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	791b      	ldrb	r3, [r3, #4]
 800824e:	2b02      	cmp	r3, #2
 8008250:	d10f      	bne.n	8008272 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	4413      	add	r3, r2
 800825a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	68ba      	ldr	r2, [r7, #8]
 8008262:	0151      	lsls	r1, r2, #5
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	440a      	add	r2, r1
 8008268:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800826c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008270:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	bc80      	pop	{r7}
 800827c:	4770      	bx	lr

0800827e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800827e:	b480      	push	{r7}
 8008280:	b085      	sub	sp, #20
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	460b      	mov	r3, r1
 8008288:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800829c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80082a0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	78fb      	ldrb	r3, [r7, #3]
 80082ac:	011b      	lsls	r3, r3, #4
 80082ae:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80082b2:	68f9      	ldr	r1, [r7, #12]
 80082b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80082b8:	4313      	orrs	r3, r2
 80082ba:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3714      	adds	r7, #20
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bc80      	pop	{r7}
 80082c6:	4770      	bx	lr

080082c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80082e2:	f023 0303 	bic.w	r3, r3, #3
 80082e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082f6:	f023 0302 	bic.w	r3, r3, #2
 80082fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	bc80      	pop	{r7}
 8008306:	4770      	bx	lr

08008308 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008322:	f023 0303 	bic.w	r3, r3, #3
 8008326:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008336:	f043 0302 	orr.w	r3, r3, #2
 800833a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3714      	adds	r7, #20
 8008342:	46bd      	mov	sp, r7
 8008344:	bc80      	pop	{r7}
 8008346:	4770      	bx	lr

08008348 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	695b      	ldr	r3, [r3, #20]
 8008354:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	4013      	ands	r3, r2
 800835e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008360:	68fb      	ldr	r3, [r7, #12]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	bc80      	pop	{r7}
 800836a:	4770      	bx	lr

0800836c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008388:	69db      	ldr	r3, [r3, #28]
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	4013      	ands	r3, r2
 800838e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	0c1b      	lsrs	r3, r3, #16
}
 8008394:	4618      	mov	r0, r3
 8008396:	3714      	adds	r7, #20
 8008398:	46bd      	mov	sp, r7
 800839a:	bc80      	pop	{r7}
 800839c:	4770      	bx	lr

0800839e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800839e:	b480      	push	{r7}
 80083a0:	b085      	sub	sp, #20
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083ba:	69db      	ldr	r3, [r3, #28]
 80083bc:	68ba      	ldr	r2, [r7, #8]
 80083be:	4013      	ands	r3, r2
 80083c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	b29b      	uxth	r3, r3
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bc80      	pop	{r7}
 80083ce:	4770      	bx	lr

080083d0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	460b      	mov	r3, r1
 80083da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80083e0:	78fb      	ldrb	r3, [r7, #3]
 80083e2:	015a      	lsls	r2, r3, #5
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	4413      	add	r3, r2
 80083e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083f6:	695b      	ldr	r3, [r3, #20]
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	4013      	ands	r3, r2
 80083fc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80083fe:	68bb      	ldr	r3, [r7, #8]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	bc80      	pop	{r7}
 8008408:	4770      	bx	lr

0800840a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800840a:	b480      	push	{r7}
 800840c:	b087      	sub	sp, #28
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	460b      	mov	r3, r1
 8008414:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800842a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800842c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800842e:	78fb      	ldrb	r3, [r7, #3]
 8008430:	f003 030f 	and.w	r3, r3, #15
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	fa22 f303 	lsr.w	r3, r2, r3
 800843a:	01db      	lsls	r3, r3, #7
 800843c:	b2db      	uxtb	r3, r3
 800843e:	693a      	ldr	r2, [r7, #16]
 8008440:	4313      	orrs	r3, r2
 8008442:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008444:	78fb      	ldrb	r3, [r7, #3]
 8008446:	015a      	lsls	r2, r3, #5
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	4413      	add	r3, r2
 800844c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	4013      	ands	r3, r2
 8008456:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008458:	68bb      	ldr	r3, [r7, #8]
}
 800845a:	4618      	mov	r0, r3
 800845c:	371c      	adds	r7, #28
 800845e:	46bd      	mov	sp, r7
 8008460:	bc80      	pop	{r7}
 8008462:	4770      	bx	lr

08008464 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	695b      	ldr	r3, [r3, #20]
 8008470:	f003 0301 	and.w	r3, r3, #1
}
 8008474:	4618      	mov	r0, r3
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	bc80      	pop	{r7}
 800847c:	4770      	bx	lr

0800847e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800847e:	b480      	push	{r7}
 8008480:	b085      	sub	sp, #20
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008498:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800849c:	f023 0307 	bic.w	r3, r3, #7
 80084a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3714      	adds	r7, #20
 80084bc:	46bd      	mov	sp, r7
 80084be:	bc80      	pop	{r7}
 80084c0:	4770      	bx	lr
	...

080084c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b087      	sub	sp, #28
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	460b      	mov	r3, r1
 80084ce:	607a      	str	r2, [r7, #4]
 80084d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	333c      	adds	r3, #60	@ 0x3c
 80084da:	3304      	adds	r3, #4
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	4a25      	ldr	r2, [pc, #148]	@ (8008578 <USB_EP0_OutStart+0xb4>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d90a      	bls.n	80084fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084f8:	d101      	bne.n	80084fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	e037      	b.n	800856e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008504:	461a      	mov	r2, r3
 8008506:	2300      	movs	r3, #0
 8008508:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008518:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800851c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	697a      	ldr	r2, [r7, #20]
 8008528:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800852c:	f043 0318 	orr.w	r3, r3, #24
 8008530:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008540:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008544:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008546:	7afb      	ldrb	r3, [r7, #11]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d10f      	bne.n	800856c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008552:	461a      	mov	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	697a      	ldr	r2, [r7, #20]
 8008562:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008566:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800856a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	371c      	adds	r7, #28
 8008572:	46bd      	mov	sp, r7
 8008574:	bc80      	pop	{r7}
 8008576:	4770      	bx	lr
 8008578:	4f54300a 	.word	0x4f54300a

0800857c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008584:	2300      	movs	r3, #0
 8008586:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	3301      	adds	r3, #1
 800858c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008594:	d901      	bls.n	800859a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e01b      	b.n	80085d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	daf2      	bge.n	8008588 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80085a2:	2300      	movs	r3, #0
 80085a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	f043 0201 	orr.w	r2, r3, #1
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3301      	adds	r3, #1
 80085b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085be:	d901      	bls.n	80085c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e006      	b.n	80085d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	f003 0301 	and.w	r3, r3, #1
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d0f0      	beq.n	80085b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bc80      	pop	{r7}
 80085da:	4770      	bx	lr

080085dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	460b      	mov	r3, r1
 80085e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80085e8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80085ec:	f002 fc80 	bl	800aef0 <USBD_static_malloc>
 80085f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d109      	bne.n	800860c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	32b0      	adds	r2, #176	@ 0xb0
 8008602:	2100      	movs	r1, #0
 8008604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008608:	2302      	movs	r3, #2
 800860a:	e0d4      	b.n	80087b6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800860c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008610:	2100      	movs	r1, #0
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f003 fa2b 	bl	800ba6e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	32b0      	adds	r2, #176	@ 0xb0
 8008622:	68f9      	ldr	r1, [r7, #12]
 8008624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	32b0      	adds	r2, #176	@ 0xb0
 8008632:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	7c1b      	ldrb	r3, [r3, #16]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d138      	bne.n	80086b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008644:	4b5e      	ldr	r3, [pc, #376]	@ (80087c0 <USBD_CDC_Init+0x1e4>)
 8008646:	7819      	ldrb	r1, [r3, #0]
 8008648:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800864c:	2202      	movs	r2, #2
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f002 fb2b 	bl	800acaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008654:	4b5a      	ldr	r3, [pc, #360]	@ (80087c0 <USBD_CDC_Init+0x1e4>)
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	f003 020f 	and.w	r2, r3, #15
 800865c:	6879      	ldr	r1, [r7, #4]
 800865e:	4613      	mov	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4413      	add	r3, r2
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	440b      	add	r3, r1
 8008668:	3324      	adds	r3, #36	@ 0x24
 800866a:	2201      	movs	r2, #1
 800866c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800866e:	4b55      	ldr	r3, [pc, #340]	@ (80087c4 <USBD_CDC_Init+0x1e8>)
 8008670:	7819      	ldrb	r1, [r3, #0]
 8008672:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008676:	2202      	movs	r2, #2
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f002 fb16 	bl	800acaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800867e:	4b51      	ldr	r3, [pc, #324]	@ (80087c4 <USBD_CDC_Init+0x1e8>)
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	f003 020f 	and.w	r2, r3, #15
 8008686:	6879      	ldr	r1, [r7, #4]
 8008688:	4613      	mov	r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4413      	add	r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	440b      	add	r3, r1
 8008692:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008696:	2201      	movs	r2, #1
 8008698:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800869a:	4b4b      	ldr	r3, [pc, #300]	@ (80087c8 <USBD_CDC_Init+0x1ec>)
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	f003 020f 	and.w	r2, r3, #15
 80086a2:	6879      	ldr	r1, [r7, #4]
 80086a4:	4613      	mov	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4413      	add	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	440b      	add	r3, r1
 80086ae:	3326      	adds	r3, #38	@ 0x26
 80086b0:	2210      	movs	r2, #16
 80086b2:	801a      	strh	r2, [r3, #0]
 80086b4:	e035      	b.n	8008722 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80086b6:	4b42      	ldr	r3, [pc, #264]	@ (80087c0 <USBD_CDC_Init+0x1e4>)
 80086b8:	7819      	ldrb	r1, [r3, #0]
 80086ba:	2340      	movs	r3, #64	@ 0x40
 80086bc:	2202      	movs	r2, #2
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f002 faf3 	bl	800acaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80086c4:	4b3e      	ldr	r3, [pc, #248]	@ (80087c0 <USBD_CDC_Init+0x1e4>)
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	f003 020f 	and.w	r2, r3, #15
 80086cc:	6879      	ldr	r1, [r7, #4]
 80086ce:	4613      	mov	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4413      	add	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	440b      	add	r3, r1
 80086d8:	3324      	adds	r3, #36	@ 0x24
 80086da:	2201      	movs	r2, #1
 80086dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80086de:	4b39      	ldr	r3, [pc, #228]	@ (80087c4 <USBD_CDC_Init+0x1e8>)
 80086e0:	7819      	ldrb	r1, [r3, #0]
 80086e2:	2340      	movs	r3, #64	@ 0x40
 80086e4:	2202      	movs	r2, #2
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f002 fadf 	bl	800acaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80086ec:	4b35      	ldr	r3, [pc, #212]	@ (80087c4 <USBD_CDC_Init+0x1e8>)
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	f003 020f 	and.w	r2, r3, #15
 80086f4:	6879      	ldr	r1, [r7, #4]
 80086f6:	4613      	mov	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	440b      	add	r3, r1
 8008700:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008704:	2201      	movs	r2, #1
 8008706:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008708:	4b2f      	ldr	r3, [pc, #188]	@ (80087c8 <USBD_CDC_Init+0x1ec>)
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	f003 020f 	and.w	r2, r3, #15
 8008710:	6879      	ldr	r1, [r7, #4]
 8008712:	4613      	mov	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	440b      	add	r3, r1
 800871c:	3326      	adds	r3, #38	@ 0x26
 800871e:	2210      	movs	r2, #16
 8008720:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008722:	4b29      	ldr	r3, [pc, #164]	@ (80087c8 <USBD_CDC_Init+0x1ec>)
 8008724:	7819      	ldrb	r1, [r3, #0]
 8008726:	2308      	movs	r3, #8
 8008728:	2203      	movs	r2, #3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f002 fabd 	bl	800acaa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008730:	4b25      	ldr	r3, [pc, #148]	@ (80087c8 <USBD_CDC_Init+0x1ec>)
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	f003 020f 	and.w	r2, r3, #15
 8008738:	6879      	ldr	r1, [r7, #4]
 800873a:	4613      	mov	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4413      	add	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	440b      	add	r3, r1
 8008744:	3324      	adds	r3, #36	@ 0x24
 8008746:	2201      	movs	r2, #1
 8008748:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	33b0      	adds	r3, #176	@ 0xb0
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2200      	movs	r2, #0
 800876a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008780:	2302      	movs	r3, #2
 8008782:	e018      	b.n	80087b6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	7c1b      	ldrb	r3, [r3, #16]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10a      	bne.n	80087a2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800878c:	4b0d      	ldr	r3, [pc, #52]	@ (80087c4 <USBD_CDC_Init+0x1e8>)
 800878e:	7819      	ldrb	r1, [r3, #0]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008796:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f002 fb73 	bl	800ae86 <USBD_LL_PrepareReceive>
 80087a0:	e008      	b.n	80087b4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80087a2:	4b08      	ldr	r3, [pc, #32]	@ (80087c4 <USBD_CDC_Init+0x1e8>)
 80087a4:	7819      	ldrb	r1, [r3, #0]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80087ac:	2340      	movs	r3, #64	@ 0x40
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f002 fb69 	bl	800ae86 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	20000093 	.word	0x20000093
 80087c4:	20000094 	.word	0x20000094
 80087c8:	20000095 	.word	0x20000095

080087cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	460b      	mov	r3, r1
 80087d6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80087d8:	4b3a      	ldr	r3, [pc, #232]	@ (80088c4 <USBD_CDC_DeInit+0xf8>)
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	4619      	mov	r1, r3
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f002 fa89 	bl	800acf6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80087e4:	4b37      	ldr	r3, [pc, #220]	@ (80088c4 <USBD_CDC_DeInit+0xf8>)
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	f003 020f 	and.w	r2, r3, #15
 80087ec:	6879      	ldr	r1, [r7, #4]
 80087ee:	4613      	mov	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	440b      	add	r3, r1
 80087f8:	3324      	adds	r3, #36	@ 0x24
 80087fa:	2200      	movs	r2, #0
 80087fc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80087fe:	4b32      	ldr	r3, [pc, #200]	@ (80088c8 <USBD_CDC_DeInit+0xfc>)
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	4619      	mov	r1, r3
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f002 fa76 	bl	800acf6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800880a:	4b2f      	ldr	r3, [pc, #188]	@ (80088c8 <USBD_CDC_DeInit+0xfc>)
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	f003 020f 	and.w	r2, r3, #15
 8008812:	6879      	ldr	r1, [r7, #4]
 8008814:	4613      	mov	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4413      	add	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	440b      	add	r3, r1
 800881e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008822:	2200      	movs	r2, #0
 8008824:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008826:	4b29      	ldr	r3, [pc, #164]	@ (80088cc <USBD_CDC_DeInit+0x100>)
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	4619      	mov	r1, r3
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f002 fa62 	bl	800acf6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008832:	4b26      	ldr	r3, [pc, #152]	@ (80088cc <USBD_CDC_DeInit+0x100>)
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	f003 020f 	and.w	r2, r3, #15
 800883a:	6879      	ldr	r1, [r7, #4]
 800883c:	4613      	mov	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4413      	add	r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	440b      	add	r3, r1
 8008846:	3324      	adds	r3, #36	@ 0x24
 8008848:	2200      	movs	r2, #0
 800884a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800884c:	4b1f      	ldr	r3, [pc, #124]	@ (80088cc <USBD_CDC_DeInit+0x100>)
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	f003 020f 	and.w	r2, r3, #15
 8008854:	6879      	ldr	r1, [r7, #4]
 8008856:	4613      	mov	r3, r2
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	4413      	add	r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	440b      	add	r3, r1
 8008860:	3326      	adds	r3, #38	@ 0x26
 8008862:	2200      	movs	r2, #0
 8008864:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	32b0      	adds	r2, #176	@ 0xb0
 8008870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d01f      	beq.n	80088b8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	33b0      	adds	r3, #176	@ 0xb0
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	4413      	add	r3, r2
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	32b0      	adds	r2, #176	@ 0xb0
 8008896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800889a:	4618      	mov	r0, r3
 800889c:	f002 fb34 	bl	800af08 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	32b0      	adds	r2, #176	@ 0xb0
 80088aa:	2100      	movs	r1, #0
 80088ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	20000093 	.word	0x20000093
 80088c8:	20000094 	.word	0x20000094
 80088cc:	20000095 	.word	0x20000095

080088d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	32b0      	adds	r2, #176	@ 0xb0
 80088e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80088ea:	2300      	movs	r3, #0
 80088ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80088f2:	2300      	movs	r3, #0
 80088f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d101      	bne.n	8008900 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e0bf      	b.n	8008a80 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008908:	2b00      	cmp	r3, #0
 800890a:	d050      	beq.n	80089ae <USBD_CDC_Setup+0xde>
 800890c:	2b20      	cmp	r3, #32
 800890e:	f040 80af 	bne.w	8008a70 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	88db      	ldrh	r3, [r3, #6]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d03a      	beq.n	8008990 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	b25b      	sxtb	r3, r3
 8008920:	2b00      	cmp	r3, #0
 8008922:	da1b      	bge.n	800895c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	33b0      	adds	r3, #176	@ 0xb0
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	4413      	add	r3, r2
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800893a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800893c:	683a      	ldr	r2, [r7, #0]
 800893e:	88d2      	ldrh	r2, [r2, #6]
 8008940:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	88db      	ldrh	r3, [r3, #6]
 8008946:	2b07      	cmp	r3, #7
 8008948:	bf28      	it	cs
 800894a:	2307      	movcs	r3, #7
 800894c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	89fa      	ldrh	r2, [r7, #14]
 8008952:	4619      	mov	r1, r3
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f001 fd78 	bl	800a44a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800895a:	e090      	b.n	8008a7e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	785a      	ldrb	r2, [r3, #1]
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	88db      	ldrh	r3, [r3, #6]
 800896a:	2b3f      	cmp	r3, #63	@ 0x3f
 800896c:	d803      	bhi.n	8008976 <USBD_CDC_Setup+0xa6>
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	88db      	ldrh	r3, [r3, #6]
 8008972:	b2da      	uxtb	r2, r3
 8008974:	e000      	b.n	8008978 <USBD_CDC_Setup+0xa8>
 8008976:	2240      	movs	r2, #64	@ 0x40
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800897e:	6939      	ldr	r1, [r7, #16]
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008986:	461a      	mov	r2, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f001 fd8a 	bl	800a4a2 <USBD_CtlPrepareRx>
      break;
 800898e:	e076      	b.n	8008a7e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	33b0      	adds	r3, #176	@ 0xb0
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4413      	add	r3, r2
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	7850      	ldrb	r0, [r2, #1]
 80089a6:	2200      	movs	r2, #0
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	4798      	blx	r3
      break;
 80089ac:	e067      	b.n	8008a7e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	785b      	ldrb	r3, [r3, #1]
 80089b2:	2b0b      	cmp	r3, #11
 80089b4:	d851      	bhi.n	8008a5a <USBD_CDC_Setup+0x18a>
 80089b6:	a201      	add	r2, pc, #4	@ (adr r2, 80089bc <USBD_CDC_Setup+0xec>)
 80089b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089bc:	080089ed 	.word	0x080089ed
 80089c0:	08008a69 	.word	0x08008a69
 80089c4:	08008a5b 	.word	0x08008a5b
 80089c8:	08008a5b 	.word	0x08008a5b
 80089cc:	08008a5b 	.word	0x08008a5b
 80089d0:	08008a5b 	.word	0x08008a5b
 80089d4:	08008a5b 	.word	0x08008a5b
 80089d8:	08008a5b 	.word	0x08008a5b
 80089dc:	08008a5b 	.word	0x08008a5b
 80089e0:	08008a5b 	.word	0x08008a5b
 80089e4:	08008a17 	.word	0x08008a17
 80089e8:	08008a41 	.word	0x08008a41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	2b03      	cmp	r3, #3
 80089f6:	d107      	bne.n	8008a08 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80089f8:	f107 030a 	add.w	r3, r7, #10
 80089fc:	2202      	movs	r2, #2
 80089fe:	4619      	mov	r1, r3
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f001 fd22 	bl	800a44a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a06:	e032      	b.n	8008a6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f001 fcad 	bl	800a36a <USBD_CtlError>
            ret = USBD_FAIL;
 8008a10:	2303      	movs	r3, #3
 8008a12:	75fb      	strb	r3, [r7, #23]
          break;
 8008a14:	e02b      	b.n	8008a6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	d107      	bne.n	8008a32 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008a22:	f107 030d 	add.w	r3, r7, #13
 8008a26:	2201      	movs	r2, #1
 8008a28:	4619      	mov	r1, r3
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f001 fd0d 	bl	800a44a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a30:	e01d      	b.n	8008a6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008a32:	6839      	ldr	r1, [r7, #0]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f001 fc98 	bl	800a36a <USBD_CtlError>
            ret = USBD_FAIL;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	75fb      	strb	r3, [r7, #23]
          break;
 8008a3e:	e016      	b.n	8008a6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b03      	cmp	r3, #3
 8008a4a:	d00f      	beq.n	8008a6c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008a4c:	6839      	ldr	r1, [r7, #0]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f001 fc8b 	bl	800a36a <USBD_CtlError>
            ret = USBD_FAIL;
 8008a54:	2303      	movs	r3, #3
 8008a56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008a58:	e008      	b.n	8008a6c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f001 fc84 	bl	800a36a <USBD_CtlError>
          ret = USBD_FAIL;
 8008a62:	2303      	movs	r3, #3
 8008a64:	75fb      	strb	r3, [r7, #23]
          break;
 8008a66:	e002      	b.n	8008a6e <USBD_CDC_Setup+0x19e>
          break;
 8008a68:	bf00      	nop
 8008a6a:	e008      	b.n	8008a7e <USBD_CDC_Setup+0x1ae>
          break;
 8008a6c:	bf00      	nop
      }
      break;
 8008a6e:	e006      	b.n	8008a7e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f001 fc79 	bl	800a36a <USBD_CtlError>
      ret = USBD_FAIL;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8008a7c:	bf00      	nop
  }

  return (uint8_t)ret;
 8008a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3718      	adds	r7, #24
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	460b      	mov	r3, r1
 8008a92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	32b0      	adds	r2, #176	@ 0xb0
 8008aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d101      	bne.n	8008ab2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e065      	b.n	8008b7e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	32b0      	adds	r2, #176	@ 0xb0
 8008abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008ac2:	78fb      	ldrb	r3, [r7, #3]
 8008ac4:	f003 020f 	and.w	r2, r3, #15
 8008ac8:	6879      	ldr	r1, [r7, #4]
 8008aca:	4613      	mov	r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	4413      	add	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	440b      	add	r3, r1
 8008ad4:	3318      	adds	r3, #24
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d02f      	beq.n	8008b3c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008adc:	78fb      	ldrb	r3, [r7, #3]
 8008ade:	f003 020f 	and.w	r2, r3, #15
 8008ae2:	6879      	ldr	r1, [r7, #4]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4413      	add	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	440b      	add	r3, r1
 8008aee:	3318      	adds	r3, #24
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	78fb      	ldrb	r3, [r7, #3]
 8008af4:	f003 010f 	and.w	r1, r3, #15
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	460b      	mov	r3, r1
 8008afc:	00db      	lsls	r3, r3, #3
 8008afe:	440b      	add	r3, r1
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	4403      	add	r3, r0
 8008b04:	331c      	adds	r3, #28
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b0c:	fb01 f303 	mul.w	r3, r1, r3
 8008b10:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d112      	bne.n	8008b3c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008b16:	78fb      	ldrb	r3, [r7, #3]
 8008b18:	f003 020f 	and.w	r2, r3, #15
 8008b1c:	6879      	ldr	r1, [r7, #4]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4413      	add	r3, r2
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	440b      	add	r3, r1
 8008b28:	3318      	adds	r3, #24
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008b2e:	78f9      	ldrb	r1, [r7, #3]
 8008b30:	2300      	movs	r3, #0
 8008b32:	2200      	movs	r2, #0
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f002 f985 	bl	800ae44 <USBD_LL_Transmit>
 8008b3a:	e01f      	b.n	8008b7c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	33b0      	adds	r3, #176	@ 0xb0
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4413      	add	r3, r2
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d010      	beq.n	8008b7c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	33b0      	adds	r3, #176	@ 0xb0
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	691b      	ldr	r3, [r3, #16]
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008b72:	68ba      	ldr	r2, [r7, #8]
 8008b74:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008b78:	78fa      	ldrb	r2, [r7, #3]
 8008b7a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b084      	sub	sp, #16
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	460b      	mov	r3, r1
 8008b90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	32b0      	adds	r2, #176	@ 0xb0
 8008b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	32b0      	adds	r2, #176	@ 0xb0
 8008bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d101      	bne.n	8008bb8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	e01a      	b.n	8008bee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008bb8:	78fb      	ldrb	r3, [r7, #3]
 8008bba:	4619      	mov	r1, r3
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f002 f983 	bl	800aec8 <USBD_LL_GetRxDataSize>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	33b0      	adds	r3, #176	@ 0xb0
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008be8:	4611      	mov	r1, r2
 8008bea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b084      	sub	sp, #16
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	32b0      	adds	r2, #176	@ 0xb0
 8008c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d101      	bne.n	8008c18 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c14:	2303      	movs	r3, #3
 8008c16:	e024      	b.n	8008c62 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	33b0      	adds	r3, #176	@ 0xb0
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4413      	add	r3, r2
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d019      	beq.n	8008c60 <USBD_CDC_EP0_RxReady+0x6a>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008c32:	2bff      	cmp	r3, #255	@ 0xff
 8008c34:	d014      	beq.n	8008c60 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	33b0      	adds	r3, #176	@ 0xb0
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	4413      	add	r3, r2
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008c4e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008c56:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	22ff      	movs	r2, #255	@ 0xff
 8008c5c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
	...

08008c6c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c74:	2182      	movs	r1, #130	@ 0x82
 8008c76:	4818      	ldr	r0, [pc, #96]	@ (8008cd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c78:	f000 fd44 	bl	8009704 <USBD_GetEpDesc>
 8008c7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c7e:	2101      	movs	r1, #1
 8008c80:	4815      	ldr	r0, [pc, #84]	@ (8008cd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c82:	f000 fd3f 	bl	8009704 <USBD_GetEpDesc>
 8008c86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c88:	2181      	movs	r1, #129	@ 0x81
 8008c8a:	4813      	ldr	r0, [pc, #76]	@ (8008cd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c8c:	f000 fd3a 	bl	8009704 <USBD_GetEpDesc>
 8008c90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d002      	beq.n	8008c9e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	2210      	movs	r2, #16
 8008c9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d006      	beq.n	8008cb2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cac:	711a      	strb	r2, [r3, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d006      	beq.n	8008cc6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cc0:	711a      	strb	r2, [r3, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2243      	movs	r2, #67	@ 0x43
 8008cca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ccc:	4b02      	ldr	r3, [pc, #8]	@ (8008cd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3718      	adds	r7, #24
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	20000050 	.word	0x20000050

08008cdc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b086      	sub	sp, #24
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ce4:	2182      	movs	r1, #130	@ 0x82
 8008ce6:	4818      	ldr	r0, [pc, #96]	@ (8008d48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ce8:	f000 fd0c 	bl	8009704 <USBD_GetEpDesc>
 8008cec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008cee:	2101      	movs	r1, #1
 8008cf0:	4815      	ldr	r0, [pc, #84]	@ (8008d48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008cf2:	f000 fd07 	bl	8009704 <USBD_GetEpDesc>
 8008cf6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008cf8:	2181      	movs	r1, #129	@ 0x81
 8008cfa:	4813      	ldr	r0, [pc, #76]	@ (8008d48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008cfc:	f000 fd02 	bl	8009704 <USBD_GetEpDesc>
 8008d00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	2210      	movs	r2, #16
 8008d0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d006      	beq.n	8008d22 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	2200      	movs	r2, #0
 8008d18:	711a      	strb	r2, [r3, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f042 0202 	orr.w	r2, r2, #2
 8008d20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d006      	beq.n	8008d36 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	711a      	strb	r2, [r3, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f042 0202 	orr.w	r2, r2, #2
 8008d34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2243      	movs	r2, #67	@ 0x43
 8008d3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008d3c:	4b02      	ldr	r3, [pc, #8]	@ (8008d48 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3718      	adds	r7, #24
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	20000050 	.word	0x20000050

08008d4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b086      	sub	sp, #24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008d54:	2182      	movs	r1, #130	@ 0x82
 8008d56:	4818      	ldr	r0, [pc, #96]	@ (8008db8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d58:	f000 fcd4 	bl	8009704 <USBD_GetEpDesc>
 8008d5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d5e:	2101      	movs	r1, #1
 8008d60:	4815      	ldr	r0, [pc, #84]	@ (8008db8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d62:	f000 fccf 	bl	8009704 <USBD_GetEpDesc>
 8008d66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d68:	2181      	movs	r1, #129	@ 0x81
 8008d6a:	4813      	ldr	r0, [pc, #76]	@ (8008db8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d6c:	f000 fcca 	bl	8009704 <USBD_GetEpDesc>
 8008d70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d002      	beq.n	8008d7e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	2210      	movs	r2, #16
 8008d7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d006      	beq.n	8008d92 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d8c:	711a      	strb	r2, [r3, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d006      	beq.n	8008da6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008da0:	711a      	strb	r2, [r3, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2243      	movs	r2, #67	@ 0x43
 8008daa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008dac:	4b02      	ldr	r3, [pc, #8]	@ (8008db8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3718      	adds	r7, #24
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	20000050 	.word	0x20000050

08008dbc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	220a      	movs	r2, #10
 8008dc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008dca:	4b03      	ldr	r3, [pc, #12]	@ (8008dd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bc80      	pop	{r7}
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	2000000c 	.word	0x2000000c

08008ddc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d101      	bne.n	8008df0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008dec:	2303      	movs	r3, #3
 8008dee:	e009      	b.n	8008e04 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	33b0      	adds	r3, #176	@ 0xb0
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	4413      	add	r3, r2
 8008dfe:	683a      	ldr	r2, [r7, #0]
 8008e00:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bc80      	pop	{r7}
 8008e0c:	4770      	bx	lr

08008e0e <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b087      	sub	sp, #28
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	60f8      	str	r0, [r7, #12]
 8008e16:	60b9      	str	r1, [r7, #8]
 8008e18:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	32b0      	adds	r2, #176	@ 0xb0
 8008e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e28:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d101      	bne.n	8008e34 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008e30:	2303      	movs	r3, #3
 8008e32:	e008      	b.n	8008e46 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	371c      	adds	r7, #28
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bc80      	pop	{r7}
 8008e4e:	4770      	bx	lr

08008e50 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	32b0      	adds	r2, #176	@ 0xb0
 8008e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d101      	bne.n	8008e74 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008e70:	2303      	movs	r3, #3
 8008e72:	e004      	b.n	8008e7e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3714      	adds	r7, #20
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bc80      	pop	{r7}
 8008e86:	4770      	bx	lr

08008e88 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	32b0      	adds	r2, #176	@ 0xb0
 8008e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e9e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d101      	bne.n	8008eae <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e025      	b.n	8008efa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d11f      	bne.n	8008ef8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008ec0:	4b10      	ldr	r3, [pc, #64]	@ (8008f04 <USBD_CDC_TransmitPacket+0x7c>)
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	f003 020f 	and.w	r2, r3, #15
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4413      	add	r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	4403      	add	r3, r0
 8008eda:	3318      	adds	r3, #24
 8008edc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008ede:	4b09      	ldr	r3, [pc, #36]	@ (8008f04 <USBD_CDC_TransmitPacket+0x7c>)
 8008ee0:	7819      	ldrb	r1, [r3, #0]
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f001 ffa8 	bl	800ae44 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	20000093 	.word	0x20000093

08008f08 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	32b0      	adds	r2, #176	@ 0xb0
 8008f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f1e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	32b0      	adds	r2, #176	@ 0xb0
 8008f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d101      	bne.n	8008f36 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e018      	b.n	8008f68 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	7c1b      	ldrb	r3, [r3, #16]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10a      	bne.n	8008f54 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8008f70 <USBD_CDC_ReceivePacket+0x68>)
 8008f40:	7819      	ldrb	r1, [r3, #0]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f001 ff9a 	bl	800ae86 <USBD_LL_PrepareReceive>
 8008f52:	e008      	b.n	8008f66 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f54:	4b06      	ldr	r3, [pc, #24]	@ (8008f70 <USBD_CDC_ReceivePacket+0x68>)
 8008f56:	7819      	ldrb	r1, [r3, #0]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f5e:	2340      	movs	r3, #64	@ 0x40
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f001 ff90 	bl	800ae86 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	20000094 	.word	0x20000094

08008f74 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b086      	sub	sp, #24
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	4613      	mov	r3, r2
 8008f80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d101      	bne.n	8008f8c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008f88:	2303      	movs	r3, #3
 8008f8a:	e01f      	b.n	8008fcc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d003      	beq.n	8008fb2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	79fa      	ldrb	r2, [r7, #7]
 8008fbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f001 fe0b 	bl	800abdc <USBD_LL_Init>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3718      	adds	r7, #24
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d101      	bne.n	8008fec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008fe8:	2303      	movs	r3, #3
 8008fea:	e025      	b.n	8009038 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	683a      	ldr	r2, [r7, #0]
 8008ff0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	32ae      	adds	r2, #174	@ 0xae
 8008ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00f      	beq.n	8009028 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	32ae      	adds	r2, #174	@ 0xae
 8009012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009018:	f107 020e 	add.w	r2, r7, #14
 800901c:	4610      	mov	r0, r2
 800901e:	4798      	blx	r3
 8009020:	4602      	mov	r2, r0
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800902e:	1c5a      	adds	r2, r3, #1
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f001 fe13 	bl	800ac74 <USBD_LL_Start>
 800904e:	4603      	mov	r3, r0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009060:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009062:	4618      	mov	r0, r3
 8009064:	370c      	adds	r7, #12
 8009066:	46bd      	mov	sp, r7
 8009068:	bc80      	pop	{r7}
 800906a:	4770      	bx	lr

0800906c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	460b      	mov	r3, r1
 8009076:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009078:	2300      	movs	r3, #0
 800907a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009082:	2b00      	cmp	r3, #0
 8009084:	d009      	beq.n	800909a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	78fa      	ldrb	r2, [r7, #3]
 8009090:	4611      	mov	r1, r2
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	4798      	blx	r3
 8009096:	4603      	mov	r3, r0
 8009098:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800909a:	7bfb      	ldrb	r3, [r7, #15]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	460b      	mov	r3, r1
 80090ae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80090b0:	2300      	movs	r3, #0
 80090b2:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	78fa      	ldrb	r2, [r7, #3]
 80090be:	4611      	mov	r1, r2
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	4798      	blx	r3
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80090ca:	2303      	movs	r3, #3
 80090cc:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80090ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	4618      	mov	r0, r3
 80090ec:	f001 f903 	bl	800a2f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80090fe:	461a      	mov	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800910c:	f003 031f 	and.w	r3, r3, #31
 8009110:	2b02      	cmp	r3, #2
 8009112:	d01a      	beq.n	800914a <USBD_LL_SetupStage+0x72>
 8009114:	2b02      	cmp	r3, #2
 8009116:	d822      	bhi.n	800915e <USBD_LL_SetupStage+0x86>
 8009118:	2b00      	cmp	r3, #0
 800911a:	d002      	beq.n	8009122 <USBD_LL_SetupStage+0x4a>
 800911c:	2b01      	cmp	r3, #1
 800911e:	d00a      	beq.n	8009136 <USBD_LL_SetupStage+0x5e>
 8009120:	e01d      	b.n	800915e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009128:	4619      	mov	r1, r3
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fb5a 	bl	80097e4 <USBD_StdDevReq>
 8009130:	4603      	mov	r3, r0
 8009132:	73fb      	strb	r3, [r7, #15]
      break;
 8009134:	e020      	b.n	8009178 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fbc2 	bl	80098c8 <USBD_StdItfReq>
 8009144:	4603      	mov	r3, r0
 8009146:	73fb      	strb	r3, [r7, #15]
      break;
 8009148:	e016      	b.n	8009178 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009150:	4619      	mov	r1, r3
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fc24 	bl	80099a0 <USBD_StdEPReq>
 8009158:	4603      	mov	r3, r0
 800915a:	73fb      	strb	r3, [r7, #15]
      break;
 800915c:	e00c      	b.n	8009178 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009164:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009168:	b2db      	uxtb	r3, r3
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f001 fde1 	bl	800ad34 <USBD_LL_StallEP>
 8009172:	4603      	mov	r3, r0
 8009174:	73fb      	strb	r3, [r7, #15]
      break;
 8009176:	bf00      	nop
  }

  return ret;
 8009178:	7bfb      	ldrb	r3, [r7, #15]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b086      	sub	sp, #24
 8009186:	af00      	add	r7, sp, #0
 8009188:	60f8      	str	r0, [r7, #12]
 800918a:	460b      	mov	r3, r1
 800918c:	607a      	str	r2, [r7, #4]
 800918e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009190:	2300      	movs	r3, #0
 8009192:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009194:	7afb      	ldrb	r3, [r7, #11]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d16e      	bne.n	8009278 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80091a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80091a8:	2b03      	cmp	r3, #3
 80091aa:	f040 8098 	bne.w	80092de <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	689a      	ldr	r2, [r3, #8]
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d913      	bls.n	80091e2 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	689a      	ldr	r2, [r3, #8]
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	1ad2      	subs	r2, r2, r3
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	68da      	ldr	r2, [r3, #12]
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	4293      	cmp	r3, r2
 80091d2:	bf28      	it	cs
 80091d4:	4613      	movcs	r3, r2
 80091d6:	461a      	mov	r2, r3
 80091d8:	6879      	ldr	r1, [r7, #4]
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	f001 f97e 	bl	800a4dc <USBD_CtlContinueRx>
 80091e0:	e07d      	b.n	80092de <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80091e8:	f003 031f 	and.w	r3, r3, #31
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d014      	beq.n	800921a <USBD_LL_DataOutStage+0x98>
 80091f0:	2b02      	cmp	r3, #2
 80091f2:	d81d      	bhi.n	8009230 <USBD_LL_DataOutStage+0xae>
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d002      	beq.n	80091fe <USBD_LL_DataOutStage+0x7c>
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d003      	beq.n	8009204 <USBD_LL_DataOutStage+0x82>
 80091fc:	e018      	b.n	8009230 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80091fe:	2300      	movs	r3, #0
 8009200:	75bb      	strb	r3, [r7, #22]
            break;
 8009202:	e018      	b.n	8009236 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800920a:	b2db      	uxtb	r3, r3
 800920c:	4619      	mov	r1, r3
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	f000 fa60 	bl	80096d4 <USBD_CoreFindIF>
 8009214:	4603      	mov	r3, r0
 8009216:	75bb      	strb	r3, [r7, #22]
            break;
 8009218:	e00d      	b.n	8009236 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009220:	b2db      	uxtb	r3, r3
 8009222:	4619      	mov	r1, r3
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f000 fa61 	bl	80096ec <USBD_CoreFindEP>
 800922a:	4603      	mov	r3, r0
 800922c:	75bb      	strb	r3, [r7, #22]
            break;
 800922e:	e002      	b.n	8009236 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009230:	2300      	movs	r3, #0
 8009232:	75bb      	strb	r3, [r7, #22]
            break;
 8009234:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009236:	7dbb      	ldrb	r3, [r7, #22]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d119      	bne.n	8009270 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009242:	b2db      	uxtb	r3, r3
 8009244:	2b03      	cmp	r3, #3
 8009246:	d113      	bne.n	8009270 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009248:	7dba      	ldrb	r2, [r7, #22]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	32ae      	adds	r2, #174	@ 0xae
 800924e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00b      	beq.n	8009270 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009258:	7dba      	ldrb	r2, [r7, #22]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009260:	7dba      	ldrb	r2, [r7, #22]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	32ae      	adds	r2, #174	@ 0xae
 8009266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f001 f944 	bl	800a4fe <USBD_CtlSendStatus>
 8009276:	e032      	b.n	80092de <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009278:	7afb      	ldrb	r3, [r7, #11]
 800927a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800927e:	b2db      	uxtb	r3, r3
 8009280:	4619      	mov	r1, r3
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f000 fa32 	bl	80096ec <USBD_CoreFindEP>
 8009288:	4603      	mov	r3, r0
 800928a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800928c:	7dbb      	ldrb	r3, [r7, #22]
 800928e:	2bff      	cmp	r3, #255	@ 0xff
 8009290:	d025      	beq.n	80092de <USBD_LL_DataOutStage+0x15c>
 8009292:	7dbb      	ldrb	r3, [r7, #22]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d122      	bne.n	80092de <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	2b03      	cmp	r3, #3
 80092a2:	d117      	bne.n	80092d4 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80092a4:	7dba      	ldrb	r2, [r7, #22]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	32ae      	adds	r2, #174	@ 0xae
 80092aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00f      	beq.n	80092d4 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80092b4:	7dba      	ldrb	r2, [r7, #22]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80092bc:	7dba      	ldrb	r2, [r7, #22]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	32ae      	adds	r2, #174	@ 0xae
 80092c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	7afa      	ldrb	r2, [r7, #11]
 80092ca:	4611      	mov	r1, r2
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	4798      	blx	r3
 80092d0:	4603      	mov	r3, r0
 80092d2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80092d4:	7dfb      	ldrb	r3, [r7, #23]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d001      	beq.n	80092de <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80092da:	7dfb      	ldrb	r3, [r7, #23]
 80092dc:	e000      	b.n	80092e0 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3718      	adds	r7, #24
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	460b      	mov	r3, r1
 80092f2:	607a      	str	r2, [r7, #4]
 80092f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80092f6:	7afb      	ldrb	r3, [r7, #11]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d16f      	bne.n	80093dc <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	3314      	adds	r3, #20
 8009300:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009308:	2b02      	cmp	r3, #2
 800930a:	d15a      	bne.n	80093c2 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	689a      	ldr	r2, [r3, #8]
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	429a      	cmp	r2, r3
 8009316:	d914      	bls.n	8009342 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	689a      	ldr	r2, [r3, #8]
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	1ad2      	subs	r2, r2, r3
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	461a      	mov	r2, r3
 800932c:	6879      	ldr	r1, [r7, #4]
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f001 f8a6 	bl	800a480 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009334:	2300      	movs	r3, #0
 8009336:	2200      	movs	r2, #0
 8009338:	2100      	movs	r1, #0
 800933a:	68f8      	ldr	r0, [r7, #12]
 800933c:	f001 fda3 	bl	800ae86 <USBD_LL_PrepareReceive>
 8009340:	e03f      	b.n	80093c2 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	68da      	ldr	r2, [r3, #12]
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	429a      	cmp	r2, r3
 800934c:	d11c      	bne.n	8009388 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	685a      	ldr	r2, [r3, #4]
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009356:	429a      	cmp	r2, r3
 8009358:	d316      	bcc.n	8009388 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	685a      	ldr	r2, [r3, #4]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009364:	429a      	cmp	r2, r3
 8009366:	d20f      	bcs.n	8009388 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009368:	2200      	movs	r2, #0
 800936a:	2100      	movs	r1, #0
 800936c:	68f8      	ldr	r0, [r7, #12]
 800936e:	f001 f887 	bl	800a480 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800937a:	2300      	movs	r3, #0
 800937c:	2200      	movs	r2, #0
 800937e:	2100      	movs	r1, #0
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f001 fd80 	bl	800ae86 <USBD_LL_PrepareReceive>
 8009386:	e01c      	b.n	80093c2 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800938e:	b2db      	uxtb	r3, r3
 8009390:	2b03      	cmp	r3, #3
 8009392:	d10f      	bne.n	80093b4 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d009      	beq.n	80093b4 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80093b4:	2180      	movs	r1, #128	@ 0x80
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f001 fcbc 	bl	800ad34 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f001 f8b1 	bl	800a524 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d03a      	beq.n	8009442 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	f7ff fe43 	bl	8009058 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80093da:	e032      	b.n	8009442 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80093dc:	7afb      	ldrb	r3, [r7, #11]
 80093de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	4619      	mov	r1, r3
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f000 f980 	bl	80096ec <USBD_CoreFindEP>
 80093ec:	4603      	mov	r3, r0
 80093ee:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093f0:	7dfb      	ldrb	r3, [r7, #23]
 80093f2:	2bff      	cmp	r3, #255	@ 0xff
 80093f4:	d025      	beq.n	8009442 <USBD_LL_DataInStage+0x15a>
 80093f6:	7dfb      	ldrb	r3, [r7, #23]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d122      	bne.n	8009442 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009402:	b2db      	uxtb	r3, r3
 8009404:	2b03      	cmp	r3, #3
 8009406:	d11c      	bne.n	8009442 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009408:	7dfa      	ldrb	r2, [r7, #23]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	32ae      	adds	r2, #174	@ 0xae
 800940e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009412:	695b      	ldr	r3, [r3, #20]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d014      	beq.n	8009442 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009418:	7dfa      	ldrb	r2, [r7, #23]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009420:	7dfa      	ldrb	r2, [r7, #23]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	32ae      	adds	r2, #174	@ 0xae
 8009426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800942a:	695b      	ldr	r3, [r3, #20]
 800942c:	7afa      	ldrb	r2, [r7, #11]
 800942e:	4611      	mov	r1, r2
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	4798      	blx	r3
 8009434:	4603      	mov	r3, r0
 8009436:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009438:	7dbb      	ldrb	r3, [r7, #22]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d001      	beq.n	8009442 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800943e:	7dbb      	ldrb	r3, [r7, #22]
 8009440:	e000      	b.n	8009444 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3718      	adds	r7, #24
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009454:	2300      	movs	r3, #0
 8009456:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009484:	2b00      	cmp	r3, #0
 8009486:	d014      	beq.n	80094b2 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00e      	beq.n	80094b2 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	6852      	ldr	r2, [r2, #4]
 80094a0:	b2d2      	uxtb	r2, r2
 80094a2:	4611      	mov	r1, r2
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	4798      	blx	r3
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80094ae:	2303      	movs	r3, #3
 80094b0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094b2:	2340      	movs	r3, #64	@ 0x40
 80094b4:	2200      	movs	r2, #0
 80094b6:	2100      	movs	r1, #0
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f001 fbf6 	bl	800acaa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2201      	movs	r2, #1
 80094c2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2240      	movs	r2, #64	@ 0x40
 80094ca:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094ce:	2340      	movs	r3, #64	@ 0x40
 80094d0:	2200      	movs	r2, #0
 80094d2:	2180      	movs	r1, #128	@ 0x80
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f001 fbe8 	bl	800acaa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2240      	movs	r2, #64	@ 0x40
 80094e4:	621a      	str	r2, [r3, #32]

  return ret;
 80094e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3710      	adds	r7, #16
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	460b      	mov	r3, r1
 80094fa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	78fa      	ldrb	r2, [r7, #3]
 8009500:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	bc80      	pop	{r7}
 800950c:	4770      	bx	lr

0800950e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800950e:	b480      	push	{r7}
 8009510:	b083      	sub	sp, #12
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800951c:	b2db      	uxtb	r3, r3
 800951e:	2b04      	cmp	r3, #4
 8009520:	d006      	beq.n	8009530 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009528:	b2da      	uxtb	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2204      	movs	r2, #4
 8009534:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	370c      	adds	r7, #12
 800953e:	46bd      	mov	sp, r7
 8009540:	bc80      	pop	{r7}
 8009542:	4770      	bx	lr

08009544 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009552:	b2db      	uxtb	r3, r3
 8009554:	2b04      	cmp	r3, #4
 8009556:	d106      	bne.n	8009566 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800955e:	b2da      	uxtb	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	bc80      	pop	{r7}
 8009570:	4770      	bx	lr

08009572 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b082      	sub	sp, #8
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009580:	b2db      	uxtb	r3, r3
 8009582:	2b03      	cmp	r3, #3
 8009584:	d110      	bne.n	80095a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00b      	beq.n	80095a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009596:	69db      	ldr	r3, [r3, #28]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d005      	beq.n	80095a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095a2:	69db      	ldr	r3, [r3, #28]
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b082      	sub	sp, #8
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	460b      	mov	r3, r1
 80095bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	32ae      	adds	r2, #174	@ 0xae
 80095c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d101      	bne.n	80095d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e01c      	b.n	800960e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	2b03      	cmp	r3, #3
 80095de:	d115      	bne.n	800960c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	32ae      	adds	r2, #174	@ 0xae
 80095ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ee:	6a1b      	ldr	r3, [r3, #32]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00b      	beq.n	800960c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	32ae      	adds	r2, #174	@ 0xae
 80095fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009602:	6a1b      	ldr	r3, [r3, #32]
 8009604:	78fa      	ldrb	r2, [r7, #3]
 8009606:	4611      	mov	r1, r2
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b082      	sub	sp, #8
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
 800961e:	460b      	mov	r3, r1
 8009620:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	32ae      	adds	r2, #174	@ 0xae
 800962c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d101      	bne.n	8009638 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009634:	2303      	movs	r3, #3
 8009636:	e01c      	b.n	8009672 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800963e:	b2db      	uxtb	r3, r3
 8009640:	2b03      	cmp	r3, #3
 8009642:	d115      	bne.n	8009670 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	32ae      	adds	r2, #174	@ 0xae
 800964e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00b      	beq.n	8009670 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	32ae      	adds	r2, #174	@ 0xae
 8009662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009668:	78fa      	ldrb	r2, [r7, #3]
 800966a:	4611      	mov	r1, r2
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800967a:	b480      	push	{r7}
 800967c:	b083      	sub	sp, #12
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	4618      	mov	r0, r3
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	bc80      	pop	{r7}
 800968c:	4770      	bx	lr

0800968e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b084      	sub	sp, #16
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009696:	2300      	movs	r3, #0
 8009698:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2201      	movs	r2, #1
 800969e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d00e      	beq.n	80096ca <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	6852      	ldr	r2, [r2, #4]
 80096b8:	b2d2      	uxtb	r2, r2
 80096ba:	4611      	mov	r1, r2
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	4798      	blx	r3
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d001      	beq.n	80096ca <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80096c6:	2303      	movs	r3, #3
 80096c8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80096ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	460b      	mov	r3, r1
 80096de:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80096e0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	370c      	adds	r7, #12
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bc80      	pop	{r7}
 80096ea:	4770      	bx	lr

080096ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	460b      	mov	r3, r1
 80096f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80096f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	370c      	adds	r7, #12
 80096fe:	46bd      	mov	sp, r7
 8009700:	bc80      	pop	{r7}
 8009702:	4770      	bx	lr

08009704 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	460b      	mov	r3, r1
 800970e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009718:	2300      	movs	r3, #0
 800971a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	885b      	ldrh	r3, [r3, #2]
 8009720:	b29b      	uxth	r3, r3
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	7812      	ldrb	r2, [r2, #0]
 8009726:	4293      	cmp	r3, r2
 8009728:	d91f      	bls.n	800976a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009730:	e013      	b.n	800975a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009732:	f107 030a 	add.w	r3, r7, #10
 8009736:	4619      	mov	r1, r3
 8009738:	6978      	ldr	r0, [r7, #20]
 800973a:	f000 f81b 	bl	8009774 <USBD_GetNextDesc>
 800973e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	785b      	ldrb	r3, [r3, #1]
 8009744:	2b05      	cmp	r3, #5
 8009746:	d108      	bne.n	800975a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	789b      	ldrb	r3, [r3, #2]
 8009750:	78fa      	ldrb	r2, [r7, #3]
 8009752:	429a      	cmp	r2, r3
 8009754:	d008      	beq.n	8009768 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009756:	2300      	movs	r3, #0
 8009758:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	885b      	ldrh	r3, [r3, #2]
 800975e:	b29a      	uxth	r2, r3
 8009760:	897b      	ldrh	r3, [r7, #10]
 8009762:	429a      	cmp	r2, r3
 8009764:	d8e5      	bhi.n	8009732 <USBD_GetEpDesc+0x2e>
 8009766:	e000      	b.n	800976a <USBD_GetEpDesc+0x66>
          break;
 8009768:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800976a:	693b      	ldr	r3, [r7, #16]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3718      	adds	r7, #24
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	881b      	ldrh	r3, [r3, #0]
 8009786:	68fa      	ldr	r2, [r7, #12]
 8009788:	7812      	ldrb	r2, [r2, #0]
 800978a:	4413      	add	r3, r2
 800978c:	b29a      	uxth	r2, r3
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	461a      	mov	r2, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4413      	add	r3, r2
 800979c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800979e:	68fb      	ldr	r3, [r7, #12]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3714      	adds	r7, #20
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bc80      	pop	{r7}
 80097a8:	4770      	bx	lr

080097aa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80097aa:	b480      	push	{r7}
 80097ac:	b087      	sub	sp, #28
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	3301      	adds	r3, #1
 80097c0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80097c8:	8a3b      	ldrh	r3, [r7, #16]
 80097ca:	021b      	lsls	r3, r3, #8
 80097cc:	b21a      	sxth	r2, r3
 80097ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	b21b      	sxth	r3, r3
 80097d6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80097d8:	89fb      	ldrh	r3, [r7, #14]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	371c      	adds	r7, #28
 80097de:	46bd      	mov	sp, r7
 80097e0:	bc80      	pop	{r7}
 80097e2:	4770      	bx	lr

080097e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097ee:	2300      	movs	r3, #0
 80097f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80097fa:	2b40      	cmp	r3, #64	@ 0x40
 80097fc:	d005      	beq.n	800980a <USBD_StdDevReq+0x26>
 80097fe:	2b40      	cmp	r3, #64	@ 0x40
 8009800:	d857      	bhi.n	80098b2 <USBD_StdDevReq+0xce>
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00f      	beq.n	8009826 <USBD_StdDevReq+0x42>
 8009806:	2b20      	cmp	r3, #32
 8009808:	d153      	bne.n	80098b2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	32ae      	adds	r2, #174	@ 0xae
 8009814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	4798      	blx	r3
 8009820:	4603      	mov	r3, r0
 8009822:	73fb      	strb	r3, [r7, #15]
      break;
 8009824:	e04a      	b.n	80098bc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	785b      	ldrb	r3, [r3, #1]
 800982a:	2b09      	cmp	r3, #9
 800982c:	d83b      	bhi.n	80098a6 <USBD_StdDevReq+0xc2>
 800982e:	a201      	add	r2, pc, #4	@ (adr r2, 8009834 <USBD_StdDevReq+0x50>)
 8009830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009834:	08009889 	.word	0x08009889
 8009838:	0800989d 	.word	0x0800989d
 800983c:	080098a7 	.word	0x080098a7
 8009840:	08009893 	.word	0x08009893
 8009844:	080098a7 	.word	0x080098a7
 8009848:	08009867 	.word	0x08009867
 800984c:	0800985d 	.word	0x0800985d
 8009850:	080098a7 	.word	0x080098a7
 8009854:	0800987f 	.word	0x0800987f
 8009858:	08009871 	.word	0x08009871
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800985c:	6839      	ldr	r1, [r7, #0]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fa3c 	bl	8009cdc <USBD_GetDescriptor>
          break;
 8009864:	e024      	b.n	80098b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009866:	6839      	ldr	r1, [r7, #0]
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 fba1 	bl	8009fb0 <USBD_SetAddress>
          break;
 800986e:	e01f      	b.n	80098b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009870:	6839      	ldr	r1, [r7, #0]
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 fbe0 	bl	800a038 <USBD_SetConfig>
 8009878:	4603      	mov	r3, r0
 800987a:	73fb      	strb	r3, [r7, #15]
          break;
 800987c:	e018      	b.n	80098b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800987e:	6839      	ldr	r1, [r7, #0]
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 fc83 	bl	800a18c <USBD_GetConfig>
          break;
 8009886:	e013      	b.n	80098b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009888:	6839      	ldr	r1, [r7, #0]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fcb4 	bl	800a1f8 <USBD_GetStatus>
          break;
 8009890:	e00e      	b.n	80098b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009892:	6839      	ldr	r1, [r7, #0]
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 fce3 	bl	800a260 <USBD_SetFeature>
          break;
 800989a:	e009      	b.n	80098b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800989c:	6839      	ldr	r1, [r7, #0]
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 fd07 	bl	800a2b2 <USBD_ClrFeature>
          break;
 80098a4:	e004      	b.n	80098b0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 fd5e 	bl	800a36a <USBD_CtlError>
          break;
 80098ae:	bf00      	nop
      }
      break;
 80098b0:	e004      	b.n	80098bc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80098b2:	6839      	ldr	r1, [r7, #0]
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 fd58 	bl	800a36a <USBD_CtlError>
      break;
 80098ba:	bf00      	nop
  }

  return ret;
 80098bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop

080098c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098de:	2b40      	cmp	r3, #64	@ 0x40
 80098e0:	d005      	beq.n	80098ee <USBD_StdItfReq+0x26>
 80098e2:	2b40      	cmp	r3, #64	@ 0x40
 80098e4:	d852      	bhi.n	800998c <USBD_StdItfReq+0xc4>
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d001      	beq.n	80098ee <USBD_StdItfReq+0x26>
 80098ea:	2b20      	cmp	r3, #32
 80098ec:	d14e      	bne.n	800998c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	3b01      	subs	r3, #1
 80098f8:	2b02      	cmp	r3, #2
 80098fa:	d840      	bhi.n	800997e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	889b      	ldrh	r3, [r3, #4]
 8009900:	b2db      	uxtb	r3, r3
 8009902:	2b01      	cmp	r3, #1
 8009904:	d836      	bhi.n	8009974 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	889b      	ldrh	r3, [r3, #4]
 800990a:	b2db      	uxtb	r3, r3
 800990c:	4619      	mov	r1, r3
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f7ff fee0 	bl	80096d4 <USBD_CoreFindIF>
 8009914:	4603      	mov	r3, r0
 8009916:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009918:	7bbb      	ldrb	r3, [r7, #14]
 800991a:	2bff      	cmp	r3, #255	@ 0xff
 800991c:	d01d      	beq.n	800995a <USBD_StdItfReq+0x92>
 800991e:	7bbb      	ldrb	r3, [r7, #14]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d11a      	bne.n	800995a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009924:	7bba      	ldrb	r2, [r7, #14]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	32ae      	adds	r2, #174	@ 0xae
 800992a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00f      	beq.n	8009954 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009934:	7bba      	ldrb	r2, [r7, #14]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800993c:	7bba      	ldrb	r2, [r7, #14]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	32ae      	adds	r2, #174	@ 0xae
 8009942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	6839      	ldr	r1, [r7, #0]
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	4798      	blx	r3
 800994e:	4603      	mov	r3, r0
 8009950:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009952:	e004      	b.n	800995e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009954:	2303      	movs	r3, #3
 8009956:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009958:	e001      	b.n	800995e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800995a:	2303      	movs	r3, #3
 800995c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	88db      	ldrh	r3, [r3, #6]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d110      	bne.n	8009988 <USBD_StdItfReq+0xc0>
 8009966:	7bfb      	ldrb	r3, [r7, #15]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d10d      	bne.n	8009988 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 fdc6 	bl	800a4fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009972:	e009      	b.n	8009988 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009974:	6839      	ldr	r1, [r7, #0]
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 fcf7 	bl	800a36a <USBD_CtlError>
          break;
 800997c:	e004      	b.n	8009988 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 fcf2 	bl	800a36a <USBD_CtlError>
          break;
 8009986:	e000      	b.n	800998a <USBD_StdItfReq+0xc2>
          break;
 8009988:	bf00      	nop
      }
      break;
 800998a:	e004      	b.n	8009996 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 fceb 	bl	800a36a <USBD_CtlError>
      break;
 8009994:	bf00      	nop
  }

  return ret;
 8009996:	7bfb      	ldrb	r3, [r7, #15]
}
 8009998:	4618      	mov	r0, r3
 800999a:	3710      	adds	r7, #16
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80099aa:	2300      	movs	r3, #0
 80099ac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	889b      	ldrh	r3, [r3, #4]
 80099b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80099bc:	2b40      	cmp	r3, #64	@ 0x40
 80099be:	d007      	beq.n	80099d0 <USBD_StdEPReq+0x30>
 80099c0:	2b40      	cmp	r3, #64	@ 0x40
 80099c2:	f200 817f 	bhi.w	8009cc4 <USBD_StdEPReq+0x324>
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d02a      	beq.n	8009a20 <USBD_StdEPReq+0x80>
 80099ca:	2b20      	cmp	r3, #32
 80099cc:	f040 817a 	bne.w	8009cc4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80099d0:	7bbb      	ldrb	r3, [r7, #14]
 80099d2:	4619      	mov	r1, r3
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f7ff fe89 	bl	80096ec <USBD_CoreFindEP>
 80099da:	4603      	mov	r3, r0
 80099dc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099de:	7b7b      	ldrb	r3, [r7, #13]
 80099e0:	2bff      	cmp	r3, #255	@ 0xff
 80099e2:	f000 8174 	beq.w	8009cce <USBD_StdEPReq+0x32e>
 80099e6:	7b7b      	ldrb	r3, [r7, #13]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f040 8170 	bne.w	8009cce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80099ee:	7b7a      	ldrb	r2, [r7, #13]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80099f6:	7b7a      	ldrb	r2, [r7, #13]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	32ae      	adds	r2, #174	@ 0xae
 80099fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f000 8163 	beq.w	8009cce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009a08:	7b7a      	ldrb	r2, [r7, #13]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	32ae      	adds	r2, #174	@ 0xae
 8009a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	6839      	ldr	r1, [r7, #0]
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	4798      	blx	r3
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009a1e:	e156      	b.n	8009cce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	785b      	ldrb	r3, [r3, #1]
 8009a24:	2b03      	cmp	r3, #3
 8009a26:	d008      	beq.n	8009a3a <USBD_StdEPReq+0x9a>
 8009a28:	2b03      	cmp	r3, #3
 8009a2a:	f300 8145 	bgt.w	8009cb8 <USBD_StdEPReq+0x318>
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	f000 809b 	beq.w	8009b6a <USBD_StdEPReq+0x1ca>
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d03c      	beq.n	8009ab2 <USBD_StdEPReq+0x112>
 8009a38:	e13e      	b.n	8009cb8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	2b02      	cmp	r3, #2
 8009a44:	d002      	beq.n	8009a4c <USBD_StdEPReq+0xac>
 8009a46:	2b03      	cmp	r3, #3
 8009a48:	d016      	beq.n	8009a78 <USBD_StdEPReq+0xd8>
 8009a4a:	e02c      	b.n	8009aa6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a4c:	7bbb      	ldrb	r3, [r7, #14]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00d      	beq.n	8009a6e <USBD_StdEPReq+0xce>
 8009a52:	7bbb      	ldrb	r3, [r7, #14]
 8009a54:	2b80      	cmp	r3, #128	@ 0x80
 8009a56:	d00a      	beq.n	8009a6e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a58:	7bbb      	ldrb	r3, [r7, #14]
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f001 f969 	bl	800ad34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a62:	2180      	movs	r1, #128	@ 0x80
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f001 f965 	bl	800ad34 <USBD_LL_StallEP>
 8009a6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a6c:	e020      	b.n	8009ab0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fc7a 	bl	800a36a <USBD_CtlError>
              break;
 8009a76:	e01b      	b.n	8009ab0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	885b      	ldrh	r3, [r3, #2]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d10e      	bne.n	8009a9e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a80:	7bbb      	ldrb	r3, [r7, #14]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00b      	beq.n	8009a9e <USBD_StdEPReq+0xfe>
 8009a86:	7bbb      	ldrb	r3, [r7, #14]
 8009a88:	2b80      	cmp	r3, #128	@ 0x80
 8009a8a:	d008      	beq.n	8009a9e <USBD_StdEPReq+0xfe>
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	88db      	ldrh	r3, [r3, #6]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d104      	bne.n	8009a9e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a94:	7bbb      	ldrb	r3, [r7, #14]
 8009a96:	4619      	mov	r1, r3
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f001 f94b 	bl	800ad34 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fd2d 	bl	800a4fe <USBD_CtlSendStatus>

              break;
 8009aa4:	e004      	b.n	8009ab0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009aa6:	6839      	ldr	r1, [r7, #0]
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fc5e 	bl	800a36a <USBD_CtlError>
              break;
 8009aae:	bf00      	nop
          }
          break;
 8009ab0:	e107      	b.n	8009cc2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	d002      	beq.n	8009ac4 <USBD_StdEPReq+0x124>
 8009abe:	2b03      	cmp	r3, #3
 8009ac0:	d016      	beq.n	8009af0 <USBD_StdEPReq+0x150>
 8009ac2:	e04b      	b.n	8009b5c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ac4:	7bbb      	ldrb	r3, [r7, #14]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00d      	beq.n	8009ae6 <USBD_StdEPReq+0x146>
 8009aca:	7bbb      	ldrb	r3, [r7, #14]
 8009acc:	2b80      	cmp	r3, #128	@ 0x80
 8009ace:	d00a      	beq.n	8009ae6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ad0:	7bbb      	ldrb	r3, [r7, #14]
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f001 f92d 	bl	800ad34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ada:	2180      	movs	r1, #128	@ 0x80
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f001 f929 	bl	800ad34 <USBD_LL_StallEP>
 8009ae2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ae4:	e040      	b.n	8009b68 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009ae6:	6839      	ldr	r1, [r7, #0]
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fc3e 	bl	800a36a <USBD_CtlError>
              break;
 8009aee:	e03b      	b.n	8009b68 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	885b      	ldrh	r3, [r3, #2]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d136      	bne.n	8009b66 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009af8:	7bbb      	ldrb	r3, [r7, #14]
 8009afa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d004      	beq.n	8009b0c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b02:	7bbb      	ldrb	r3, [r7, #14]
 8009b04:	4619      	mov	r1, r3
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f001 f933 	bl	800ad72 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 fcf6 	bl	800a4fe <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009b12:	7bbb      	ldrb	r3, [r7, #14]
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f7ff fde8 	bl	80096ec <USBD_CoreFindEP>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b20:	7b7b      	ldrb	r3, [r7, #13]
 8009b22:	2bff      	cmp	r3, #255	@ 0xff
 8009b24:	d01f      	beq.n	8009b66 <USBD_StdEPReq+0x1c6>
 8009b26:	7b7b      	ldrb	r3, [r7, #13]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d11c      	bne.n	8009b66 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009b2c:	7b7a      	ldrb	r2, [r7, #13]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009b34:	7b7a      	ldrb	r2, [r7, #13]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	32ae      	adds	r2, #174	@ 0xae
 8009b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d010      	beq.n	8009b66 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b44:	7b7a      	ldrb	r2, [r7, #13]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	32ae      	adds	r2, #174	@ 0xae
 8009b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	6839      	ldr	r1, [r7, #0]
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	4798      	blx	r3
 8009b56:	4603      	mov	r3, r0
 8009b58:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009b5a:	e004      	b.n	8009b66 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009b5c:	6839      	ldr	r1, [r7, #0]
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 fc03 	bl	800a36a <USBD_CtlError>
              break;
 8009b64:	e000      	b.n	8009b68 <USBD_StdEPReq+0x1c8>
              break;
 8009b66:	bf00      	nop
          }
          break;
 8009b68:	e0ab      	b.n	8009cc2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	d002      	beq.n	8009b7c <USBD_StdEPReq+0x1dc>
 8009b76:	2b03      	cmp	r3, #3
 8009b78:	d032      	beq.n	8009be0 <USBD_StdEPReq+0x240>
 8009b7a:	e097      	b.n	8009cac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b7c:	7bbb      	ldrb	r3, [r7, #14]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d007      	beq.n	8009b92 <USBD_StdEPReq+0x1f2>
 8009b82:	7bbb      	ldrb	r3, [r7, #14]
 8009b84:	2b80      	cmp	r3, #128	@ 0x80
 8009b86:	d004      	beq.n	8009b92 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009b88:	6839      	ldr	r1, [r7, #0]
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fbed 	bl	800a36a <USBD_CtlError>
                break;
 8009b90:	e091      	b.n	8009cb6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	da0b      	bge.n	8009bb2 <USBD_StdEPReq+0x212>
 8009b9a:	7bbb      	ldrb	r3, [r7, #14]
 8009b9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	4413      	add	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	3310      	adds	r3, #16
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	4413      	add	r3, r2
 8009bae:	3304      	adds	r3, #4
 8009bb0:	e00b      	b.n	8009bca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009bb2:	7bbb      	ldrb	r3, [r7, #14]
 8009bb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bb8:	4613      	mov	r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	4413      	add	r3, r2
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	4413      	add	r3, r2
 8009bc8:	3304      	adds	r3, #4
 8009bca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	2202      	movs	r2, #2
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 fc36 	bl	800a44a <USBD_CtlSendData>
              break;
 8009bde:	e06a      	b.n	8009cb6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009be0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	da11      	bge.n	8009c0c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009be8:	7bbb      	ldrb	r3, [r7, #14]
 8009bea:	f003 020f 	and.w	r2, r3, #15
 8009bee:	6879      	ldr	r1, [r7, #4]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	4413      	add	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	440b      	add	r3, r1
 8009bfa:	3324      	adds	r3, #36	@ 0x24
 8009bfc:	881b      	ldrh	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d117      	bne.n	8009c32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009c02:	6839      	ldr	r1, [r7, #0]
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 fbb0 	bl	800a36a <USBD_CtlError>
                  break;
 8009c0a:	e054      	b.n	8009cb6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c0c:	7bbb      	ldrb	r3, [r7, #14]
 8009c0e:	f003 020f 	and.w	r2, r3, #15
 8009c12:	6879      	ldr	r1, [r7, #4]
 8009c14:	4613      	mov	r3, r2
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	4413      	add	r3, r2
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	440b      	add	r3, r1
 8009c1e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009c22:	881b      	ldrh	r3, [r3, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d104      	bne.n	8009c32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009c28:	6839      	ldr	r1, [r7, #0]
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fb9d 	bl	800a36a <USBD_CtlError>
                  break;
 8009c30:	e041      	b.n	8009cb6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	da0b      	bge.n	8009c52 <USBD_StdEPReq+0x2b2>
 8009c3a:	7bbb      	ldrb	r3, [r7, #14]
 8009c3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c40:	4613      	mov	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4413      	add	r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	3310      	adds	r3, #16
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	3304      	adds	r3, #4
 8009c50:	e00b      	b.n	8009c6a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c52:	7bbb      	ldrb	r3, [r7, #14]
 8009c54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c58:	4613      	mov	r3, r2
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	4413      	add	r3, r2
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	4413      	add	r3, r2
 8009c68:	3304      	adds	r3, #4
 8009c6a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c6c:	7bbb      	ldrb	r3, [r7, #14]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d002      	beq.n	8009c78 <USBD_StdEPReq+0x2d8>
 8009c72:	7bbb      	ldrb	r3, [r7, #14]
 8009c74:	2b80      	cmp	r3, #128	@ 0x80
 8009c76:	d103      	bne.n	8009c80 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	601a      	str	r2, [r3, #0]
 8009c7e:	e00e      	b.n	8009c9e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009c80:	7bbb      	ldrb	r3, [r7, #14]
 8009c82:	4619      	mov	r1, r3
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f001 f893 	bl	800adb0 <USBD_LL_IsStallEP>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d003      	beq.n	8009c98 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	2201      	movs	r2, #1
 8009c94:	601a      	str	r2, [r3, #0]
 8009c96:	e002      	b.n	8009c9e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	2202      	movs	r2, #2
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 fbd0 	bl	800a44a <USBD_CtlSendData>
              break;
 8009caa:	e004      	b.n	8009cb6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009cac:	6839      	ldr	r1, [r7, #0]
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fb5b 	bl	800a36a <USBD_CtlError>
              break;
 8009cb4:	bf00      	nop
          }
          break;
 8009cb6:	e004      	b.n	8009cc2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009cb8:	6839      	ldr	r1, [r7, #0]
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 fb55 	bl	800a36a <USBD_CtlError>
          break;
 8009cc0:	bf00      	nop
      }
      break;
 8009cc2:	e005      	b.n	8009cd0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009cc4:	6839      	ldr	r1, [r7, #0]
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 fb4f 	bl	800a36a <USBD_CtlError>
      break;
 8009ccc:	e000      	b.n	8009cd0 <USBD_StdEPReq+0x330>
      break;
 8009cce:	bf00      	nop
  }

  return ret;
 8009cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
	...

08009cdc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009cea:	2300      	movs	r3, #0
 8009cec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	885b      	ldrh	r3, [r3, #2]
 8009cf6:	0a1b      	lsrs	r3, r3, #8
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	2b06      	cmp	r3, #6
 8009cfe:	f200 8128 	bhi.w	8009f52 <USBD_GetDescriptor+0x276>
 8009d02:	a201      	add	r2, pc, #4	@ (adr r2, 8009d08 <USBD_GetDescriptor+0x2c>)
 8009d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d08:	08009d25 	.word	0x08009d25
 8009d0c:	08009d3d 	.word	0x08009d3d
 8009d10:	08009d7d 	.word	0x08009d7d
 8009d14:	08009f53 	.word	0x08009f53
 8009d18:	08009f53 	.word	0x08009f53
 8009d1c:	08009ef3 	.word	0x08009ef3
 8009d20:	08009f1f 	.word	0x08009f1f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	7c12      	ldrb	r2, [r2, #16]
 8009d30:	f107 0108 	add.w	r1, r7, #8
 8009d34:	4610      	mov	r0, r2
 8009d36:	4798      	blx	r3
 8009d38:	60f8      	str	r0, [r7, #12]
      break;
 8009d3a:	e112      	b.n	8009f62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	7c1b      	ldrb	r3, [r3, #16]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d10d      	bne.n	8009d60 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d4c:	f107 0208 	add.w	r2, r7, #8
 8009d50:	4610      	mov	r0, r2
 8009d52:	4798      	blx	r3
 8009d54:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	2202      	movs	r2, #2
 8009d5c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d5e:	e100      	b.n	8009f62 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d68:	f107 0208 	add.w	r2, r7, #8
 8009d6c:	4610      	mov	r0, r2
 8009d6e:	4798      	blx	r3
 8009d70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	3301      	adds	r3, #1
 8009d76:	2202      	movs	r2, #2
 8009d78:	701a      	strb	r2, [r3, #0]
      break;
 8009d7a:	e0f2      	b.n	8009f62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	885b      	ldrh	r3, [r3, #2]
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	2b05      	cmp	r3, #5
 8009d84:	f200 80ac 	bhi.w	8009ee0 <USBD_GetDescriptor+0x204>
 8009d88:	a201      	add	r2, pc, #4	@ (adr r2, 8009d90 <USBD_GetDescriptor+0xb4>)
 8009d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d8e:	bf00      	nop
 8009d90:	08009da9 	.word	0x08009da9
 8009d94:	08009ddd 	.word	0x08009ddd
 8009d98:	08009e11 	.word	0x08009e11
 8009d9c:	08009e45 	.word	0x08009e45
 8009da0:	08009e79 	.word	0x08009e79
 8009da4:	08009ead 	.word	0x08009ead
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d00b      	beq.n	8009dcc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	7c12      	ldrb	r2, [r2, #16]
 8009dc0:	f107 0108 	add.w	r1, r7, #8
 8009dc4:	4610      	mov	r0, r2
 8009dc6:	4798      	blx	r3
 8009dc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dca:	e091      	b.n	8009ef0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009dcc:	6839      	ldr	r1, [r7, #0]
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 facb 	bl	800a36a <USBD_CtlError>
            err++;
 8009dd4:	7afb      	ldrb	r3, [r7, #11]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	72fb      	strb	r3, [r7, #11]
          break;
 8009dda:	e089      	b.n	8009ef0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00b      	beq.n	8009e00 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	7c12      	ldrb	r2, [r2, #16]
 8009df4:	f107 0108 	add.w	r1, r7, #8
 8009df8:	4610      	mov	r0, r2
 8009dfa:	4798      	blx	r3
 8009dfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dfe:	e077      	b.n	8009ef0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fab1 	bl	800a36a <USBD_CtlError>
            err++;
 8009e08:	7afb      	ldrb	r3, [r7, #11]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e0e:	e06f      	b.n	8009ef0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00b      	beq.n	8009e34 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	7c12      	ldrb	r2, [r2, #16]
 8009e28:	f107 0108 	add.w	r1, r7, #8
 8009e2c:	4610      	mov	r0, r2
 8009e2e:	4798      	blx	r3
 8009e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e32:	e05d      	b.n	8009ef0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e34:	6839      	ldr	r1, [r7, #0]
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 fa97 	bl	800a36a <USBD_CtlError>
            err++;
 8009e3c:	7afb      	ldrb	r3, [r7, #11]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	72fb      	strb	r3, [r7, #11]
          break;
 8009e42:	e055      	b.n	8009ef0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d00b      	beq.n	8009e68 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	7c12      	ldrb	r2, [r2, #16]
 8009e5c:	f107 0108 	add.w	r1, r7, #8
 8009e60:	4610      	mov	r0, r2
 8009e62:	4798      	blx	r3
 8009e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e66:	e043      	b.n	8009ef0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e68:	6839      	ldr	r1, [r7, #0]
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 fa7d 	bl	800a36a <USBD_CtlError>
            err++;
 8009e70:	7afb      	ldrb	r3, [r7, #11]
 8009e72:	3301      	adds	r3, #1
 8009e74:	72fb      	strb	r3, [r7, #11]
          break;
 8009e76:	e03b      	b.n	8009ef0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e7e:	695b      	ldr	r3, [r3, #20]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00b      	beq.n	8009e9c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e8a:	695b      	ldr	r3, [r3, #20]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	7c12      	ldrb	r2, [r2, #16]
 8009e90:	f107 0108 	add.w	r1, r7, #8
 8009e94:	4610      	mov	r0, r2
 8009e96:	4798      	blx	r3
 8009e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e9a:	e029      	b.n	8009ef0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e9c:	6839      	ldr	r1, [r7, #0]
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 fa63 	bl	800a36a <USBD_CtlError>
            err++;
 8009ea4:	7afb      	ldrb	r3, [r7, #11]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8009eaa:	e021      	b.n	8009ef0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009eb2:	699b      	ldr	r3, [r3, #24]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00b      	beq.n	8009ed0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ebe:	699b      	ldr	r3, [r3, #24]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	7c12      	ldrb	r2, [r2, #16]
 8009ec4:	f107 0108 	add.w	r1, r7, #8
 8009ec8:	4610      	mov	r0, r2
 8009eca:	4798      	blx	r3
 8009ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ece:	e00f      	b.n	8009ef0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ed0:	6839      	ldr	r1, [r7, #0]
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 fa49 	bl	800a36a <USBD_CtlError>
            err++;
 8009ed8:	7afb      	ldrb	r3, [r7, #11]
 8009eda:	3301      	adds	r3, #1
 8009edc:	72fb      	strb	r3, [r7, #11]
          break;
 8009ede:	e007      	b.n	8009ef0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009ee0:	6839      	ldr	r1, [r7, #0]
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 fa41 	bl	800a36a <USBD_CtlError>
          err++;
 8009ee8:	7afb      	ldrb	r3, [r7, #11]
 8009eea:	3301      	adds	r3, #1
 8009eec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009eee:	bf00      	nop
      }
      break;
 8009ef0:	e037      	b.n	8009f62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	7c1b      	ldrb	r3, [r3, #16]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d109      	bne.n	8009f0e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f02:	f107 0208 	add.w	r2, r7, #8
 8009f06:	4610      	mov	r0, r2
 8009f08:	4798      	blx	r3
 8009f0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f0c:	e029      	b.n	8009f62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fa2a 	bl	800a36a <USBD_CtlError>
        err++;
 8009f16:	7afb      	ldrb	r3, [r7, #11]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	72fb      	strb	r3, [r7, #11]
      break;
 8009f1c:	e021      	b.n	8009f62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	7c1b      	ldrb	r3, [r3, #16]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d10d      	bne.n	8009f42 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f2e:	f107 0208 	add.w	r2, r7, #8
 8009f32:	4610      	mov	r0, r2
 8009f34:	4798      	blx	r3
 8009f36:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	2207      	movs	r2, #7
 8009f3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f40:	e00f      	b.n	8009f62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f42:	6839      	ldr	r1, [r7, #0]
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 fa10 	bl	800a36a <USBD_CtlError>
        err++;
 8009f4a:	7afb      	ldrb	r3, [r7, #11]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	72fb      	strb	r3, [r7, #11]
      break;
 8009f50:	e007      	b.n	8009f62 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 fa08 	bl	800a36a <USBD_CtlError>
      err++;
 8009f5a:	7afb      	ldrb	r3, [r7, #11]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	72fb      	strb	r3, [r7, #11]
      break;
 8009f60:	bf00      	nop
  }

  if (err != 0U)
 8009f62:	7afb      	ldrb	r3, [r7, #11]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d11e      	bne.n	8009fa6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	88db      	ldrh	r3, [r3, #6]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d016      	beq.n	8009f9e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009f70:	893b      	ldrh	r3, [r7, #8]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00e      	beq.n	8009f94 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	88da      	ldrh	r2, [r3, #6]
 8009f7a:	893b      	ldrh	r3, [r7, #8]
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	bf28      	it	cs
 8009f80:	4613      	movcs	r3, r2
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f86:	893b      	ldrh	r3, [r7, #8]
 8009f88:	461a      	mov	r2, r3
 8009f8a:	68f9      	ldr	r1, [r7, #12]
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 fa5c 	bl	800a44a <USBD_CtlSendData>
 8009f92:	e009      	b.n	8009fa8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009f94:	6839      	ldr	r1, [r7, #0]
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 f9e7 	bl	800a36a <USBD_CtlError>
 8009f9c:	e004      	b.n	8009fa8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 faad 	bl	800a4fe <USBD_CtlSendStatus>
 8009fa4:	e000      	b.n	8009fa8 <USBD_GetDescriptor+0x2cc>
    return;
 8009fa6:	bf00      	nop
  }
}
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop

08009fb0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	889b      	ldrh	r3, [r3, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d131      	bne.n	800a026 <USBD_SetAddress+0x76>
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	88db      	ldrh	r3, [r3, #6]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d12d      	bne.n	800a026 <USBD_SetAddress+0x76>
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	885b      	ldrh	r3, [r3, #2]
 8009fce:	2b7f      	cmp	r3, #127	@ 0x7f
 8009fd0:	d829      	bhi.n	800a026 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	885b      	ldrh	r3, [r3, #2]
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fdc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b03      	cmp	r3, #3
 8009fe8:	d104      	bne.n	8009ff4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009fea:	6839      	ldr	r1, [r7, #0]
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 f9bc 	bl	800a36a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ff2:	e01d      	b.n	800a030 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	7bfa      	ldrb	r2, [r7, #15]
 8009ff8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009ffc:	7bfb      	ldrb	r3, [r7, #15]
 8009ffe:	4619      	mov	r1, r3
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 ff00 	bl	800ae06 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 fa79 	bl	800a4fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a00c:	7bfb      	ldrb	r3, [r7, #15]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d004      	beq.n	800a01c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2202      	movs	r2, #2
 800a016:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a01a:	e009      	b.n	800a030 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a024:	e004      	b.n	800a030 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a026:	6839      	ldr	r1, [r7, #0]
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 f99e 	bl	800a36a <USBD_CtlError>
  }
}
 800a02e:	bf00      	nop
 800a030:	bf00      	nop
 800a032:	3710      	adds	r7, #16
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a042:	2300      	movs	r3, #0
 800a044:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	885b      	ldrh	r3, [r3, #2]
 800a04a:	b2da      	uxtb	r2, r3
 800a04c:	4b4e      	ldr	r3, [pc, #312]	@ (800a188 <USBD_SetConfig+0x150>)
 800a04e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a050:	4b4d      	ldr	r3, [pc, #308]	@ (800a188 <USBD_SetConfig+0x150>)
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	2b01      	cmp	r3, #1
 800a056:	d905      	bls.n	800a064 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a058:	6839      	ldr	r1, [r7, #0]
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 f985 	bl	800a36a <USBD_CtlError>
    return USBD_FAIL;
 800a060:	2303      	movs	r3, #3
 800a062:	e08c      	b.n	800a17e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	d002      	beq.n	800a076 <USBD_SetConfig+0x3e>
 800a070:	2b03      	cmp	r3, #3
 800a072:	d029      	beq.n	800a0c8 <USBD_SetConfig+0x90>
 800a074:	e075      	b.n	800a162 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a076:	4b44      	ldr	r3, [pc, #272]	@ (800a188 <USBD_SetConfig+0x150>)
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d020      	beq.n	800a0c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a07e:	4b42      	ldr	r3, [pc, #264]	@ (800a188 <USBD_SetConfig+0x150>)
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	461a      	mov	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a088:	4b3f      	ldr	r3, [pc, #252]	@ (800a188 <USBD_SetConfig+0x150>)
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	4619      	mov	r1, r3
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f7fe ffec 	bl	800906c <USBD_SetClassConfig>
 800a094:	4603      	mov	r3, r0
 800a096:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a098:	7bfb      	ldrb	r3, [r7, #15]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d008      	beq.n	800a0b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a09e:	6839      	ldr	r1, [r7, #0]
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 f962 	bl	800a36a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2202      	movs	r2, #2
 800a0aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a0ae:	e065      	b.n	800a17c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 fa24 	bl	800a4fe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2203      	movs	r2, #3
 800a0ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a0be:	e05d      	b.n	800a17c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fa1c 	bl	800a4fe <USBD_CtlSendStatus>
      break;
 800a0c6:	e059      	b.n	800a17c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a0c8:	4b2f      	ldr	r3, [pc, #188]	@ (800a188 <USBD_SetConfig+0x150>)
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d112      	bne.n	800a0f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2202      	movs	r2, #2
 800a0d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a0d8:	4b2b      	ldr	r3, [pc, #172]	@ (800a188 <USBD_SetConfig+0x150>)
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	461a      	mov	r2, r3
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a0e2:	4b29      	ldr	r3, [pc, #164]	@ (800a188 <USBD_SetConfig+0x150>)
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7fe ffdb 	bl	80090a4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 fa05 	bl	800a4fe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a0f4:	e042      	b.n	800a17c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a0f6:	4b24      	ldr	r3, [pc, #144]	@ (800a188 <USBD_SetConfig+0x150>)
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	429a      	cmp	r2, r3
 800a102:	d02a      	beq.n	800a15a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	4619      	mov	r1, r3
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f7fe ffc9 	bl	80090a4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a112:	4b1d      	ldr	r3, [pc, #116]	@ (800a188 <USBD_SetConfig+0x150>)
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	461a      	mov	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a11c:	4b1a      	ldr	r3, [pc, #104]	@ (800a188 <USBD_SetConfig+0x150>)
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	4619      	mov	r1, r3
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f7fe ffa2 	bl	800906c <USBD_SetClassConfig>
 800a128:	4603      	mov	r3, r0
 800a12a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a12c:	7bfb      	ldrb	r3, [r7, #15]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d00f      	beq.n	800a152 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a132:	6839      	ldr	r1, [r7, #0]
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 f918 	bl	800a36a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	4619      	mov	r1, r3
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f7fe ffae 	bl	80090a4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2202      	movs	r2, #2
 800a14c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a150:	e014      	b.n	800a17c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 f9d3 	bl	800a4fe <USBD_CtlSendStatus>
      break;
 800a158:	e010      	b.n	800a17c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 f9cf 	bl	800a4fe <USBD_CtlSendStatus>
      break;
 800a160:	e00c      	b.n	800a17c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a162:	6839      	ldr	r1, [r7, #0]
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 f900 	bl	800a36a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a16a:	4b07      	ldr	r3, [pc, #28]	@ (800a188 <USBD_SetConfig+0x150>)
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	4619      	mov	r1, r3
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f7fe ff97 	bl	80090a4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a176:	2303      	movs	r3, #3
 800a178:	73fb      	strb	r3, [r7, #15]
      break;
 800a17a:	bf00      	nop
  }

  return ret;
 800a17c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	200004dc 	.word	0x200004dc

0800a18c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	88db      	ldrh	r3, [r3, #6]
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d004      	beq.n	800a1a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a19e:	6839      	ldr	r1, [r7, #0]
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 f8e2 	bl	800a36a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a1a6:	e023      	b.n	800a1f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	dc02      	bgt.n	800a1ba <USBD_GetConfig+0x2e>
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	dc03      	bgt.n	800a1c0 <USBD_GetConfig+0x34>
 800a1b8:	e015      	b.n	800a1e6 <USBD_GetConfig+0x5a>
 800a1ba:	2b03      	cmp	r3, #3
 800a1bc:	d00b      	beq.n	800a1d6 <USBD_GetConfig+0x4a>
 800a1be:	e012      	b.n	800a1e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	3308      	adds	r3, #8
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 f93b 	bl	800a44a <USBD_CtlSendData>
        break;
 800a1d4:	e00c      	b.n	800a1f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	3304      	adds	r3, #4
 800a1da:	2201      	movs	r2, #1
 800a1dc:	4619      	mov	r1, r3
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 f933 	bl	800a44a <USBD_CtlSendData>
        break;
 800a1e4:	e004      	b.n	800a1f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a1e6:	6839      	ldr	r1, [r7, #0]
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 f8be 	bl	800a36a <USBD_CtlError>
        break;
 800a1ee:	bf00      	nop
}
 800a1f0:	bf00      	nop
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	3b01      	subs	r3, #1
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d81e      	bhi.n	800a24e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	88db      	ldrh	r3, [r3, #6]
 800a214:	2b02      	cmp	r3, #2
 800a216:	d004      	beq.n	800a222 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a218:	6839      	ldr	r1, [r7, #0]
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 f8a5 	bl	800a36a <USBD_CtlError>
        break;
 800a220:	e01a      	b.n	800a258 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2201      	movs	r2, #1
 800a226:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d005      	beq.n	800a23e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	f043 0202 	orr.w	r2, r3, #2
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	330c      	adds	r3, #12
 800a242:	2202      	movs	r2, #2
 800a244:	4619      	mov	r1, r3
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 f8ff 	bl	800a44a <USBD_CtlSendData>
      break;
 800a24c:	e004      	b.n	800a258 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a24e:	6839      	ldr	r1, [r7, #0]
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 f88a 	bl	800a36a <USBD_CtlError>
      break;
 800a256:	bf00      	nop
  }
}
 800a258:	bf00      	nop
 800a25a:	3708      	adds	r7, #8
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	885b      	ldrh	r3, [r3, #2]
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d107      	bne.n	800a282 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2201      	movs	r2, #1
 800a276:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 f93f 	bl	800a4fe <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a280:	e013      	b.n	800a2aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	885b      	ldrh	r3, [r3, #2]
 800a286:	2b02      	cmp	r3, #2
 800a288:	d10b      	bne.n	800a2a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	889b      	ldrh	r3, [r3, #4]
 800a28e:	0a1b      	lsrs	r3, r3, #8
 800a290:	b29b      	uxth	r3, r3
 800a292:	b2da      	uxtb	r2, r3
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f92f 	bl	800a4fe <USBD_CtlSendStatus>
}
 800a2a0:	e003      	b.n	800a2aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a2a2:	6839      	ldr	r1, [r7, #0]
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 f860 	bl	800a36a <USBD_CtlError>
}
 800a2aa:	bf00      	nop
 800a2ac:	3708      	adds	r7, #8
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b082      	sub	sp, #8
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
 800a2ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	d80b      	bhi.n	800a2e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	885b      	ldrh	r3, [r3, #2]
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d10c      	bne.n	800a2ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 f90f 	bl	800a4fe <USBD_CtlSendStatus>
      }
      break;
 800a2e0:	e004      	b.n	800a2ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a2e2:	6839      	ldr	r1, [r7, #0]
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 f840 	bl	800a36a <USBD_CtlError>
      break;
 800a2ea:	e000      	b.n	800a2ee <USBD_ClrFeature+0x3c>
      break;
 800a2ec:	bf00      	nop
  }
}
 800a2ee:	bf00      	nop
 800a2f0:	3708      	adds	r7, #8
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b084      	sub	sp, #16
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
 800a2fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	781a      	ldrb	r2, [r3, #0]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	3301      	adds	r3, #1
 800a310:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	781a      	ldrb	r2, [r3, #0]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	3301      	adds	r3, #1
 800a31e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a320:	68f8      	ldr	r0, [r7, #12]
 800a322:	f7ff fa42 	bl	80097aa <SWAPBYTE>
 800a326:	4603      	mov	r3, r0
 800a328:	461a      	mov	r2, r3
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	3301      	adds	r3, #1
 800a332:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	3301      	adds	r3, #1
 800a338:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	f7ff fa35 	bl	80097aa <SWAPBYTE>
 800a340:	4603      	mov	r3, r0
 800a342:	461a      	mov	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	3301      	adds	r3, #1
 800a34c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	3301      	adds	r3, #1
 800a352:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f7ff fa28 	bl	80097aa <SWAPBYTE>
 800a35a:	4603      	mov	r3, r0
 800a35c:	461a      	mov	r2, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	80da      	strh	r2, [r3, #6]
}
 800a362:	bf00      	nop
 800a364:	3710      	adds	r7, #16
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b082      	sub	sp, #8
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
 800a372:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a374:	2180      	movs	r1, #128	@ 0x80
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 fcdc 	bl	800ad34 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a37c:	2100      	movs	r1, #0
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 fcd8 	bl	800ad34 <USBD_LL_StallEP>
}
 800a384:	bf00      	nop
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b086      	sub	sp, #24
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a398:	2300      	movs	r3, #0
 800a39a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d036      	beq.n	800a410 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a3a6:	6938      	ldr	r0, [r7, #16]
 800a3a8:	f000 f836 	bl	800a418 <USBD_GetLen>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	005b      	lsls	r3, r3, #1
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a3ba:	7dfb      	ldrb	r3, [r7, #23]
 800a3bc:	68ba      	ldr	r2, [r7, #8]
 800a3be:	4413      	add	r3, r2
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	7812      	ldrb	r2, [r2, #0]
 800a3c4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a3c6:	7dfb      	ldrb	r3, [r7, #23]
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a3cc:	7dfb      	ldrb	r3, [r7, #23]
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	2203      	movs	r2, #3
 800a3d4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a3d6:	7dfb      	ldrb	r3, [r7, #23]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a3dc:	e013      	b.n	800a406 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a3de:	7dfb      	ldrb	r3, [r7, #23]
 800a3e0:	68ba      	ldr	r2, [r7, #8]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	7812      	ldrb	r2, [r2, #0]
 800a3e8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	613b      	str	r3, [r7, #16]
    idx++;
 800a3f0:	7dfb      	ldrb	r3, [r7, #23]
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a3f6:	7dfb      	ldrb	r3, [r7, #23]
 800a3f8:	68ba      	ldr	r2, [r7, #8]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	701a      	strb	r2, [r3, #0]
    idx++;
 800a400:	7dfb      	ldrb	r3, [r7, #23]
 800a402:	3301      	adds	r3, #1
 800a404:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d1e7      	bne.n	800a3de <USBD_GetString+0x52>
 800a40e:	e000      	b.n	800a412 <USBD_GetString+0x86>
    return;
 800a410:	bf00      	nop
  }
}
 800a412:	3718      	adds	r7, #24
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a418:	b480      	push	{r7}
 800a41a:	b085      	sub	sp, #20
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a420:	2300      	movs	r3, #0
 800a422:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a428:	e005      	b.n	800a436 <USBD_GetLen+0x1e>
  {
    len++;
 800a42a:	7bfb      	ldrb	r3, [r7, #15]
 800a42c:	3301      	adds	r3, #1
 800a42e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	3301      	adds	r3, #1
 800a434:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d1f5      	bne.n	800a42a <USBD_GetLen+0x12>
  }

  return len;
 800a43e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3714      	adds	r7, #20
 800a444:	46bd      	mov	sp, r7
 800a446:	bc80      	pop	{r7}
 800a448:	4770      	bx	lr

0800a44a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	60f8      	str	r0, [r7, #12]
 800a452:	60b9      	str	r1, [r7, #8]
 800a454:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2202      	movs	r2, #2
 800a45a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	2100      	movs	r1, #0
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f000 fce7 	bl	800ae44 <USBD_LL_Transmit>

  return USBD_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3710      	adds	r7, #16
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	68ba      	ldr	r2, [r7, #8]
 800a490:	2100      	movs	r1, #0
 800a492:	68f8      	ldr	r0, [r7, #12]
 800a494:	f000 fcd6 	bl	800ae44 <USBD_LL_Transmit>

  return USBD_OK;
 800a498:	2300      	movs	r3, #0
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}

0800a4a2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a4a2:	b580      	push	{r7, lr}
 800a4a4:	b084      	sub	sp, #16
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	60f8      	str	r0, [r7, #12]
 800a4aa:	60b9      	str	r1, [r7, #8]
 800a4ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2203      	movs	r2, #3
 800a4b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	2100      	movs	r1, #0
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f000 fcda 	bl	800ae86 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4d2:	2300      	movs	r3, #0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f000 fcc9 	bl	800ae86 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b082      	sub	sp, #8
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2204      	movs	r2, #4
 800a50a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a50e:	2300      	movs	r3, #0
 800a510:	2200      	movs	r2, #0
 800a512:	2100      	movs	r1, #0
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 fc95 	bl	800ae44 <USBD_LL_Transmit>

  return USBD_OK;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2205      	movs	r2, #5
 800a530:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a534:	2300      	movs	r3, #0
 800a536:	2200      	movs	r2, #0
 800a538:	2100      	movs	r1, #0
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 fca3 	bl	800ae86 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3708      	adds	r7, #8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
	...

0800a54c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a550:	2200      	movs	r2, #0
 800a552:	4912      	ldr	r1, [pc, #72]	@ (800a59c <MX_USB_DEVICE_Init+0x50>)
 800a554:	4812      	ldr	r0, [pc, #72]	@ (800a5a0 <MX_USB_DEVICE_Init+0x54>)
 800a556:	f7fe fd0d 	bl	8008f74 <USBD_Init>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d001      	beq.n	800a564 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a560:	f7f7 fa6a 	bl	8001a38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a564:	490f      	ldr	r1, [pc, #60]	@ (800a5a4 <MX_USB_DEVICE_Init+0x58>)
 800a566:	480e      	ldr	r0, [pc, #56]	@ (800a5a0 <MX_USB_DEVICE_Init+0x54>)
 800a568:	f7fe fd34 	bl	8008fd4 <USBD_RegisterClass>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d001      	beq.n	800a576 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a572:	f7f7 fa61 	bl	8001a38 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a576:	490c      	ldr	r1, [pc, #48]	@ (800a5a8 <MX_USB_DEVICE_Init+0x5c>)
 800a578:	4809      	ldr	r0, [pc, #36]	@ (800a5a0 <MX_USB_DEVICE_Init+0x54>)
 800a57a:	f7fe fc2f 	bl	8008ddc <USBD_CDC_RegisterInterface>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d001      	beq.n	800a588 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a584:	f7f7 fa58 	bl	8001a38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a588:	4805      	ldr	r0, [pc, #20]	@ (800a5a0 <MX_USB_DEVICE_Init+0x54>)
 800a58a:	f7fe fd59 	bl	8009040 <USBD_Start>
 800a58e:	4603      	mov	r3, r0
 800a590:	2b00      	cmp	r3, #0
 800a592:	d001      	beq.n	800a598 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a594:	f7f7 fa50 	bl	8001a38 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a598:	bf00      	nop
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	200000ac 	.word	0x200000ac
 800a5a0:	200004e0 	.word	0x200004e0
 800a5a4:	20000018 	.word	0x20000018
 800a5a8:	20000098 	.word	0x20000098

0800a5ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	4905      	ldr	r1, [pc, #20]	@ (800a5c8 <CDC_Init_FS+0x1c>)
 800a5b4:	4805      	ldr	r0, [pc, #20]	@ (800a5cc <CDC_Init_FS+0x20>)
 800a5b6:	f7fe fc2a 	bl	8008e0e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a5ba:	4905      	ldr	r1, [pc, #20]	@ (800a5d0 <CDC_Init_FS+0x24>)
 800a5bc:	4803      	ldr	r0, [pc, #12]	@ (800a5cc <CDC_Init_FS+0x20>)
 800a5be:	f7fe fc47 	bl	8008e50 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a5c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	20000fbc 	.word	0x20000fbc
 800a5cc:	200004e0 	.word	0x200004e0
 800a5d0:	200007bc 	.word	0x200007bc

0800a5d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a5d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bc80      	pop	{r7}
 800a5e0:	4770      	bx	lr
	...

0800a5e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	6039      	str	r1, [r7, #0]
 800a5ee:	71fb      	strb	r3, [r7, #7]
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a5f4:	79fb      	ldrb	r3, [r7, #7]
 800a5f6:	2b23      	cmp	r3, #35	@ 0x23
 800a5f8:	d84a      	bhi.n	800a690 <CDC_Control_FS+0xac>
 800a5fa:	a201      	add	r2, pc, #4	@ (adr r2, 800a600 <CDC_Control_FS+0x1c>)
 800a5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a600:	0800a691 	.word	0x0800a691
 800a604:	0800a691 	.word	0x0800a691
 800a608:	0800a691 	.word	0x0800a691
 800a60c:	0800a691 	.word	0x0800a691
 800a610:	0800a691 	.word	0x0800a691
 800a614:	0800a691 	.word	0x0800a691
 800a618:	0800a691 	.word	0x0800a691
 800a61c:	0800a691 	.word	0x0800a691
 800a620:	0800a691 	.word	0x0800a691
 800a624:	0800a691 	.word	0x0800a691
 800a628:	0800a691 	.word	0x0800a691
 800a62c:	0800a691 	.word	0x0800a691
 800a630:	0800a691 	.word	0x0800a691
 800a634:	0800a691 	.word	0x0800a691
 800a638:	0800a691 	.word	0x0800a691
 800a63c:	0800a691 	.word	0x0800a691
 800a640:	0800a691 	.word	0x0800a691
 800a644:	0800a691 	.word	0x0800a691
 800a648:	0800a691 	.word	0x0800a691
 800a64c:	0800a691 	.word	0x0800a691
 800a650:	0800a691 	.word	0x0800a691
 800a654:	0800a691 	.word	0x0800a691
 800a658:	0800a691 	.word	0x0800a691
 800a65c:	0800a691 	.word	0x0800a691
 800a660:	0800a691 	.word	0x0800a691
 800a664:	0800a691 	.word	0x0800a691
 800a668:	0800a691 	.word	0x0800a691
 800a66c:	0800a691 	.word	0x0800a691
 800a670:	0800a691 	.word	0x0800a691
 800a674:	0800a691 	.word	0x0800a691
 800a678:	0800a691 	.word	0x0800a691
 800a67c:	0800a691 	.word	0x0800a691
 800a680:	0800a691 	.word	0x0800a691
 800a684:	0800a691 	.word	0x0800a691
 800a688:	0800a691 	.word	0x0800a691
 800a68c:	0800a691 	.word	0x0800a691
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a690:	bf00      	nop
  }

  return (USBD_OK);
 800a692:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a694:	4618      	mov	r0, r3
 800a696:	370c      	adds	r7, #12
 800a698:	46bd      	mov	sp, r7
 800a69a:	bc80      	pop	{r7}
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop

0800a6a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a6aa:	6879      	ldr	r1, [r7, #4]
 800a6ac:	4805      	ldr	r0, [pc, #20]	@ (800a6c4 <CDC_Receive_FS+0x24>)
 800a6ae:	f7fe fbcf 	bl	8008e50 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a6b2:	4804      	ldr	r0, [pc, #16]	@ (800a6c4 <CDC_Receive_FS+0x24>)
 800a6b4:	f7fe fc28 	bl	8008f08 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a6b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3708      	adds	r7, #8
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	200004e0 	.word	0x200004e0

0800a6c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a6d8:	4b0d      	ldr	r3, [pc, #52]	@ (800a710 <CDC_Transmit_FS+0x48>)
 800a6da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a6de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d001      	beq.n	800a6ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	e00b      	b.n	800a706 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a6ee:	887b      	ldrh	r3, [r7, #2]
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	6879      	ldr	r1, [r7, #4]
 800a6f4:	4806      	ldr	r0, [pc, #24]	@ (800a710 <CDC_Transmit_FS+0x48>)
 800a6f6:	f7fe fb8a 	bl	8008e0e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a6fa:	4805      	ldr	r0, [pc, #20]	@ (800a710 <CDC_Transmit_FS+0x48>)
 800a6fc:	f7fe fbc4 	bl	8008e88 <USBD_CDC_TransmitPacket>
 800a700:	4603      	mov	r3, r0
 800a702:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a704:	7bfb      	ldrb	r3, [r7, #15]
}
 800a706:	4618      	mov	r0, r3
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	200004e0 	.word	0x200004e0

0800a714 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a714:	b480      	push	{r7}
 800a716:	b087      	sub	sp, #28
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	4613      	mov	r3, r2
 800a720:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a722:	2300      	movs	r3, #0
 800a724:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a726:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	371c      	adds	r7, #28
 800a72e:	46bd      	mov	sp, r7
 800a730:	bc80      	pop	{r7}
 800a732:	4770      	bx	lr

0800a734 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	4603      	mov	r3, r0
 800a73c:	6039      	str	r1, [r7, #0]
 800a73e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	2212      	movs	r2, #18
 800a744:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a746:	4b03      	ldr	r3, [pc, #12]	@ (800a754 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a748:	4618      	mov	r0, r3
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bc80      	pop	{r7}
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	200000c8 	.word	0x200000c8

0800a758 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	4603      	mov	r3, r0
 800a760:	6039      	str	r1, [r7, #0]
 800a762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	2204      	movs	r2, #4
 800a768:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a76a:	4b03      	ldr	r3, [pc, #12]	@ (800a778 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	370c      	adds	r7, #12
 800a770:	46bd      	mov	sp, r7
 800a772:	bc80      	pop	{r7}
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop
 800a778:	200000dc 	.word	0x200000dc

0800a77c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	4603      	mov	r3, r0
 800a784:	6039      	str	r1, [r7, #0]
 800a786:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a788:	79fb      	ldrb	r3, [r7, #7]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d105      	bne.n	800a79a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a78e:	683a      	ldr	r2, [r7, #0]
 800a790:	4907      	ldr	r1, [pc, #28]	@ (800a7b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a792:	4808      	ldr	r0, [pc, #32]	@ (800a7b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a794:	f7ff fdfa 	bl	800a38c <USBD_GetString>
 800a798:	e004      	b.n	800a7a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a79a:	683a      	ldr	r2, [r7, #0]
 800a79c:	4904      	ldr	r1, [pc, #16]	@ (800a7b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a79e:	4805      	ldr	r0, [pc, #20]	@ (800a7b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a7a0:	f7ff fdf4 	bl	800a38c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7a4:	4b02      	ldr	r3, [pc, #8]	@ (800a7b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3708      	adds	r7, #8
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	200017bc 	.word	0x200017bc
 800a7b4:	0800dc18 	.word	0x0800dc18

0800a7b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	4603      	mov	r3, r0
 800a7c0:	6039      	str	r1, [r7, #0]
 800a7c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a7c4:	683a      	ldr	r2, [r7, #0]
 800a7c6:	4904      	ldr	r1, [pc, #16]	@ (800a7d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a7c8:	4804      	ldr	r0, [pc, #16]	@ (800a7dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a7ca:	f7ff fddf 	bl	800a38c <USBD_GetString>
  return USBD_StrDesc;
 800a7ce:	4b02      	ldr	r3, [pc, #8]	@ (800a7d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3708      	adds	r7, #8
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	200017bc 	.word	0x200017bc
 800a7dc:	0800dc30 	.word	0x0800dc30

0800a7e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	6039      	str	r1, [r7, #0]
 800a7ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	221a      	movs	r2, #26
 800a7f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a7f2:	f000 f843 	bl	800a87c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a7f6:	4b02      	ldr	r3, [pc, #8]	@ (800a800 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	200000e0 	.word	0x200000e0

0800a804 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	4603      	mov	r3, r0
 800a80c:	6039      	str	r1, [r7, #0]
 800a80e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a810:	79fb      	ldrb	r3, [r7, #7]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d105      	bne.n	800a822 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a816:	683a      	ldr	r2, [r7, #0]
 800a818:	4907      	ldr	r1, [pc, #28]	@ (800a838 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a81a:	4808      	ldr	r0, [pc, #32]	@ (800a83c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a81c:	f7ff fdb6 	bl	800a38c <USBD_GetString>
 800a820:	e004      	b.n	800a82c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a822:	683a      	ldr	r2, [r7, #0]
 800a824:	4904      	ldr	r1, [pc, #16]	@ (800a838 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a826:	4805      	ldr	r0, [pc, #20]	@ (800a83c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a828:	f7ff fdb0 	bl	800a38c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a82c:	4b02      	ldr	r3, [pc, #8]	@ (800a838 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3708      	adds	r7, #8
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	200017bc 	.word	0x200017bc
 800a83c:	0800dc44 	.word	0x0800dc44

0800a840 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	4603      	mov	r3, r0
 800a848:	6039      	str	r1, [r7, #0]
 800a84a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a84c:	79fb      	ldrb	r3, [r7, #7]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d105      	bne.n	800a85e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a852:	683a      	ldr	r2, [r7, #0]
 800a854:	4907      	ldr	r1, [pc, #28]	@ (800a874 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a856:	4808      	ldr	r0, [pc, #32]	@ (800a878 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a858:	f7ff fd98 	bl	800a38c <USBD_GetString>
 800a85c:	e004      	b.n	800a868 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a85e:	683a      	ldr	r2, [r7, #0]
 800a860:	4904      	ldr	r1, [pc, #16]	@ (800a874 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a862:	4805      	ldr	r0, [pc, #20]	@ (800a878 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a864:	f7ff fd92 	bl	800a38c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a868:	4b02      	ldr	r3, [pc, #8]	@ (800a874 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	200017bc 	.word	0x200017bc
 800a878:	0800dc50 	.word	0x0800dc50

0800a87c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a882:	4b0f      	ldr	r3, [pc, #60]	@ (800a8c0 <Get_SerialNum+0x44>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a888:	4b0e      	ldr	r3, [pc, #56]	@ (800a8c4 <Get_SerialNum+0x48>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a88e:	4b0e      	ldr	r3, [pc, #56]	@ (800a8c8 <Get_SerialNum+0x4c>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	4413      	add	r3, r2
 800a89a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d009      	beq.n	800a8b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a8a2:	2208      	movs	r2, #8
 800a8a4:	4909      	ldr	r1, [pc, #36]	@ (800a8cc <Get_SerialNum+0x50>)
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f000 f814 	bl	800a8d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a8ac:	2204      	movs	r2, #4
 800a8ae:	4908      	ldr	r1, [pc, #32]	@ (800a8d0 <Get_SerialNum+0x54>)
 800a8b0:	68b8      	ldr	r0, [r7, #8]
 800a8b2:	f000 f80f 	bl	800a8d4 <IntToUnicode>
  }
}
 800a8b6:	bf00      	nop
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	1fff7a10 	.word	0x1fff7a10
 800a8c4:	1fff7a14 	.word	0x1fff7a14
 800a8c8:	1fff7a18 	.word	0x1fff7a18
 800a8cc:	200000e2 	.word	0x200000e2
 800a8d0:	200000f2 	.word	0x200000f2

0800a8d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b087      	sub	sp, #28
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	4613      	mov	r3, r2
 800a8e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	75fb      	strb	r3, [r7, #23]
 800a8ea:	e027      	b.n	800a93c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	0f1b      	lsrs	r3, r3, #28
 800a8f0:	2b09      	cmp	r3, #9
 800a8f2:	d80b      	bhi.n	800a90c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	0f1b      	lsrs	r3, r3, #28
 800a8f8:	b2da      	uxtb	r2, r3
 800a8fa:	7dfb      	ldrb	r3, [r7, #23]
 800a8fc:	005b      	lsls	r3, r3, #1
 800a8fe:	4619      	mov	r1, r3
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	440b      	add	r3, r1
 800a904:	3230      	adds	r2, #48	@ 0x30
 800a906:	b2d2      	uxtb	r2, r2
 800a908:	701a      	strb	r2, [r3, #0]
 800a90a:	e00a      	b.n	800a922 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	0f1b      	lsrs	r3, r3, #28
 800a910:	b2da      	uxtb	r2, r3
 800a912:	7dfb      	ldrb	r3, [r7, #23]
 800a914:	005b      	lsls	r3, r3, #1
 800a916:	4619      	mov	r1, r3
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	440b      	add	r3, r1
 800a91c:	3237      	adds	r2, #55	@ 0x37
 800a91e:	b2d2      	uxtb	r2, r2
 800a920:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	011b      	lsls	r3, r3, #4
 800a926:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a928:	7dfb      	ldrb	r3, [r7, #23]
 800a92a:	005b      	lsls	r3, r3, #1
 800a92c:	3301      	adds	r3, #1
 800a92e:	68ba      	ldr	r2, [r7, #8]
 800a930:	4413      	add	r3, r2
 800a932:	2200      	movs	r2, #0
 800a934:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a936:	7dfb      	ldrb	r3, [r7, #23]
 800a938:	3301      	adds	r3, #1
 800a93a:	75fb      	strb	r3, [r7, #23]
 800a93c:	7dfa      	ldrb	r2, [r7, #23]
 800a93e:	79fb      	ldrb	r3, [r7, #7]
 800a940:	429a      	cmp	r2, r3
 800a942:	d3d3      	bcc.n	800a8ec <IntToUnicode+0x18>
  }
}
 800a944:	bf00      	nop
 800a946:	bf00      	nop
 800a948:	371c      	adds	r7, #28
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bc80      	pop	{r7}
 800a94e:	4770      	bx	lr

0800a950 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b08a      	sub	sp, #40	@ 0x28
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a958:	f107 0314 	add.w	r3, r7, #20
 800a95c:	2200      	movs	r2, #0
 800a95e:	601a      	str	r2, [r3, #0]
 800a960:	605a      	str	r2, [r3, #4]
 800a962:	609a      	str	r2, [r3, #8]
 800a964:	60da      	str	r2, [r3, #12]
 800a966:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a970:	d13a      	bne.n	800a9e8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a972:	2300      	movs	r3, #0
 800a974:	613b      	str	r3, [r7, #16]
 800a976:	4b1e      	ldr	r3, [pc, #120]	@ (800a9f0 <HAL_PCD_MspInit+0xa0>)
 800a978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a97a:	4a1d      	ldr	r2, [pc, #116]	@ (800a9f0 <HAL_PCD_MspInit+0xa0>)
 800a97c:	f043 0301 	orr.w	r3, r3, #1
 800a980:	6313      	str	r3, [r2, #48]	@ 0x30
 800a982:	4b1b      	ldr	r3, [pc, #108]	@ (800a9f0 <HAL_PCD_MspInit+0xa0>)
 800a984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a986:	f003 0301 	and.w	r3, r3, #1
 800a98a:	613b      	str	r3, [r7, #16]
 800a98c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a98e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a994:	2302      	movs	r3, #2
 800a996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a998:	2300      	movs	r3, #0
 800a99a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a99c:	2303      	movs	r3, #3
 800a99e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a9a0:	230a      	movs	r3, #10
 800a9a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9a4:	f107 0314 	add.w	r3, r7, #20
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	4812      	ldr	r0, [pc, #72]	@ (800a9f4 <HAL_PCD_MspInit+0xa4>)
 800a9ac:	f7f8 f8f0 	bl	8002b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a9b0:	4b0f      	ldr	r3, [pc, #60]	@ (800a9f0 <HAL_PCD_MspInit+0xa0>)
 800a9b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9b4:	4a0e      	ldr	r2, [pc, #56]	@ (800a9f0 <HAL_PCD_MspInit+0xa0>)
 800a9b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9ba:	6353      	str	r3, [r2, #52]	@ 0x34
 800a9bc:	2300      	movs	r3, #0
 800a9be:	60fb      	str	r3, [r7, #12]
 800a9c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a9f0 <HAL_PCD_MspInit+0xa0>)
 800a9c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9c4:	4a0a      	ldr	r2, [pc, #40]	@ (800a9f0 <HAL_PCD_MspInit+0xa0>)
 800a9c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a9ca:	6453      	str	r3, [r2, #68]	@ 0x44
 800a9cc:	4b08      	ldr	r3, [pc, #32]	@ (800a9f0 <HAL_PCD_MspInit+0xa0>)
 800a9ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a9d4:	60fb      	str	r3, [r7, #12]
 800a9d6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a9d8:	2200      	movs	r2, #0
 800a9da:	2100      	movs	r1, #0
 800a9dc:	2043      	movs	r0, #67	@ 0x43
 800a9de:	f7f7 fd08 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a9e2:	2043      	movs	r0, #67	@ 0x43
 800a9e4:	f7f7 fd21 	bl	800242a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a9e8:	bf00      	nop
 800a9ea:	3728      	adds	r7, #40	@ 0x28
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	40023800 	.word	0x40023800
 800a9f4:	40020000 	.word	0x40020000

0800a9f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	4610      	mov	r0, r2
 800aa10:	f7fe fb62 	bl	80090d8 <USBD_LL_SetupStage>
}
 800aa14:	bf00      	nop
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	460b      	mov	r3, r1
 800aa26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aa2e:	78fa      	ldrb	r2, [r7, #3]
 800aa30:	6879      	ldr	r1, [r7, #4]
 800aa32:	4613      	mov	r3, r2
 800aa34:	00db      	lsls	r3, r3, #3
 800aa36:	4413      	add	r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	440b      	add	r3, r1
 800aa3c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	78fb      	ldrb	r3, [r7, #3]
 800aa44:	4619      	mov	r1, r3
 800aa46:	f7fe fb9c 	bl	8009182 <USBD_LL_DataOutStage>
}
 800aa4a:	bf00      	nop
 800aa4c:	3708      	adds	r7, #8
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b082      	sub	sp, #8
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aa64:	78fa      	ldrb	r2, [r7, #3]
 800aa66:	6879      	ldr	r1, [r7, #4]
 800aa68:	4613      	mov	r3, r2
 800aa6a:	00db      	lsls	r3, r3, #3
 800aa6c:	4413      	add	r3, r2
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	440b      	add	r3, r1
 800aa72:	3320      	adds	r3, #32
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	78fb      	ldrb	r3, [r7, #3]
 800aa78:	4619      	mov	r1, r3
 800aa7a:	f7fe fc35 	bl	80092e8 <USBD_LL_DataInStage>
}
 800aa7e:	bf00      	nop
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b082      	sub	sp, #8
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7fe fd6c 	bl	8009572 <USBD_LL_SOF>
}
 800aa9a:	bf00      	nop
 800aa9c:	3708      	adds	r7, #8
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b084      	sub	sp, #16
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	79db      	ldrb	r3, [r3, #7]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d102      	bne.n	800aabc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800aab6:	2300      	movs	r3, #0
 800aab8:	73fb      	strb	r3, [r7, #15]
 800aaba:	e008      	b.n	800aace <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	79db      	ldrb	r3, [r3, #7]
 800aac0:	2b02      	cmp	r3, #2
 800aac2:	d102      	bne.n	800aaca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800aac4:	2301      	movs	r3, #1
 800aac6:	73fb      	strb	r3, [r7, #15]
 800aac8:	e001      	b.n	800aace <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800aaca:	f7f6 ffb5 	bl	8001a38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aad4:	7bfa      	ldrb	r2, [r7, #15]
 800aad6:	4611      	mov	r1, r2
 800aad8:	4618      	mov	r0, r3
 800aada:	f7fe fd09 	bl	80094f0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aae4:	4618      	mov	r0, r3
 800aae6:	f7fe fcb1 	bl	800944c <USBD_LL_Reset>
}
 800aaea:	bf00      	nop
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
	...

0800aaf4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7fe fd03 	bl	800950e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	6812      	ldr	r2, [r2, #0]
 800ab16:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ab1a:	f043 0301 	orr.w	r3, r3, #1
 800ab1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	7adb      	ldrb	r3, [r3, #11]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d005      	beq.n	800ab34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab28:	4b04      	ldr	r3, [pc, #16]	@ (800ab3c <HAL_PCD_SuspendCallback+0x48>)
 800ab2a:	691b      	ldr	r3, [r3, #16]
 800ab2c:	4a03      	ldr	r2, [pc, #12]	@ (800ab3c <HAL_PCD_SuspendCallback+0x48>)
 800ab2e:	f043 0306 	orr.w	r3, r3, #6
 800ab32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab34:	bf00      	nop
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	e000ed00 	.word	0xe000ed00

0800ab40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fe fcf8 	bl	8009544 <USBD_LL_Resume>
}
 800ab54:	bf00      	nop
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	460b      	mov	r3, r1
 800ab66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab6e:	78fa      	ldrb	r2, [r7, #3]
 800ab70:	4611      	mov	r1, r2
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7fe fd4f 	bl	8009616 <USBD_LL_IsoOUTIncomplete>
}
 800ab78:	bf00      	nop
 800ab7a:	3708      	adds	r7, #8
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	460b      	mov	r3, r1
 800ab8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab92:	78fa      	ldrb	r2, [r7, #3]
 800ab94:	4611      	mov	r1, r2
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7fe fd0b 	bl	80095b2 <USBD_LL_IsoINIncomplete>
}
 800ab9c:	bf00      	nop
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7fe fd61 	bl	800967a <USBD_LL_DevConnected>
}
 800abb8:	bf00      	nop
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abce:	4618      	mov	r0, r3
 800abd0:	f7fe fd5d 	bl	800968e <USBD_LL_DevDisconnected>
}
 800abd4:	bf00      	nop
 800abd6:	3708      	adds	r7, #8
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d13c      	bne.n	800ac66 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800abec:	4a20      	ldr	r2, [pc, #128]	@ (800ac70 <USBD_LL_Init+0x94>)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	4a1e      	ldr	r2, [pc, #120]	@ (800ac70 <USBD_LL_Init+0x94>)
 800abf8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800abfc:	4b1c      	ldr	r3, [pc, #112]	@ (800ac70 <USBD_LL_Init+0x94>)
 800abfe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ac02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ac04:	4b1a      	ldr	r3, [pc, #104]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac06:	2204      	movs	r2, #4
 800ac08:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ac0a:	4b19      	ldr	r3, [pc, #100]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac0c:	2202      	movs	r2, #2
 800ac0e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ac10:	4b17      	ldr	r3, [pc, #92]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac12:	2200      	movs	r2, #0
 800ac14:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ac16:	4b16      	ldr	r3, [pc, #88]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac18:	2202      	movs	r2, #2
 800ac1a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ac1c:	4b14      	ldr	r3, [pc, #80]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac1e:	2200      	movs	r2, #0
 800ac20:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ac22:	4b13      	ldr	r3, [pc, #76]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac24:	2200      	movs	r2, #0
 800ac26:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ac28:	4b11      	ldr	r3, [pc, #68]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ac2e:	4b10      	ldr	r3, [pc, #64]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac30:	2200      	movs	r2, #0
 800ac32:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ac34:	4b0e      	ldr	r3, [pc, #56]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac36:	2200      	movs	r2, #0
 800ac38:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ac3a:	480d      	ldr	r0, [pc, #52]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac3c:	f7f9 fc4d 	bl	80044da <HAL_PCD_Init>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ac46:	f7f6 fef7 	bl	8001a38 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ac4a:	2180      	movs	r1, #128	@ 0x80
 800ac4c:	4808      	ldr	r0, [pc, #32]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac4e:	f7fa fe75 	bl	800593c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ac52:	2240      	movs	r2, #64	@ 0x40
 800ac54:	2100      	movs	r1, #0
 800ac56:	4806      	ldr	r0, [pc, #24]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac58:	f7fa fe2a 	bl	80058b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ac5c:	2280      	movs	r2, #128	@ 0x80
 800ac5e:	2101      	movs	r1, #1
 800ac60:	4803      	ldr	r0, [pc, #12]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac62:	f7fa fe25 	bl	80058b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ac66:	2300      	movs	r3, #0
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3708      	adds	r7, #8
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	200019bc 	.word	0x200019bc

0800ac74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac80:	2300      	movs	r3, #0
 800ac82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7f9 fd34 	bl	80046f8 <HAL_PCD_Start>
 800ac90:	4603      	mov	r3, r0
 800ac92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac94:	7bfb      	ldrb	r3, [r7, #15]
 800ac96:	4618      	mov	r0, r3
 800ac98:	f000 f940 	bl	800af1c <USBD_Get_USB_Status>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aca0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b084      	sub	sp, #16
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
 800acb2:	4608      	mov	r0, r1
 800acb4:	4611      	mov	r1, r2
 800acb6:	461a      	mov	r2, r3
 800acb8:	4603      	mov	r3, r0
 800acba:	70fb      	strb	r3, [r7, #3]
 800acbc:	460b      	mov	r3, r1
 800acbe:	70bb      	strb	r3, [r7, #2]
 800acc0:	4613      	mov	r3, r2
 800acc2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acc4:	2300      	movs	r3, #0
 800acc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acc8:	2300      	movs	r3, #0
 800acca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800acd2:	78bb      	ldrb	r3, [r7, #2]
 800acd4:	883a      	ldrh	r2, [r7, #0]
 800acd6:	78f9      	ldrb	r1, [r7, #3]
 800acd8:	f7fa fa08 	bl	80050ec <HAL_PCD_EP_Open>
 800acdc:	4603      	mov	r3, r0
 800acde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ace0:	7bfb      	ldrb	r3, [r7, #15]
 800ace2:	4618      	mov	r0, r3
 800ace4:	f000 f91a 	bl	800af1c <USBD_Get_USB_Status>
 800ace8:	4603      	mov	r3, r0
 800acea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acec:	7bbb      	ldrb	r3, [r7, #14]
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3710      	adds	r7, #16
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}

0800acf6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b084      	sub	sp, #16
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
 800acfe:	460b      	mov	r3, r1
 800ad00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad02:	2300      	movs	r3, #0
 800ad04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad06:	2300      	movs	r3, #0
 800ad08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad10:	78fa      	ldrb	r2, [r7, #3]
 800ad12:	4611      	mov	r1, r2
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7fa fa51 	bl	80051bc <HAL_PCD_EP_Close>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad1e:	7bfb      	ldrb	r3, [r7, #15]
 800ad20:	4618      	mov	r0, r3
 800ad22:	f000 f8fb 	bl	800af1c <USBD_Get_USB_Status>
 800ad26:	4603      	mov	r3, r0
 800ad28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3710      	adds	r7, #16
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad40:	2300      	movs	r3, #0
 800ad42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad44:	2300      	movs	r3, #0
 800ad46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad4e:	78fa      	ldrb	r2, [r7, #3]
 800ad50:	4611      	mov	r1, r2
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7fa fb08 	bl	8005368 <HAL_PCD_EP_SetStall>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f000 f8dc 	bl	800af1c <USBD_Get_USB_Status>
 800ad64:	4603      	mov	r3, r0
 800ad66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad68:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}

0800ad72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b084      	sub	sp, #16
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad82:	2300      	movs	r3, #0
 800ad84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad8c:	78fa      	ldrb	r2, [r7, #3]
 800ad8e:	4611      	mov	r1, r2
 800ad90:	4618      	mov	r0, r3
 800ad92:	f7fa fb4c 	bl	800542e <HAL_PCD_EP_ClrStall>
 800ad96:	4603      	mov	r3, r0
 800ad98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad9a:	7bfb      	ldrb	r3, [r7, #15]
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f000 f8bd 	bl	800af1c <USBD_Get_USB_Status>
 800ada2:	4603      	mov	r3, r0
 800ada4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ada6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3710      	adds	r7, #16
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b085      	sub	sp, #20
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	460b      	mov	r3, r1
 800adba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800adc2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800adc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	da0b      	bge.n	800ade4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800adcc:	78fb      	ldrb	r3, [r7, #3]
 800adce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800add2:	68f9      	ldr	r1, [r7, #12]
 800add4:	4613      	mov	r3, r2
 800add6:	00db      	lsls	r3, r3, #3
 800add8:	4413      	add	r3, r2
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	440b      	add	r3, r1
 800adde:	3316      	adds	r3, #22
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	e00b      	b.n	800adfc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ade4:	78fb      	ldrb	r3, [r7, #3]
 800ade6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800adea:	68f9      	ldr	r1, [r7, #12]
 800adec:	4613      	mov	r3, r2
 800adee:	00db      	lsls	r3, r3, #3
 800adf0:	4413      	add	r3, r2
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	440b      	add	r3, r1
 800adf6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800adfa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3714      	adds	r7, #20
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bc80      	pop	{r7}
 800ae04:	4770      	bx	lr

0800ae06 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b084      	sub	sp, #16
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
 800ae0e:	460b      	mov	r3, r1
 800ae10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae12:	2300      	movs	r3, #0
 800ae14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae16:	2300      	movs	r3, #0
 800ae18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae20:	78fa      	ldrb	r2, [r7, #3]
 800ae22:	4611      	mov	r1, r2
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7fa f93d 	bl	80050a4 <HAL_PCD_SetAddress>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae2e:	7bfb      	ldrb	r3, [r7, #15]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f000 f873 	bl	800af1c <USBD_Get_USB_Status>
 800ae36:	4603      	mov	r3, r0
 800ae38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3710      	adds	r7, #16
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	607a      	str	r2, [r7, #4]
 800ae4e:	603b      	str	r3, [r7, #0]
 800ae50:	460b      	mov	r3, r1
 800ae52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae54:	2300      	movs	r3, #0
 800ae56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ae62:	7af9      	ldrb	r1, [r7, #11]
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	f7fa fa44 	bl	80052f4 <HAL_PCD_EP_Transmit>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae70:	7dfb      	ldrb	r3, [r7, #23]
 800ae72:	4618      	mov	r0, r3
 800ae74:	f000 f852 	bl	800af1c <USBD_Get_USB_Status>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae7c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3718      	adds	r7, #24
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b086      	sub	sp, #24
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	60f8      	str	r0, [r7, #12]
 800ae8e:	607a      	str	r2, [r7, #4]
 800ae90:	603b      	str	r3, [r7, #0]
 800ae92:	460b      	mov	r3, r1
 800ae94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae96:	2300      	movs	r3, #0
 800ae98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aea4:	7af9      	ldrb	r1, [r7, #11]
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	f7fa f9d1 	bl	8005250 <HAL_PCD_EP_Receive>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeb2:	7dfb      	ldrb	r3, [r7, #23]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f000 f831 	bl	800af1c <USBD_Get_USB_Status>
 800aeba:	4603      	mov	r3, r0
 800aebc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aebe:	7dbb      	ldrb	r3, [r7, #22]
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3718      	adds	r7, #24
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	460b      	mov	r3, r1
 800aed2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aeda:	78fa      	ldrb	r2, [r7, #3]
 800aedc:	4611      	mov	r1, r2
 800aede:	4618      	mov	r0, r3
 800aee0:	f7fa f9f1 	bl	80052c6 <HAL_PCD_EP_GetRxCount>
 800aee4:	4603      	mov	r3, r0
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3708      	adds	r7, #8
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
	...

0800aef0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aef8:	4b02      	ldr	r3, [pc, #8]	@ (800af04 <USBD_static_malloc+0x14>)
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	370c      	adds	r7, #12
 800aefe:	46bd      	mov	sp, r7
 800af00:	bc80      	pop	{r7}
 800af02:	4770      	bx	lr
 800af04:	20001ea0 	.word	0x20001ea0

0800af08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]

}
 800af10:	bf00      	nop
 800af12:	370c      	adds	r7, #12
 800af14:	46bd      	mov	sp, r7
 800af16:	bc80      	pop	{r7}
 800af18:	4770      	bx	lr
	...

0800af1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b085      	sub	sp, #20
 800af20:	af00      	add	r7, sp, #0
 800af22:	4603      	mov	r3, r0
 800af24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af26:	2300      	movs	r3, #0
 800af28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af2a:	79fb      	ldrb	r3, [r7, #7]
 800af2c:	2b03      	cmp	r3, #3
 800af2e:	d817      	bhi.n	800af60 <USBD_Get_USB_Status+0x44>
 800af30:	a201      	add	r2, pc, #4	@ (adr r2, 800af38 <USBD_Get_USB_Status+0x1c>)
 800af32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af36:	bf00      	nop
 800af38:	0800af49 	.word	0x0800af49
 800af3c:	0800af4f 	.word	0x0800af4f
 800af40:	0800af55 	.word	0x0800af55
 800af44:	0800af5b 	.word	0x0800af5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af48:	2300      	movs	r3, #0
 800af4a:	73fb      	strb	r3, [r7, #15]
    break;
 800af4c:	e00b      	b.n	800af66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af4e:	2303      	movs	r3, #3
 800af50:	73fb      	strb	r3, [r7, #15]
    break;
 800af52:	e008      	b.n	800af66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af54:	2301      	movs	r3, #1
 800af56:	73fb      	strb	r3, [r7, #15]
    break;
 800af58:	e005      	b.n	800af66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af5a:	2303      	movs	r3, #3
 800af5c:	73fb      	strb	r3, [r7, #15]
    break;
 800af5e:	e002      	b.n	800af66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af60:	2303      	movs	r3, #3
 800af62:	73fb      	strb	r3, [r7, #15]
    break;
 800af64:	bf00      	nop
  }
  return usb_status;
 800af66:	7bfb      	ldrb	r3, [r7, #15]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3714      	adds	r7, #20
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bc80      	pop	{r7}
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop

0800af74 <__cvt>:
 800af74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af78:	b088      	sub	sp, #32
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	461d      	mov	r5, r3
 800af7e:	4614      	mov	r4, r2
 800af80:	bfbc      	itt	lt
 800af82:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800af86:	4614      	movlt	r4, r2
 800af88:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800af8a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800af8c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800af90:	bfb6      	itet	lt
 800af92:	461d      	movlt	r5, r3
 800af94:	2300      	movge	r3, #0
 800af96:	232d      	movlt	r3, #45	@ 0x2d
 800af98:	7013      	strb	r3, [r2, #0]
 800af9a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800af9c:	f023 0820 	bic.w	r8, r3, #32
 800afa0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800afa4:	d005      	beq.n	800afb2 <__cvt+0x3e>
 800afa6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800afaa:	d100      	bne.n	800afae <__cvt+0x3a>
 800afac:	3601      	adds	r6, #1
 800afae:	2302      	movs	r3, #2
 800afb0:	e000      	b.n	800afb4 <__cvt+0x40>
 800afb2:	2303      	movs	r3, #3
 800afb4:	aa07      	add	r2, sp, #28
 800afb6:	9204      	str	r2, [sp, #16]
 800afb8:	aa06      	add	r2, sp, #24
 800afba:	e9cd a202 	strd	sl, r2, [sp, #8]
 800afbe:	e9cd 3600 	strd	r3, r6, [sp]
 800afc2:	4622      	mov	r2, r4
 800afc4:	462b      	mov	r3, r5
 800afc6:	f000 fe5b 	bl	800bc80 <_dtoa_r>
 800afca:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800afce:	4607      	mov	r7, r0
 800afd0:	d119      	bne.n	800b006 <__cvt+0x92>
 800afd2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800afd4:	07db      	lsls	r3, r3, #31
 800afd6:	d50e      	bpl.n	800aff6 <__cvt+0x82>
 800afd8:	eb00 0906 	add.w	r9, r0, r6
 800afdc:	2200      	movs	r2, #0
 800afde:	2300      	movs	r3, #0
 800afe0:	4620      	mov	r0, r4
 800afe2:	4629      	mov	r1, r5
 800afe4:	f7f5 fd70 	bl	8000ac8 <__aeabi_dcmpeq>
 800afe8:	b108      	cbz	r0, 800afee <__cvt+0x7a>
 800afea:	f8cd 901c 	str.w	r9, [sp, #28]
 800afee:	2230      	movs	r2, #48	@ 0x30
 800aff0:	9b07      	ldr	r3, [sp, #28]
 800aff2:	454b      	cmp	r3, r9
 800aff4:	d31e      	bcc.n	800b034 <__cvt+0xc0>
 800aff6:	9b07      	ldr	r3, [sp, #28]
 800aff8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800affa:	1bdb      	subs	r3, r3, r7
 800affc:	4638      	mov	r0, r7
 800affe:	6013      	str	r3, [r2, #0]
 800b000:	b008      	add	sp, #32
 800b002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b006:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b00a:	eb00 0906 	add.w	r9, r0, r6
 800b00e:	d1e5      	bne.n	800afdc <__cvt+0x68>
 800b010:	7803      	ldrb	r3, [r0, #0]
 800b012:	2b30      	cmp	r3, #48	@ 0x30
 800b014:	d10a      	bne.n	800b02c <__cvt+0xb8>
 800b016:	2200      	movs	r2, #0
 800b018:	2300      	movs	r3, #0
 800b01a:	4620      	mov	r0, r4
 800b01c:	4629      	mov	r1, r5
 800b01e:	f7f5 fd53 	bl	8000ac8 <__aeabi_dcmpeq>
 800b022:	b918      	cbnz	r0, 800b02c <__cvt+0xb8>
 800b024:	f1c6 0601 	rsb	r6, r6, #1
 800b028:	f8ca 6000 	str.w	r6, [sl]
 800b02c:	f8da 3000 	ldr.w	r3, [sl]
 800b030:	4499      	add	r9, r3
 800b032:	e7d3      	b.n	800afdc <__cvt+0x68>
 800b034:	1c59      	adds	r1, r3, #1
 800b036:	9107      	str	r1, [sp, #28]
 800b038:	701a      	strb	r2, [r3, #0]
 800b03a:	e7d9      	b.n	800aff0 <__cvt+0x7c>

0800b03c <__exponent>:
 800b03c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b03e:	2900      	cmp	r1, #0
 800b040:	bfba      	itte	lt
 800b042:	4249      	neglt	r1, r1
 800b044:	232d      	movlt	r3, #45	@ 0x2d
 800b046:	232b      	movge	r3, #43	@ 0x2b
 800b048:	2909      	cmp	r1, #9
 800b04a:	7002      	strb	r2, [r0, #0]
 800b04c:	7043      	strb	r3, [r0, #1]
 800b04e:	dd29      	ble.n	800b0a4 <__exponent+0x68>
 800b050:	f10d 0307 	add.w	r3, sp, #7
 800b054:	461d      	mov	r5, r3
 800b056:	270a      	movs	r7, #10
 800b058:	461a      	mov	r2, r3
 800b05a:	fbb1 f6f7 	udiv	r6, r1, r7
 800b05e:	fb07 1416 	mls	r4, r7, r6, r1
 800b062:	3430      	adds	r4, #48	@ 0x30
 800b064:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b068:	460c      	mov	r4, r1
 800b06a:	2c63      	cmp	r4, #99	@ 0x63
 800b06c:	f103 33ff 	add.w	r3, r3, #4294967295
 800b070:	4631      	mov	r1, r6
 800b072:	dcf1      	bgt.n	800b058 <__exponent+0x1c>
 800b074:	3130      	adds	r1, #48	@ 0x30
 800b076:	1e94      	subs	r4, r2, #2
 800b078:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b07c:	1c41      	adds	r1, r0, #1
 800b07e:	4623      	mov	r3, r4
 800b080:	42ab      	cmp	r3, r5
 800b082:	d30a      	bcc.n	800b09a <__exponent+0x5e>
 800b084:	f10d 0309 	add.w	r3, sp, #9
 800b088:	1a9b      	subs	r3, r3, r2
 800b08a:	42ac      	cmp	r4, r5
 800b08c:	bf88      	it	hi
 800b08e:	2300      	movhi	r3, #0
 800b090:	3302      	adds	r3, #2
 800b092:	4403      	add	r3, r0
 800b094:	1a18      	subs	r0, r3, r0
 800b096:	b003      	add	sp, #12
 800b098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b09a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b09e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b0a2:	e7ed      	b.n	800b080 <__exponent+0x44>
 800b0a4:	2330      	movs	r3, #48	@ 0x30
 800b0a6:	3130      	adds	r1, #48	@ 0x30
 800b0a8:	7083      	strb	r3, [r0, #2]
 800b0aa:	70c1      	strb	r1, [r0, #3]
 800b0ac:	1d03      	adds	r3, r0, #4
 800b0ae:	e7f1      	b.n	800b094 <__exponent+0x58>

0800b0b0 <_printf_float>:
 800b0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b4:	b091      	sub	sp, #68	@ 0x44
 800b0b6:	460c      	mov	r4, r1
 800b0b8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800b0bc:	4616      	mov	r6, r2
 800b0be:	461f      	mov	r7, r3
 800b0c0:	4605      	mov	r5, r0
 800b0c2:	f000 fcdd 	bl	800ba80 <_localeconv_r>
 800b0c6:	6803      	ldr	r3, [r0, #0]
 800b0c8:	9308      	str	r3, [sp, #32]
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7f5 f8d0 	bl	8000270 <strlen>
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	930e      	str	r3, [sp, #56]	@ 0x38
 800b0d4:	f8d8 3000 	ldr.w	r3, [r8]
 800b0d8:	9009      	str	r0, [sp, #36]	@ 0x24
 800b0da:	3307      	adds	r3, #7
 800b0dc:	f023 0307 	bic.w	r3, r3, #7
 800b0e0:	f103 0208 	add.w	r2, r3, #8
 800b0e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b0e8:	f8d4 b000 	ldr.w	fp, [r4]
 800b0ec:	f8c8 2000 	str.w	r2, [r8]
 800b0f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b0f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b0f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0fa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b0fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b102:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b106:	4b9d      	ldr	r3, [pc, #628]	@ (800b37c <_printf_float+0x2cc>)
 800b108:	f04f 32ff 	mov.w	r2, #4294967295
 800b10c:	f7f5 fd0e 	bl	8000b2c <__aeabi_dcmpun>
 800b110:	bb70      	cbnz	r0, 800b170 <_printf_float+0xc0>
 800b112:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b116:	4b99      	ldr	r3, [pc, #612]	@ (800b37c <_printf_float+0x2cc>)
 800b118:	f04f 32ff 	mov.w	r2, #4294967295
 800b11c:	f7f5 fce8 	bl	8000af0 <__aeabi_dcmple>
 800b120:	bb30      	cbnz	r0, 800b170 <_printf_float+0xc0>
 800b122:	2200      	movs	r2, #0
 800b124:	2300      	movs	r3, #0
 800b126:	4640      	mov	r0, r8
 800b128:	4649      	mov	r1, r9
 800b12a:	f7f5 fcd7 	bl	8000adc <__aeabi_dcmplt>
 800b12e:	b110      	cbz	r0, 800b136 <_printf_float+0x86>
 800b130:	232d      	movs	r3, #45	@ 0x2d
 800b132:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b136:	4a92      	ldr	r2, [pc, #584]	@ (800b380 <_printf_float+0x2d0>)
 800b138:	4b92      	ldr	r3, [pc, #584]	@ (800b384 <_printf_float+0x2d4>)
 800b13a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b13e:	bf94      	ite	ls
 800b140:	4690      	movls	r8, r2
 800b142:	4698      	movhi	r8, r3
 800b144:	2303      	movs	r3, #3
 800b146:	6123      	str	r3, [r4, #16]
 800b148:	f02b 0304 	bic.w	r3, fp, #4
 800b14c:	6023      	str	r3, [r4, #0]
 800b14e:	f04f 0900 	mov.w	r9, #0
 800b152:	9700      	str	r7, [sp, #0]
 800b154:	4633      	mov	r3, r6
 800b156:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b158:	4621      	mov	r1, r4
 800b15a:	4628      	mov	r0, r5
 800b15c:	f000 f9d4 	bl	800b508 <_printf_common>
 800b160:	3001      	adds	r0, #1
 800b162:	f040 808f 	bne.w	800b284 <_printf_float+0x1d4>
 800b166:	f04f 30ff 	mov.w	r0, #4294967295
 800b16a:	b011      	add	sp, #68	@ 0x44
 800b16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b170:	4642      	mov	r2, r8
 800b172:	464b      	mov	r3, r9
 800b174:	4640      	mov	r0, r8
 800b176:	4649      	mov	r1, r9
 800b178:	f7f5 fcd8 	bl	8000b2c <__aeabi_dcmpun>
 800b17c:	b140      	cbz	r0, 800b190 <_printf_float+0xe0>
 800b17e:	464b      	mov	r3, r9
 800b180:	2b00      	cmp	r3, #0
 800b182:	bfbc      	itt	lt
 800b184:	232d      	movlt	r3, #45	@ 0x2d
 800b186:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b18a:	4a7f      	ldr	r2, [pc, #508]	@ (800b388 <_printf_float+0x2d8>)
 800b18c:	4b7f      	ldr	r3, [pc, #508]	@ (800b38c <_printf_float+0x2dc>)
 800b18e:	e7d4      	b.n	800b13a <_printf_float+0x8a>
 800b190:	6863      	ldr	r3, [r4, #4]
 800b192:	1c5a      	adds	r2, r3, #1
 800b194:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800b198:	d13f      	bne.n	800b21a <_printf_float+0x16a>
 800b19a:	2306      	movs	r3, #6
 800b19c:	6063      	str	r3, [r4, #4]
 800b19e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	6023      	str	r3, [r4, #0]
 800b1a6:	9206      	str	r2, [sp, #24]
 800b1a8:	aa0e      	add	r2, sp, #56	@ 0x38
 800b1aa:	e9cd a204 	strd	sl, r2, [sp, #16]
 800b1ae:	aa0d      	add	r2, sp, #52	@ 0x34
 800b1b0:	9203      	str	r2, [sp, #12]
 800b1b2:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800b1b6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b1ba:	6863      	ldr	r3, [r4, #4]
 800b1bc:	9300      	str	r3, [sp, #0]
 800b1be:	4642      	mov	r2, r8
 800b1c0:	464b      	mov	r3, r9
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	910a      	str	r1, [sp, #40]	@ 0x28
 800b1c6:	f7ff fed5 	bl	800af74 <__cvt>
 800b1ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b1cc:	2947      	cmp	r1, #71	@ 0x47
 800b1ce:	4680      	mov	r8, r0
 800b1d0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b1d2:	d128      	bne.n	800b226 <_printf_float+0x176>
 800b1d4:	1cc8      	adds	r0, r1, #3
 800b1d6:	db02      	blt.n	800b1de <_printf_float+0x12e>
 800b1d8:	6863      	ldr	r3, [r4, #4]
 800b1da:	4299      	cmp	r1, r3
 800b1dc:	dd40      	ble.n	800b260 <_printf_float+0x1b0>
 800b1de:	f1aa 0a02 	sub.w	sl, sl, #2
 800b1e2:	fa5f fa8a 	uxtb.w	sl, sl
 800b1e6:	3901      	subs	r1, #1
 800b1e8:	4652      	mov	r2, sl
 800b1ea:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b1ee:	910d      	str	r1, [sp, #52]	@ 0x34
 800b1f0:	f7ff ff24 	bl	800b03c <__exponent>
 800b1f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1f6:	1813      	adds	r3, r2, r0
 800b1f8:	2a01      	cmp	r2, #1
 800b1fa:	4681      	mov	r9, r0
 800b1fc:	6123      	str	r3, [r4, #16]
 800b1fe:	dc02      	bgt.n	800b206 <_printf_float+0x156>
 800b200:	6822      	ldr	r2, [r4, #0]
 800b202:	07d2      	lsls	r2, r2, #31
 800b204:	d501      	bpl.n	800b20a <_printf_float+0x15a>
 800b206:	3301      	adds	r3, #1
 800b208:	6123      	str	r3, [r4, #16]
 800b20a:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d09f      	beq.n	800b152 <_printf_float+0xa2>
 800b212:	232d      	movs	r3, #45	@ 0x2d
 800b214:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b218:	e79b      	b.n	800b152 <_printf_float+0xa2>
 800b21a:	2947      	cmp	r1, #71	@ 0x47
 800b21c:	d1bf      	bne.n	800b19e <_printf_float+0xee>
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d1bd      	bne.n	800b19e <_printf_float+0xee>
 800b222:	2301      	movs	r3, #1
 800b224:	e7ba      	b.n	800b19c <_printf_float+0xec>
 800b226:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b22a:	d9dc      	bls.n	800b1e6 <_printf_float+0x136>
 800b22c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b230:	d118      	bne.n	800b264 <_printf_float+0x1b4>
 800b232:	2900      	cmp	r1, #0
 800b234:	6863      	ldr	r3, [r4, #4]
 800b236:	dd0b      	ble.n	800b250 <_printf_float+0x1a0>
 800b238:	6121      	str	r1, [r4, #16]
 800b23a:	b913      	cbnz	r3, 800b242 <_printf_float+0x192>
 800b23c:	6822      	ldr	r2, [r4, #0]
 800b23e:	07d0      	lsls	r0, r2, #31
 800b240:	d502      	bpl.n	800b248 <_printf_float+0x198>
 800b242:	3301      	adds	r3, #1
 800b244:	440b      	add	r3, r1
 800b246:	6123      	str	r3, [r4, #16]
 800b248:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b24a:	f04f 0900 	mov.w	r9, #0
 800b24e:	e7dc      	b.n	800b20a <_printf_float+0x15a>
 800b250:	b913      	cbnz	r3, 800b258 <_printf_float+0x1a8>
 800b252:	6822      	ldr	r2, [r4, #0]
 800b254:	07d2      	lsls	r2, r2, #31
 800b256:	d501      	bpl.n	800b25c <_printf_float+0x1ac>
 800b258:	3302      	adds	r3, #2
 800b25a:	e7f4      	b.n	800b246 <_printf_float+0x196>
 800b25c:	2301      	movs	r3, #1
 800b25e:	e7f2      	b.n	800b246 <_printf_float+0x196>
 800b260:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b264:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b266:	4299      	cmp	r1, r3
 800b268:	db05      	blt.n	800b276 <_printf_float+0x1c6>
 800b26a:	6823      	ldr	r3, [r4, #0]
 800b26c:	6121      	str	r1, [r4, #16]
 800b26e:	07d8      	lsls	r0, r3, #31
 800b270:	d5ea      	bpl.n	800b248 <_printf_float+0x198>
 800b272:	1c4b      	adds	r3, r1, #1
 800b274:	e7e7      	b.n	800b246 <_printf_float+0x196>
 800b276:	2900      	cmp	r1, #0
 800b278:	bfd4      	ite	le
 800b27a:	f1c1 0202 	rsble	r2, r1, #2
 800b27e:	2201      	movgt	r2, #1
 800b280:	4413      	add	r3, r2
 800b282:	e7e0      	b.n	800b246 <_printf_float+0x196>
 800b284:	6823      	ldr	r3, [r4, #0]
 800b286:	055a      	lsls	r2, r3, #21
 800b288:	d407      	bmi.n	800b29a <_printf_float+0x1ea>
 800b28a:	6923      	ldr	r3, [r4, #16]
 800b28c:	4642      	mov	r2, r8
 800b28e:	4631      	mov	r1, r6
 800b290:	4628      	mov	r0, r5
 800b292:	47b8      	blx	r7
 800b294:	3001      	adds	r0, #1
 800b296:	d12b      	bne.n	800b2f0 <_printf_float+0x240>
 800b298:	e765      	b.n	800b166 <_printf_float+0xb6>
 800b29a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b29e:	f240 80dd 	bls.w	800b45c <_printf_float+0x3ac>
 800b2a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	f7f5 fc0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	d033      	beq.n	800b31a <_printf_float+0x26a>
 800b2b2:	4a37      	ldr	r2, [pc, #220]	@ (800b390 <_printf_float+0x2e0>)
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	4631      	mov	r1, r6
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	47b8      	blx	r7
 800b2bc:	3001      	adds	r0, #1
 800b2be:	f43f af52 	beq.w	800b166 <_printf_float+0xb6>
 800b2c2:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800b2c6:	4543      	cmp	r3, r8
 800b2c8:	db02      	blt.n	800b2d0 <_printf_float+0x220>
 800b2ca:	6823      	ldr	r3, [r4, #0]
 800b2cc:	07d8      	lsls	r0, r3, #31
 800b2ce:	d50f      	bpl.n	800b2f0 <_printf_float+0x240>
 800b2d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b2d4:	4631      	mov	r1, r6
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	47b8      	blx	r7
 800b2da:	3001      	adds	r0, #1
 800b2dc:	f43f af43 	beq.w	800b166 <_printf_float+0xb6>
 800b2e0:	f04f 0900 	mov.w	r9, #0
 800b2e4:	f108 38ff 	add.w	r8, r8, #4294967295
 800b2e8:	f104 0a1a 	add.w	sl, r4, #26
 800b2ec:	45c8      	cmp	r8, r9
 800b2ee:	dc09      	bgt.n	800b304 <_printf_float+0x254>
 800b2f0:	6823      	ldr	r3, [r4, #0]
 800b2f2:	079b      	lsls	r3, r3, #30
 800b2f4:	f100 8103 	bmi.w	800b4fe <_printf_float+0x44e>
 800b2f8:	68e0      	ldr	r0, [r4, #12]
 800b2fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2fc:	4298      	cmp	r0, r3
 800b2fe:	bfb8      	it	lt
 800b300:	4618      	movlt	r0, r3
 800b302:	e732      	b.n	800b16a <_printf_float+0xba>
 800b304:	2301      	movs	r3, #1
 800b306:	4652      	mov	r2, sl
 800b308:	4631      	mov	r1, r6
 800b30a:	4628      	mov	r0, r5
 800b30c:	47b8      	blx	r7
 800b30e:	3001      	adds	r0, #1
 800b310:	f43f af29 	beq.w	800b166 <_printf_float+0xb6>
 800b314:	f109 0901 	add.w	r9, r9, #1
 800b318:	e7e8      	b.n	800b2ec <_printf_float+0x23c>
 800b31a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	dc39      	bgt.n	800b394 <_printf_float+0x2e4>
 800b320:	4a1b      	ldr	r2, [pc, #108]	@ (800b390 <_printf_float+0x2e0>)
 800b322:	2301      	movs	r3, #1
 800b324:	4631      	mov	r1, r6
 800b326:	4628      	mov	r0, r5
 800b328:	47b8      	blx	r7
 800b32a:	3001      	adds	r0, #1
 800b32c:	f43f af1b 	beq.w	800b166 <_printf_float+0xb6>
 800b330:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800b334:	ea59 0303 	orrs.w	r3, r9, r3
 800b338:	d102      	bne.n	800b340 <_printf_float+0x290>
 800b33a:	6823      	ldr	r3, [r4, #0]
 800b33c:	07d9      	lsls	r1, r3, #31
 800b33e:	d5d7      	bpl.n	800b2f0 <_printf_float+0x240>
 800b340:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b344:	4631      	mov	r1, r6
 800b346:	4628      	mov	r0, r5
 800b348:	47b8      	blx	r7
 800b34a:	3001      	adds	r0, #1
 800b34c:	f43f af0b 	beq.w	800b166 <_printf_float+0xb6>
 800b350:	f04f 0a00 	mov.w	sl, #0
 800b354:	f104 0b1a 	add.w	fp, r4, #26
 800b358:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b35a:	425b      	negs	r3, r3
 800b35c:	4553      	cmp	r3, sl
 800b35e:	dc01      	bgt.n	800b364 <_printf_float+0x2b4>
 800b360:	464b      	mov	r3, r9
 800b362:	e793      	b.n	800b28c <_printf_float+0x1dc>
 800b364:	2301      	movs	r3, #1
 800b366:	465a      	mov	r2, fp
 800b368:	4631      	mov	r1, r6
 800b36a:	4628      	mov	r0, r5
 800b36c:	47b8      	blx	r7
 800b36e:	3001      	adds	r0, #1
 800b370:	f43f aef9 	beq.w	800b166 <_printf_float+0xb6>
 800b374:	f10a 0a01 	add.w	sl, sl, #1
 800b378:	e7ee      	b.n	800b358 <_printf_float+0x2a8>
 800b37a:	bf00      	nop
 800b37c:	7fefffff 	.word	0x7fefffff
 800b380:	0800dc80 	.word	0x0800dc80
 800b384:	0800dc84 	.word	0x0800dc84
 800b388:	0800dc88 	.word	0x0800dc88
 800b38c:	0800dc8c 	.word	0x0800dc8c
 800b390:	0800dc90 	.word	0x0800dc90
 800b394:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b396:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b39a:	4553      	cmp	r3, sl
 800b39c:	bfa8      	it	ge
 800b39e:	4653      	movge	r3, sl
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	4699      	mov	r9, r3
 800b3a4:	dc36      	bgt.n	800b414 <_printf_float+0x364>
 800b3a6:	f04f 0b00 	mov.w	fp, #0
 800b3aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3ae:	f104 021a 	add.w	r2, r4, #26
 800b3b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b3b4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3b6:	eba3 0309 	sub.w	r3, r3, r9
 800b3ba:	455b      	cmp	r3, fp
 800b3bc:	dc31      	bgt.n	800b422 <_printf_float+0x372>
 800b3be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b3c0:	459a      	cmp	sl, r3
 800b3c2:	dc3a      	bgt.n	800b43a <_printf_float+0x38a>
 800b3c4:	6823      	ldr	r3, [r4, #0]
 800b3c6:	07da      	lsls	r2, r3, #31
 800b3c8:	d437      	bmi.n	800b43a <_printf_float+0x38a>
 800b3ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b3cc:	ebaa 0903 	sub.w	r9, sl, r3
 800b3d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3d2:	ebaa 0303 	sub.w	r3, sl, r3
 800b3d6:	4599      	cmp	r9, r3
 800b3d8:	bfa8      	it	ge
 800b3da:	4699      	movge	r9, r3
 800b3dc:	f1b9 0f00 	cmp.w	r9, #0
 800b3e0:	dc33      	bgt.n	800b44a <_printf_float+0x39a>
 800b3e2:	f04f 0800 	mov.w	r8, #0
 800b3e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3ea:	f104 0b1a 	add.w	fp, r4, #26
 800b3ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b3f0:	ebaa 0303 	sub.w	r3, sl, r3
 800b3f4:	eba3 0309 	sub.w	r3, r3, r9
 800b3f8:	4543      	cmp	r3, r8
 800b3fa:	f77f af79 	ble.w	800b2f0 <_printf_float+0x240>
 800b3fe:	2301      	movs	r3, #1
 800b400:	465a      	mov	r2, fp
 800b402:	4631      	mov	r1, r6
 800b404:	4628      	mov	r0, r5
 800b406:	47b8      	blx	r7
 800b408:	3001      	adds	r0, #1
 800b40a:	f43f aeac 	beq.w	800b166 <_printf_float+0xb6>
 800b40e:	f108 0801 	add.w	r8, r8, #1
 800b412:	e7ec      	b.n	800b3ee <_printf_float+0x33e>
 800b414:	4642      	mov	r2, r8
 800b416:	4631      	mov	r1, r6
 800b418:	4628      	mov	r0, r5
 800b41a:	47b8      	blx	r7
 800b41c:	3001      	adds	r0, #1
 800b41e:	d1c2      	bne.n	800b3a6 <_printf_float+0x2f6>
 800b420:	e6a1      	b.n	800b166 <_printf_float+0xb6>
 800b422:	2301      	movs	r3, #1
 800b424:	4631      	mov	r1, r6
 800b426:	4628      	mov	r0, r5
 800b428:	920a      	str	r2, [sp, #40]	@ 0x28
 800b42a:	47b8      	blx	r7
 800b42c:	3001      	adds	r0, #1
 800b42e:	f43f ae9a 	beq.w	800b166 <_printf_float+0xb6>
 800b432:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b434:	f10b 0b01 	add.w	fp, fp, #1
 800b438:	e7bb      	b.n	800b3b2 <_printf_float+0x302>
 800b43a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b43e:	4631      	mov	r1, r6
 800b440:	4628      	mov	r0, r5
 800b442:	47b8      	blx	r7
 800b444:	3001      	adds	r0, #1
 800b446:	d1c0      	bne.n	800b3ca <_printf_float+0x31a>
 800b448:	e68d      	b.n	800b166 <_printf_float+0xb6>
 800b44a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b44c:	464b      	mov	r3, r9
 800b44e:	4442      	add	r2, r8
 800b450:	4631      	mov	r1, r6
 800b452:	4628      	mov	r0, r5
 800b454:	47b8      	blx	r7
 800b456:	3001      	adds	r0, #1
 800b458:	d1c3      	bne.n	800b3e2 <_printf_float+0x332>
 800b45a:	e684      	b.n	800b166 <_printf_float+0xb6>
 800b45c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b460:	f1ba 0f01 	cmp.w	sl, #1
 800b464:	dc01      	bgt.n	800b46a <_printf_float+0x3ba>
 800b466:	07db      	lsls	r3, r3, #31
 800b468:	d536      	bpl.n	800b4d8 <_printf_float+0x428>
 800b46a:	2301      	movs	r3, #1
 800b46c:	4642      	mov	r2, r8
 800b46e:	4631      	mov	r1, r6
 800b470:	4628      	mov	r0, r5
 800b472:	47b8      	blx	r7
 800b474:	3001      	adds	r0, #1
 800b476:	f43f ae76 	beq.w	800b166 <_printf_float+0xb6>
 800b47a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b47e:	4631      	mov	r1, r6
 800b480:	4628      	mov	r0, r5
 800b482:	47b8      	blx	r7
 800b484:	3001      	adds	r0, #1
 800b486:	f43f ae6e 	beq.w	800b166 <_printf_float+0xb6>
 800b48a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b48e:	2200      	movs	r2, #0
 800b490:	2300      	movs	r3, #0
 800b492:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b496:	f7f5 fb17 	bl	8000ac8 <__aeabi_dcmpeq>
 800b49a:	b9c0      	cbnz	r0, 800b4ce <_printf_float+0x41e>
 800b49c:	4653      	mov	r3, sl
 800b49e:	f108 0201 	add.w	r2, r8, #1
 800b4a2:	4631      	mov	r1, r6
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	47b8      	blx	r7
 800b4a8:	3001      	adds	r0, #1
 800b4aa:	d10c      	bne.n	800b4c6 <_printf_float+0x416>
 800b4ac:	e65b      	b.n	800b166 <_printf_float+0xb6>
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	465a      	mov	r2, fp
 800b4b2:	4631      	mov	r1, r6
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	47b8      	blx	r7
 800b4b8:	3001      	adds	r0, #1
 800b4ba:	f43f ae54 	beq.w	800b166 <_printf_float+0xb6>
 800b4be:	f108 0801 	add.w	r8, r8, #1
 800b4c2:	45d0      	cmp	r8, sl
 800b4c4:	dbf3      	blt.n	800b4ae <_printf_float+0x3fe>
 800b4c6:	464b      	mov	r3, r9
 800b4c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b4cc:	e6df      	b.n	800b28e <_printf_float+0x1de>
 800b4ce:	f04f 0800 	mov.w	r8, #0
 800b4d2:	f104 0b1a 	add.w	fp, r4, #26
 800b4d6:	e7f4      	b.n	800b4c2 <_printf_float+0x412>
 800b4d8:	2301      	movs	r3, #1
 800b4da:	4642      	mov	r2, r8
 800b4dc:	e7e1      	b.n	800b4a2 <_printf_float+0x3f2>
 800b4de:	2301      	movs	r3, #1
 800b4e0:	464a      	mov	r2, r9
 800b4e2:	4631      	mov	r1, r6
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	47b8      	blx	r7
 800b4e8:	3001      	adds	r0, #1
 800b4ea:	f43f ae3c 	beq.w	800b166 <_printf_float+0xb6>
 800b4ee:	f108 0801 	add.w	r8, r8, #1
 800b4f2:	68e3      	ldr	r3, [r4, #12]
 800b4f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b4f6:	1a5b      	subs	r3, r3, r1
 800b4f8:	4543      	cmp	r3, r8
 800b4fa:	dcf0      	bgt.n	800b4de <_printf_float+0x42e>
 800b4fc:	e6fc      	b.n	800b2f8 <_printf_float+0x248>
 800b4fe:	f04f 0800 	mov.w	r8, #0
 800b502:	f104 0919 	add.w	r9, r4, #25
 800b506:	e7f4      	b.n	800b4f2 <_printf_float+0x442>

0800b508 <_printf_common>:
 800b508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b50c:	4616      	mov	r6, r2
 800b50e:	4698      	mov	r8, r3
 800b510:	688a      	ldr	r2, [r1, #8]
 800b512:	690b      	ldr	r3, [r1, #16]
 800b514:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b518:	4293      	cmp	r3, r2
 800b51a:	bfb8      	it	lt
 800b51c:	4613      	movlt	r3, r2
 800b51e:	6033      	str	r3, [r6, #0]
 800b520:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b524:	4607      	mov	r7, r0
 800b526:	460c      	mov	r4, r1
 800b528:	b10a      	cbz	r2, 800b52e <_printf_common+0x26>
 800b52a:	3301      	adds	r3, #1
 800b52c:	6033      	str	r3, [r6, #0]
 800b52e:	6823      	ldr	r3, [r4, #0]
 800b530:	0699      	lsls	r1, r3, #26
 800b532:	bf42      	ittt	mi
 800b534:	6833      	ldrmi	r3, [r6, #0]
 800b536:	3302      	addmi	r3, #2
 800b538:	6033      	strmi	r3, [r6, #0]
 800b53a:	6825      	ldr	r5, [r4, #0]
 800b53c:	f015 0506 	ands.w	r5, r5, #6
 800b540:	d106      	bne.n	800b550 <_printf_common+0x48>
 800b542:	f104 0a19 	add.w	sl, r4, #25
 800b546:	68e3      	ldr	r3, [r4, #12]
 800b548:	6832      	ldr	r2, [r6, #0]
 800b54a:	1a9b      	subs	r3, r3, r2
 800b54c:	42ab      	cmp	r3, r5
 800b54e:	dc26      	bgt.n	800b59e <_printf_common+0x96>
 800b550:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b554:	6822      	ldr	r2, [r4, #0]
 800b556:	3b00      	subs	r3, #0
 800b558:	bf18      	it	ne
 800b55a:	2301      	movne	r3, #1
 800b55c:	0692      	lsls	r2, r2, #26
 800b55e:	d42b      	bmi.n	800b5b8 <_printf_common+0xb0>
 800b560:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b564:	4641      	mov	r1, r8
 800b566:	4638      	mov	r0, r7
 800b568:	47c8      	blx	r9
 800b56a:	3001      	adds	r0, #1
 800b56c:	d01e      	beq.n	800b5ac <_printf_common+0xa4>
 800b56e:	6823      	ldr	r3, [r4, #0]
 800b570:	6922      	ldr	r2, [r4, #16]
 800b572:	f003 0306 	and.w	r3, r3, #6
 800b576:	2b04      	cmp	r3, #4
 800b578:	bf02      	ittt	eq
 800b57a:	68e5      	ldreq	r5, [r4, #12]
 800b57c:	6833      	ldreq	r3, [r6, #0]
 800b57e:	1aed      	subeq	r5, r5, r3
 800b580:	68a3      	ldr	r3, [r4, #8]
 800b582:	bf0c      	ite	eq
 800b584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b588:	2500      	movne	r5, #0
 800b58a:	4293      	cmp	r3, r2
 800b58c:	bfc4      	itt	gt
 800b58e:	1a9b      	subgt	r3, r3, r2
 800b590:	18ed      	addgt	r5, r5, r3
 800b592:	2600      	movs	r6, #0
 800b594:	341a      	adds	r4, #26
 800b596:	42b5      	cmp	r5, r6
 800b598:	d11a      	bne.n	800b5d0 <_printf_common+0xc8>
 800b59a:	2000      	movs	r0, #0
 800b59c:	e008      	b.n	800b5b0 <_printf_common+0xa8>
 800b59e:	2301      	movs	r3, #1
 800b5a0:	4652      	mov	r2, sl
 800b5a2:	4641      	mov	r1, r8
 800b5a4:	4638      	mov	r0, r7
 800b5a6:	47c8      	blx	r9
 800b5a8:	3001      	adds	r0, #1
 800b5aa:	d103      	bne.n	800b5b4 <_printf_common+0xac>
 800b5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5b4:	3501      	adds	r5, #1
 800b5b6:	e7c6      	b.n	800b546 <_printf_common+0x3e>
 800b5b8:	18e1      	adds	r1, r4, r3
 800b5ba:	1c5a      	adds	r2, r3, #1
 800b5bc:	2030      	movs	r0, #48	@ 0x30
 800b5be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b5c2:	4422      	add	r2, r4
 800b5c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b5cc:	3302      	adds	r3, #2
 800b5ce:	e7c7      	b.n	800b560 <_printf_common+0x58>
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	4622      	mov	r2, r4
 800b5d4:	4641      	mov	r1, r8
 800b5d6:	4638      	mov	r0, r7
 800b5d8:	47c8      	blx	r9
 800b5da:	3001      	adds	r0, #1
 800b5dc:	d0e6      	beq.n	800b5ac <_printf_common+0xa4>
 800b5de:	3601      	adds	r6, #1
 800b5e0:	e7d9      	b.n	800b596 <_printf_common+0x8e>
	...

0800b5e4 <_printf_i>:
 800b5e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5e8:	7e0f      	ldrb	r7, [r1, #24]
 800b5ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b5ec:	2f78      	cmp	r7, #120	@ 0x78
 800b5ee:	4691      	mov	r9, r2
 800b5f0:	4680      	mov	r8, r0
 800b5f2:	460c      	mov	r4, r1
 800b5f4:	469a      	mov	sl, r3
 800b5f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b5fa:	d807      	bhi.n	800b60c <_printf_i+0x28>
 800b5fc:	2f62      	cmp	r7, #98	@ 0x62
 800b5fe:	d80a      	bhi.n	800b616 <_printf_i+0x32>
 800b600:	2f00      	cmp	r7, #0
 800b602:	f000 80d2 	beq.w	800b7aa <_printf_i+0x1c6>
 800b606:	2f58      	cmp	r7, #88	@ 0x58
 800b608:	f000 80b9 	beq.w	800b77e <_printf_i+0x19a>
 800b60c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b610:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b614:	e03a      	b.n	800b68c <_printf_i+0xa8>
 800b616:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b61a:	2b15      	cmp	r3, #21
 800b61c:	d8f6      	bhi.n	800b60c <_printf_i+0x28>
 800b61e:	a101      	add	r1, pc, #4	@ (adr r1, 800b624 <_printf_i+0x40>)
 800b620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b624:	0800b67d 	.word	0x0800b67d
 800b628:	0800b691 	.word	0x0800b691
 800b62c:	0800b60d 	.word	0x0800b60d
 800b630:	0800b60d 	.word	0x0800b60d
 800b634:	0800b60d 	.word	0x0800b60d
 800b638:	0800b60d 	.word	0x0800b60d
 800b63c:	0800b691 	.word	0x0800b691
 800b640:	0800b60d 	.word	0x0800b60d
 800b644:	0800b60d 	.word	0x0800b60d
 800b648:	0800b60d 	.word	0x0800b60d
 800b64c:	0800b60d 	.word	0x0800b60d
 800b650:	0800b791 	.word	0x0800b791
 800b654:	0800b6bb 	.word	0x0800b6bb
 800b658:	0800b74b 	.word	0x0800b74b
 800b65c:	0800b60d 	.word	0x0800b60d
 800b660:	0800b60d 	.word	0x0800b60d
 800b664:	0800b7b3 	.word	0x0800b7b3
 800b668:	0800b60d 	.word	0x0800b60d
 800b66c:	0800b6bb 	.word	0x0800b6bb
 800b670:	0800b60d 	.word	0x0800b60d
 800b674:	0800b60d 	.word	0x0800b60d
 800b678:	0800b753 	.word	0x0800b753
 800b67c:	6833      	ldr	r3, [r6, #0]
 800b67e:	1d1a      	adds	r2, r3, #4
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	6032      	str	r2, [r6, #0]
 800b684:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b688:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b68c:	2301      	movs	r3, #1
 800b68e:	e09d      	b.n	800b7cc <_printf_i+0x1e8>
 800b690:	6833      	ldr	r3, [r6, #0]
 800b692:	6820      	ldr	r0, [r4, #0]
 800b694:	1d19      	adds	r1, r3, #4
 800b696:	6031      	str	r1, [r6, #0]
 800b698:	0606      	lsls	r6, r0, #24
 800b69a:	d501      	bpl.n	800b6a0 <_printf_i+0xbc>
 800b69c:	681d      	ldr	r5, [r3, #0]
 800b69e:	e003      	b.n	800b6a8 <_printf_i+0xc4>
 800b6a0:	0645      	lsls	r5, r0, #25
 800b6a2:	d5fb      	bpl.n	800b69c <_printf_i+0xb8>
 800b6a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b6a8:	2d00      	cmp	r5, #0
 800b6aa:	da03      	bge.n	800b6b4 <_printf_i+0xd0>
 800b6ac:	232d      	movs	r3, #45	@ 0x2d
 800b6ae:	426d      	negs	r5, r5
 800b6b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6b4:	4859      	ldr	r0, [pc, #356]	@ (800b81c <_printf_i+0x238>)
 800b6b6:	230a      	movs	r3, #10
 800b6b8:	e011      	b.n	800b6de <_printf_i+0xfa>
 800b6ba:	6821      	ldr	r1, [r4, #0]
 800b6bc:	6833      	ldr	r3, [r6, #0]
 800b6be:	0608      	lsls	r0, r1, #24
 800b6c0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6c4:	d402      	bmi.n	800b6cc <_printf_i+0xe8>
 800b6c6:	0649      	lsls	r1, r1, #25
 800b6c8:	bf48      	it	mi
 800b6ca:	b2ad      	uxthmi	r5, r5
 800b6cc:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6ce:	4853      	ldr	r0, [pc, #332]	@ (800b81c <_printf_i+0x238>)
 800b6d0:	6033      	str	r3, [r6, #0]
 800b6d2:	bf14      	ite	ne
 800b6d4:	230a      	movne	r3, #10
 800b6d6:	2308      	moveq	r3, #8
 800b6d8:	2100      	movs	r1, #0
 800b6da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b6de:	6866      	ldr	r6, [r4, #4]
 800b6e0:	60a6      	str	r6, [r4, #8]
 800b6e2:	2e00      	cmp	r6, #0
 800b6e4:	bfa2      	ittt	ge
 800b6e6:	6821      	ldrge	r1, [r4, #0]
 800b6e8:	f021 0104 	bicge.w	r1, r1, #4
 800b6ec:	6021      	strge	r1, [r4, #0]
 800b6ee:	b90d      	cbnz	r5, 800b6f4 <_printf_i+0x110>
 800b6f0:	2e00      	cmp	r6, #0
 800b6f2:	d04b      	beq.n	800b78c <_printf_i+0x1a8>
 800b6f4:	4616      	mov	r6, r2
 800b6f6:	fbb5 f1f3 	udiv	r1, r5, r3
 800b6fa:	fb03 5711 	mls	r7, r3, r1, r5
 800b6fe:	5dc7      	ldrb	r7, [r0, r7]
 800b700:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b704:	462f      	mov	r7, r5
 800b706:	42bb      	cmp	r3, r7
 800b708:	460d      	mov	r5, r1
 800b70a:	d9f4      	bls.n	800b6f6 <_printf_i+0x112>
 800b70c:	2b08      	cmp	r3, #8
 800b70e:	d10b      	bne.n	800b728 <_printf_i+0x144>
 800b710:	6823      	ldr	r3, [r4, #0]
 800b712:	07df      	lsls	r7, r3, #31
 800b714:	d508      	bpl.n	800b728 <_printf_i+0x144>
 800b716:	6923      	ldr	r3, [r4, #16]
 800b718:	6861      	ldr	r1, [r4, #4]
 800b71a:	4299      	cmp	r1, r3
 800b71c:	bfde      	ittt	le
 800b71e:	2330      	movle	r3, #48	@ 0x30
 800b720:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b724:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b728:	1b92      	subs	r2, r2, r6
 800b72a:	6122      	str	r2, [r4, #16]
 800b72c:	f8cd a000 	str.w	sl, [sp]
 800b730:	464b      	mov	r3, r9
 800b732:	aa03      	add	r2, sp, #12
 800b734:	4621      	mov	r1, r4
 800b736:	4640      	mov	r0, r8
 800b738:	f7ff fee6 	bl	800b508 <_printf_common>
 800b73c:	3001      	adds	r0, #1
 800b73e:	d14a      	bne.n	800b7d6 <_printf_i+0x1f2>
 800b740:	f04f 30ff 	mov.w	r0, #4294967295
 800b744:	b004      	add	sp, #16
 800b746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b74a:	6823      	ldr	r3, [r4, #0]
 800b74c:	f043 0320 	orr.w	r3, r3, #32
 800b750:	6023      	str	r3, [r4, #0]
 800b752:	4833      	ldr	r0, [pc, #204]	@ (800b820 <_printf_i+0x23c>)
 800b754:	2778      	movs	r7, #120	@ 0x78
 800b756:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b75a:	6823      	ldr	r3, [r4, #0]
 800b75c:	6831      	ldr	r1, [r6, #0]
 800b75e:	061f      	lsls	r7, r3, #24
 800b760:	f851 5b04 	ldr.w	r5, [r1], #4
 800b764:	d402      	bmi.n	800b76c <_printf_i+0x188>
 800b766:	065f      	lsls	r7, r3, #25
 800b768:	bf48      	it	mi
 800b76a:	b2ad      	uxthmi	r5, r5
 800b76c:	6031      	str	r1, [r6, #0]
 800b76e:	07d9      	lsls	r1, r3, #31
 800b770:	bf44      	itt	mi
 800b772:	f043 0320 	orrmi.w	r3, r3, #32
 800b776:	6023      	strmi	r3, [r4, #0]
 800b778:	b11d      	cbz	r5, 800b782 <_printf_i+0x19e>
 800b77a:	2310      	movs	r3, #16
 800b77c:	e7ac      	b.n	800b6d8 <_printf_i+0xf4>
 800b77e:	4827      	ldr	r0, [pc, #156]	@ (800b81c <_printf_i+0x238>)
 800b780:	e7e9      	b.n	800b756 <_printf_i+0x172>
 800b782:	6823      	ldr	r3, [r4, #0]
 800b784:	f023 0320 	bic.w	r3, r3, #32
 800b788:	6023      	str	r3, [r4, #0]
 800b78a:	e7f6      	b.n	800b77a <_printf_i+0x196>
 800b78c:	4616      	mov	r6, r2
 800b78e:	e7bd      	b.n	800b70c <_printf_i+0x128>
 800b790:	6833      	ldr	r3, [r6, #0]
 800b792:	6825      	ldr	r5, [r4, #0]
 800b794:	6961      	ldr	r1, [r4, #20]
 800b796:	1d18      	adds	r0, r3, #4
 800b798:	6030      	str	r0, [r6, #0]
 800b79a:	062e      	lsls	r6, r5, #24
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	d501      	bpl.n	800b7a4 <_printf_i+0x1c0>
 800b7a0:	6019      	str	r1, [r3, #0]
 800b7a2:	e002      	b.n	800b7aa <_printf_i+0x1c6>
 800b7a4:	0668      	lsls	r0, r5, #25
 800b7a6:	d5fb      	bpl.n	800b7a0 <_printf_i+0x1bc>
 800b7a8:	8019      	strh	r1, [r3, #0]
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	6123      	str	r3, [r4, #16]
 800b7ae:	4616      	mov	r6, r2
 800b7b0:	e7bc      	b.n	800b72c <_printf_i+0x148>
 800b7b2:	6833      	ldr	r3, [r6, #0]
 800b7b4:	1d1a      	adds	r2, r3, #4
 800b7b6:	6032      	str	r2, [r6, #0]
 800b7b8:	681e      	ldr	r6, [r3, #0]
 800b7ba:	6862      	ldr	r2, [r4, #4]
 800b7bc:	2100      	movs	r1, #0
 800b7be:	4630      	mov	r0, r6
 800b7c0:	f7f4 fd06 	bl	80001d0 <memchr>
 800b7c4:	b108      	cbz	r0, 800b7ca <_printf_i+0x1e6>
 800b7c6:	1b80      	subs	r0, r0, r6
 800b7c8:	6060      	str	r0, [r4, #4]
 800b7ca:	6863      	ldr	r3, [r4, #4]
 800b7cc:	6123      	str	r3, [r4, #16]
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7d4:	e7aa      	b.n	800b72c <_printf_i+0x148>
 800b7d6:	6923      	ldr	r3, [r4, #16]
 800b7d8:	4632      	mov	r2, r6
 800b7da:	4649      	mov	r1, r9
 800b7dc:	4640      	mov	r0, r8
 800b7de:	47d0      	blx	sl
 800b7e0:	3001      	adds	r0, #1
 800b7e2:	d0ad      	beq.n	800b740 <_printf_i+0x15c>
 800b7e4:	6823      	ldr	r3, [r4, #0]
 800b7e6:	079b      	lsls	r3, r3, #30
 800b7e8:	d413      	bmi.n	800b812 <_printf_i+0x22e>
 800b7ea:	68e0      	ldr	r0, [r4, #12]
 800b7ec:	9b03      	ldr	r3, [sp, #12]
 800b7ee:	4298      	cmp	r0, r3
 800b7f0:	bfb8      	it	lt
 800b7f2:	4618      	movlt	r0, r3
 800b7f4:	e7a6      	b.n	800b744 <_printf_i+0x160>
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	4632      	mov	r2, r6
 800b7fa:	4649      	mov	r1, r9
 800b7fc:	4640      	mov	r0, r8
 800b7fe:	47d0      	blx	sl
 800b800:	3001      	adds	r0, #1
 800b802:	d09d      	beq.n	800b740 <_printf_i+0x15c>
 800b804:	3501      	adds	r5, #1
 800b806:	68e3      	ldr	r3, [r4, #12]
 800b808:	9903      	ldr	r1, [sp, #12]
 800b80a:	1a5b      	subs	r3, r3, r1
 800b80c:	42ab      	cmp	r3, r5
 800b80e:	dcf2      	bgt.n	800b7f6 <_printf_i+0x212>
 800b810:	e7eb      	b.n	800b7ea <_printf_i+0x206>
 800b812:	2500      	movs	r5, #0
 800b814:	f104 0619 	add.w	r6, r4, #25
 800b818:	e7f5      	b.n	800b806 <_printf_i+0x222>
 800b81a:	bf00      	nop
 800b81c:	0800dc92 	.word	0x0800dc92
 800b820:	0800dca3 	.word	0x0800dca3

0800b824 <std>:
 800b824:	2300      	movs	r3, #0
 800b826:	b510      	push	{r4, lr}
 800b828:	4604      	mov	r4, r0
 800b82a:	e9c0 3300 	strd	r3, r3, [r0]
 800b82e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b832:	6083      	str	r3, [r0, #8]
 800b834:	8181      	strh	r1, [r0, #12]
 800b836:	6643      	str	r3, [r0, #100]	@ 0x64
 800b838:	81c2      	strh	r2, [r0, #14]
 800b83a:	6183      	str	r3, [r0, #24]
 800b83c:	4619      	mov	r1, r3
 800b83e:	2208      	movs	r2, #8
 800b840:	305c      	adds	r0, #92	@ 0x5c
 800b842:	f000 f914 	bl	800ba6e <memset>
 800b846:	4b0d      	ldr	r3, [pc, #52]	@ (800b87c <std+0x58>)
 800b848:	6263      	str	r3, [r4, #36]	@ 0x24
 800b84a:	4b0d      	ldr	r3, [pc, #52]	@ (800b880 <std+0x5c>)
 800b84c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b84e:	4b0d      	ldr	r3, [pc, #52]	@ (800b884 <std+0x60>)
 800b850:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b852:	4b0d      	ldr	r3, [pc, #52]	@ (800b888 <std+0x64>)
 800b854:	6323      	str	r3, [r4, #48]	@ 0x30
 800b856:	4b0d      	ldr	r3, [pc, #52]	@ (800b88c <std+0x68>)
 800b858:	6224      	str	r4, [r4, #32]
 800b85a:	429c      	cmp	r4, r3
 800b85c:	d006      	beq.n	800b86c <std+0x48>
 800b85e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b862:	4294      	cmp	r4, r2
 800b864:	d002      	beq.n	800b86c <std+0x48>
 800b866:	33d0      	adds	r3, #208	@ 0xd0
 800b868:	429c      	cmp	r4, r3
 800b86a:	d105      	bne.n	800b878 <std+0x54>
 800b86c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b874:	f000 b978 	b.w	800bb68 <__retarget_lock_init_recursive>
 800b878:	bd10      	pop	{r4, pc}
 800b87a:	bf00      	nop
 800b87c:	0800b9e9 	.word	0x0800b9e9
 800b880:	0800ba0b 	.word	0x0800ba0b
 800b884:	0800ba43 	.word	0x0800ba43
 800b888:	0800ba67 	.word	0x0800ba67
 800b88c:	200020c0 	.word	0x200020c0

0800b890 <stdio_exit_handler>:
 800b890:	4a02      	ldr	r2, [pc, #8]	@ (800b89c <stdio_exit_handler+0xc>)
 800b892:	4903      	ldr	r1, [pc, #12]	@ (800b8a0 <stdio_exit_handler+0x10>)
 800b894:	4803      	ldr	r0, [pc, #12]	@ (800b8a4 <stdio_exit_handler+0x14>)
 800b896:	f000 b869 	b.w	800b96c <_fwalk_sglue>
 800b89a:	bf00      	nop
 800b89c:	200000fc 	.word	0x200000fc
 800b8a0:	0800d4c1 	.word	0x0800d4c1
 800b8a4:	2000010c 	.word	0x2000010c

0800b8a8 <cleanup_stdio>:
 800b8a8:	6841      	ldr	r1, [r0, #4]
 800b8aa:	4b0c      	ldr	r3, [pc, #48]	@ (800b8dc <cleanup_stdio+0x34>)
 800b8ac:	4299      	cmp	r1, r3
 800b8ae:	b510      	push	{r4, lr}
 800b8b0:	4604      	mov	r4, r0
 800b8b2:	d001      	beq.n	800b8b8 <cleanup_stdio+0x10>
 800b8b4:	f001 fe04 	bl	800d4c0 <_fflush_r>
 800b8b8:	68a1      	ldr	r1, [r4, #8]
 800b8ba:	4b09      	ldr	r3, [pc, #36]	@ (800b8e0 <cleanup_stdio+0x38>)
 800b8bc:	4299      	cmp	r1, r3
 800b8be:	d002      	beq.n	800b8c6 <cleanup_stdio+0x1e>
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	f001 fdfd 	bl	800d4c0 <_fflush_r>
 800b8c6:	68e1      	ldr	r1, [r4, #12]
 800b8c8:	4b06      	ldr	r3, [pc, #24]	@ (800b8e4 <cleanup_stdio+0x3c>)
 800b8ca:	4299      	cmp	r1, r3
 800b8cc:	d004      	beq.n	800b8d8 <cleanup_stdio+0x30>
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8d4:	f001 bdf4 	b.w	800d4c0 <_fflush_r>
 800b8d8:	bd10      	pop	{r4, pc}
 800b8da:	bf00      	nop
 800b8dc:	200020c0 	.word	0x200020c0
 800b8e0:	20002128 	.word	0x20002128
 800b8e4:	20002190 	.word	0x20002190

0800b8e8 <global_stdio_init.part.0>:
 800b8e8:	b510      	push	{r4, lr}
 800b8ea:	4b0b      	ldr	r3, [pc, #44]	@ (800b918 <global_stdio_init.part.0+0x30>)
 800b8ec:	4c0b      	ldr	r4, [pc, #44]	@ (800b91c <global_stdio_init.part.0+0x34>)
 800b8ee:	4a0c      	ldr	r2, [pc, #48]	@ (800b920 <global_stdio_init.part.0+0x38>)
 800b8f0:	601a      	str	r2, [r3, #0]
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	2104      	movs	r1, #4
 800b8f8:	f7ff ff94 	bl	800b824 <std>
 800b8fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b900:	2201      	movs	r2, #1
 800b902:	2109      	movs	r1, #9
 800b904:	f7ff ff8e 	bl	800b824 <std>
 800b908:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b90c:	2202      	movs	r2, #2
 800b90e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b912:	2112      	movs	r1, #18
 800b914:	f7ff bf86 	b.w	800b824 <std>
 800b918:	200021f8 	.word	0x200021f8
 800b91c:	200020c0 	.word	0x200020c0
 800b920:	0800b891 	.word	0x0800b891

0800b924 <__sfp_lock_acquire>:
 800b924:	4801      	ldr	r0, [pc, #4]	@ (800b92c <__sfp_lock_acquire+0x8>)
 800b926:	f000 b920 	b.w	800bb6a <__retarget_lock_acquire_recursive>
 800b92a:	bf00      	nop
 800b92c:	20002201 	.word	0x20002201

0800b930 <__sfp_lock_release>:
 800b930:	4801      	ldr	r0, [pc, #4]	@ (800b938 <__sfp_lock_release+0x8>)
 800b932:	f000 b91b 	b.w	800bb6c <__retarget_lock_release_recursive>
 800b936:	bf00      	nop
 800b938:	20002201 	.word	0x20002201

0800b93c <__sinit>:
 800b93c:	b510      	push	{r4, lr}
 800b93e:	4604      	mov	r4, r0
 800b940:	f7ff fff0 	bl	800b924 <__sfp_lock_acquire>
 800b944:	6a23      	ldr	r3, [r4, #32]
 800b946:	b11b      	cbz	r3, 800b950 <__sinit+0x14>
 800b948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b94c:	f7ff bff0 	b.w	800b930 <__sfp_lock_release>
 800b950:	4b04      	ldr	r3, [pc, #16]	@ (800b964 <__sinit+0x28>)
 800b952:	6223      	str	r3, [r4, #32]
 800b954:	4b04      	ldr	r3, [pc, #16]	@ (800b968 <__sinit+0x2c>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d1f5      	bne.n	800b948 <__sinit+0xc>
 800b95c:	f7ff ffc4 	bl	800b8e8 <global_stdio_init.part.0>
 800b960:	e7f2      	b.n	800b948 <__sinit+0xc>
 800b962:	bf00      	nop
 800b964:	0800b8a9 	.word	0x0800b8a9
 800b968:	200021f8 	.word	0x200021f8

0800b96c <_fwalk_sglue>:
 800b96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b970:	4607      	mov	r7, r0
 800b972:	4688      	mov	r8, r1
 800b974:	4614      	mov	r4, r2
 800b976:	2600      	movs	r6, #0
 800b978:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b97c:	f1b9 0901 	subs.w	r9, r9, #1
 800b980:	d505      	bpl.n	800b98e <_fwalk_sglue+0x22>
 800b982:	6824      	ldr	r4, [r4, #0]
 800b984:	2c00      	cmp	r4, #0
 800b986:	d1f7      	bne.n	800b978 <_fwalk_sglue+0xc>
 800b988:	4630      	mov	r0, r6
 800b98a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b98e:	89ab      	ldrh	r3, [r5, #12]
 800b990:	2b01      	cmp	r3, #1
 800b992:	d907      	bls.n	800b9a4 <_fwalk_sglue+0x38>
 800b994:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b998:	3301      	adds	r3, #1
 800b99a:	d003      	beq.n	800b9a4 <_fwalk_sglue+0x38>
 800b99c:	4629      	mov	r1, r5
 800b99e:	4638      	mov	r0, r7
 800b9a0:	47c0      	blx	r8
 800b9a2:	4306      	orrs	r6, r0
 800b9a4:	3568      	adds	r5, #104	@ 0x68
 800b9a6:	e7e9      	b.n	800b97c <_fwalk_sglue+0x10>

0800b9a8 <siprintf>:
 800b9a8:	b40e      	push	{r1, r2, r3}
 800b9aa:	b500      	push	{lr}
 800b9ac:	b09c      	sub	sp, #112	@ 0x70
 800b9ae:	ab1d      	add	r3, sp, #116	@ 0x74
 800b9b0:	9002      	str	r0, [sp, #8]
 800b9b2:	9006      	str	r0, [sp, #24]
 800b9b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b9b8:	4809      	ldr	r0, [pc, #36]	@ (800b9e0 <siprintf+0x38>)
 800b9ba:	9107      	str	r1, [sp, #28]
 800b9bc:	9104      	str	r1, [sp, #16]
 800b9be:	4909      	ldr	r1, [pc, #36]	@ (800b9e4 <siprintf+0x3c>)
 800b9c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9c4:	9105      	str	r1, [sp, #20]
 800b9c6:	6800      	ldr	r0, [r0, #0]
 800b9c8:	9301      	str	r3, [sp, #4]
 800b9ca:	a902      	add	r1, sp, #8
 800b9cc:	f001 fbfc 	bl	800d1c8 <_svfiprintf_r>
 800b9d0:	9b02      	ldr	r3, [sp, #8]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	701a      	strb	r2, [r3, #0]
 800b9d6:	b01c      	add	sp, #112	@ 0x70
 800b9d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9dc:	b003      	add	sp, #12
 800b9de:	4770      	bx	lr
 800b9e0:	20000108 	.word	0x20000108
 800b9e4:	ffff0208 	.word	0xffff0208

0800b9e8 <__sread>:
 800b9e8:	b510      	push	{r4, lr}
 800b9ea:	460c      	mov	r4, r1
 800b9ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9f0:	f000 f86c 	bl	800bacc <_read_r>
 800b9f4:	2800      	cmp	r0, #0
 800b9f6:	bfab      	itete	ge
 800b9f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b9fa:	89a3      	ldrhlt	r3, [r4, #12]
 800b9fc:	181b      	addge	r3, r3, r0
 800b9fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ba02:	bfac      	ite	ge
 800ba04:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ba06:	81a3      	strhlt	r3, [r4, #12]
 800ba08:	bd10      	pop	{r4, pc}

0800ba0a <__swrite>:
 800ba0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba0e:	461f      	mov	r7, r3
 800ba10:	898b      	ldrh	r3, [r1, #12]
 800ba12:	05db      	lsls	r3, r3, #23
 800ba14:	4605      	mov	r5, r0
 800ba16:	460c      	mov	r4, r1
 800ba18:	4616      	mov	r6, r2
 800ba1a:	d505      	bpl.n	800ba28 <__swrite+0x1e>
 800ba1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba20:	2302      	movs	r3, #2
 800ba22:	2200      	movs	r2, #0
 800ba24:	f000 f840 	bl	800baa8 <_lseek_r>
 800ba28:	89a3      	ldrh	r3, [r4, #12]
 800ba2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba32:	81a3      	strh	r3, [r4, #12]
 800ba34:	4632      	mov	r2, r6
 800ba36:	463b      	mov	r3, r7
 800ba38:	4628      	mov	r0, r5
 800ba3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba3e:	f000 b857 	b.w	800baf0 <_write_r>

0800ba42 <__sseek>:
 800ba42:	b510      	push	{r4, lr}
 800ba44:	460c      	mov	r4, r1
 800ba46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba4a:	f000 f82d 	bl	800baa8 <_lseek_r>
 800ba4e:	1c43      	adds	r3, r0, #1
 800ba50:	89a3      	ldrh	r3, [r4, #12]
 800ba52:	bf15      	itete	ne
 800ba54:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ba56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ba5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ba5e:	81a3      	strheq	r3, [r4, #12]
 800ba60:	bf18      	it	ne
 800ba62:	81a3      	strhne	r3, [r4, #12]
 800ba64:	bd10      	pop	{r4, pc}

0800ba66 <__sclose>:
 800ba66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba6a:	f000 b80d 	b.w	800ba88 <_close_r>

0800ba6e <memset>:
 800ba6e:	4402      	add	r2, r0
 800ba70:	4603      	mov	r3, r0
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d100      	bne.n	800ba78 <memset+0xa>
 800ba76:	4770      	bx	lr
 800ba78:	f803 1b01 	strb.w	r1, [r3], #1
 800ba7c:	e7f9      	b.n	800ba72 <memset+0x4>
	...

0800ba80 <_localeconv_r>:
 800ba80:	4800      	ldr	r0, [pc, #0]	@ (800ba84 <_localeconv_r+0x4>)
 800ba82:	4770      	bx	lr
 800ba84:	20000248 	.word	0x20000248

0800ba88 <_close_r>:
 800ba88:	b538      	push	{r3, r4, r5, lr}
 800ba8a:	4d06      	ldr	r5, [pc, #24]	@ (800baa4 <_close_r+0x1c>)
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	4604      	mov	r4, r0
 800ba90:	4608      	mov	r0, r1
 800ba92:	602b      	str	r3, [r5, #0]
 800ba94:	f7f6 faad 	bl	8001ff2 <_close>
 800ba98:	1c43      	adds	r3, r0, #1
 800ba9a:	d102      	bne.n	800baa2 <_close_r+0x1a>
 800ba9c:	682b      	ldr	r3, [r5, #0]
 800ba9e:	b103      	cbz	r3, 800baa2 <_close_r+0x1a>
 800baa0:	6023      	str	r3, [r4, #0]
 800baa2:	bd38      	pop	{r3, r4, r5, pc}
 800baa4:	200021fc 	.word	0x200021fc

0800baa8 <_lseek_r>:
 800baa8:	b538      	push	{r3, r4, r5, lr}
 800baaa:	4d07      	ldr	r5, [pc, #28]	@ (800bac8 <_lseek_r+0x20>)
 800baac:	4604      	mov	r4, r0
 800baae:	4608      	mov	r0, r1
 800bab0:	4611      	mov	r1, r2
 800bab2:	2200      	movs	r2, #0
 800bab4:	602a      	str	r2, [r5, #0]
 800bab6:	461a      	mov	r2, r3
 800bab8:	f7f6 fabf 	bl	800203a <_lseek>
 800babc:	1c43      	adds	r3, r0, #1
 800babe:	d102      	bne.n	800bac6 <_lseek_r+0x1e>
 800bac0:	682b      	ldr	r3, [r5, #0]
 800bac2:	b103      	cbz	r3, 800bac6 <_lseek_r+0x1e>
 800bac4:	6023      	str	r3, [r4, #0]
 800bac6:	bd38      	pop	{r3, r4, r5, pc}
 800bac8:	200021fc 	.word	0x200021fc

0800bacc <_read_r>:
 800bacc:	b538      	push	{r3, r4, r5, lr}
 800bace:	4d07      	ldr	r5, [pc, #28]	@ (800baec <_read_r+0x20>)
 800bad0:	4604      	mov	r4, r0
 800bad2:	4608      	mov	r0, r1
 800bad4:	4611      	mov	r1, r2
 800bad6:	2200      	movs	r2, #0
 800bad8:	602a      	str	r2, [r5, #0]
 800bada:	461a      	mov	r2, r3
 800badc:	f7f6 fa50 	bl	8001f80 <_read>
 800bae0:	1c43      	adds	r3, r0, #1
 800bae2:	d102      	bne.n	800baea <_read_r+0x1e>
 800bae4:	682b      	ldr	r3, [r5, #0]
 800bae6:	b103      	cbz	r3, 800baea <_read_r+0x1e>
 800bae8:	6023      	str	r3, [r4, #0]
 800baea:	bd38      	pop	{r3, r4, r5, pc}
 800baec:	200021fc 	.word	0x200021fc

0800baf0 <_write_r>:
 800baf0:	b538      	push	{r3, r4, r5, lr}
 800baf2:	4d07      	ldr	r5, [pc, #28]	@ (800bb10 <_write_r+0x20>)
 800baf4:	4604      	mov	r4, r0
 800baf6:	4608      	mov	r0, r1
 800baf8:	4611      	mov	r1, r2
 800bafa:	2200      	movs	r2, #0
 800bafc:	602a      	str	r2, [r5, #0]
 800bafe:	461a      	mov	r2, r3
 800bb00:	f7f6 fa5b 	bl	8001fba <_write>
 800bb04:	1c43      	adds	r3, r0, #1
 800bb06:	d102      	bne.n	800bb0e <_write_r+0x1e>
 800bb08:	682b      	ldr	r3, [r5, #0]
 800bb0a:	b103      	cbz	r3, 800bb0e <_write_r+0x1e>
 800bb0c:	6023      	str	r3, [r4, #0]
 800bb0e:	bd38      	pop	{r3, r4, r5, pc}
 800bb10:	200021fc 	.word	0x200021fc

0800bb14 <__errno>:
 800bb14:	4b01      	ldr	r3, [pc, #4]	@ (800bb1c <__errno+0x8>)
 800bb16:	6818      	ldr	r0, [r3, #0]
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	20000108 	.word	0x20000108

0800bb20 <__libc_init_array>:
 800bb20:	b570      	push	{r4, r5, r6, lr}
 800bb22:	4d0d      	ldr	r5, [pc, #52]	@ (800bb58 <__libc_init_array+0x38>)
 800bb24:	4c0d      	ldr	r4, [pc, #52]	@ (800bb5c <__libc_init_array+0x3c>)
 800bb26:	1b64      	subs	r4, r4, r5
 800bb28:	10a4      	asrs	r4, r4, #2
 800bb2a:	2600      	movs	r6, #0
 800bb2c:	42a6      	cmp	r6, r4
 800bb2e:	d109      	bne.n	800bb44 <__libc_init_array+0x24>
 800bb30:	4d0b      	ldr	r5, [pc, #44]	@ (800bb60 <__libc_init_array+0x40>)
 800bb32:	4c0c      	ldr	r4, [pc, #48]	@ (800bb64 <__libc_init_array+0x44>)
 800bb34:	f002 f860 	bl	800dbf8 <_init>
 800bb38:	1b64      	subs	r4, r4, r5
 800bb3a:	10a4      	asrs	r4, r4, #2
 800bb3c:	2600      	movs	r6, #0
 800bb3e:	42a6      	cmp	r6, r4
 800bb40:	d105      	bne.n	800bb4e <__libc_init_array+0x2e>
 800bb42:	bd70      	pop	{r4, r5, r6, pc}
 800bb44:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb48:	4798      	blx	r3
 800bb4a:	3601      	adds	r6, #1
 800bb4c:	e7ee      	b.n	800bb2c <__libc_init_array+0xc>
 800bb4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb52:	4798      	blx	r3
 800bb54:	3601      	adds	r6, #1
 800bb56:	e7f2      	b.n	800bb3e <__libc_init_array+0x1e>
 800bb58:	0800dff8 	.word	0x0800dff8
 800bb5c:	0800dff8 	.word	0x0800dff8
 800bb60:	0800dff8 	.word	0x0800dff8
 800bb64:	0800dffc 	.word	0x0800dffc

0800bb68 <__retarget_lock_init_recursive>:
 800bb68:	4770      	bx	lr

0800bb6a <__retarget_lock_acquire_recursive>:
 800bb6a:	4770      	bx	lr

0800bb6c <__retarget_lock_release_recursive>:
 800bb6c:	4770      	bx	lr

0800bb6e <quorem>:
 800bb6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb72:	6903      	ldr	r3, [r0, #16]
 800bb74:	690c      	ldr	r4, [r1, #16]
 800bb76:	42a3      	cmp	r3, r4
 800bb78:	4607      	mov	r7, r0
 800bb7a:	db7e      	blt.n	800bc7a <quorem+0x10c>
 800bb7c:	3c01      	subs	r4, #1
 800bb7e:	f101 0814 	add.w	r8, r1, #20
 800bb82:	00a3      	lsls	r3, r4, #2
 800bb84:	f100 0514 	add.w	r5, r0, #20
 800bb88:	9300      	str	r3, [sp, #0]
 800bb8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb8e:	9301      	str	r3, [sp, #4]
 800bb90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bba0:	fbb2 f6f3 	udiv	r6, r2, r3
 800bba4:	d32e      	bcc.n	800bc04 <quorem+0x96>
 800bba6:	f04f 0a00 	mov.w	sl, #0
 800bbaa:	46c4      	mov	ip, r8
 800bbac:	46ae      	mov	lr, r5
 800bbae:	46d3      	mov	fp, sl
 800bbb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bbb4:	b298      	uxth	r0, r3
 800bbb6:	fb06 a000 	mla	r0, r6, r0, sl
 800bbba:	0c02      	lsrs	r2, r0, #16
 800bbbc:	0c1b      	lsrs	r3, r3, #16
 800bbbe:	fb06 2303 	mla	r3, r6, r3, r2
 800bbc2:	f8de 2000 	ldr.w	r2, [lr]
 800bbc6:	b280      	uxth	r0, r0
 800bbc8:	b292      	uxth	r2, r2
 800bbca:	1a12      	subs	r2, r2, r0
 800bbcc:	445a      	add	r2, fp
 800bbce:	f8de 0000 	ldr.w	r0, [lr]
 800bbd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bbdc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bbe0:	b292      	uxth	r2, r2
 800bbe2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bbe6:	45e1      	cmp	r9, ip
 800bbe8:	f84e 2b04 	str.w	r2, [lr], #4
 800bbec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bbf0:	d2de      	bcs.n	800bbb0 <quorem+0x42>
 800bbf2:	9b00      	ldr	r3, [sp, #0]
 800bbf4:	58eb      	ldr	r3, [r5, r3]
 800bbf6:	b92b      	cbnz	r3, 800bc04 <quorem+0x96>
 800bbf8:	9b01      	ldr	r3, [sp, #4]
 800bbfa:	3b04      	subs	r3, #4
 800bbfc:	429d      	cmp	r5, r3
 800bbfe:	461a      	mov	r2, r3
 800bc00:	d32f      	bcc.n	800bc62 <quorem+0xf4>
 800bc02:	613c      	str	r4, [r7, #16]
 800bc04:	4638      	mov	r0, r7
 800bc06:	f001 f97d 	bl	800cf04 <__mcmp>
 800bc0a:	2800      	cmp	r0, #0
 800bc0c:	db25      	blt.n	800bc5a <quorem+0xec>
 800bc0e:	4629      	mov	r1, r5
 800bc10:	2000      	movs	r0, #0
 800bc12:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc16:	f8d1 c000 	ldr.w	ip, [r1]
 800bc1a:	fa1f fe82 	uxth.w	lr, r2
 800bc1e:	fa1f f38c 	uxth.w	r3, ip
 800bc22:	eba3 030e 	sub.w	r3, r3, lr
 800bc26:	4403      	add	r3, r0
 800bc28:	0c12      	lsrs	r2, r2, #16
 800bc2a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bc2e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc38:	45c1      	cmp	r9, r8
 800bc3a:	f841 3b04 	str.w	r3, [r1], #4
 800bc3e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bc42:	d2e6      	bcs.n	800bc12 <quorem+0xa4>
 800bc44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc4c:	b922      	cbnz	r2, 800bc58 <quorem+0xea>
 800bc4e:	3b04      	subs	r3, #4
 800bc50:	429d      	cmp	r5, r3
 800bc52:	461a      	mov	r2, r3
 800bc54:	d30b      	bcc.n	800bc6e <quorem+0x100>
 800bc56:	613c      	str	r4, [r7, #16]
 800bc58:	3601      	adds	r6, #1
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	b003      	add	sp, #12
 800bc5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc62:	6812      	ldr	r2, [r2, #0]
 800bc64:	3b04      	subs	r3, #4
 800bc66:	2a00      	cmp	r2, #0
 800bc68:	d1cb      	bne.n	800bc02 <quorem+0x94>
 800bc6a:	3c01      	subs	r4, #1
 800bc6c:	e7c6      	b.n	800bbfc <quorem+0x8e>
 800bc6e:	6812      	ldr	r2, [r2, #0]
 800bc70:	3b04      	subs	r3, #4
 800bc72:	2a00      	cmp	r2, #0
 800bc74:	d1ef      	bne.n	800bc56 <quorem+0xe8>
 800bc76:	3c01      	subs	r4, #1
 800bc78:	e7ea      	b.n	800bc50 <quorem+0xe2>
 800bc7a:	2000      	movs	r0, #0
 800bc7c:	e7ee      	b.n	800bc5c <quorem+0xee>
	...

0800bc80 <_dtoa_r>:
 800bc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc84:	69c7      	ldr	r7, [r0, #28]
 800bc86:	b097      	sub	sp, #92	@ 0x5c
 800bc88:	4614      	mov	r4, r2
 800bc8a:	461d      	mov	r5, r3
 800bc8c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bc90:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800bc92:	4683      	mov	fp, r0
 800bc94:	b97f      	cbnz	r7, 800bcb6 <_dtoa_r+0x36>
 800bc96:	2010      	movs	r0, #16
 800bc98:	f000 fe04 	bl	800c8a4 <malloc>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	f8cb 001c 	str.w	r0, [fp, #28]
 800bca2:	b920      	cbnz	r0, 800bcae <_dtoa_r+0x2e>
 800bca4:	4ba8      	ldr	r3, [pc, #672]	@ (800bf48 <_dtoa_r+0x2c8>)
 800bca6:	21ef      	movs	r1, #239	@ 0xef
 800bca8:	48a8      	ldr	r0, [pc, #672]	@ (800bf4c <_dtoa_r+0x2cc>)
 800bcaa:	f001 fc69 	bl	800d580 <__assert_func>
 800bcae:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bcb2:	6007      	str	r7, [r0, #0]
 800bcb4:	60c7      	str	r7, [r0, #12]
 800bcb6:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bcba:	6819      	ldr	r1, [r3, #0]
 800bcbc:	b159      	cbz	r1, 800bcd6 <_dtoa_r+0x56>
 800bcbe:	685a      	ldr	r2, [r3, #4]
 800bcc0:	604a      	str	r2, [r1, #4]
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	4093      	lsls	r3, r2
 800bcc6:	608b      	str	r3, [r1, #8]
 800bcc8:	4658      	mov	r0, fp
 800bcca:	f000 fee1 	bl	800ca90 <_Bfree>
 800bcce:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	601a      	str	r2, [r3, #0]
 800bcd6:	1e2b      	subs	r3, r5, #0
 800bcd8:	bfb9      	ittee	lt
 800bcda:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bcde:	9303      	strlt	r3, [sp, #12]
 800bce0:	2300      	movge	r3, #0
 800bce2:	6033      	strge	r3, [r6, #0]
 800bce4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bce8:	4b99      	ldr	r3, [pc, #612]	@ (800bf50 <_dtoa_r+0x2d0>)
 800bcea:	bfbc      	itt	lt
 800bcec:	2201      	movlt	r2, #1
 800bcee:	6032      	strlt	r2, [r6, #0]
 800bcf0:	ea33 0308 	bics.w	r3, r3, r8
 800bcf4:	d112      	bne.n	800bd1c <_dtoa_r+0x9c>
 800bcf6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bcf8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bcfc:	6013      	str	r3, [r2, #0]
 800bcfe:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bd02:	4323      	orrs	r3, r4
 800bd04:	f000 8551 	beq.w	800c7aa <_dtoa_r+0xb2a>
 800bd08:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bd0a:	f8df a248 	ldr.w	sl, [pc, #584]	@ 800bf54 <_dtoa_r+0x2d4>
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	f000 8553 	beq.w	800c7ba <_dtoa_r+0xb3a>
 800bd14:	f10a 0303 	add.w	r3, sl, #3
 800bd18:	f000 bd4d 	b.w	800c7b6 <_dtoa_r+0xb36>
 800bd1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd20:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bd24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd28:	2200      	movs	r2, #0
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	f7f4 fecc 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd30:	4607      	mov	r7, r0
 800bd32:	b158      	cbz	r0, 800bd4c <_dtoa_r+0xcc>
 800bd34:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bd36:	2301      	movs	r3, #1
 800bd38:	6013      	str	r3, [r2, #0]
 800bd3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bd3c:	b113      	cbz	r3, 800bd44 <_dtoa_r+0xc4>
 800bd3e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bd40:	4b85      	ldr	r3, [pc, #532]	@ (800bf58 <_dtoa_r+0x2d8>)
 800bd42:	6013      	str	r3, [r2, #0]
 800bd44:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800bf5c <_dtoa_r+0x2dc>
 800bd48:	f000 bd37 	b.w	800c7ba <_dtoa_r+0xb3a>
 800bd4c:	ab14      	add	r3, sp, #80	@ 0x50
 800bd4e:	9301      	str	r3, [sp, #4]
 800bd50:	ab15      	add	r3, sp, #84	@ 0x54
 800bd52:	9300      	str	r3, [sp, #0]
 800bd54:	4658      	mov	r0, fp
 800bd56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bd5a:	f001 f981 	bl	800d060 <__d2b>
 800bd5e:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800bd62:	4681      	mov	r9, r0
 800bd64:	2e00      	cmp	r6, #0
 800bd66:	d076      	beq.n	800be56 <_dtoa_r+0x1d6>
 800bd68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd6a:	9712      	str	r7, [sp, #72]	@ 0x48
 800bd6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bd78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bd7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bd80:	4619      	mov	r1, r3
 800bd82:	2200      	movs	r2, #0
 800bd84:	4b76      	ldr	r3, [pc, #472]	@ (800bf60 <_dtoa_r+0x2e0>)
 800bd86:	f7f4 fa7f 	bl	8000288 <__aeabi_dsub>
 800bd8a:	a369      	add	r3, pc, #420	@ (adr r3, 800bf30 <_dtoa_r+0x2b0>)
 800bd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd90:	f7f4 fc32 	bl	80005f8 <__aeabi_dmul>
 800bd94:	a368      	add	r3, pc, #416	@ (adr r3, 800bf38 <_dtoa_r+0x2b8>)
 800bd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9a:	f7f4 fa77 	bl	800028c <__adddf3>
 800bd9e:	4604      	mov	r4, r0
 800bda0:	4630      	mov	r0, r6
 800bda2:	460d      	mov	r5, r1
 800bda4:	f7f4 fbbe 	bl	8000524 <__aeabi_i2d>
 800bda8:	a365      	add	r3, pc, #404	@ (adr r3, 800bf40 <_dtoa_r+0x2c0>)
 800bdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdae:	f7f4 fc23 	bl	80005f8 <__aeabi_dmul>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	4629      	mov	r1, r5
 800bdba:	f7f4 fa67 	bl	800028c <__adddf3>
 800bdbe:	4604      	mov	r4, r0
 800bdc0:	460d      	mov	r5, r1
 800bdc2:	f7f4 fec9 	bl	8000b58 <__aeabi_d2iz>
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	4607      	mov	r7, r0
 800bdca:	2300      	movs	r3, #0
 800bdcc:	4620      	mov	r0, r4
 800bdce:	4629      	mov	r1, r5
 800bdd0:	f7f4 fe84 	bl	8000adc <__aeabi_dcmplt>
 800bdd4:	b140      	cbz	r0, 800bde8 <_dtoa_r+0x168>
 800bdd6:	4638      	mov	r0, r7
 800bdd8:	f7f4 fba4 	bl	8000524 <__aeabi_i2d>
 800bddc:	4622      	mov	r2, r4
 800bdde:	462b      	mov	r3, r5
 800bde0:	f7f4 fe72 	bl	8000ac8 <__aeabi_dcmpeq>
 800bde4:	b900      	cbnz	r0, 800bde8 <_dtoa_r+0x168>
 800bde6:	3f01      	subs	r7, #1
 800bde8:	2f16      	cmp	r7, #22
 800bdea:	d852      	bhi.n	800be92 <_dtoa_r+0x212>
 800bdec:	4b5d      	ldr	r3, [pc, #372]	@ (800bf64 <_dtoa_r+0x2e4>)
 800bdee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdfa:	f7f4 fe6f 	bl	8000adc <__aeabi_dcmplt>
 800bdfe:	2800      	cmp	r0, #0
 800be00:	d049      	beq.n	800be96 <_dtoa_r+0x216>
 800be02:	3f01      	subs	r7, #1
 800be04:	2300      	movs	r3, #0
 800be06:	930f      	str	r3, [sp, #60]	@ 0x3c
 800be08:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800be0a:	1b9b      	subs	r3, r3, r6
 800be0c:	1e5a      	subs	r2, r3, #1
 800be0e:	bf44      	itt	mi
 800be10:	f1c3 0801 	rsbmi	r8, r3, #1
 800be14:	2300      	movmi	r3, #0
 800be16:	9209      	str	r2, [sp, #36]	@ 0x24
 800be18:	bf54      	ite	pl
 800be1a:	f04f 0800 	movpl.w	r8, #0
 800be1e:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800be20:	2f00      	cmp	r7, #0
 800be22:	db3a      	blt.n	800be9a <_dtoa_r+0x21a>
 800be24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be26:	970e      	str	r7, [sp, #56]	@ 0x38
 800be28:	443b      	add	r3, r7
 800be2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800be2c:	2300      	movs	r3, #0
 800be2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800be30:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800be32:	2b09      	cmp	r3, #9
 800be34:	d865      	bhi.n	800bf02 <_dtoa_r+0x282>
 800be36:	2b05      	cmp	r3, #5
 800be38:	bfc4      	itt	gt
 800be3a:	3b04      	subgt	r3, #4
 800be3c:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800be3e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800be40:	f1a3 0302 	sub.w	r3, r3, #2
 800be44:	bfcc      	ite	gt
 800be46:	2400      	movgt	r4, #0
 800be48:	2401      	movle	r4, #1
 800be4a:	2b03      	cmp	r3, #3
 800be4c:	d864      	bhi.n	800bf18 <_dtoa_r+0x298>
 800be4e:	e8df f003 	tbb	[pc, r3]
 800be52:	382b      	.short	0x382b
 800be54:	5636      	.short	0x5636
 800be56:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800be5a:	441e      	add	r6, r3
 800be5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800be60:	2b20      	cmp	r3, #32
 800be62:	bfc1      	itttt	gt
 800be64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800be68:	fa08 f803 	lslgt.w	r8, r8, r3
 800be6c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800be70:	fa24 f303 	lsrgt.w	r3, r4, r3
 800be74:	bfd6      	itet	le
 800be76:	f1c3 0320 	rsble	r3, r3, #32
 800be7a:	ea48 0003 	orrgt.w	r0, r8, r3
 800be7e:	fa04 f003 	lslle.w	r0, r4, r3
 800be82:	f7f4 fb3f 	bl	8000504 <__aeabi_ui2d>
 800be86:	2201      	movs	r2, #1
 800be88:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800be8c:	3e01      	subs	r6, #1
 800be8e:	9212      	str	r2, [sp, #72]	@ 0x48
 800be90:	e776      	b.n	800bd80 <_dtoa_r+0x100>
 800be92:	2301      	movs	r3, #1
 800be94:	e7b7      	b.n	800be06 <_dtoa_r+0x186>
 800be96:	900f      	str	r0, [sp, #60]	@ 0x3c
 800be98:	e7b6      	b.n	800be08 <_dtoa_r+0x188>
 800be9a:	427b      	negs	r3, r7
 800be9c:	930a      	str	r3, [sp, #40]	@ 0x28
 800be9e:	2300      	movs	r3, #0
 800bea0:	eba8 0807 	sub.w	r8, r8, r7
 800bea4:	930e      	str	r3, [sp, #56]	@ 0x38
 800bea6:	e7c3      	b.n	800be30 <_dtoa_r+0x1b0>
 800bea8:	2300      	movs	r3, #0
 800beaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800beac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800beae:	2b00      	cmp	r3, #0
 800beb0:	dc35      	bgt.n	800bf1e <_dtoa_r+0x29e>
 800beb2:	2301      	movs	r3, #1
 800beb4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800beb8:	461a      	mov	r2, r3
 800beba:	9221      	str	r2, [sp, #132]	@ 0x84
 800bebc:	e00b      	b.n	800bed6 <_dtoa_r+0x256>
 800bebe:	2301      	movs	r3, #1
 800bec0:	e7f3      	b.n	800beaa <_dtoa_r+0x22a>
 800bec2:	2300      	movs	r3, #0
 800bec4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bec6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bec8:	18fb      	adds	r3, r7, r3
 800beca:	9308      	str	r3, [sp, #32]
 800becc:	3301      	adds	r3, #1
 800bece:	2b01      	cmp	r3, #1
 800bed0:	9307      	str	r3, [sp, #28]
 800bed2:	bfb8      	it	lt
 800bed4:	2301      	movlt	r3, #1
 800bed6:	f8db 001c 	ldr.w	r0, [fp, #28]
 800beda:	2100      	movs	r1, #0
 800bedc:	2204      	movs	r2, #4
 800bede:	f102 0514 	add.w	r5, r2, #20
 800bee2:	429d      	cmp	r5, r3
 800bee4:	d91f      	bls.n	800bf26 <_dtoa_r+0x2a6>
 800bee6:	6041      	str	r1, [r0, #4]
 800bee8:	4658      	mov	r0, fp
 800beea:	f000 fd91 	bl	800ca10 <_Balloc>
 800beee:	4682      	mov	sl, r0
 800bef0:	2800      	cmp	r0, #0
 800bef2:	d13b      	bne.n	800bf6c <_dtoa_r+0x2ec>
 800bef4:	4b1c      	ldr	r3, [pc, #112]	@ (800bf68 <_dtoa_r+0x2e8>)
 800bef6:	4602      	mov	r2, r0
 800bef8:	f240 11af 	movw	r1, #431	@ 0x1af
 800befc:	e6d4      	b.n	800bca8 <_dtoa_r+0x28>
 800befe:	2301      	movs	r3, #1
 800bf00:	e7e0      	b.n	800bec4 <_dtoa_r+0x244>
 800bf02:	2401      	movs	r4, #1
 800bf04:	2300      	movs	r3, #0
 800bf06:	9320      	str	r3, [sp, #128]	@ 0x80
 800bf08:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bf0a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf0e:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800bf12:	2200      	movs	r2, #0
 800bf14:	2312      	movs	r3, #18
 800bf16:	e7d0      	b.n	800beba <_dtoa_r+0x23a>
 800bf18:	2301      	movs	r3, #1
 800bf1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf1c:	e7f5      	b.n	800bf0a <_dtoa_r+0x28a>
 800bf1e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf20:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800bf24:	e7d7      	b.n	800bed6 <_dtoa_r+0x256>
 800bf26:	3101      	adds	r1, #1
 800bf28:	0052      	lsls	r2, r2, #1
 800bf2a:	e7d8      	b.n	800bede <_dtoa_r+0x25e>
 800bf2c:	f3af 8000 	nop.w
 800bf30:	636f4361 	.word	0x636f4361
 800bf34:	3fd287a7 	.word	0x3fd287a7
 800bf38:	8b60c8b3 	.word	0x8b60c8b3
 800bf3c:	3fc68a28 	.word	0x3fc68a28
 800bf40:	509f79fb 	.word	0x509f79fb
 800bf44:	3fd34413 	.word	0x3fd34413
 800bf48:	0800dcc1 	.word	0x0800dcc1
 800bf4c:	0800dcd8 	.word	0x0800dcd8
 800bf50:	7ff00000 	.word	0x7ff00000
 800bf54:	0800dcbd 	.word	0x0800dcbd
 800bf58:	0800dc91 	.word	0x0800dc91
 800bf5c:	0800dc90 	.word	0x0800dc90
 800bf60:	3ff80000 	.word	0x3ff80000
 800bf64:	0800ddd0 	.word	0x0800ddd0
 800bf68:	0800dd30 	.word	0x0800dd30
 800bf6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bf70:	6018      	str	r0, [r3, #0]
 800bf72:	9b07      	ldr	r3, [sp, #28]
 800bf74:	2b0e      	cmp	r3, #14
 800bf76:	f200 80a4 	bhi.w	800c0c2 <_dtoa_r+0x442>
 800bf7a:	2c00      	cmp	r4, #0
 800bf7c:	f000 80a1 	beq.w	800c0c2 <_dtoa_r+0x442>
 800bf80:	2f00      	cmp	r7, #0
 800bf82:	dd33      	ble.n	800bfec <_dtoa_r+0x36c>
 800bf84:	4b86      	ldr	r3, [pc, #536]	@ (800c1a0 <_dtoa_r+0x520>)
 800bf86:	f007 020f 	and.w	r2, r7, #15
 800bf8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bf92:	05f8      	lsls	r0, r7, #23
 800bf94:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bf98:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bf9c:	d516      	bpl.n	800bfcc <_dtoa_r+0x34c>
 800bf9e:	4b81      	ldr	r3, [pc, #516]	@ (800c1a4 <_dtoa_r+0x524>)
 800bfa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bfa4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bfa8:	f7f4 fc50 	bl	800084c <__aeabi_ddiv>
 800bfac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfb0:	f004 040f 	and.w	r4, r4, #15
 800bfb4:	2603      	movs	r6, #3
 800bfb6:	4d7b      	ldr	r5, [pc, #492]	@ (800c1a4 <_dtoa_r+0x524>)
 800bfb8:	b954      	cbnz	r4, 800bfd0 <_dtoa_r+0x350>
 800bfba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfc2:	f7f4 fc43 	bl	800084c <__aeabi_ddiv>
 800bfc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfca:	e028      	b.n	800c01e <_dtoa_r+0x39e>
 800bfcc:	2602      	movs	r6, #2
 800bfce:	e7f2      	b.n	800bfb6 <_dtoa_r+0x336>
 800bfd0:	07e1      	lsls	r1, r4, #31
 800bfd2:	d508      	bpl.n	800bfe6 <_dtoa_r+0x366>
 800bfd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bfdc:	f7f4 fb0c 	bl	80005f8 <__aeabi_dmul>
 800bfe0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfe4:	3601      	adds	r6, #1
 800bfe6:	1064      	asrs	r4, r4, #1
 800bfe8:	3508      	adds	r5, #8
 800bfea:	e7e5      	b.n	800bfb8 <_dtoa_r+0x338>
 800bfec:	f000 80d2 	beq.w	800c194 <_dtoa_r+0x514>
 800bff0:	427c      	negs	r4, r7
 800bff2:	4b6b      	ldr	r3, [pc, #428]	@ (800c1a0 <_dtoa_r+0x520>)
 800bff4:	4d6b      	ldr	r5, [pc, #428]	@ (800c1a4 <_dtoa_r+0x524>)
 800bff6:	f004 020f 	and.w	r2, r4, #15
 800bffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c002:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c006:	f7f4 faf7 	bl	80005f8 <__aeabi_dmul>
 800c00a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c00e:	1124      	asrs	r4, r4, #4
 800c010:	2300      	movs	r3, #0
 800c012:	2602      	movs	r6, #2
 800c014:	2c00      	cmp	r4, #0
 800c016:	f040 80b2 	bne.w	800c17e <_dtoa_r+0x4fe>
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d1d3      	bne.n	800bfc6 <_dtoa_r+0x346>
 800c01e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c020:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c024:	2b00      	cmp	r3, #0
 800c026:	f000 80b7 	beq.w	800c198 <_dtoa_r+0x518>
 800c02a:	4b5f      	ldr	r3, [pc, #380]	@ (800c1a8 <_dtoa_r+0x528>)
 800c02c:	2200      	movs	r2, #0
 800c02e:	4620      	mov	r0, r4
 800c030:	4629      	mov	r1, r5
 800c032:	f7f4 fd53 	bl	8000adc <__aeabi_dcmplt>
 800c036:	2800      	cmp	r0, #0
 800c038:	f000 80ae 	beq.w	800c198 <_dtoa_r+0x518>
 800c03c:	9b07      	ldr	r3, [sp, #28]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	f000 80aa 	beq.w	800c198 <_dtoa_r+0x518>
 800c044:	9b08      	ldr	r3, [sp, #32]
 800c046:	2b00      	cmp	r3, #0
 800c048:	dd37      	ble.n	800c0ba <_dtoa_r+0x43a>
 800c04a:	1e7b      	subs	r3, r7, #1
 800c04c:	9304      	str	r3, [sp, #16]
 800c04e:	4620      	mov	r0, r4
 800c050:	4b56      	ldr	r3, [pc, #344]	@ (800c1ac <_dtoa_r+0x52c>)
 800c052:	2200      	movs	r2, #0
 800c054:	4629      	mov	r1, r5
 800c056:	f7f4 facf 	bl	80005f8 <__aeabi_dmul>
 800c05a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c05e:	9c08      	ldr	r4, [sp, #32]
 800c060:	3601      	adds	r6, #1
 800c062:	4630      	mov	r0, r6
 800c064:	f7f4 fa5e 	bl	8000524 <__aeabi_i2d>
 800c068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c06c:	f7f4 fac4 	bl	80005f8 <__aeabi_dmul>
 800c070:	4b4f      	ldr	r3, [pc, #316]	@ (800c1b0 <_dtoa_r+0x530>)
 800c072:	2200      	movs	r2, #0
 800c074:	f7f4 f90a 	bl	800028c <__adddf3>
 800c078:	4605      	mov	r5, r0
 800c07a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c07e:	2c00      	cmp	r4, #0
 800c080:	f040 809a 	bne.w	800c1b8 <_dtoa_r+0x538>
 800c084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c088:	4b4a      	ldr	r3, [pc, #296]	@ (800c1b4 <_dtoa_r+0x534>)
 800c08a:	2200      	movs	r2, #0
 800c08c:	f7f4 f8fc 	bl	8000288 <__aeabi_dsub>
 800c090:	4602      	mov	r2, r0
 800c092:	460b      	mov	r3, r1
 800c094:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c098:	462a      	mov	r2, r5
 800c09a:	4633      	mov	r3, r6
 800c09c:	f7f4 fd3c 	bl	8000b18 <__aeabi_dcmpgt>
 800c0a0:	2800      	cmp	r0, #0
 800c0a2:	f040 828e 	bne.w	800c5c2 <_dtoa_r+0x942>
 800c0a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0aa:	462a      	mov	r2, r5
 800c0ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c0b0:	f7f4 fd14 	bl	8000adc <__aeabi_dcmplt>
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	f040 8127 	bne.w	800c308 <_dtoa_r+0x688>
 800c0ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c0be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c0c2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f2c0 8163 	blt.w	800c390 <_dtoa_r+0x710>
 800c0ca:	2f0e      	cmp	r7, #14
 800c0cc:	f300 8160 	bgt.w	800c390 <_dtoa_r+0x710>
 800c0d0:	4b33      	ldr	r3, [pc, #204]	@ (800c1a0 <_dtoa_r+0x520>)
 800c0d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c0d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c0da:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c0de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	da03      	bge.n	800c0ec <_dtoa_r+0x46c>
 800c0e4:	9b07      	ldr	r3, [sp, #28]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	f340 8100 	ble.w	800c2ec <_dtoa_r+0x66c>
 800c0ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c0f0:	4656      	mov	r6, sl
 800c0f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	4629      	mov	r1, r5
 800c0fa:	f7f4 fba7 	bl	800084c <__aeabi_ddiv>
 800c0fe:	f7f4 fd2b 	bl	8000b58 <__aeabi_d2iz>
 800c102:	4680      	mov	r8, r0
 800c104:	f7f4 fa0e 	bl	8000524 <__aeabi_i2d>
 800c108:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c10c:	f7f4 fa74 	bl	80005f8 <__aeabi_dmul>
 800c110:	4602      	mov	r2, r0
 800c112:	460b      	mov	r3, r1
 800c114:	4620      	mov	r0, r4
 800c116:	4629      	mov	r1, r5
 800c118:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c11c:	f7f4 f8b4 	bl	8000288 <__aeabi_dsub>
 800c120:	f806 4b01 	strb.w	r4, [r6], #1
 800c124:	9d07      	ldr	r5, [sp, #28]
 800c126:	eba6 040a 	sub.w	r4, r6, sl
 800c12a:	42a5      	cmp	r5, r4
 800c12c:	4602      	mov	r2, r0
 800c12e:	460b      	mov	r3, r1
 800c130:	f040 8116 	bne.w	800c360 <_dtoa_r+0x6e0>
 800c134:	f7f4 f8aa 	bl	800028c <__adddf3>
 800c138:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c13c:	4604      	mov	r4, r0
 800c13e:	460d      	mov	r5, r1
 800c140:	f7f4 fcea 	bl	8000b18 <__aeabi_dcmpgt>
 800c144:	2800      	cmp	r0, #0
 800c146:	f040 80f8 	bne.w	800c33a <_dtoa_r+0x6ba>
 800c14a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c14e:	4620      	mov	r0, r4
 800c150:	4629      	mov	r1, r5
 800c152:	f7f4 fcb9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c156:	b118      	cbz	r0, 800c160 <_dtoa_r+0x4e0>
 800c158:	f018 0f01 	tst.w	r8, #1
 800c15c:	f040 80ed 	bne.w	800c33a <_dtoa_r+0x6ba>
 800c160:	4649      	mov	r1, r9
 800c162:	4658      	mov	r0, fp
 800c164:	f000 fc94 	bl	800ca90 <_Bfree>
 800c168:	2300      	movs	r3, #0
 800c16a:	7033      	strb	r3, [r6, #0]
 800c16c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c16e:	3701      	adds	r7, #1
 800c170:	601f      	str	r7, [r3, #0]
 800c172:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c174:	2b00      	cmp	r3, #0
 800c176:	f000 8320 	beq.w	800c7ba <_dtoa_r+0xb3a>
 800c17a:	601e      	str	r6, [r3, #0]
 800c17c:	e31d      	b.n	800c7ba <_dtoa_r+0xb3a>
 800c17e:	07e2      	lsls	r2, r4, #31
 800c180:	d505      	bpl.n	800c18e <_dtoa_r+0x50e>
 800c182:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c186:	f7f4 fa37 	bl	80005f8 <__aeabi_dmul>
 800c18a:	3601      	adds	r6, #1
 800c18c:	2301      	movs	r3, #1
 800c18e:	1064      	asrs	r4, r4, #1
 800c190:	3508      	adds	r5, #8
 800c192:	e73f      	b.n	800c014 <_dtoa_r+0x394>
 800c194:	2602      	movs	r6, #2
 800c196:	e742      	b.n	800c01e <_dtoa_r+0x39e>
 800c198:	9c07      	ldr	r4, [sp, #28]
 800c19a:	9704      	str	r7, [sp, #16]
 800c19c:	e761      	b.n	800c062 <_dtoa_r+0x3e2>
 800c19e:	bf00      	nop
 800c1a0:	0800ddd0 	.word	0x0800ddd0
 800c1a4:	0800dda8 	.word	0x0800dda8
 800c1a8:	3ff00000 	.word	0x3ff00000
 800c1ac:	40240000 	.word	0x40240000
 800c1b0:	401c0000 	.word	0x401c0000
 800c1b4:	40140000 	.word	0x40140000
 800c1b8:	4b70      	ldr	r3, [pc, #448]	@ (800c37c <_dtoa_r+0x6fc>)
 800c1ba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c1bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c1c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c1c4:	4454      	add	r4, sl
 800c1c6:	2900      	cmp	r1, #0
 800c1c8:	d045      	beq.n	800c256 <_dtoa_r+0x5d6>
 800c1ca:	496d      	ldr	r1, [pc, #436]	@ (800c380 <_dtoa_r+0x700>)
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	f7f4 fb3d 	bl	800084c <__aeabi_ddiv>
 800c1d2:	4633      	mov	r3, r6
 800c1d4:	462a      	mov	r2, r5
 800c1d6:	f7f4 f857 	bl	8000288 <__aeabi_dsub>
 800c1da:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c1de:	4656      	mov	r6, sl
 800c1e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1e4:	f7f4 fcb8 	bl	8000b58 <__aeabi_d2iz>
 800c1e8:	4605      	mov	r5, r0
 800c1ea:	f7f4 f99b 	bl	8000524 <__aeabi_i2d>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1f6:	f7f4 f847 	bl	8000288 <__aeabi_dsub>
 800c1fa:	3530      	adds	r5, #48	@ 0x30
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	460b      	mov	r3, r1
 800c200:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c204:	f806 5b01 	strb.w	r5, [r6], #1
 800c208:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c20c:	f7f4 fc66 	bl	8000adc <__aeabi_dcmplt>
 800c210:	2800      	cmp	r0, #0
 800c212:	d163      	bne.n	800c2dc <_dtoa_r+0x65c>
 800c214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c218:	495a      	ldr	r1, [pc, #360]	@ (800c384 <_dtoa_r+0x704>)
 800c21a:	2000      	movs	r0, #0
 800c21c:	f7f4 f834 	bl	8000288 <__aeabi_dsub>
 800c220:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c224:	f7f4 fc5a 	bl	8000adc <__aeabi_dcmplt>
 800c228:	2800      	cmp	r0, #0
 800c22a:	f040 8087 	bne.w	800c33c <_dtoa_r+0x6bc>
 800c22e:	42a6      	cmp	r6, r4
 800c230:	f43f af43 	beq.w	800c0ba <_dtoa_r+0x43a>
 800c234:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c238:	4b53      	ldr	r3, [pc, #332]	@ (800c388 <_dtoa_r+0x708>)
 800c23a:	2200      	movs	r2, #0
 800c23c:	f7f4 f9dc 	bl	80005f8 <__aeabi_dmul>
 800c240:	4b51      	ldr	r3, [pc, #324]	@ (800c388 <_dtoa_r+0x708>)
 800c242:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c246:	2200      	movs	r2, #0
 800c248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c24c:	f7f4 f9d4 	bl	80005f8 <__aeabi_dmul>
 800c250:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c254:	e7c4      	b.n	800c1e0 <_dtoa_r+0x560>
 800c256:	4631      	mov	r1, r6
 800c258:	4628      	mov	r0, r5
 800c25a:	f7f4 f9cd 	bl	80005f8 <__aeabi_dmul>
 800c25e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c262:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c264:	4656      	mov	r6, sl
 800c266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c26a:	f7f4 fc75 	bl	8000b58 <__aeabi_d2iz>
 800c26e:	4605      	mov	r5, r0
 800c270:	f7f4 f958 	bl	8000524 <__aeabi_i2d>
 800c274:	4602      	mov	r2, r0
 800c276:	460b      	mov	r3, r1
 800c278:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c27c:	f7f4 f804 	bl	8000288 <__aeabi_dsub>
 800c280:	3530      	adds	r5, #48	@ 0x30
 800c282:	f806 5b01 	strb.w	r5, [r6], #1
 800c286:	4602      	mov	r2, r0
 800c288:	460b      	mov	r3, r1
 800c28a:	42a6      	cmp	r6, r4
 800c28c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c290:	f04f 0200 	mov.w	r2, #0
 800c294:	d124      	bne.n	800c2e0 <_dtoa_r+0x660>
 800c296:	4b3a      	ldr	r3, [pc, #232]	@ (800c380 <_dtoa_r+0x700>)
 800c298:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c29c:	f7f3 fff6 	bl	800028c <__adddf3>
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	460b      	mov	r3, r1
 800c2a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2a8:	f7f4 fc36 	bl	8000b18 <__aeabi_dcmpgt>
 800c2ac:	2800      	cmp	r0, #0
 800c2ae:	d145      	bne.n	800c33c <_dtoa_r+0x6bc>
 800c2b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c2b4:	4932      	ldr	r1, [pc, #200]	@ (800c380 <_dtoa_r+0x700>)
 800c2b6:	2000      	movs	r0, #0
 800c2b8:	f7f3 ffe6 	bl	8000288 <__aeabi_dsub>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	460b      	mov	r3, r1
 800c2c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2c4:	f7f4 fc0a 	bl	8000adc <__aeabi_dcmplt>
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	f43f aef6 	beq.w	800c0ba <_dtoa_r+0x43a>
 800c2ce:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c2d0:	1e73      	subs	r3, r6, #1
 800c2d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c2d4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c2d8:	2b30      	cmp	r3, #48	@ 0x30
 800c2da:	d0f8      	beq.n	800c2ce <_dtoa_r+0x64e>
 800c2dc:	9f04      	ldr	r7, [sp, #16]
 800c2de:	e73f      	b.n	800c160 <_dtoa_r+0x4e0>
 800c2e0:	4b29      	ldr	r3, [pc, #164]	@ (800c388 <_dtoa_r+0x708>)
 800c2e2:	f7f4 f989 	bl	80005f8 <__aeabi_dmul>
 800c2e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2ea:	e7bc      	b.n	800c266 <_dtoa_r+0x5e6>
 800c2ec:	d10c      	bne.n	800c308 <_dtoa_r+0x688>
 800c2ee:	4b27      	ldr	r3, [pc, #156]	@ (800c38c <_dtoa_r+0x70c>)
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2f6:	f7f4 f97f 	bl	80005f8 <__aeabi_dmul>
 800c2fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2fe:	f7f4 fc01 	bl	8000b04 <__aeabi_dcmpge>
 800c302:	2800      	cmp	r0, #0
 800c304:	f000 815b 	beq.w	800c5be <_dtoa_r+0x93e>
 800c308:	2400      	movs	r4, #0
 800c30a:	4625      	mov	r5, r4
 800c30c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c30e:	43db      	mvns	r3, r3
 800c310:	9304      	str	r3, [sp, #16]
 800c312:	4656      	mov	r6, sl
 800c314:	2700      	movs	r7, #0
 800c316:	4621      	mov	r1, r4
 800c318:	4658      	mov	r0, fp
 800c31a:	f000 fbb9 	bl	800ca90 <_Bfree>
 800c31e:	2d00      	cmp	r5, #0
 800c320:	d0dc      	beq.n	800c2dc <_dtoa_r+0x65c>
 800c322:	b12f      	cbz	r7, 800c330 <_dtoa_r+0x6b0>
 800c324:	42af      	cmp	r7, r5
 800c326:	d003      	beq.n	800c330 <_dtoa_r+0x6b0>
 800c328:	4639      	mov	r1, r7
 800c32a:	4658      	mov	r0, fp
 800c32c:	f000 fbb0 	bl	800ca90 <_Bfree>
 800c330:	4629      	mov	r1, r5
 800c332:	4658      	mov	r0, fp
 800c334:	f000 fbac 	bl	800ca90 <_Bfree>
 800c338:	e7d0      	b.n	800c2dc <_dtoa_r+0x65c>
 800c33a:	9704      	str	r7, [sp, #16]
 800c33c:	4633      	mov	r3, r6
 800c33e:	461e      	mov	r6, r3
 800c340:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c344:	2a39      	cmp	r2, #57	@ 0x39
 800c346:	d107      	bne.n	800c358 <_dtoa_r+0x6d8>
 800c348:	459a      	cmp	sl, r3
 800c34a:	d1f8      	bne.n	800c33e <_dtoa_r+0x6be>
 800c34c:	9a04      	ldr	r2, [sp, #16]
 800c34e:	3201      	adds	r2, #1
 800c350:	9204      	str	r2, [sp, #16]
 800c352:	2230      	movs	r2, #48	@ 0x30
 800c354:	f88a 2000 	strb.w	r2, [sl]
 800c358:	781a      	ldrb	r2, [r3, #0]
 800c35a:	3201      	adds	r2, #1
 800c35c:	701a      	strb	r2, [r3, #0]
 800c35e:	e7bd      	b.n	800c2dc <_dtoa_r+0x65c>
 800c360:	4b09      	ldr	r3, [pc, #36]	@ (800c388 <_dtoa_r+0x708>)
 800c362:	2200      	movs	r2, #0
 800c364:	f7f4 f948 	bl	80005f8 <__aeabi_dmul>
 800c368:	2200      	movs	r2, #0
 800c36a:	2300      	movs	r3, #0
 800c36c:	4604      	mov	r4, r0
 800c36e:	460d      	mov	r5, r1
 800c370:	f7f4 fbaa 	bl	8000ac8 <__aeabi_dcmpeq>
 800c374:	2800      	cmp	r0, #0
 800c376:	f43f aebc 	beq.w	800c0f2 <_dtoa_r+0x472>
 800c37a:	e6f1      	b.n	800c160 <_dtoa_r+0x4e0>
 800c37c:	0800ddd0 	.word	0x0800ddd0
 800c380:	3fe00000 	.word	0x3fe00000
 800c384:	3ff00000 	.word	0x3ff00000
 800c388:	40240000 	.word	0x40240000
 800c38c:	40140000 	.word	0x40140000
 800c390:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c392:	2a00      	cmp	r2, #0
 800c394:	f000 80db 	beq.w	800c54e <_dtoa_r+0x8ce>
 800c398:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c39a:	2a01      	cmp	r2, #1
 800c39c:	f300 80bf 	bgt.w	800c51e <_dtoa_r+0x89e>
 800c3a0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c3a2:	2a00      	cmp	r2, #0
 800c3a4:	f000 80b7 	beq.w	800c516 <_dtoa_r+0x896>
 800c3a8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c3ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c3ae:	4646      	mov	r6, r8
 800c3b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3b2:	2101      	movs	r1, #1
 800c3b4:	441a      	add	r2, r3
 800c3b6:	4658      	mov	r0, fp
 800c3b8:	4498      	add	r8, r3
 800c3ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800c3bc:	f000 fc1c 	bl	800cbf8 <__i2b>
 800c3c0:	4605      	mov	r5, r0
 800c3c2:	b15e      	cbz	r6, 800c3dc <_dtoa_r+0x75c>
 800c3c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	dd08      	ble.n	800c3dc <_dtoa_r+0x75c>
 800c3ca:	42b3      	cmp	r3, r6
 800c3cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3ce:	bfa8      	it	ge
 800c3d0:	4633      	movge	r3, r6
 800c3d2:	eba8 0803 	sub.w	r8, r8, r3
 800c3d6:	1af6      	subs	r6, r6, r3
 800c3d8:	1ad3      	subs	r3, r2, r3
 800c3da:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3de:	b1f3      	cbz	r3, 800c41e <_dtoa_r+0x79e>
 800c3e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	f000 80b7 	beq.w	800c556 <_dtoa_r+0x8d6>
 800c3e8:	b18c      	cbz	r4, 800c40e <_dtoa_r+0x78e>
 800c3ea:	4629      	mov	r1, r5
 800c3ec:	4622      	mov	r2, r4
 800c3ee:	4658      	mov	r0, fp
 800c3f0:	f000 fcc2 	bl	800cd78 <__pow5mult>
 800c3f4:	464a      	mov	r2, r9
 800c3f6:	4601      	mov	r1, r0
 800c3f8:	4605      	mov	r5, r0
 800c3fa:	4658      	mov	r0, fp
 800c3fc:	f000 fc12 	bl	800cc24 <__multiply>
 800c400:	4649      	mov	r1, r9
 800c402:	9004      	str	r0, [sp, #16]
 800c404:	4658      	mov	r0, fp
 800c406:	f000 fb43 	bl	800ca90 <_Bfree>
 800c40a:	9b04      	ldr	r3, [sp, #16]
 800c40c:	4699      	mov	r9, r3
 800c40e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c410:	1b1a      	subs	r2, r3, r4
 800c412:	d004      	beq.n	800c41e <_dtoa_r+0x79e>
 800c414:	4649      	mov	r1, r9
 800c416:	4658      	mov	r0, fp
 800c418:	f000 fcae 	bl	800cd78 <__pow5mult>
 800c41c:	4681      	mov	r9, r0
 800c41e:	2101      	movs	r1, #1
 800c420:	4658      	mov	r0, fp
 800c422:	f000 fbe9 	bl	800cbf8 <__i2b>
 800c426:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c428:	4604      	mov	r4, r0
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	f000 81c9 	beq.w	800c7c2 <_dtoa_r+0xb42>
 800c430:	461a      	mov	r2, r3
 800c432:	4601      	mov	r1, r0
 800c434:	4658      	mov	r0, fp
 800c436:	f000 fc9f 	bl	800cd78 <__pow5mult>
 800c43a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	4604      	mov	r4, r0
 800c440:	f300 808f 	bgt.w	800c562 <_dtoa_r+0x8e2>
 800c444:	9b02      	ldr	r3, [sp, #8]
 800c446:	2b00      	cmp	r3, #0
 800c448:	f040 8087 	bne.w	800c55a <_dtoa_r+0x8da>
 800c44c:	9b03      	ldr	r3, [sp, #12]
 800c44e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c452:	2b00      	cmp	r3, #0
 800c454:	f040 8083 	bne.w	800c55e <_dtoa_r+0x8de>
 800c458:	9b03      	ldr	r3, [sp, #12]
 800c45a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c45e:	0d1b      	lsrs	r3, r3, #20
 800c460:	051b      	lsls	r3, r3, #20
 800c462:	b12b      	cbz	r3, 800c470 <_dtoa_r+0x7f0>
 800c464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c466:	3301      	adds	r3, #1
 800c468:	9309      	str	r3, [sp, #36]	@ 0x24
 800c46a:	f108 0801 	add.w	r8, r8, #1
 800c46e:	2301      	movs	r3, #1
 800c470:	930a      	str	r3, [sp, #40]	@ 0x28
 800c472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c474:	2b00      	cmp	r3, #0
 800c476:	f000 81aa 	beq.w	800c7ce <_dtoa_r+0xb4e>
 800c47a:	6923      	ldr	r3, [r4, #16]
 800c47c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c480:	6918      	ldr	r0, [r3, #16]
 800c482:	f000 fb6d 	bl	800cb60 <__hi0bits>
 800c486:	f1c0 0020 	rsb	r0, r0, #32
 800c48a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c48c:	4418      	add	r0, r3
 800c48e:	f010 001f 	ands.w	r0, r0, #31
 800c492:	d071      	beq.n	800c578 <_dtoa_r+0x8f8>
 800c494:	f1c0 0320 	rsb	r3, r0, #32
 800c498:	2b04      	cmp	r3, #4
 800c49a:	dd65      	ble.n	800c568 <_dtoa_r+0x8e8>
 800c49c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c49e:	f1c0 001c 	rsb	r0, r0, #28
 800c4a2:	4403      	add	r3, r0
 800c4a4:	4480      	add	r8, r0
 800c4a6:	4406      	add	r6, r0
 800c4a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4aa:	f1b8 0f00 	cmp.w	r8, #0
 800c4ae:	dd05      	ble.n	800c4bc <_dtoa_r+0x83c>
 800c4b0:	4649      	mov	r1, r9
 800c4b2:	4642      	mov	r2, r8
 800c4b4:	4658      	mov	r0, fp
 800c4b6:	f000 fcb9 	bl	800ce2c <__lshift>
 800c4ba:	4681      	mov	r9, r0
 800c4bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	dd05      	ble.n	800c4ce <_dtoa_r+0x84e>
 800c4c2:	4621      	mov	r1, r4
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	4658      	mov	r0, fp
 800c4c8:	f000 fcb0 	bl	800ce2c <__lshift>
 800c4cc:	4604      	mov	r4, r0
 800c4ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d053      	beq.n	800c57c <_dtoa_r+0x8fc>
 800c4d4:	4621      	mov	r1, r4
 800c4d6:	4648      	mov	r0, r9
 800c4d8:	f000 fd14 	bl	800cf04 <__mcmp>
 800c4dc:	2800      	cmp	r0, #0
 800c4de:	da4d      	bge.n	800c57c <_dtoa_r+0x8fc>
 800c4e0:	1e7b      	subs	r3, r7, #1
 800c4e2:	9304      	str	r3, [sp, #16]
 800c4e4:	4649      	mov	r1, r9
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	220a      	movs	r2, #10
 800c4ea:	4658      	mov	r0, fp
 800c4ec:	f000 faf2 	bl	800cad4 <__multadd>
 800c4f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4f2:	4681      	mov	r9, r0
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	f000 816c 	beq.w	800c7d2 <_dtoa_r+0xb52>
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	4629      	mov	r1, r5
 800c4fe:	220a      	movs	r2, #10
 800c500:	4658      	mov	r0, fp
 800c502:	f000 fae7 	bl	800cad4 <__multadd>
 800c506:	9b08      	ldr	r3, [sp, #32]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	4605      	mov	r5, r0
 800c50c:	dc61      	bgt.n	800c5d2 <_dtoa_r+0x952>
 800c50e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c510:	2b02      	cmp	r3, #2
 800c512:	dc3b      	bgt.n	800c58c <_dtoa_r+0x90c>
 800c514:	e05d      	b.n	800c5d2 <_dtoa_r+0x952>
 800c516:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c518:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c51c:	e746      	b.n	800c3ac <_dtoa_r+0x72c>
 800c51e:	9b07      	ldr	r3, [sp, #28]
 800c520:	1e5c      	subs	r4, r3, #1
 800c522:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c524:	42a3      	cmp	r3, r4
 800c526:	bfbf      	itttt	lt
 800c528:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c52a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800c52c:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c52e:	1ae3      	sublt	r3, r4, r3
 800c530:	bfb4      	ite	lt
 800c532:	18d2      	addlt	r2, r2, r3
 800c534:	1b1c      	subge	r4, r3, r4
 800c536:	9b07      	ldr	r3, [sp, #28]
 800c538:	bfbc      	itt	lt
 800c53a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800c53c:	2400      	movlt	r4, #0
 800c53e:	2b00      	cmp	r3, #0
 800c540:	bfb5      	itete	lt
 800c542:	eba8 0603 	sublt.w	r6, r8, r3
 800c546:	9b07      	ldrge	r3, [sp, #28]
 800c548:	2300      	movlt	r3, #0
 800c54a:	4646      	movge	r6, r8
 800c54c:	e730      	b.n	800c3b0 <_dtoa_r+0x730>
 800c54e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c550:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c552:	4646      	mov	r6, r8
 800c554:	e735      	b.n	800c3c2 <_dtoa_r+0x742>
 800c556:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c558:	e75c      	b.n	800c414 <_dtoa_r+0x794>
 800c55a:	2300      	movs	r3, #0
 800c55c:	e788      	b.n	800c470 <_dtoa_r+0x7f0>
 800c55e:	9b02      	ldr	r3, [sp, #8]
 800c560:	e786      	b.n	800c470 <_dtoa_r+0x7f0>
 800c562:	2300      	movs	r3, #0
 800c564:	930a      	str	r3, [sp, #40]	@ 0x28
 800c566:	e788      	b.n	800c47a <_dtoa_r+0x7fa>
 800c568:	d09f      	beq.n	800c4aa <_dtoa_r+0x82a>
 800c56a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c56c:	331c      	adds	r3, #28
 800c56e:	441a      	add	r2, r3
 800c570:	4498      	add	r8, r3
 800c572:	441e      	add	r6, r3
 800c574:	9209      	str	r2, [sp, #36]	@ 0x24
 800c576:	e798      	b.n	800c4aa <_dtoa_r+0x82a>
 800c578:	4603      	mov	r3, r0
 800c57a:	e7f6      	b.n	800c56a <_dtoa_r+0x8ea>
 800c57c:	9b07      	ldr	r3, [sp, #28]
 800c57e:	9704      	str	r7, [sp, #16]
 800c580:	2b00      	cmp	r3, #0
 800c582:	dc20      	bgt.n	800c5c6 <_dtoa_r+0x946>
 800c584:	9308      	str	r3, [sp, #32]
 800c586:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c588:	2b02      	cmp	r3, #2
 800c58a:	dd1e      	ble.n	800c5ca <_dtoa_r+0x94a>
 800c58c:	9b08      	ldr	r3, [sp, #32]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	f47f aebc 	bne.w	800c30c <_dtoa_r+0x68c>
 800c594:	4621      	mov	r1, r4
 800c596:	2205      	movs	r2, #5
 800c598:	4658      	mov	r0, fp
 800c59a:	f000 fa9b 	bl	800cad4 <__multadd>
 800c59e:	4601      	mov	r1, r0
 800c5a0:	4604      	mov	r4, r0
 800c5a2:	4648      	mov	r0, r9
 800c5a4:	f000 fcae 	bl	800cf04 <__mcmp>
 800c5a8:	2800      	cmp	r0, #0
 800c5aa:	f77f aeaf 	ble.w	800c30c <_dtoa_r+0x68c>
 800c5ae:	4656      	mov	r6, sl
 800c5b0:	2331      	movs	r3, #49	@ 0x31
 800c5b2:	f806 3b01 	strb.w	r3, [r6], #1
 800c5b6:	9b04      	ldr	r3, [sp, #16]
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	9304      	str	r3, [sp, #16]
 800c5bc:	e6aa      	b.n	800c314 <_dtoa_r+0x694>
 800c5be:	9c07      	ldr	r4, [sp, #28]
 800c5c0:	9704      	str	r7, [sp, #16]
 800c5c2:	4625      	mov	r5, r4
 800c5c4:	e7f3      	b.n	800c5ae <_dtoa_r+0x92e>
 800c5c6:	9b07      	ldr	r3, [sp, #28]
 800c5c8:	9308      	str	r3, [sp, #32]
 800c5ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	f000 8104 	beq.w	800c7da <_dtoa_r+0xb5a>
 800c5d2:	2e00      	cmp	r6, #0
 800c5d4:	dd05      	ble.n	800c5e2 <_dtoa_r+0x962>
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	4632      	mov	r2, r6
 800c5da:	4658      	mov	r0, fp
 800c5dc:	f000 fc26 	bl	800ce2c <__lshift>
 800c5e0:	4605      	mov	r5, r0
 800c5e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d05a      	beq.n	800c69e <_dtoa_r+0xa1e>
 800c5e8:	6869      	ldr	r1, [r5, #4]
 800c5ea:	4658      	mov	r0, fp
 800c5ec:	f000 fa10 	bl	800ca10 <_Balloc>
 800c5f0:	4606      	mov	r6, r0
 800c5f2:	b928      	cbnz	r0, 800c600 <_dtoa_r+0x980>
 800c5f4:	4b84      	ldr	r3, [pc, #528]	@ (800c808 <_dtoa_r+0xb88>)
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c5fc:	f7ff bb54 	b.w	800bca8 <_dtoa_r+0x28>
 800c600:	692a      	ldr	r2, [r5, #16]
 800c602:	3202      	adds	r2, #2
 800c604:	0092      	lsls	r2, r2, #2
 800c606:	f105 010c 	add.w	r1, r5, #12
 800c60a:	300c      	adds	r0, #12
 800c60c:	f000 ffaa 	bl	800d564 <memcpy>
 800c610:	2201      	movs	r2, #1
 800c612:	4631      	mov	r1, r6
 800c614:	4658      	mov	r0, fp
 800c616:	f000 fc09 	bl	800ce2c <__lshift>
 800c61a:	f10a 0301 	add.w	r3, sl, #1
 800c61e:	9307      	str	r3, [sp, #28]
 800c620:	9b08      	ldr	r3, [sp, #32]
 800c622:	4453      	add	r3, sl
 800c624:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c626:	9b02      	ldr	r3, [sp, #8]
 800c628:	f003 0301 	and.w	r3, r3, #1
 800c62c:	462f      	mov	r7, r5
 800c62e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c630:	4605      	mov	r5, r0
 800c632:	9b07      	ldr	r3, [sp, #28]
 800c634:	4621      	mov	r1, r4
 800c636:	3b01      	subs	r3, #1
 800c638:	4648      	mov	r0, r9
 800c63a:	9302      	str	r3, [sp, #8]
 800c63c:	f7ff fa97 	bl	800bb6e <quorem>
 800c640:	4639      	mov	r1, r7
 800c642:	9008      	str	r0, [sp, #32]
 800c644:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c648:	4648      	mov	r0, r9
 800c64a:	f000 fc5b 	bl	800cf04 <__mcmp>
 800c64e:	462a      	mov	r2, r5
 800c650:	9009      	str	r0, [sp, #36]	@ 0x24
 800c652:	4621      	mov	r1, r4
 800c654:	4658      	mov	r0, fp
 800c656:	f000 fc71 	bl	800cf3c <__mdiff>
 800c65a:	68c2      	ldr	r2, [r0, #12]
 800c65c:	4606      	mov	r6, r0
 800c65e:	bb02      	cbnz	r2, 800c6a2 <_dtoa_r+0xa22>
 800c660:	4601      	mov	r1, r0
 800c662:	4648      	mov	r0, r9
 800c664:	f000 fc4e 	bl	800cf04 <__mcmp>
 800c668:	4602      	mov	r2, r0
 800c66a:	4631      	mov	r1, r6
 800c66c:	4658      	mov	r0, fp
 800c66e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c670:	f000 fa0e 	bl	800ca90 <_Bfree>
 800c674:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c676:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c678:	9e07      	ldr	r6, [sp, #28]
 800c67a:	ea43 0102 	orr.w	r1, r3, r2
 800c67e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c680:	4319      	orrs	r1, r3
 800c682:	d110      	bne.n	800c6a6 <_dtoa_r+0xa26>
 800c684:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c688:	d029      	beq.n	800c6de <_dtoa_r+0xa5e>
 800c68a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	dd02      	ble.n	800c696 <_dtoa_r+0xa16>
 800c690:	9b08      	ldr	r3, [sp, #32]
 800c692:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c696:	9b02      	ldr	r3, [sp, #8]
 800c698:	f883 8000 	strb.w	r8, [r3]
 800c69c:	e63b      	b.n	800c316 <_dtoa_r+0x696>
 800c69e:	4628      	mov	r0, r5
 800c6a0:	e7bb      	b.n	800c61a <_dtoa_r+0x99a>
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	e7e1      	b.n	800c66a <_dtoa_r+0x9ea>
 800c6a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	db04      	blt.n	800c6b6 <_dtoa_r+0xa36>
 800c6ac:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800c6ae:	430b      	orrs	r3, r1
 800c6b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c6b2:	430b      	orrs	r3, r1
 800c6b4:	d120      	bne.n	800c6f8 <_dtoa_r+0xa78>
 800c6b6:	2a00      	cmp	r2, #0
 800c6b8:	dded      	ble.n	800c696 <_dtoa_r+0xa16>
 800c6ba:	4649      	mov	r1, r9
 800c6bc:	2201      	movs	r2, #1
 800c6be:	4658      	mov	r0, fp
 800c6c0:	f000 fbb4 	bl	800ce2c <__lshift>
 800c6c4:	4621      	mov	r1, r4
 800c6c6:	4681      	mov	r9, r0
 800c6c8:	f000 fc1c 	bl	800cf04 <__mcmp>
 800c6cc:	2800      	cmp	r0, #0
 800c6ce:	dc03      	bgt.n	800c6d8 <_dtoa_r+0xa58>
 800c6d0:	d1e1      	bne.n	800c696 <_dtoa_r+0xa16>
 800c6d2:	f018 0f01 	tst.w	r8, #1
 800c6d6:	d0de      	beq.n	800c696 <_dtoa_r+0xa16>
 800c6d8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c6dc:	d1d8      	bne.n	800c690 <_dtoa_r+0xa10>
 800c6de:	9a02      	ldr	r2, [sp, #8]
 800c6e0:	2339      	movs	r3, #57	@ 0x39
 800c6e2:	7013      	strb	r3, [r2, #0]
 800c6e4:	4633      	mov	r3, r6
 800c6e6:	461e      	mov	r6, r3
 800c6e8:	3b01      	subs	r3, #1
 800c6ea:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c6ee:	2a39      	cmp	r2, #57	@ 0x39
 800c6f0:	d052      	beq.n	800c798 <_dtoa_r+0xb18>
 800c6f2:	3201      	adds	r2, #1
 800c6f4:	701a      	strb	r2, [r3, #0]
 800c6f6:	e60e      	b.n	800c316 <_dtoa_r+0x696>
 800c6f8:	2a00      	cmp	r2, #0
 800c6fa:	dd07      	ble.n	800c70c <_dtoa_r+0xa8c>
 800c6fc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c700:	d0ed      	beq.n	800c6de <_dtoa_r+0xa5e>
 800c702:	9a02      	ldr	r2, [sp, #8]
 800c704:	f108 0301 	add.w	r3, r8, #1
 800c708:	7013      	strb	r3, [r2, #0]
 800c70a:	e604      	b.n	800c316 <_dtoa_r+0x696>
 800c70c:	9b07      	ldr	r3, [sp, #28]
 800c70e:	9a07      	ldr	r2, [sp, #28]
 800c710:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c714:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c716:	4293      	cmp	r3, r2
 800c718:	d028      	beq.n	800c76c <_dtoa_r+0xaec>
 800c71a:	4649      	mov	r1, r9
 800c71c:	2300      	movs	r3, #0
 800c71e:	220a      	movs	r2, #10
 800c720:	4658      	mov	r0, fp
 800c722:	f000 f9d7 	bl	800cad4 <__multadd>
 800c726:	42af      	cmp	r7, r5
 800c728:	4681      	mov	r9, r0
 800c72a:	f04f 0300 	mov.w	r3, #0
 800c72e:	f04f 020a 	mov.w	r2, #10
 800c732:	4639      	mov	r1, r7
 800c734:	4658      	mov	r0, fp
 800c736:	d107      	bne.n	800c748 <_dtoa_r+0xac8>
 800c738:	f000 f9cc 	bl	800cad4 <__multadd>
 800c73c:	4607      	mov	r7, r0
 800c73e:	4605      	mov	r5, r0
 800c740:	9b07      	ldr	r3, [sp, #28]
 800c742:	3301      	adds	r3, #1
 800c744:	9307      	str	r3, [sp, #28]
 800c746:	e774      	b.n	800c632 <_dtoa_r+0x9b2>
 800c748:	f000 f9c4 	bl	800cad4 <__multadd>
 800c74c:	4629      	mov	r1, r5
 800c74e:	4607      	mov	r7, r0
 800c750:	2300      	movs	r3, #0
 800c752:	220a      	movs	r2, #10
 800c754:	4658      	mov	r0, fp
 800c756:	f000 f9bd 	bl	800cad4 <__multadd>
 800c75a:	4605      	mov	r5, r0
 800c75c:	e7f0      	b.n	800c740 <_dtoa_r+0xac0>
 800c75e:	9b08      	ldr	r3, [sp, #32]
 800c760:	2b00      	cmp	r3, #0
 800c762:	bfcc      	ite	gt
 800c764:	461e      	movgt	r6, r3
 800c766:	2601      	movle	r6, #1
 800c768:	4456      	add	r6, sl
 800c76a:	2700      	movs	r7, #0
 800c76c:	4649      	mov	r1, r9
 800c76e:	2201      	movs	r2, #1
 800c770:	4658      	mov	r0, fp
 800c772:	f000 fb5b 	bl	800ce2c <__lshift>
 800c776:	4621      	mov	r1, r4
 800c778:	4681      	mov	r9, r0
 800c77a:	f000 fbc3 	bl	800cf04 <__mcmp>
 800c77e:	2800      	cmp	r0, #0
 800c780:	dcb0      	bgt.n	800c6e4 <_dtoa_r+0xa64>
 800c782:	d102      	bne.n	800c78a <_dtoa_r+0xb0a>
 800c784:	f018 0f01 	tst.w	r8, #1
 800c788:	d1ac      	bne.n	800c6e4 <_dtoa_r+0xa64>
 800c78a:	4633      	mov	r3, r6
 800c78c:	461e      	mov	r6, r3
 800c78e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c792:	2a30      	cmp	r2, #48	@ 0x30
 800c794:	d0fa      	beq.n	800c78c <_dtoa_r+0xb0c>
 800c796:	e5be      	b.n	800c316 <_dtoa_r+0x696>
 800c798:	459a      	cmp	sl, r3
 800c79a:	d1a4      	bne.n	800c6e6 <_dtoa_r+0xa66>
 800c79c:	9b04      	ldr	r3, [sp, #16]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	9304      	str	r3, [sp, #16]
 800c7a2:	2331      	movs	r3, #49	@ 0x31
 800c7a4:	f88a 3000 	strb.w	r3, [sl]
 800c7a8:	e5b5      	b.n	800c316 <_dtoa_r+0x696>
 800c7aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c7ac:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c80c <_dtoa_r+0xb8c>
 800c7b0:	b11b      	cbz	r3, 800c7ba <_dtoa_r+0xb3a>
 800c7b2:	f10a 0308 	add.w	r3, sl, #8
 800c7b6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c7b8:	6013      	str	r3, [r2, #0]
 800c7ba:	4650      	mov	r0, sl
 800c7bc:	b017      	add	sp, #92	@ 0x5c
 800c7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	f77f ae3d 	ble.w	800c444 <_dtoa_r+0x7c4>
 800c7ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7cc:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7ce:	2001      	movs	r0, #1
 800c7d0:	e65b      	b.n	800c48a <_dtoa_r+0x80a>
 800c7d2:	9b08      	ldr	r3, [sp, #32]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	f77f aed6 	ble.w	800c586 <_dtoa_r+0x906>
 800c7da:	4656      	mov	r6, sl
 800c7dc:	4621      	mov	r1, r4
 800c7de:	4648      	mov	r0, r9
 800c7e0:	f7ff f9c5 	bl	800bb6e <quorem>
 800c7e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c7e8:	f806 8b01 	strb.w	r8, [r6], #1
 800c7ec:	9b08      	ldr	r3, [sp, #32]
 800c7ee:	eba6 020a 	sub.w	r2, r6, sl
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	ddb3      	ble.n	800c75e <_dtoa_r+0xade>
 800c7f6:	4649      	mov	r1, r9
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	220a      	movs	r2, #10
 800c7fc:	4658      	mov	r0, fp
 800c7fe:	f000 f969 	bl	800cad4 <__multadd>
 800c802:	4681      	mov	r9, r0
 800c804:	e7ea      	b.n	800c7dc <_dtoa_r+0xb5c>
 800c806:	bf00      	nop
 800c808:	0800dd30 	.word	0x0800dd30
 800c80c:	0800dcb4 	.word	0x0800dcb4

0800c810 <_free_r>:
 800c810:	b538      	push	{r3, r4, r5, lr}
 800c812:	4605      	mov	r5, r0
 800c814:	2900      	cmp	r1, #0
 800c816:	d041      	beq.n	800c89c <_free_r+0x8c>
 800c818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c81c:	1f0c      	subs	r4, r1, #4
 800c81e:	2b00      	cmp	r3, #0
 800c820:	bfb8      	it	lt
 800c822:	18e4      	addlt	r4, r4, r3
 800c824:	f000 f8e8 	bl	800c9f8 <__malloc_lock>
 800c828:	4a1d      	ldr	r2, [pc, #116]	@ (800c8a0 <_free_r+0x90>)
 800c82a:	6813      	ldr	r3, [r2, #0]
 800c82c:	b933      	cbnz	r3, 800c83c <_free_r+0x2c>
 800c82e:	6063      	str	r3, [r4, #4]
 800c830:	6014      	str	r4, [r2, #0]
 800c832:	4628      	mov	r0, r5
 800c834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c838:	f000 b8e4 	b.w	800ca04 <__malloc_unlock>
 800c83c:	42a3      	cmp	r3, r4
 800c83e:	d908      	bls.n	800c852 <_free_r+0x42>
 800c840:	6820      	ldr	r0, [r4, #0]
 800c842:	1821      	adds	r1, r4, r0
 800c844:	428b      	cmp	r3, r1
 800c846:	bf01      	itttt	eq
 800c848:	6819      	ldreq	r1, [r3, #0]
 800c84a:	685b      	ldreq	r3, [r3, #4]
 800c84c:	1809      	addeq	r1, r1, r0
 800c84e:	6021      	streq	r1, [r4, #0]
 800c850:	e7ed      	b.n	800c82e <_free_r+0x1e>
 800c852:	461a      	mov	r2, r3
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	b10b      	cbz	r3, 800c85c <_free_r+0x4c>
 800c858:	42a3      	cmp	r3, r4
 800c85a:	d9fa      	bls.n	800c852 <_free_r+0x42>
 800c85c:	6811      	ldr	r1, [r2, #0]
 800c85e:	1850      	adds	r0, r2, r1
 800c860:	42a0      	cmp	r0, r4
 800c862:	d10b      	bne.n	800c87c <_free_r+0x6c>
 800c864:	6820      	ldr	r0, [r4, #0]
 800c866:	4401      	add	r1, r0
 800c868:	1850      	adds	r0, r2, r1
 800c86a:	4283      	cmp	r3, r0
 800c86c:	6011      	str	r1, [r2, #0]
 800c86e:	d1e0      	bne.n	800c832 <_free_r+0x22>
 800c870:	6818      	ldr	r0, [r3, #0]
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	6053      	str	r3, [r2, #4]
 800c876:	4408      	add	r0, r1
 800c878:	6010      	str	r0, [r2, #0]
 800c87a:	e7da      	b.n	800c832 <_free_r+0x22>
 800c87c:	d902      	bls.n	800c884 <_free_r+0x74>
 800c87e:	230c      	movs	r3, #12
 800c880:	602b      	str	r3, [r5, #0]
 800c882:	e7d6      	b.n	800c832 <_free_r+0x22>
 800c884:	6820      	ldr	r0, [r4, #0]
 800c886:	1821      	adds	r1, r4, r0
 800c888:	428b      	cmp	r3, r1
 800c88a:	bf04      	itt	eq
 800c88c:	6819      	ldreq	r1, [r3, #0]
 800c88e:	685b      	ldreq	r3, [r3, #4]
 800c890:	6063      	str	r3, [r4, #4]
 800c892:	bf04      	itt	eq
 800c894:	1809      	addeq	r1, r1, r0
 800c896:	6021      	streq	r1, [r4, #0]
 800c898:	6054      	str	r4, [r2, #4]
 800c89a:	e7ca      	b.n	800c832 <_free_r+0x22>
 800c89c:	bd38      	pop	{r3, r4, r5, pc}
 800c89e:	bf00      	nop
 800c8a0:	20002208 	.word	0x20002208

0800c8a4 <malloc>:
 800c8a4:	4b02      	ldr	r3, [pc, #8]	@ (800c8b0 <malloc+0xc>)
 800c8a6:	4601      	mov	r1, r0
 800c8a8:	6818      	ldr	r0, [r3, #0]
 800c8aa:	f000 b825 	b.w	800c8f8 <_malloc_r>
 800c8ae:	bf00      	nop
 800c8b0:	20000108 	.word	0x20000108

0800c8b4 <sbrk_aligned>:
 800c8b4:	b570      	push	{r4, r5, r6, lr}
 800c8b6:	4e0f      	ldr	r6, [pc, #60]	@ (800c8f4 <sbrk_aligned+0x40>)
 800c8b8:	460c      	mov	r4, r1
 800c8ba:	6831      	ldr	r1, [r6, #0]
 800c8bc:	4605      	mov	r5, r0
 800c8be:	b911      	cbnz	r1, 800c8c6 <sbrk_aligned+0x12>
 800c8c0:	f000 fe40 	bl	800d544 <_sbrk_r>
 800c8c4:	6030      	str	r0, [r6, #0]
 800c8c6:	4621      	mov	r1, r4
 800c8c8:	4628      	mov	r0, r5
 800c8ca:	f000 fe3b 	bl	800d544 <_sbrk_r>
 800c8ce:	1c43      	adds	r3, r0, #1
 800c8d0:	d103      	bne.n	800c8da <sbrk_aligned+0x26>
 800c8d2:	f04f 34ff 	mov.w	r4, #4294967295
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	bd70      	pop	{r4, r5, r6, pc}
 800c8da:	1cc4      	adds	r4, r0, #3
 800c8dc:	f024 0403 	bic.w	r4, r4, #3
 800c8e0:	42a0      	cmp	r0, r4
 800c8e2:	d0f8      	beq.n	800c8d6 <sbrk_aligned+0x22>
 800c8e4:	1a21      	subs	r1, r4, r0
 800c8e6:	4628      	mov	r0, r5
 800c8e8:	f000 fe2c 	bl	800d544 <_sbrk_r>
 800c8ec:	3001      	adds	r0, #1
 800c8ee:	d1f2      	bne.n	800c8d6 <sbrk_aligned+0x22>
 800c8f0:	e7ef      	b.n	800c8d2 <sbrk_aligned+0x1e>
 800c8f2:	bf00      	nop
 800c8f4:	20002204 	.word	0x20002204

0800c8f8 <_malloc_r>:
 800c8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8fc:	1ccd      	adds	r5, r1, #3
 800c8fe:	f025 0503 	bic.w	r5, r5, #3
 800c902:	3508      	adds	r5, #8
 800c904:	2d0c      	cmp	r5, #12
 800c906:	bf38      	it	cc
 800c908:	250c      	movcc	r5, #12
 800c90a:	2d00      	cmp	r5, #0
 800c90c:	4606      	mov	r6, r0
 800c90e:	db01      	blt.n	800c914 <_malloc_r+0x1c>
 800c910:	42a9      	cmp	r1, r5
 800c912:	d904      	bls.n	800c91e <_malloc_r+0x26>
 800c914:	230c      	movs	r3, #12
 800c916:	6033      	str	r3, [r6, #0]
 800c918:	2000      	movs	r0, #0
 800c91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c91e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c9f4 <_malloc_r+0xfc>
 800c922:	f000 f869 	bl	800c9f8 <__malloc_lock>
 800c926:	f8d8 3000 	ldr.w	r3, [r8]
 800c92a:	461c      	mov	r4, r3
 800c92c:	bb44      	cbnz	r4, 800c980 <_malloc_r+0x88>
 800c92e:	4629      	mov	r1, r5
 800c930:	4630      	mov	r0, r6
 800c932:	f7ff ffbf 	bl	800c8b4 <sbrk_aligned>
 800c936:	1c43      	adds	r3, r0, #1
 800c938:	4604      	mov	r4, r0
 800c93a:	d158      	bne.n	800c9ee <_malloc_r+0xf6>
 800c93c:	f8d8 4000 	ldr.w	r4, [r8]
 800c940:	4627      	mov	r7, r4
 800c942:	2f00      	cmp	r7, #0
 800c944:	d143      	bne.n	800c9ce <_malloc_r+0xd6>
 800c946:	2c00      	cmp	r4, #0
 800c948:	d04b      	beq.n	800c9e2 <_malloc_r+0xea>
 800c94a:	6823      	ldr	r3, [r4, #0]
 800c94c:	4639      	mov	r1, r7
 800c94e:	4630      	mov	r0, r6
 800c950:	eb04 0903 	add.w	r9, r4, r3
 800c954:	f000 fdf6 	bl	800d544 <_sbrk_r>
 800c958:	4581      	cmp	r9, r0
 800c95a:	d142      	bne.n	800c9e2 <_malloc_r+0xea>
 800c95c:	6821      	ldr	r1, [r4, #0]
 800c95e:	1a6d      	subs	r5, r5, r1
 800c960:	4629      	mov	r1, r5
 800c962:	4630      	mov	r0, r6
 800c964:	f7ff ffa6 	bl	800c8b4 <sbrk_aligned>
 800c968:	3001      	adds	r0, #1
 800c96a:	d03a      	beq.n	800c9e2 <_malloc_r+0xea>
 800c96c:	6823      	ldr	r3, [r4, #0]
 800c96e:	442b      	add	r3, r5
 800c970:	6023      	str	r3, [r4, #0]
 800c972:	f8d8 3000 	ldr.w	r3, [r8]
 800c976:	685a      	ldr	r2, [r3, #4]
 800c978:	bb62      	cbnz	r2, 800c9d4 <_malloc_r+0xdc>
 800c97a:	f8c8 7000 	str.w	r7, [r8]
 800c97e:	e00f      	b.n	800c9a0 <_malloc_r+0xa8>
 800c980:	6822      	ldr	r2, [r4, #0]
 800c982:	1b52      	subs	r2, r2, r5
 800c984:	d420      	bmi.n	800c9c8 <_malloc_r+0xd0>
 800c986:	2a0b      	cmp	r2, #11
 800c988:	d917      	bls.n	800c9ba <_malloc_r+0xc2>
 800c98a:	1961      	adds	r1, r4, r5
 800c98c:	42a3      	cmp	r3, r4
 800c98e:	6025      	str	r5, [r4, #0]
 800c990:	bf18      	it	ne
 800c992:	6059      	strne	r1, [r3, #4]
 800c994:	6863      	ldr	r3, [r4, #4]
 800c996:	bf08      	it	eq
 800c998:	f8c8 1000 	streq.w	r1, [r8]
 800c99c:	5162      	str	r2, [r4, r5]
 800c99e:	604b      	str	r3, [r1, #4]
 800c9a0:	4630      	mov	r0, r6
 800c9a2:	f000 f82f 	bl	800ca04 <__malloc_unlock>
 800c9a6:	f104 000b 	add.w	r0, r4, #11
 800c9aa:	1d23      	adds	r3, r4, #4
 800c9ac:	f020 0007 	bic.w	r0, r0, #7
 800c9b0:	1ac2      	subs	r2, r0, r3
 800c9b2:	bf1c      	itt	ne
 800c9b4:	1a1b      	subne	r3, r3, r0
 800c9b6:	50a3      	strne	r3, [r4, r2]
 800c9b8:	e7af      	b.n	800c91a <_malloc_r+0x22>
 800c9ba:	6862      	ldr	r2, [r4, #4]
 800c9bc:	42a3      	cmp	r3, r4
 800c9be:	bf0c      	ite	eq
 800c9c0:	f8c8 2000 	streq.w	r2, [r8]
 800c9c4:	605a      	strne	r2, [r3, #4]
 800c9c6:	e7eb      	b.n	800c9a0 <_malloc_r+0xa8>
 800c9c8:	4623      	mov	r3, r4
 800c9ca:	6864      	ldr	r4, [r4, #4]
 800c9cc:	e7ae      	b.n	800c92c <_malloc_r+0x34>
 800c9ce:	463c      	mov	r4, r7
 800c9d0:	687f      	ldr	r7, [r7, #4]
 800c9d2:	e7b6      	b.n	800c942 <_malloc_r+0x4a>
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	42a3      	cmp	r3, r4
 800c9da:	d1fb      	bne.n	800c9d4 <_malloc_r+0xdc>
 800c9dc:	2300      	movs	r3, #0
 800c9de:	6053      	str	r3, [r2, #4]
 800c9e0:	e7de      	b.n	800c9a0 <_malloc_r+0xa8>
 800c9e2:	230c      	movs	r3, #12
 800c9e4:	6033      	str	r3, [r6, #0]
 800c9e6:	4630      	mov	r0, r6
 800c9e8:	f000 f80c 	bl	800ca04 <__malloc_unlock>
 800c9ec:	e794      	b.n	800c918 <_malloc_r+0x20>
 800c9ee:	6005      	str	r5, [r0, #0]
 800c9f0:	e7d6      	b.n	800c9a0 <_malloc_r+0xa8>
 800c9f2:	bf00      	nop
 800c9f4:	20002208 	.word	0x20002208

0800c9f8 <__malloc_lock>:
 800c9f8:	4801      	ldr	r0, [pc, #4]	@ (800ca00 <__malloc_lock+0x8>)
 800c9fa:	f7ff b8b6 	b.w	800bb6a <__retarget_lock_acquire_recursive>
 800c9fe:	bf00      	nop
 800ca00:	20002200 	.word	0x20002200

0800ca04 <__malloc_unlock>:
 800ca04:	4801      	ldr	r0, [pc, #4]	@ (800ca0c <__malloc_unlock+0x8>)
 800ca06:	f7ff b8b1 	b.w	800bb6c <__retarget_lock_release_recursive>
 800ca0a:	bf00      	nop
 800ca0c:	20002200 	.word	0x20002200

0800ca10 <_Balloc>:
 800ca10:	b570      	push	{r4, r5, r6, lr}
 800ca12:	69c6      	ldr	r6, [r0, #28]
 800ca14:	4604      	mov	r4, r0
 800ca16:	460d      	mov	r5, r1
 800ca18:	b976      	cbnz	r6, 800ca38 <_Balloc+0x28>
 800ca1a:	2010      	movs	r0, #16
 800ca1c:	f7ff ff42 	bl	800c8a4 <malloc>
 800ca20:	4602      	mov	r2, r0
 800ca22:	61e0      	str	r0, [r4, #28]
 800ca24:	b920      	cbnz	r0, 800ca30 <_Balloc+0x20>
 800ca26:	4b18      	ldr	r3, [pc, #96]	@ (800ca88 <_Balloc+0x78>)
 800ca28:	4818      	ldr	r0, [pc, #96]	@ (800ca8c <_Balloc+0x7c>)
 800ca2a:	216b      	movs	r1, #107	@ 0x6b
 800ca2c:	f000 fda8 	bl	800d580 <__assert_func>
 800ca30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca34:	6006      	str	r6, [r0, #0]
 800ca36:	60c6      	str	r6, [r0, #12]
 800ca38:	69e6      	ldr	r6, [r4, #28]
 800ca3a:	68f3      	ldr	r3, [r6, #12]
 800ca3c:	b183      	cbz	r3, 800ca60 <_Balloc+0x50>
 800ca3e:	69e3      	ldr	r3, [r4, #28]
 800ca40:	68db      	ldr	r3, [r3, #12]
 800ca42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca46:	b9b8      	cbnz	r0, 800ca78 <_Balloc+0x68>
 800ca48:	2101      	movs	r1, #1
 800ca4a:	fa01 f605 	lsl.w	r6, r1, r5
 800ca4e:	1d72      	adds	r2, r6, #5
 800ca50:	0092      	lsls	r2, r2, #2
 800ca52:	4620      	mov	r0, r4
 800ca54:	f000 fdb2 	bl	800d5bc <_calloc_r>
 800ca58:	b160      	cbz	r0, 800ca74 <_Balloc+0x64>
 800ca5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ca5e:	e00e      	b.n	800ca7e <_Balloc+0x6e>
 800ca60:	2221      	movs	r2, #33	@ 0x21
 800ca62:	2104      	movs	r1, #4
 800ca64:	4620      	mov	r0, r4
 800ca66:	f000 fda9 	bl	800d5bc <_calloc_r>
 800ca6a:	69e3      	ldr	r3, [r4, #28]
 800ca6c:	60f0      	str	r0, [r6, #12]
 800ca6e:	68db      	ldr	r3, [r3, #12]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d1e4      	bne.n	800ca3e <_Balloc+0x2e>
 800ca74:	2000      	movs	r0, #0
 800ca76:	bd70      	pop	{r4, r5, r6, pc}
 800ca78:	6802      	ldr	r2, [r0, #0]
 800ca7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca7e:	2300      	movs	r3, #0
 800ca80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca84:	e7f7      	b.n	800ca76 <_Balloc+0x66>
 800ca86:	bf00      	nop
 800ca88:	0800dcc1 	.word	0x0800dcc1
 800ca8c:	0800dd41 	.word	0x0800dd41

0800ca90 <_Bfree>:
 800ca90:	b570      	push	{r4, r5, r6, lr}
 800ca92:	69c6      	ldr	r6, [r0, #28]
 800ca94:	4605      	mov	r5, r0
 800ca96:	460c      	mov	r4, r1
 800ca98:	b976      	cbnz	r6, 800cab8 <_Bfree+0x28>
 800ca9a:	2010      	movs	r0, #16
 800ca9c:	f7ff ff02 	bl	800c8a4 <malloc>
 800caa0:	4602      	mov	r2, r0
 800caa2:	61e8      	str	r0, [r5, #28]
 800caa4:	b920      	cbnz	r0, 800cab0 <_Bfree+0x20>
 800caa6:	4b09      	ldr	r3, [pc, #36]	@ (800cacc <_Bfree+0x3c>)
 800caa8:	4809      	ldr	r0, [pc, #36]	@ (800cad0 <_Bfree+0x40>)
 800caaa:	218f      	movs	r1, #143	@ 0x8f
 800caac:	f000 fd68 	bl	800d580 <__assert_func>
 800cab0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cab4:	6006      	str	r6, [r0, #0]
 800cab6:	60c6      	str	r6, [r0, #12]
 800cab8:	b13c      	cbz	r4, 800caca <_Bfree+0x3a>
 800caba:	69eb      	ldr	r3, [r5, #28]
 800cabc:	6862      	ldr	r2, [r4, #4]
 800cabe:	68db      	ldr	r3, [r3, #12]
 800cac0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cac4:	6021      	str	r1, [r4, #0]
 800cac6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800caca:	bd70      	pop	{r4, r5, r6, pc}
 800cacc:	0800dcc1 	.word	0x0800dcc1
 800cad0:	0800dd41 	.word	0x0800dd41

0800cad4 <__multadd>:
 800cad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cad8:	690d      	ldr	r5, [r1, #16]
 800cada:	4607      	mov	r7, r0
 800cadc:	460c      	mov	r4, r1
 800cade:	461e      	mov	r6, r3
 800cae0:	f101 0c14 	add.w	ip, r1, #20
 800cae4:	2000      	movs	r0, #0
 800cae6:	f8dc 3000 	ldr.w	r3, [ip]
 800caea:	b299      	uxth	r1, r3
 800caec:	fb02 6101 	mla	r1, r2, r1, r6
 800caf0:	0c1e      	lsrs	r6, r3, #16
 800caf2:	0c0b      	lsrs	r3, r1, #16
 800caf4:	fb02 3306 	mla	r3, r2, r6, r3
 800caf8:	b289      	uxth	r1, r1
 800cafa:	3001      	adds	r0, #1
 800cafc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb00:	4285      	cmp	r5, r0
 800cb02:	f84c 1b04 	str.w	r1, [ip], #4
 800cb06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb0a:	dcec      	bgt.n	800cae6 <__multadd+0x12>
 800cb0c:	b30e      	cbz	r6, 800cb52 <__multadd+0x7e>
 800cb0e:	68a3      	ldr	r3, [r4, #8]
 800cb10:	42ab      	cmp	r3, r5
 800cb12:	dc19      	bgt.n	800cb48 <__multadd+0x74>
 800cb14:	6861      	ldr	r1, [r4, #4]
 800cb16:	4638      	mov	r0, r7
 800cb18:	3101      	adds	r1, #1
 800cb1a:	f7ff ff79 	bl	800ca10 <_Balloc>
 800cb1e:	4680      	mov	r8, r0
 800cb20:	b928      	cbnz	r0, 800cb2e <__multadd+0x5a>
 800cb22:	4602      	mov	r2, r0
 800cb24:	4b0c      	ldr	r3, [pc, #48]	@ (800cb58 <__multadd+0x84>)
 800cb26:	480d      	ldr	r0, [pc, #52]	@ (800cb5c <__multadd+0x88>)
 800cb28:	21ba      	movs	r1, #186	@ 0xba
 800cb2a:	f000 fd29 	bl	800d580 <__assert_func>
 800cb2e:	6922      	ldr	r2, [r4, #16]
 800cb30:	3202      	adds	r2, #2
 800cb32:	f104 010c 	add.w	r1, r4, #12
 800cb36:	0092      	lsls	r2, r2, #2
 800cb38:	300c      	adds	r0, #12
 800cb3a:	f000 fd13 	bl	800d564 <memcpy>
 800cb3e:	4621      	mov	r1, r4
 800cb40:	4638      	mov	r0, r7
 800cb42:	f7ff ffa5 	bl	800ca90 <_Bfree>
 800cb46:	4644      	mov	r4, r8
 800cb48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb4c:	3501      	adds	r5, #1
 800cb4e:	615e      	str	r6, [r3, #20]
 800cb50:	6125      	str	r5, [r4, #16]
 800cb52:	4620      	mov	r0, r4
 800cb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb58:	0800dd30 	.word	0x0800dd30
 800cb5c:	0800dd41 	.word	0x0800dd41

0800cb60 <__hi0bits>:
 800cb60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cb64:	4603      	mov	r3, r0
 800cb66:	bf36      	itet	cc
 800cb68:	0403      	lslcc	r3, r0, #16
 800cb6a:	2000      	movcs	r0, #0
 800cb6c:	2010      	movcc	r0, #16
 800cb6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cb72:	bf3c      	itt	cc
 800cb74:	021b      	lslcc	r3, r3, #8
 800cb76:	3008      	addcc	r0, #8
 800cb78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb7c:	bf3c      	itt	cc
 800cb7e:	011b      	lslcc	r3, r3, #4
 800cb80:	3004      	addcc	r0, #4
 800cb82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb86:	bf3c      	itt	cc
 800cb88:	009b      	lslcc	r3, r3, #2
 800cb8a:	3002      	addcc	r0, #2
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	db05      	blt.n	800cb9c <__hi0bits+0x3c>
 800cb90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cb94:	f100 0001 	add.w	r0, r0, #1
 800cb98:	bf08      	it	eq
 800cb9a:	2020      	moveq	r0, #32
 800cb9c:	4770      	bx	lr

0800cb9e <__lo0bits>:
 800cb9e:	6803      	ldr	r3, [r0, #0]
 800cba0:	4602      	mov	r2, r0
 800cba2:	f013 0007 	ands.w	r0, r3, #7
 800cba6:	d00b      	beq.n	800cbc0 <__lo0bits+0x22>
 800cba8:	07d9      	lsls	r1, r3, #31
 800cbaa:	d421      	bmi.n	800cbf0 <__lo0bits+0x52>
 800cbac:	0798      	lsls	r0, r3, #30
 800cbae:	bf49      	itett	mi
 800cbb0:	085b      	lsrmi	r3, r3, #1
 800cbb2:	089b      	lsrpl	r3, r3, #2
 800cbb4:	2001      	movmi	r0, #1
 800cbb6:	6013      	strmi	r3, [r2, #0]
 800cbb8:	bf5c      	itt	pl
 800cbba:	6013      	strpl	r3, [r2, #0]
 800cbbc:	2002      	movpl	r0, #2
 800cbbe:	4770      	bx	lr
 800cbc0:	b299      	uxth	r1, r3
 800cbc2:	b909      	cbnz	r1, 800cbc8 <__lo0bits+0x2a>
 800cbc4:	0c1b      	lsrs	r3, r3, #16
 800cbc6:	2010      	movs	r0, #16
 800cbc8:	b2d9      	uxtb	r1, r3
 800cbca:	b909      	cbnz	r1, 800cbd0 <__lo0bits+0x32>
 800cbcc:	3008      	adds	r0, #8
 800cbce:	0a1b      	lsrs	r3, r3, #8
 800cbd0:	0719      	lsls	r1, r3, #28
 800cbd2:	bf04      	itt	eq
 800cbd4:	091b      	lsreq	r3, r3, #4
 800cbd6:	3004      	addeq	r0, #4
 800cbd8:	0799      	lsls	r1, r3, #30
 800cbda:	bf04      	itt	eq
 800cbdc:	089b      	lsreq	r3, r3, #2
 800cbde:	3002      	addeq	r0, #2
 800cbe0:	07d9      	lsls	r1, r3, #31
 800cbe2:	d403      	bmi.n	800cbec <__lo0bits+0x4e>
 800cbe4:	085b      	lsrs	r3, r3, #1
 800cbe6:	f100 0001 	add.w	r0, r0, #1
 800cbea:	d003      	beq.n	800cbf4 <__lo0bits+0x56>
 800cbec:	6013      	str	r3, [r2, #0]
 800cbee:	4770      	bx	lr
 800cbf0:	2000      	movs	r0, #0
 800cbf2:	4770      	bx	lr
 800cbf4:	2020      	movs	r0, #32
 800cbf6:	4770      	bx	lr

0800cbf8 <__i2b>:
 800cbf8:	b510      	push	{r4, lr}
 800cbfa:	460c      	mov	r4, r1
 800cbfc:	2101      	movs	r1, #1
 800cbfe:	f7ff ff07 	bl	800ca10 <_Balloc>
 800cc02:	4602      	mov	r2, r0
 800cc04:	b928      	cbnz	r0, 800cc12 <__i2b+0x1a>
 800cc06:	4b05      	ldr	r3, [pc, #20]	@ (800cc1c <__i2b+0x24>)
 800cc08:	4805      	ldr	r0, [pc, #20]	@ (800cc20 <__i2b+0x28>)
 800cc0a:	f240 1145 	movw	r1, #325	@ 0x145
 800cc0e:	f000 fcb7 	bl	800d580 <__assert_func>
 800cc12:	2301      	movs	r3, #1
 800cc14:	6144      	str	r4, [r0, #20]
 800cc16:	6103      	str	r3, [r0, #16]
 800cc18:	bd10      	pop	{r4, pc}
 800cc1a:	bf00      	nop
 800cc1c:	0800dd30 	.word	0x0800dd30
 800cc20:	0800dd41 	.word	0x0800dd41

0800cc24 <__multiply>:
 800cc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc28:	4614      	mov	r4, r2
 800cc2a:	690a      	ldr	r2, [r1, #16]
 800cc2c:	6923      	ldr	r3, [r4, #16]
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	bfa8      	it	ge
 800cc32:	4623      	movge	r3, r4
 800cc34:	460f      	mov	r7, r1
 800cc36:	bfa4      	itt	ge
 800cc38:	460c      	movge	r4, r1
 800cc3a:	461f      	movge	r7, r3
 800cc3c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cc40:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cc44:	68a3      	ldr	r3, [r4, #8]
 800cc46:	6861      	ldr	r1, [r4, #4]
 800cc48:	eb0a 0609 	add.w	r6, sl, r9
 800cc4c:	42b3      	cmp	r3, r6
 800cc4e:	b085      	sub	sp, #20
 800cc50:	bfb8      	it	lt
 800cc52:	3101      	addlt	r1, #1
 800cc54:	f7ff fedc 	bl	800ca10 <_Balloc>
 800cc58:	b930      	cbnz	r0, 800cc68 <__multiply+0x44>
 800cc5a:	4602      	mov	r2, r0
 800cc5c:	4b44      	ldr	r3, [pc, #272]	@ (800cd70 <__multiply+0x14c>)
 800cc5e:	4845      	ldr	r0, [pc, #276]	@ (800cd74 <__multiply+0x150>)
 800cc60:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cc64:	f000 fc8c 	bl	800d580 <__assert_func>
 800cc68:	f100 0514 	add.w	r5, r0, #20
 800cc6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cc70:	462b      	mov	r3, r5
 800cc72:	2200      	movs	r2, #0
 800cc74:	4543      	cmp	r3, r8
 800cc76:	d321      	bcc.n	800ccbc <__multiply+0x98>
 800cc78:	f107 0114 	add.w	r1, r7, #20
 800cc7c:	f104 0214 	add.w	r2, r4, #20
 800cc80:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cc84:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cc88:	9302      	str	r3, [sp, #8]
 800cc8a:	1b13      	subs	r3, r2, r4
 800cc8c:	3b15      	subs	r3, #21
 800cc8e:	f023 0303 	bic.w	r3, r3, #3
 800cc92:	3304      	adds	r3, #4
 800cc94:	f104 0715 	add.w	r7, r4, #21
 800cc98:	42ba      	cmp	r2, r7
 800cc9a:	bf38      	it	cc
 800cc9c:	2304      	movcc	r3, #4
 800cc9e:	9301      	str	r3, [sp, #4]
 800cca0:	9b02      	ldr	r3, [sp, #8]
 800cca2:	9103      	str	r1, [sp, #12]
 800cca4:	428b      	cmp	r3, r1
 800cca6:	d80c      	bhi.n	800ccc2 <__multiply+0x9e>
 800cca8:	2e00      	cmp	r6, #0
 800ccaa:	dd03      	ble.n	800ccb4 <__multiply+0x90>
 800ccac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d05a      	beq.n	800cd6a <__multiply+0x146>
 800ccb4:	6106      	str	r6, [r0, #16]
 800ccb6:	b005      	add	sp, #20
 800ccb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccbc:	f843 2b04 	str.w	r2, [r3], #4
 800ccc0:	e7d8      	b.n	800cc74 <__multiply+0x50>
 800ccc2:	f8b1 a000 	ldrh.w	sl, [r1]
 800ccc6:	f1ba 0f00 	cmp.w	sl, #0
 800ccca:	d023      	beq.n	800cd14 <__multiply+0xf0>
 800cccc:	f104 0e14 	add.w	lr, r4, #20
 800ccd0:	46a9      	mov	r9, r5
 800ccd2:	f04f 0c00 	mov.w	ip, #0
 800ccd6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ccda:	f8d9 3000 	ldr.w	r3, [r9]
 800ccde:	fa1f fb87 	uxth.w	fp, r7
 800cce2:	b29b      	uxth	r3, r3
 800cce4:	fb0a 330b 	mla	r3, sl, fp, r3
 800cce8:	4463      	add	r3, ip
 800ccea:	f8d9 c000 	ldr.w	ip, [r9]
 800ccee:	0c3f      	lsrs	r7, r7, #16
 800ccf0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ccf4:	fb0a c707 	mla	r7, sl, r7, ip
 800ccf8:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ccfc:	b29b      	uxth	r3, r3
 800ccfe:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cd02:	4572      	cmp	r2, lr
 800cd04:	f849 3b04 	str.w	r3, [r9], #4
 800cd08:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cd0c:	d8e3      	bhi.n	800ccd6 <__multiply+0xb2>
 800cd0e:	9b01      	ldr	r3, [sp, #4]
 800cd10:	f845 c003 	str.w	ip, [r5, r3]
 800cd14:	9b03      	ldr	r3, [sp, #12]
 800cd16:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cd1a:	3104      	adds	r1, #4
 800cd1c:	f1b9 0f00 	cmp.w	r9, #0
 800cd20:	d021      	beq.n	800cd66 <__multiply+0x142>
 800cd22:	682b      	ldr	r3, [r5, #0]
 800cd24:	f104 0c14 	add.w	ip, r4, #20
 800cd28:	46ae      	mov	lr, r5
 800cd2a:	f04f 0a00 	mov.w	sl, #0
 800cd2e:	f8bc b000 	ldrh.w	fp, [ip]
 800cd32:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cd36:	fb09 770b 	mla	r7, r9, fp, r7
 800cd3a:	4457      	add	r7, sl
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cd42:	f84e 3b04 	str.w	r3, [lr], #4
 800cd46:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cd4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd4e:	f8be 3000 	ldrh.w	r3, [lr]
 800cd52:	fb09 330a 	mla	r3, r9, sl, r3
 800cd56:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cd5a:	4562      	cmp	r2, ip
 800cd5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd60:	d8e5      	bhi.n	800cd2e <__multiply+0x10a>
 800cd62:	9f01      	ldr	r7, [sp, #4]
 800cd64:	51eb      	str	r3, [r5, r7]
 800cd66:	3504      	adds	r5, #4
 800cd68:	e79a      	b.n	800cca0 <__multiply+0x7c>
 800cd6a:	3e01      	subs	r6, #1
 800cd6c:	e79c      	b.n	800cca8 <__multiply+0x84>
 800cd6e:	bf00      	nop
 800cd70:	0800dd30 	.word	0x0800dd30
 800cd74:	0800dd41 	.word	0x0800dd41

0800cd78 <__pow5mult>:
 800cd78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd7c:	4615      	mov	r5, r2
 800cd7e:	f012 0203 	ands.w	r2, r2, #3
 800cd82:	4607      	mov	r7, r0
 800cd84:	460e      	mov	r6, r1
 800cd86:	d007      	beq.n	800cd98 <__pow5mult+0x20>
 800cd88:	4c25      	ldr	r4, [pc, #148]	@ (800ce20 <__pow5mult+0xa8>)
 800cd8a:	3a01      	subs	r2, #1
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd92:	f7ff fe9f 	bl	800cad4 <__multadd>
 800cd96:	4606      	mov	r6, r0
 800cd98:	10ad      	asrs	r5, r5, #2
 800cd9a:	d03d      	beq.n	800ce18 <__pow5mult+0xa0>
 800cd9c:	69fc      	ldr	r4, [r7, #28]
 800cd9e:	b97c      	cbnz	r4, 800cdc0 <__pow5mult+0x48>
 800cda0:	2010      	movs	r0, #16
 800cda2:	f7ff fd7f 	bl	800c8a4 <malloc>
 800cda6:	4602      	mov	r2, r0
 800cda8:	61f8      	str	r0, [r7, #28]
 800cdaa:	b928      	cbnz	r0, 800cdb8 <__pow5mult+0x40>
 800cdac:	4b1d      	ldr	r3, [pc, #116]	@ (800ce24 <__pow5mult+0xac>)
 800cdae:	481e      	ldr	r0, [pc, #120]	@ (800ce28 <__pow5mult+0xb0>)
 800cdb0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cdb4:	f000 fbe4 	bl	800d580 <__assert_func>
 800cdb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cdbc:	6004      	str	r4, [r0, #0]
 800cdbe:	60c4      	str	r4, [r0, #12]
 800cdc0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cdc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cdc8:	b94c      	cbnz	r4, 800cdde <__pow5mult+0x66>
 800cdca:	f240 2171 	movw	r1, #625	@ 0x271
 800cdce:	4638      	mov	r0, r7
 800cdd0:	f7ff ff12 	bl	800cbf8 <__i2b>
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	f8c8 0008 	str.w	r0, [r8, #8]
 800cdda:	4604      	mov	r4, r0
 800cddc:	6003      	str	r3, [r0, #0]
 800cdde:	f04f 0900 	mov.w	r9, #0
 800cde2:	07eb      	lsls	r3, r5, #31
 800cde4:	d50a      	bpl.n	800cdfc <__pow5mult+0x84>
 800cde6:	4631      	mov	r1, r6
 800cde8:	4622      	mov	r2, r4
 800cdea:	4638      	mov	r0, r7
 800cdec:	f7ff ff1a 	bl	800cc24 <__multiply>
 800cdf0:	4631      	mov	r1, r6
 800cdf2:	4680      	mov	r8, r0
 800cdf4:	4638      	mov	r0, r7
 800cdf6:	f7ff fe4b 	bl	800ca90 <_Bfree>
 800cdfa:	4646      	mov	r6, r8
 800cdfc:	106d      	asrs	r5, r5, #1
 800cdfe:	d00b      	beq.n	800ce18 <__pow5mult+0xa0>
 800ce00:	6820      	ldr	r0, [r4, #0]
 800ce02:	b938      	cbnz	r0, 800ce14 <__pow5mult+0x9c>
 800ce04:	4622      	mov	r2, r4
 800ce06:	4621      	mov	r1, r4
 800ce08:	4638      	mov	r0, r7
 800ce0a:	f7ff ff0b 	bl	800cc24 <__multiply>
 800ce0e:	6020      	str	r0, [r4, #0]
 800ce10:	f8c0 9000 	str.w	r9, [r0]
 800ce14:	4604      	mov	r4, r0
 800ce16:	e7e4      	b.n	800cde2 <__pow5mult+0x6a>
 800ce18:	4630      	mov	r0, r6
 800ce1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce1e:	bf00      	nop
 800ce20:	0800dd9c 	.word	0x0800dd9c
 800ce24:	0800dcc1 	.word	0x0800dcc1
 800ce28:	0800dd41 	.word	0x0800dd41

0800ce2c <__lshift>:
 800ce2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce30:	460c      	mov	r4, r1
 800ce32:	6849      	ldr	r1, [r1, #4]
 800ce34:	6923      	ldr	r3, [r4, #16]
 800ce36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ce3a:	68a3      	ldr	r3, [r4, #8]
 800ce3c:	4607      	mov	r7, r0
 800ce3e:	4691      	mov	r9, r2
 800ce40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce44:	f108 0601 	add.w	r6, r8, #1
 800ce48:	42b3      	cmp	r3, r6
 800ce4a:	db0b      	blt.n	800ce64 <__lshift+0x38>
 800ce4c:	4638      	mov	r0, r7
 800ce4e:	f7ff fddf 	bl	800ca10 <_Balloc>
 800ce52:	4605      	mov	r5, r0
 800ce54:	b948      	cbnz	r0, 800ce6a <__lshift+0x3e>
 800ce56:	4602      	mov	r2, r0
 800ce58:	4b28      	ldr	r3, [pc, #160]	@ (800cefc <__lshift+0xd0>)
 800ce5a:	4829      	ldr	r0, [pc, #164]	@ (800cf00 <__lshift+0xd4>)
 800ce5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ce60:	f000 fb8e 	bl	800d580 <__assert_func>
 800ce64:	3101      	adds	r1, #1
 800ce66:	005b      	lsls	r3, r3, #1
 800ce68:	e7ee      	b.n	800ce48 <__lshift+0x1c>
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	f100 0114 	add.w	r1, r0, #20
 800ce70:	f100 0210 	add.w	r2, r0, #16
 800ce74:	4618      	mov	r0, r3
 800ce76:	4553      	cmp	r3, sl
 800ce78:	db33      	blt.n	800cee2 <__lshift+0xb6>
 800ce7a:	6920      	ldr	r0, [r4, #16]
 800ce7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce80:	f104 0314 	add.w	r3, r4, #20
 800ce84:	f019 091f 	ands.w	r9, r9, #31
 800ce88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ce90:	d02b      	beq.n	800ceea <__lshift+0xbe>
 800ce92:	f1c9 0e20 	rsb	lr, r9, #32
 800ce96:	468a      	mov	sl, r1
 800ce98:	2200      	movs	r2, #0
 800ce9a:	6818      	ldr	r0, [r3, #0]
 800ce9c:	fa00 f009 	lsl.w	r0, r0, r9
 800cea0:	4310      	orrs	r0, r2
 800cea2:	f84a 0b04 	str.w	r0, [sl], #4
 800cea6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceaa:	459c      	cmp	ip, r3
 800ceac:	fa22 f20e 	lsr.w	r2, r2, lr
 800ceb0:	d8f3      	bhi.n	800ce9a <__lshift+0x6e>
 800ceb2:	ebac 0304 	sub.w	r3, ip, r4
 800ceb6:	3b15      	subs	r3, #21
 800ceb8:	f023 0303 	bic.w	r3, r3, #3
 800cebc:	3304      	adds	r3, #4
 800cebe:	f104 0015 	add.w	r0, r4, #21
 800cec2:	4584      	cmp	ip, r0
 800cec4:	bf38      	it	cc
 800cec6:	2304      	movcc	r3, #4
 800cec8:	50ca      	str	r2, [r1, r3]
 800ceca:	b10a      	cbz	r2, 800ced0 <__lshift+0xa4>
 800cecc:	f108 0602 	add.w	r6, r8, #2
 800ced0:	3e01      	subs	r6, #1
 800ced2:	4638      	mov	r0, r7
 800ced4:	612e      	str	r6, [r5, #16]
 800ced6:	4621      	mov	r1, r4
 800ced8:	f7ff fdda 	bl	800ca90 <_Bfree>
 800cedc:	4628      	mov	r0, r5
 800cede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cee2:	f842 0f04 	str.w	r0, [r2, #4]!
 800cee6:	3301      	adds	r3, #1
 800cee8:	e7c5      	b.n	800ce76 <__lshift+0x4a>
 800ceea:	3904      	subs	r1, #4
 800ceec:	f853 2b04 	ldr.w	r2, [r3], #4
 800cef0:	f841 2f04 	str.w	r2, [r1, #4]!
 800cef4:	459c      	cmp	ip, r3
 800cef6:	d8f9      	bhi.n	800ceec <__lshift+0xc0>
 800cef8:	e7ea      	b.n	800ced0 <__lshift+0xa4>
 800cefa:	bf00      	nop
 800cefc:	0800dd30 	.word	0x0800dd30
 800cf00:	0800dd41 	.word	0x0800dd41

0800cf04 <__mcmp>:
 800cf04:	690a      	ldr	r2, [r1, #16]
 800cf06:	4603      	mov	r3, r0
 800cf08:	6900      	ldr	r0, [r0, #16]
 800cf0a:	1a80      	subs	r0, r0, r2
 800cf0c:	b530      	push	{r4, r5, lr}
 800cf0e:	d10e      	bne.n	800cf2e <__mcmp+0x2a>
 800cf10:	3314      	adds	r3, #20
 800cf12:	3114      	adds	r1, #20
 800cf14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cf18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cf1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cf20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cf24:	4295      	cmp	r5, r2
 800cf26:	d003      	beq.n	800cf30 <__mcmp+0x2c>
 800cf28:	d205      	bcs.n	800cf36 <__mcmp+0x32>
 800cf2a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf2e:	bd30      	pop	{r4, r5, pc}
 800cf30:	42a3      	cmp	r3, r4
 800cf32:	d3f3      	bcc.n	800cf1c <__mcmp+0x18>
 800cf34:	e7fb      	b.n	800cf2e <__mcmp+0x2a>
 800cf36:	2001      	movs	r0, #1
 800cf38:	e7f9      	b.n	800cf2e <__mcmp+0x2a>
	...

0800cf3c <__mdiff>:
 800cf3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf40:	4689      	mov	r9, r1
 800cf42:	4606      	mov	r6, r0
 800cf44:	4611      	mov	r1, r2
 800cf46:	4648      	mov	r0, r9
 800cf48:	4614      	mov	r4, r2
 800cf4a:	f7ff ffdb 	bl	800cf04 <__mcmp>
 800cf4e:	1e05      	subs	r5, r0, #0
 800cf50:	d112      	bne.n	800cf78 <__mdiff+0x3c>
 800cf52:	4629      	mov	r1, r5
 800cf54:	4630      	mov	r0, r6
 800cf56:	f7ff fd5b 	bl	800ca10 <_Balloc>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	b928      	cbnz	r0, 800cf6a <__mdiff+0x2e>
 800cf5e:	4b3e      	ldr	r3, [pc, #248]	@ (800d058 <__mdiff+0x11c>)
 800cf60:	f240 2137 	movw	r1, #567	@ 0x237
 800cf64:	483d      	ldr	r0, [pc, #244]	@ (800d05c <__mdiff+0x120>)
 800cf66:	f000 fb0b 	bl	800d580 <__assert_func>
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cf70:	4610      	mov	r0, r2
 800cf72:	b003      	add	sp, #12
 800cf74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf78:	bfbc      	itt	lt
 800cf7a:	464b      	movlt	r3, r9
 800cf7c:	46a1      	movlt	r9, r4
 800cf7e:	4630      	mov	r0, r6
 800cf80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cf84:	bfba      	itte	lt
 800cf86:	461c      	movlt	r4, r3
 800cf88:	2501      	movlt	r5, #1
 800cf8a:	2500      	movge	r5, #0
 800cf8c:	f7ff fd40 	bl	800ca10 <_Balloc>
 800cf90:	4602      	mov	r2, r0
 800cf92:	b918      	cbnz	r0, 800cf9c <__mdiff+0x60>
 800cf94:	4b30      	ldr	r3, [pc, #192]	@ (800d058 <__mdiff+0x11c>)
 800cf96:	f240 2145 	movw	r1, #581	@ 0x245
 800cf9a:	e7e3      	b.n	800cf64 <__mdiff+0x28>
 800cf9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cfa0:	6926      	ldr	r6, [r4, #16]
 800cfa2:	60c5      	str	r5, [r0, #12]
 800cfa4:	f109 0310 	add.w	r3, r9, #16
 800cfa8:	f109 0514 	add.w	r5, r9, #20
 800cfac:	f104 0e14 	add.w	lr, r4, #20
 800cfb0:	f100 0b14 	add.w	fp, r0, #20
 800cfb4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cfb8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cfbc:	9301      	str	r3, [sp, #4]
 800cfbe:	46d9      	mov	r9, fp
 800cfc0:	f04f 0c00 	mov.w	ip, #0
 800cfc4:	9b01      	ldr	r3, [sp, #4]
 800cfc6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cfca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cfce:	9301      	str	r3, [sp, #4]
 800cfd0:	b281      	uxth	r1, r0
 800cfd2:	fa1f f38a 	uxth.w	r3, sl
 800cfd6:	1a5b      	subs	r3, r3, r1
 800cfd8:	0c00      	lsrs	r0, r0, #16
 800cfda:	4463      	add	r3, ip
 800cfdc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cfe0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cfe4:	b29b      	uxth	r3, r3
 800cfe6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cfea:	4576      	cmp	r6, lr
 800cfec:	f849 3b04 	str.w	r3, [r9], #4
 800cff0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cff4:	d8e6      	bhi.n	800cfc4 <__mdiff+0x88>
 800cff6:	1b33      	subs	r3, r6, r4
 800cff8:	3b15      	subs	r3, #21
 800cffa:	f023 0303 	bic.w	r3, r3, #3
 800cffe:	3415      	adds	r4, #21
 800d000:	3304      	adds	r3, #4
 800d002:	42a6      	cmp	r6, r4
 800d004:	bf38      	it	cc
 800d006:	2304      	movcc	r3, #4
 800d008:	441d      	add	r5, r3
 800d00a:	445b      	add	r3, fp
 800d00c:	461e      	mov	r6, r3
 800d00e:	462c      	mov	r4, r5
 800d010:	4544      	cmp	r4, r8
 800d012:	d30e      	bcc.n	800d032 <__mdiff+0xf6>
 800d014:	f108 0103 	add.w	r1, r8, #3
 800d018:	1b49      	subs	r1, r1, r5
 800d01a:	f021 0103 	bic.w	r1, r1, #3
 800d01e:	3d03      	subs	r5, #3
 800d020:	45a8      	cmp	r8, r5
 800d022:	bf38      	it	cc
 800d024:	2100      	movcc	r1, #0
 800d026:	440b      	add	r3, r1
 800d028:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d02c:	b191      	cbz	r1, 800d054 <__mdiff+0x118>
 800d02e:	6117      	str	r7, [r2, #16]
 800d030:	e79e      	b.n	800cf70 <__mdiff+0x34>
 800d032:	f854 1b04 	ldr.w	r1, [r4], #4
 800d036:	46e6      	mov	lr, ip
 800d038:	0c08      	lsrs	r0, r1, #16
 800d03a:	fa1c fc81 	uxtah	ip, ip, r1
 800d03e:	4471      	add	r1, lr
 800d040:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d044:	b289      	uxth	r1, r1
 800d046:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d04a:	f846 1b04 	str.w	r1, [r6], #4
 800d04e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d052:	e7dd      	b.n	800d010 <__mdiff+0xd4>
 800d054:	3f01      	subs	r7, #1
 800d056:	e7e7      	b.n	800d028 <__mdiff+0xec>
 800d058:	0800dd30 	.word	0x0800dd30
 800d05c:	0800dd41 	.word	0x0800dd41

0800d060 <__d2b>:
 800d060:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d064:	2101      	movs	r1, #1
 800d066:	9e08      	ldr	r6, [sp, #32]
 800d068:	4690      	mov	r8, r2
 800d06a:	4699      	mov	r9, r3
 800d06c:	f7ff fcd0 	bl	800ca10 <_Balloc>
 800d070:	4604      	mov	r4, r0
 800d072:	b930      	cbnz	r0, 800d082 <__d2b+0x22>
 800d074:	4602      	mov	r2, r0
 800d076:	4b24      	ldr	r3, [pc, #144]	@ (800d108 <__d2b+0xa8>)
 800d078:	4824      	ldr	r0, [pc, #144]	@ (800d10c <__d2b+0xac>)
 800d07a:	f240 310f 	movw	r1, #783	@ 0x30f
 800d07e:	f000 fa7f 	bl	800d580 <__assert_func>
 800d082:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d086:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d08a:	b10d      	cbz	r5, 800d090 <__d2b+0x30>
 800d08c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d090:	9301      	str	r3, [sp, #4]
 800d092:	f1b8 0300 	subs.w	r3, r8, #0
 800d096:	d024      	beq.n	800d0e2 <__d2b+0x82>
 800d098:	4668      	mov	r0, sp
 800d09a:	9300      	str	r3, [sp, #0]
 800d09c:	f7ff fd7f 	bl	800cb9e <__lo0bits>
 800d0a0:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d0a4:	b1d8      	cbz	r0, 800d0de <__d2b+0x7e>
 800d0a6:	f1c0 0320 	rsb	r3, r0, #32
 800d0aa:	fa02 f303 	lsl.w	r3, r2, r3
 800d0ae:	430b      	orrs	r3, r1
 800d0b0:	40c2      	lsrs	r2, r0
 800d0b2:	6163      	str	r3, [r4, #20]
 800d0b4:	9201      	str	r2, [sp, #4]
 800d0b6:	9b01      	ldr	r3, [sp, #4]
 800d0b8:	61a3      	str	r3, [r4, #24]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	bf0c      	ite	eq
 800d0be:	2201      	moveq	r2, #1
 800d0c0:	2202      	movne	r2, #2
 800d0c2:	6122      	str	r2, [r4, #16]
 800d0c4:	b1ad      	cbz	r5, 800d0f2 <__d2b+0x92>
 800d0c6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d0ca:	4405      	add	r5, r0
 800d0cc:	6035      	str	r5, [r6, #0]
 800d0ce:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d0d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0d4:	6018      	str	r0, [r3, #0]
 800d0d6:	4620      	mov	r0, r4
 800d0d8:	b002      	add	sp, #8
 800d0da:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d0de:	6161      	str	r1, [r4, #20]
 800d0e0:	e7e9      	b.n	800d0b6 <__d2b+0x56>
 800d0e2:	a801      	add	r0, sp, #4
 800d0e4:	f7ff fd5b 	bl	800cb9e <__lo0bits>
 800d0e8:	9b01      	ldr	r3, [sp, #4]
 800d0ea:	6163      	str	r3, [r4, #20]
 800d0ec:	3020      	adds	r0, #32
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	e7e7      	b.n	800d0c2 <__d2b+0x62>
 800d0f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d0f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d0fa:	6030      	str	r0, [r6, #0]
 800d0fc:	6918      	ldr	r0, [r3, #16]
 800d0fe:	f7ff fd2f 	bl	800cb60 <__hi0bits>
 800d102:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d106:	e7e4      	b.n	800d0d2 <__d2b+0x72>
 800d108:	0800dd30 	.word	0x0800dd30
 800d10c:	0800dd41 	.word	0x0800dd41

0800d110 <__ssputs_r>:
 800d110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d114:	688e      	ldr	r6, [r1, #8]
 800d116:	461f      	mov	r7, r3
 800d118:	42be      	cmp	r6, r7
 800d11a:	680b      	ldr	r3, [r1, #0]
 800d11c:	4682      	mov	sl, r0
 800d11e:	460c      	mov	r4, r1
 800d120:	4690      	mov	r8, r2
 800d122:	d82d      	bhi.n	800d180 <__ssputs_r+0x70>
 800d124:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d128:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d12c:	d026      	beq.n	800d17c <__ssputs_r+0x6c>
 800d12e:	6965      	ldr	r5, [r4, #20]
 800d130:	6909      	ldr	r1, [r1, #16]
 800d132:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d136:	eba3 0901 	sub.w	r9, r3, r1
 800d13a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d13e:	1c7b      	adds	r3, r7, #1
 800d140:	444b      	add	r3, r9
 800d142:	106d      	asrs	r5, r5, #1
 800d144:	429d      	cmp	r5, r3
 800d146:	bf38      	it	cc
 800d148:	461d      	movcc	r5, r3
 800d14a:	0553      	lsls	r3, r2, #21
 800d14c:	d527      	bpl.n	800d19e <__ssputs_r+0x8e>
 800d14e:	4629      	mov	r1, r5
 800d150:	f7ff fbd2 	bl	800c8f8 <_malloc_r>
 800d154:	4606      	mov	r6, r0
 800d156:	b360      	cbz	r0, 800d1b2 <__ssputs_r+0xa2>
 800d158:	6921      	ldr	r1, [r4, #16]
 800d15a:	464a      	mov	r2, r9
 800d15c:	f000 fa02 	bl	800d564 <memcpy>
 800d160:	89a3      	ldrh	r3, [r4, #12]
 800d162:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d16a:	81a3      	strh	r3, [r4, #12]
 800d16c:	6126      	str	r6, [r4, #16]
 800d16e:	6165      	str	r5, [r4, #20]
 800d170:	444e      	add	r6, r9
 800d172:	eba5 0509 	sub.w	r5, r5, r9
 800d176:	6026      	str	r6, [r4, #0]
 800d178:	60a5      	str	r5, [r4, #8]
 800d17a:	463e      	mov	r6, r7
 800d17c:	42be      	cmp	r6, r7
 800d17e:	d900      	bls.n	800d182 <__ssputs_r+0x72>
 800d180:	463e      	mov	r6, r7
 800d182:	6820      	ldr	r0, [r4, #0]
 800d184:	4632      	mov	r2, r6
 800d186:	4641      	mov	r1, r8
 800d188:	f000 f9c2 	bl	800d510 <memmove>
 800d18c:	68a3      	ldr	r3, [r4, #8]
 800d18e:	1b9b      	subs	r3, r3, r6
 800d190:	60a3      	str	r3, [r4, #8]
 800d192:	6823      	ldr	r3, [r4, #0]
 800d194:	4433      	add	r3, r6
 800d196:	6023      	str	r3, [r4, #0]
 800d198:	2000      	movs	r0, #0
 800d19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d19e:	462a      	mov	r2, r5
 800d1a0:	f000 fa32 	bl	800d608 <_realloc_r>
 800d1a4:	4606      	mov	r6, r0
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	d1e0      	bne.n	800d16c <__ssputs_r+0x5c>
 800d1aa:	6921      	ldr	r1, [r4, #16]
 800d1ac:	4650      	mov	r0, sl
 800d1ae:	f7ff fb2f 	bl	800c810 <_free_r>
 800d1b2:	230c      	movs	r3, #12
 800d1b4:	f8ca 3000 	str.w	r3, [sl]
 800d1b8:	89a3      	ldrh	r3, [r4, #12]
 800d1ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1be:	81a3      	strh	r3, [r4, #12]
 800d1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c4:	e7e9      	b.n	800d19a <__ssputs_r+0x8a>
	...

0800d1c8 <_svfiprintf_r>:
 800d1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1cc:	4698      	mov	r8, r3
 800d1ce:	898b      	ldrh	r3, [r1, #12]
 800d1d0:	061b      	lsls	r3, r3, #24
 800d1d2:	b09d      	sub	sp, #116	@ 0x74
 800d1d4:	4607      	mov	r7, r0
 800d1d6:	460d      	mov	r5, r1
 800d1d8:	4614      	mov	r4, r2
 800d1da:	d510      	bpl.n	800d1fe <_svfiprintf_r+0x36>
 800d1dc:	690b      	ldr	r3, [r1, #16]
 800d1de:	b973      	cbnz	r3, 800d1fe <_svfiprintf_r+0x36>
 800d1e0:	2140      	movs	r1, #64	@ 0x40
 800d1e2:	f7ff fb89 	bl	800c8f8 <_malloc_r>
 800d1e6:	6028      	str	r0, [r5, #0]
 800d1e8:	6128      	str	r0, [r5, #16]
 800d1ea:	b930      	cbnz	r0, 800d1fa <_svfiprintf_r+0x32>
 800d1ec:	230c      	movs	r3, #12
 800d1ee:	603b      	str	r3, [r7, #0]
 800d1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1f4:	b01d      	add	sp, #116	@ 0x74
 800d1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1fa:	2340      	movs	r3, #64	@ 0x40
 800d1fc:	616b      	str	r3, [r5, #20]
 800d1fe:	2300      	movs	r3, #0
 800d200:	9309      	str	r3, [sp, #36]	@ 0x24
 800d202:	2320      	movs	r3, #32
 800d204:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d208:	f8cd 800c 	str.w	r8, [sp, #12]
 800d20c:	2330      	movs	r3, #48	@ 0x30
 800d20e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d3ac <_svfiprintf_r+0x1e4>
 800d212:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d216:	f04f 0901 	mov.w	r9, #1
 800d21a:	4623      	mov	r3, r4
 800d21c:	469a      	mov	sl, r3
 800d21e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d222:	b10a      	cbz	r2, 800d228 <_svfiprintf_r+0x60>
 800d224:	2a25      	cmp	r2, #37	@ 0x25
 800d226:	d1f9      	bne.n	800d21c <_svfiprintf_r+0x54>
 800d228:	ebba 0b04 	subs.w	fp, sl, r4
 800d22c:	d00b      	beq.n	800d246 <_svfiprintf_r+0x7e>
 800d22e:	465b      	mov	r3, fp
 800d230:	4622      	mov	r2, r4
 800d232:	4629      	mov	r1, r5
 800d234:	4638      	mov	r0, r7
 800d236:	f7ff ff6b 	bl	800d110 <__ssputs_r>
 800d23a:	3001      	adds	r0, #1
 800d23c:	f000 80a7 	beq.w	800d38e <_svfiprintf_r+0x1c6>
 800d240:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d242:	445a      	add	r2, fp
 800d244:	9209      	str	r2, [sp, #36]	@ 0x24
 800d246:	f89a 3000 	ldrb.w	r3, [sl]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	f000 809f 	beq.w	800d38e <_svfiprintf_r+0x1c6>
 800d250:	2300      	movs	r3, #0
 800d252:	f04f 32ff 	mov.w	r2, #4294967295
 800d256:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d25a:	f10a 0a01 	add.w	sl, sl, #1
 800d25e:	9304      	str	r3, [sp, #16]
 800d260:	9307      	str	r3, [sp, #28]
 800d262:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d266:	931a      	str	r3, [sp, #104]	@ 0x68
 800d268:	4654      	mov	r4, sl
 800d26a:	2205      	movs	r2, #5
 800d26c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d270:	484e      	ldr	r0, [pc, #312]	@ (800d3ac <_svfiprintf_r+0x1e4>)
 800d272:	f7f2 ffad 	bl	80001d0 <memchr>
 800d276:	9a04      	ldr	r2, [sp, #16]
 800d278:	b9d8      	cbnz	r0, 800d2b2 <_svfiprintf_r+0xea>
 800d27a:	06d0      	lsls	r0, r2, #27
 800d27c:	bf44      	itt	mi
 800d27e:	2320      	movmi	r3, #32
 800d280:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d284:	0711      	lsls	r1, r2, #28
 800d286:	bf44      	itt	mi
 800d288:	232b      	movmi	r3, #43	@ 0x2b
 800d28a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d28e:	f89a 3000 	ldrb.w	r3, [sl]
 800d292:	2b2a      	cmp	r3, #42	@ 0x2a
 800d294:	d015      	beq.n	800d2c2 <_svfiprintf_r+0xfa>
 800d296:	9a07      	ldr	r2, [sp, #28]
 800d298:	4654      	mov	r4, sl
 800d29a:	2000      	movs	r0, #0
 800d29c:	f04f 0c0a 	mov.w	ip, #10
 800d2a0:	4621      	mov	r1, r4
 800d2a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2a6:	3b30      	subs	r3, #48	@ 0x30
 800d2a8:	2b09      	cmp	r3, #9
 800d2aa:	d94b      	bls.n	800d344 <_svfiprintf_r+0x17c>
 800d2ac:	b1b0      	cbz	r0, 800d2dc <_svfiprintf_r+0x114>
 800d2ae:	9207      	str	r2, [sp, #28]
 800d2b0:	e014      	b.n	800d2dc <_svfiprintf_r+0x114>
 800d2b2:	eba0 0308 	sub.w	r3, r0, r8
 800d2b6:	fa09 f303 	lsl.w	r3, r9, r3
 800d2ba:	4313      	orrs	r3, r2
 800d2bc:	9304      	str	r3, [sp, #16]
 800d2be:	46a2      	mov	sl, r4
 800d2c0:	e7d2      	b.n	800d268 <_svfiprintf_r+0xa0>
 800d2c2:	9b03      	ldr	r3, [sp, #12]
 800d2c4:	1d19      	adds	r1, r3, #4
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	9103      	str	r1, [sp, #12]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	bfbb      	ittet	lt
 800d2ce:	425b      	neglt	r3, r3
 800d2d0:	f042 0202 	orrlt.w	r2, r2, #2
 800d2d4:	9307      	strge	r3, [sp, #28]
 800d2d6:	9307      	strlt	r3, [sp, #28]
 800d2d8:	bfb8      	it	lt
 800d2da:	9204      	strlt	r2, [sp, #16]
 800d2dc:	7823      	ldrb	r3, [r4, #0]
 800d2de:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2e0:	d10a      	bne.n	800d2f8 <_svfiprintf_r+0x130>
 800d2e2:	7863      	ldrb	r3, [r4, #1]
 800d2e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2e6:	d132      	bne.n	800d34e <_svfiprintf_r+0x186>
 800d2e8:	9b03      	ldr	r3, [sp, #12]
 800d2ea:	1d1a      	adds	r2, r3, #4
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	9203      	str	r2, [sp, #12]
 800d2f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d2f4:	3402      	adds	r4, #2
 800d2f6:	9305      	str	r3, [sp, #20]
 800d2f8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d3b0 <_svfiprintf_r+0x1e8>
 800d2fc:	7821      	ldrb	r1, [r4, #0]
 800d2fe:	2203      	movs	r2, #3
 800d300:	4650      	mov	r0, sl
 800d302:	f7f2 ff65 	bl	80001d0 <memchr>
 800d306:	b138      	cbz	r0, 800d318 <_svfiprintf_r+0x150>
 800d308:	9b04      	ldr	r3, [sp, #16]
 800d30a:	eba0 000a 	sub.w	r0, r0, sl
 800d30e:	2240      	movs	r2, #64	@ 0x40
 800d310:	4082      	lsls	r2, r0
 800d312:	4313      	orrs	r3, r2
 800d314:	3401      	adds	r4, #1
 800d316:	9304      	str	r3, [sp, #16]
 800d318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d31c:	4825      	ldr	r0, [pc, #148]	@ (800d3b4 <_svfiprintf_r+0x1ec>)
 800d31e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d322:	2206      	movs	r2, #6
 800d324:	f7f2 ff54 	bl	80001d0 <memchr>
 800d328:	2800      	cmp	r0, #0
 800d32a:	d036      	beq.n	800d39a <_svfiprintf_r+0x1d2>
 800d32c:	4b22      	ldr	r3, [pc, #136]	@ (800d3b8 <_svfiprintf_r+0x1f0>)
 800d32e:	bb1b      	cbnz	r3, 800d378 <_svfiprintf_r+0x1b0>
 800d330:	9b03      	ldr	r3, [sp, #12]
 800d332:	3307      	adds	r3, #7
 800d334:	f023 0307 	bic.w	r3, r3, #7
 800d338:	3308      	adds	r3, #8
 800d33a:	9303      	str	r3, [sp, #12]
 800d33c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d33e:	4433      	add	r3, r6
 800d340:	9309      	str	r3, [sp, #36]	@ 0x24
 800d342:	e76a      	b.n	800d21a <_svfiprintf_r+0x52>
 800d344:	fb0c 3202 	mla	r2, ip, r2, r3
 800d348:	460c      	mov	r4, r1
 800d34a:	2001      	movs	r0, #1
 800d34c:	e7a8      	b.n	800d2a0 <_svfiprintf_r+0xd8>
 800d34e:	2300      	movs	r3, #0
 800d350:	3401      	adds	r4, #1
 800d352:	9305      	str	r3, [sp, #20]
 800d354:	4619      	mov	r1, r3
 800d356:	f04f 0c0a 	mov.w	ip, #10
 800d35a:	4620      	mov	r0, r4
 800d35c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d360:	3a30      	subs	r2, #48	@ 0x30
 800d362:	2a09      	cmp	r2, #9
 800d364:	d903      	bls.n	800d36e <_svfiprintf_r+0x1a6>
 800d366:	2b00      	cmp	r3, #0
 800d368:	d0c6      	beq.n	800d2f8 <_svfiprintf_r+0x130>
 800d36a:	9105      	str	r1, [sp, #20]
 800d36c:	e7c4      	b.n	800d2f8 <_svfiprintf_r+0x130>
 800d36e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d372:	4604      	mov	r4, r0
 800d374:	2301      	movs	r3, #1
 800d376:	e7f0      	b.n	800d35a <_svfiprintf_r+0x192>
 800d378:	ab03      	add	r3, sp, #12
 800d37a:	9300      	str	r3, [sp, #0]
 800d37c:	462a      	mov	r2, r5
 800d37e:	4b0f      	ldr	r3, [pc, #60]	@ (800d3bc <_svfiprintf_r+0x1f4>)
 800d380:	a904      	add	r1, sp, #16
 800d382:	4638      	mov	r0, r7
 800d384:	f7fd fe94 	bl	800b0b0 <_printf_float>
 800d388:	1c42      	adds	r2, r0, #1
 800d38a:	4606      	mov	r6, r0
 800d38c:	d1d6      	bne.n	800d33c <_svfiprintf_r+0x174>
 800d38e:	89ab      	ldrh	r3, [r5, #12]
 800d390:	065b      	lsls	r3, r3, #25
 800d392:	f53f af2d 	bmi.w	800d1f0 <_svfiprintf_r+0x28>
 800d396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d398:	e72c      	b.n	800d1f4 <_svfiprintf_r+0x2c>
 800d39a:	ab03      	add	r3, sp, #12
 800d39c:	9300      	str	r3, [sp, #0]
 800d39e:	462a      	mov	r2, r5
 800d3a0:	4b06      	ldr	r3, [pc, #24]	@ (800d3bc <_svfiprintf_r+0x1f4>)
 800d3a2:	a904      	add	r1, sp, #16
 800d3a4:	4638      	mov	r0, r7
 800d3a6:	f7fe f91d 	bl	800b5e4 <_printf_i>
 800d3aa:	e7ed      	b.n	800d388 <_svfiprintf_r+0x1c0>
 800d3ac:	0800de98 	.word	0x0800de98
 800d3b0:	0800de9e 	.word	0x0800de9e
 800d3b4:	0800dea2 	.word	0x0800dea2
 800d3b8:	0800b0b1 	.word	0x0800b0b1
 800d3bc:	0800d111 	.word	0x0800d111

0800d3c0 <__sflush_r>:
 800d3c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3c6:	0716      	lsls	r6, r2, #28
 800d3c8:	4605      	mov	r5, r0
 800d3ca:	460c      	mov	r4, r1
 800d3cc:	d454      	bmi.n	800d478 <__sflush_r+0xb8>
 800d3ce:	684b      	ldr	r3, [r1, #4]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	dc02      	bgt.n	800d3da <__sflush_r+0x1a>
 800d3d4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	dd48      	ble.n	800d46c <__sflush_r+0xac>
 800d3da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d3dc:	2e00      	cmp	r6, #0
 800d3de:	d045      	beq.n	800d46c <__sflush_r+0xac>
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d3e6:	682f      	ldr	r7, [r5, #0]
 800d3e8:	6a21      	ldr	r1, [r4, #32]
 800d3ea:	602b      	str	r3, [r5, #0]
 800d3ec:	d030      	beq.n	800d450 <__sflush_r+0x90>
 800d3ee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d3f0:	89a3      	ldrh	r3, [r4, #12]
 800d3f2:	0759      	lsls	r1, r3, #29
 800d3f4:	d505      	bpl.n	800d402 <__sflush_r+0x42>
 800d3f6:	6863      	ldr	r3, [r4, #4]
 800d3f8:	1ad2      	subs	r2, r2, r3
 800d3fa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d3fc:	b10b      	cbz	r3, 800d402 <__sflush_r+0x42>
 800d3fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d400:	1ad2      	subs	r2, r2, r3
 800d402:	2300      	movs	r3, #0
 800d404:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d406:	6a21      	ldr	r1, [r4, #32]
 800d408:	4628      	mov	r0, r5
 800d40a:	47b0      	blx	r6
 800d40c:	1c43      	adds	r3, r0, #1
 800d40e:	89a3      	ldrh	r3, [r4, #12]
 800d410:	d106      	bne.n	800d420 <__sflush_r+0x60>
 800d412:	6829      	ldr	r1, [r5, #0]
 800d414:	291d      	cmp	r1, #29
 800d416:	d82b      	bhi.n	800d470 <__sflush_r+0xb0>
 800d418:	4a28      	ldr	r2, [pc, #160]	@ (800d4bc <__sflush_r+0xfc>)
 800d41a:	410a      	asrs	r2, r1
 800d41c:	07d6      	lsls	r6, r2, #31
 800d41e:	d427      	bmi.n	800d470 <__sflush_r+0xb0>
 800d420:	2200      	movs	r2, #0
 800d422:	6062      	str	r2, [r4, #4]
 800d424:	04d9      	lsls	r1, r3, #19
 800d426:	6922      	ldr	r2, [r4, #16]
 800d428:	6022      	str	r2, [r4, #0]
 800d42a:	d504      	bpl.n	800d436 <__sflush_r+0x76>
 800d42c:	1c42      	adds	r2, r0, #1
 800d42e:	d101      	bne.n	800d434 <__sflush_r+0x74>
 800d430:	682b      	ldr	r3, [r5, #0]
 800d432:	b903      	cbnz	r3, 800d436 <__sflush_r+0x76>
 800d434:	6560      	str	r0, [r4, #84]	@ 0x54
 800d436:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d438:	602f      	str	r7, [r5, #0]
 800d43a:	b1b9      	cbz	r1, 800d46c <__sflush_r+0xac>
 800d43c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d440:	4299      	cmp	r1, r3
 800d442:	d002      	beq.n	800d44a <__sflush_r+0x8a>
 800d444:	4628      	mov	r0, r5
 800d446:	f7ff f9e3 	bl	800c810 <_free_r>
 800d44a:	2300      	movs	r3, #0
 800d44c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d44e:	e00d      	b.n	800d46c <__sflush_r+0xac>
 800d450:	2301      	movs	r3, #1
 800d452:	4628      	mov	r0, r5
 800d454:	47b0      	blx	r6
 800d456:	4602      	mov	r2, r0
 800d458:	1c50      	adds	r0, r2, #1
 800d45a:	d1c9      	bne.n	800d3f0 <__sflush_r+0x30>
 800d45c:	682b      	ldr	r3, [r5, #0]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d0c6      	beq.n	800d3f0 <__sflush_r+0x30>
 800d462:	2b1d      	cmp	r3, #29
 800d464:	d001      	beq.n	800d46a <__sflush_r+0xaa>
 800d466:	2b16      	cmp	r3, #22
 800d468:	d11d      	bne.n	800d4a6 <__sflush_r+0xe6>
 800d46a:	602f      	str	r7, [r5, #0]
 800d46c:	2000      	movs	r0, #0
 800d46e:	e021      	b.n	800d4b4 <__sflush_r+0xf4>
 800d470:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d474:	b21b      	sxth	r3, r3
 800d476:	e01a      	b.n	800d4ae <__sflush_r+0xee>
 800d478:	690f      	ldr	r7, [r1, #16]
 800d47a:	2f00      	cmp	r7, #0
 800d47c:	d0f6      	beq.n	800d46c <__sflush_r+0xac>
 800d47e:	0793      	lsls	r3, r2, #30
 800d480:	680e      	ldr	r6, [r1, #0]
 800d482:	bf08      	it	eq
 800d484:	694b      	ldreq	r3, [r1, #20]
 800d486:	600f      	str	r7, [r1, #0]
 800d488:	bf18      	it	ne
 800d48a:	2300      	movne	r3, #0
 800d48c:	1bf6      	subs	r6, r6, r7
 800d48e:	608b      	str	r3, [r1, #8]
 800d490:	2e00      	cmp	r6, #0
 800d492:	ddeb      	ble.n	800d46c <__sflush_r+0xac>
 800d494:	6a21      	ldr	r1, [r4, #32]
 800d496:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d49a:	4633      	mov	r3, r6
 800d49c:	463a      	mov	r2, r7
 800d49e:	4628      	mov	r0, r5
 800d4a0:	47e0      	blx	ip
 800d4a2:	2800      	cmp	r0, #0
 800d4a4:	dc07      	bgt.n	800d4b6 <__sflush_r+0xf6>
 800d4a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4ae:	81a3      	strh	r3, [r4, #12]
 800d4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4b6:	4407      	add	r7, r0
 800d4b8:	1a36      	subs	r6, r6, r0
 800d4ba:	e7e9      	b.n	800d490 <__sflush_r+0xd0>
 800d4bc:	dfbffffe 	.word	0xdfbffffe

0800d4c0 <_fflush_r>:
 800d4c0:	b538      	push	{r3, r4, r5, lr}
 800d4c2:	690b      	ldr	r3, [r1, #16]
 800d4c4:	4605      	mov	r5, r0
 800d4c6:	460c      	mov	r4, r1
 800d4c8:	b913      	cbnz	r3, 800d4d0 <_fflush_r+0x10>
 800d4ca:	2500      	movs	r5, #0
 800d4cc:	4628      	mov	r0, r5
 800d4ce:	bd38      	pop	{r3, r4, r5, pc}
 800d4d0:	b118      	cbz	r0, 800d4da <_fflush_r+0x1a>
 800d4d2:	6a03      	ldr	r3, [r0, #32]
 800d4d4:	b90b      	cbnz	r3, 800d4da <_fflush_r+0x1a>
 800d4d6:	f7fe fa31 	bl	800b93c <__sinit>
 800d4da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d0f3      	beq.n	800d4ca <_fflush_r+0xa>
 800d4e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d4e4:	07d0      	lsls	r0, r2, #31
 800d4e6:	d404      	bmi.n	800d4f2 <_fflush_r+0x32>
 800d4e8:	0599      	lsls	r1, r3, #22
 800d4ea:	d402      	bmi.n	800d4f2 <_fflush_r+0x32>
 800d4ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d4ee:	f7fe fb3c 	bl	800bb6a <__retarget_lock_acquire_recursive>
 800d4f2:	4628      	mov	r0, r5
 800d4f4:	4621      	mov	r1, r4
 800d4f6:	f7ff ff63 	bl	800d3c0 <__sflush_r>
 800d4fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d4fc:	07da      	lsls	r2, r3, #31
 800d4fe:	4605      	mov	r5, r0
 800d500:	d4e4      	bmi.n	800d4cc <_fflush_r+0xc>
 800d502:	89a3      	ldrh	r3, [r4, #12]
 800d504:	059b      	lsls	r3, r3, #22
 800d506:	d4e1      	bmi.n	800d4cc <_fflush_r+0xc>
 800d508:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d50a:	f7fe fb2f 	bl	800bb6c <__retarget_lock_release_recursive>
 800d50e:	e7dd      	b.n	800d4cc <_fflush_r+0xc>

0800d510 <memmove>:
 800d510:	4288      	cmp	r0, r1
 800d512:	b510      	push	{r4, lr}
 800d514:	eb01 0402 	add.w	r4, r1, r2
 800d518:	d902      	bls.n	800d520 <memmove+0x10>
 800d51a:	4284      	cmp	r4, r0
 800d51c:	4623      	mov	r3, r4
 800d51e:	d807      	bhi.n	800d530 <memmove+0x20>
 800d520:	1e43      	subs	r3, r0, #1
 800d522:	42a1      	cmp	r1, r4
 800d524:	d008      	beq.n	800d538 <memmove+0x28>
 800d526:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d52a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d52e:	e7f8      	b.n	800d522 <memmove+0x12>
 800d530:	4402      	add	r2, r0
 800d532:	4601      	mov	r1, r0
 800d534:	428a      	cmp	r2, r1
 800d536:	d100      	bne.n	800d53a <memmove+0x2a>
 800d538:	bd10      	pop	{r4, pc}
 800d53a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d53e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d542:	e7f7      	b.n	800d534 <memmove+0x24>

0800d544 <_sbrk_r>:
 800d544:	b538      	push	{r3, r4, r5, lr}
 800d546:	4d06      	ldr	r5, [pc, #24]	@ (800d560 <_sbrk_r+0x1c>)
 800d548:	2300      	movs	r3, #0
 800d54a:	4604      	mov	r4, r0
 800d54c:	4608      	mov	r0, r1
 800d54e:	602b      	str	r3, [r5, #0]
 800d550:	f7f4 fd80 	bl	8002054 <_sbrk>
 800d554:	1c43      	adds	r3, r0, #1
 800d556:	d102      	bne.n	800d55e <_sbrk_r+0x1a>
 800d558:	682b      	ldr	r3, [r5, #0]
 800d55a:	b103      	cbz	r3, 800d55e <_sbrk_r+0x1a>
 800d55c:	6023      	str	r3, [r4, #0]
 800d55e:	bd38      	pop	{r3, r4, r5, pc}
 800d560:	200021fc 	.word	0x200021fc

0800d564 <memcpy>:
 800d564:	440a      	add	r2, r1
 800d566:	4291      	cmp	r1, r2
 800d568:	f100 33ff 	add.w	r3, r0, #4294967295
 800d56c:	d100      	bne.n	800d570 <memcpy+0xc>
 800d56e:	4770      	bx	lr
 800d570:	b510      	push	{r4, lr}
 800d572:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d57a:	4291      	cmp	r1, r2
 800d57c:	d1f9      	bne.n	800d572 <memcpy+0xe>
 800d57e:	bd10      	pop	{r4, pc}

0800d580 <__assert_func>:
 800d580:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d582:	4614      	mov	r4, r2
 800d584:	461a      	mov	r2, r3
 800d586:	4b09      	ldr	r3, [pc, #36]	@ (800d5ac <__assert_func+0x2c>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4605      	mov	r5, r0
 800d58c:	68d8      	ldr	r0, [r3, #12]
 800d58e:	b954      	cbnz	r4, 800d5a6 <__assert_func+0x26>
 800d590:	4b07      	ldr	r3, [pc, #28]	@ (800d5b0 <__assert_func+0x30>)
 800d592:	461c      	mov	r4, r3
 800d594:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d598:	9100      	str	r1, [sp, #0]
 800d59a:	462b      	mov	r3, r5
 800d59c:	4905      	ldr	r1, [pc, #20]	@ (800d5b4 <__assert_func+0x34>)
 800d59e:	f000 f86f 	bl	800d680 <fiprintf>
 800d5a2:	f000 f87f 	bl	800d6a4 <abort>
 800d5a6:	4b04      	ldr	r3, [pc, #16]	@ (800d5b8 <__assert_func+0x38>)
 800d5a8:	e7f4      	b.n	800d594 <__assert_func+0x14>
 800d5aa:	bf00      	nop
 800d5ac:	20000108 	.word	0x20000108
 800d5b0:	0800deee 	.word	0x0800deee
 800d5b4:	0800dec0 	.word	0x0800dec0
 800d5b8:	0800deb3 	.word	0x0800deb3

0800d5bc <_calloc_r>:
 800d5bc:	b570      	push	{r4, r5, r6, lr}
 800d5be:	fba1 5402 	umull	r5, r4, r1, r2
 800d5c2:	b93c      	cbnz	r4, 800d5d4 <_calloc_r+0x18>
 800d5c4:	4629      	mov	r1, r5
 800d5c6:	f7ff f997 	bl	800c8f8 <_malloc_r>
 800d5ca:	4606      	mov	r6, r0
 800d5cc:	b928      	cbnz	r0, 800d5da <_calloc_r+0x1e>
 800d5ce:	2600      	movs	r6, #0
 800d5d0:	4630      	mov	r0, r6
 800d5d2:	bd70      	pop	{r4, r5, r6, pc}
 800d5d4:	220c      	movs	r2, #12
 800d5d6:	6002      	str	r2, [r0, #0]
 800d5d8:	e7f9      	b.n	800d5ce <_calloc_r+0x12>
 800d5da:	462a      	mov	r2, r5
 800d5dc:	4621      	mov	r1, r4
 800d5de:	f7fe fa46 	bl	800ba6e <memset>
 800d5e2:	e7f5      	b.n	800d5d0 <_calloc_r+0x14>

0800d5e4 <__ascii_mbtowc>:
 800d5e4:	b082      	sub	sp, #8
 800d5e6:	b901      	cbnz	r1, 800d5ea <__ascii_mbtowc+0x6>
 800d5e8:	a901      	add	r1, sp, #4
 800d5ea:	b142      	cbz	r2, 800d5fe <__ascii_mbtowc+0x1a>
 800d5ec:	b14b      	cbz	r3, 800d602 <__ascii_mbtowc+0x1e>
 800d5ee:	7813      	ldrb	r3, [r2, #0]
 800d5f0:	600b      	str	r3, [r1, #0]
 800d5f2:	7812      	ldrb	r2, [r2, #0]
 800d5f4:	1e10      	subs	r0, r2, #0
 800d5f6:	bf18      	it	ne
 800d5f8:	2001      	movne	r0, #1
 800d5fa:	b002      	add	sp, #8
 800d5fc:	4770      	bx	lr
 800d5fe:	4610      	mov	r0, r2
 800d600:	e7fb      	b.n	800d5fa <__ascii_mbtowc+0x16>
 800d602:	f06f 0001 	mvn.w	r0, #1
 800d606:	e7f8      	b.n	800d5fa <__ascii_mbtowc+0x16>

0800d608 <_realloc_r>:
 800d608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d60c:	4680      	mov	r8, r0
 800d60e:	4615      	mov	r5, r2
 800d610:	460c      	mov	r4, r1
 800d612:	b921      	cbnz	r1, 800d61e <_realloc_r+0x16>
 800d614:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d618:	4611      	mov	r1, r2
 800d61a:	f7ff b96d 	b.w	800c8f8 <_malloc_r>
 800d61e:	b92a      	cbnz	r2, 800d62c <_realloc_r+0x24>
 800d620:	f7ff f8f6 	bl	800c810 <_free_r>
 800d624:	2400      	movs	r4, #0
 800d626:	4620      	mov	r0, r4
 800d628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d62c:	f000 f841 	bl	800d6b2 <_malloc_usable_size_r>
 800d630:	4285      	cmp	r5, r0
 800d632:	4606      	mov	r6, r0
 800d634:	d802      	bhi.n	800d63c <_realloc_r+0x34>
 800d636:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d63a:	d8f4      	bhi.n	800d626 <_realloc_r+0x1e>
 800d63c:	4629      	mov	r1, r5
 800d63e:	4640      	mov	r0, r8
 800d640:	f7ff f95a 	bl	800c8f8 <_malloc_r>
 800d644:	4607      	mov	r7, r0
 800d646:	2800      	cmp	r0, #0
 800d648:	d0ec      	beq.n	800d624 <_realloc_r+0x1c>
 800d64a:	42b5      	cmp	r5, r6
 800d64c:	462a      	mov	r2, r5
 800d64e:	4621      	mov	r1, r4
 800d650:	bf28      	it	cs
 800d652:	4632      	movcs	r2, r6
 800d654:	f7ff ff86 	bl	800d564 <memcpy>
 800d658:	4621      	mov	r1, r4
 800d65a:	4640      	mov	r0, r8
 800d65c:	f7ff f8d8 	bl	800c810 <_free_r>
 800d660:	463c      	mov	r4, r7
 800d662:	e7e0      	b.n	800d626 <_realloc_r+0x1e>

0800d664 <__ascii_wctomb>:
 800d664:	4603      	mov	r3, r0
 800d666:	4608      	mov	r0, r1
 800d668:	b141      	cbz	r1, 800d67c <__ascii_wctomb+0x18>
 800d66a:	2aff      	cmp	r2, #255	@ 0xff
 800d66c:	d904      	bls.n	800d678 <__ascii_wctomb+0x14>
 800d66e:	228a      	movs	r2, #138	@ 0x8a
 800d670:	601a      	str	r2, [r3, #0]
 800d672:	f04f 30ff 	mov.w	r0, #4294967295
 800d676:	4770      	bx	lr
 800d678:	700a      	strb	r2, [r1, #0]
 800d67a:	2001      	movs	r0, #1
 800d67c:	4770      	bx	lr
	...

0800d680 <fiprintf>:
 800d680:	b40e      	push	{r1, r2, r3}
 800d682:	b503      	push	{r0, r1, lr}
 800d684:	4601      	mov	r1, r0
 800d686:	ab03      	add	r3, sp, #12
 800d688:	4805      	ldr	r0, [pc, #20]	@ (800d6a0 <fiprintf+0x20>)
 800d68a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d68e:	6800      	ldr	r0, [r0, #0]
 800d690:	9301      	str	r3, [sp, #4]
 800d692:	f000 f83d 	bl	800d710 <_vfiprintf_r>
 800d696:	b002      	add	sp, #8
 800d698:	f85d eb04 	ldr.w	lr, [sp], #4
 800d69c:	b003      	add	sp, #12
 800d69e:	4770      	bx	lr
 800d6a0:	20000108 	.word	0x20000108

0800d6a4 <abort>:
 800d6a4:	b508      	push	{r3, lr}
 800d6a6:	2006      	movs	r0, #6
 800d6a8:	f000 fa06 	bl	800dab8 <raise>
 800d6ac:	2001      	movs	r0, #1
 800d6ae:	f7f4 fc5c 	bl	8001f6a <_exit>

0800d6b2 <_malloc_usable_size_r>:
 800d6b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6b6:	1f18      	subs	r0, r3, #4
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	bfbc      	itt	lt
 800d6bc:	580b      	ldrlt	r3, [r1, r0]
 800d6be:	18c0      	addlt	r0, r0, r3
 800d6c0:	4770      	bx	lr

0800d6c2 <__sfputc_r>:
 800d6c2:	6893      	ldr	r3, [r2, #8]
 800d6c4:	3b01      	subs	r3, #1
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	b410      	push	{r4}
 800d6ca:	6093      	str	r3, [r2, #8]
 800d6cc:	da07      	bge.n	800d6de <__sfputc_r+0x1c>
 800d6ce:	6994      	ldr	r4, [r2, #24]
 800d6d0:	42a3      	cmp	r3, r4
 800d6d2:	db01      	blt.n	800d6d8 <__sfputc_r+0x16>
 800d6d4:	290a      	cmp	r1, #10
 800d6d6:	d102      	bne.n	800d6de <__sfputc_r+0x1c>
 800d6d8:	bc10      	pop	{r4}
 800d6da:	f000 b931 	b.w	800d940 <__swbuf_r>
 800d6de:	6813      	ldr	r3, [r2, #0]
 800d6e0:	1c58      	adds	r0, r3, #1
 800d6e2:	6010      	str	r0, [r2, #0]
 800d6e4:	7019      	strb	r1, [r3, #0]
 800d6e6:	4608      	mov	r0, r1
 800d6e8:	bc10      	pop	{r4}
 800d6ea:	4770      	bx	lr

0800d6ec <__sfputs_r>:
 800d6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ee:	4606      	mov	r6, r0
 800d6f0:	460f      	mov	r7, r1
 800d6f2:	4614      	mov	r4, r2
 800d6f4:	18d5      	adds	r5, r2, r3
 800d6f6:	42ac      	cmp	r4, r5
 800d6f8:	d101      	bne.n	800d6fe <__sfputs_r+0x12>
 800d6fa:	2000      	movs	r0, #0
 800d6fc:	e007      	b.n	800d70e <__sfputs_r+0x22>
 800d6fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d702:	463a      	mov	r2, r7
 800d704:	4630      	mov	r0, r6
 800d706:	f7ff ffdc 	bl	800d6c2 <__sfputc_r>
 800d70a:	1c43      	adds	r3, r0, #1
 800d70c:	d1f3      	bne.n	800d6f6 <__sfputs_r+0xa>
 800d70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d710 <_vfiprintf_r>:
 800d710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d714:	460d      	mov	r5, r1
 800d716:	b09d      	sub	sp, #116	@ 0x74
 800d718:	4614      	mov	r4, r2
 800d71a:	4698      	mov	r8, r3
 800d71c:	4606      	mov	r6, r0
 800d71e:	b118      	cbz	r0, 800d728 <_vfiprintf_r+0x18>
 800d720:	6a03      	ldr	r3, [r0, #32]
 800d722:	b90b      	cbnz	r3, 800d728 <_vfiprintf_r+0x18>
 800d724:	f7fe f90a 	bl	800b93c <__sinit>
 800d728:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d72a:	07d9      	lsls	r1, r3, #31
 800d72c:	d405      	bmi.n	800d73a <_vfiprintf_r+0x2a>
 800d72e:	89ab      	ldrh	r3, [r5, #12]
 800d730:	059a      	lsls	r2, r3, #22
 800d732:	d402      	bmi.n	800d73a <_vfiprintf_r+0x2a>
 800d734:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d736:	f7fe fa18 	bl	800bb6a <__retarget_lock_acquire_recursive>
 800d73a:	89ab      	ldrh	r3, [r5, #12]
 800d73c:	071b      	lsls	r3, r3, #28
 800d73e:	d501      	bpl.n	800d744 <_vfiprintf_r+0x34>
 800d740:	692b      	ldr	r3, [r5, #16]
 800d742:	b99b      	cbnz	r3, 800d76c <_vfiprintf_r+0x5c>
 800d744:	4629      	mov	r1, r5
 800d746:	4630      	mov	r0, r6
 800d748:	f000 f938 	bl	800d9bc <__swsetup_r>
 800d74c:	b170      	cbz	r0, 800d76c <_vfiprintf_r+0x5c>
 800d74e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d750:	07dc      	lsls	r4, r3, #31
 800d752:	d504      	bpl.n	800d75e <_vfiprintf_r+0x4e>
 800d754:	f04f 30ff 	mov.w	r0, #4294967295
 800d758:	b01d      	add	sp, #116	@ 0x74
 800d75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d75e:	89ab      	ldrh	r3, [r5, #12]
 800d760:	0598      	lsls	r0, r3, #22
 800d762:	d4f7      	bmi.n	800d754 <_vfiprintf_r+0x44>
 800d764:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d766:	f7fe fa01 	bl	800bb6c <__retarget_lock_release_recursive>
 800d76a:	e7f3      	b.n	800d754 <_vfiprintf_r+0x44>
 800d76c:	2300      	movs	r3, #0
 800d76e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d770:	2320      	movs	r3, #32
 800d772:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d776:	f8cd 800c 	str.w	r8, [sp, #12]
 800d77a:	2330      	movs	r3, #48	@ 0x30
 800d77c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d92c <_vfiprintf_r+0x21c>
 800d780:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d784:	f04f 0901 	mov.w	r9, #1
 800d788:	4623      	mov	r3, r4
 800d78a:	469a      	mov	sl, r3
 800d78c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d790:	b10a      	cbz	r2, 800d796 <_vfiprintf_r+0x86>
 800d792:	2a25      	cmp	r2, #37	@ 0x25
 800d794:	d1f9      	bne.n	800d78a <_vfiprintf_r+0x7a>
 800d796:	ebba 0b04 	subs.w	fp, sl, r4
 800d79a:	d00b      	beq.n	800d7b4 <_vfiprintf_r+0xa4>
 800d79c:	465b      	mov	r3, fp
 800d79e:	4622      	mov	r2, r4
 800d7a0:	4629      	mov	r1, r5
 800d7a2:	4630      	mov	r0, r6
 800d7a4:	f7ff ffa2 	bl	800d6ec <__sfputs_r>
 800d7a8:	3001      	adds	r0, #1
 800d7aa:	f000 80a7 	beq.w	800d8fc <_vfiprintf_r+0x1ec>
 800d7ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d7b0:	445a      	add	r2, fp
 800d7b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d7b4:	f89a 3000 	ldrb.w	r3, [sl]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	f000 809f 	beq.w	800d8fc <_vfiprintf_r+0x1ec>
 800d7be:	2300      	movs	r3, #0
 800d7c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d7c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7c8:	f10a 0a01 	add.w	sl, sl, #1
 800d7cc:	9304      	str	r3, [sp, #16]
 800d7ce:	9307      	str	r3, [sp, #28]
 800d7d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d7d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800d7d6:	4654      	mov	r4, sl
 800d7d8:	2205      	movs	r2, #5
 800d7da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7de:	4853      	ldr	r0, [pc, #332]	@ (800d92c <_vfiprintf_r+0x21c>)
 800d7e0:	f7f2 fcf6 	bl	80001d0 <memchr>
 800d7e4:	9a04      	ldr	r2, [sp, #16]
 800d7e6:	b9d8      	cbnz	r0, 800d820 <_vfiprintf_r+0x110>
 800d7e8:	06d1      	lsls	r1, r2, #27
 800d7ea:	bf44      	itt	mi
 800d7ec:	2320      	movmi	r3, #32
 800d7ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7f2:	0713      	lsls	r3, r2, #28
 800d7f4:	bf44      	itt	mi
 800d7f6:	232b      	movmi	r3, #43	@ 0x2b
 800d7f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7fc:	f89a 3000 	ldrb.w	r3, [sl]
 800d800:	2b2a      	cmp	r3, #42	@ 0x2a
 800d802:	d015      	beq.n	800d830 <_vfiprintf_r+0x120>
 800d804:	9a07      	ldr	r2, [sp, #28]
 800d806:	4654      	mov	r4, sl
 800d808:	2000      	movs	r0, #0
 800d80a:	f04f 0c0a 	mov.w	ip, #10
 800d80e:	4621      	mov	r1, r4
 800d810:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d814:	3b30      	subs	r3, #48	@ 0x30
 800d816:	2b09      	cmp	r3, #9
 800d818:	d94b      	bls.n	800d8b2 <_vfiprintf_r+0x1a2>
 800d81a:	b1b0      	cbz	r0, 800d84a <_vfiprintf_r+0x13a>
 800d81c:	9207      	str	r2, [sp, #28]
 800d81e:	e014      	b.n	800d84a <_vfiprintf_r+0x13a>
 800d820:	eba0 0308 	sub.w	r3, r0, r8
 800d824:	fa09 f303 	lsl.w	r3, r9, r3
 800d828:	4313      	orrs	r3, r2
 800d82a:	9304      	str	r3, [sp, #16]
 800d82c:	46a2      	mov	sl, r4
 800d82e:	e7d2      	b.n	800d7d6 <_vfiprintf_r+0xc6>
 800d830:	9b03      	ldr	r3, [sp, #12]
 800d832:	1d19      	adds	r1, r3, #4
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	9103      	str	r1, [sp, #12]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	bfbb      	ittet	lt
 800d83c:	425b      	neglt	r3, r3
 800d83e:	f042 0202 	orrlt.w	r2, r2, #2
 800d842:	9307      	strge	r3, [sp, #28]
 800d844:	9307      	strlt	r3, [sp, #28]
 800d846:	bfb8      	it	lt
 800d848:	9204      	strlt	r2, [sp, #16]
 800d84a:	7823      	ldrb	r3, [r4, #0]
 800d84c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d84e:	d10a      	bne.n	800d866 <_vfiprintf_r+0x156>
 800d850:	7863      	ldrb	r3, [r4, #1]
 800d852:	2b2a      	cmp	r3, #42	@ 0x2a
 800d854:	d132      	bne.n	800d8bc <_vfiprintf_r+0x1ac>
 800d856:	9b03      	ldr	r3, [sp, #12]
 800d858:	1d1a      	adds	r2, r3, #4
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	9203      	str	r2, [sp, #12]
 800d85e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d862:	3402      	adds	r4, #2
 800d864:	9305      	str	r3, [sp, #20]
 800d866:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d930 <_vfiprintf_r+0x220>
 800d86a:	7821      	ldrb	r1, [r4, #0]
 800d86c:	2203      	movs	r2, #3
 800d86e:	4650      	mov	r0, sl
 800d870:	f7f2 fcae 	bl	80001d0 <memchr>
 800d874:	b138      	cbz	r0, 800d886 <_vfiprintf_r+0x176>
 800d876:	9b04      	ldr	r3, [sp, #16]
 800d878:	eba0 000a 	sub.w	r0, r0, sl
 800d87c:	2240      	movs	r2, #64	@ 0x40
 800d87e:	4082      	lsls	r2, r0
 800d880:	4313      	orrs	r3, r2
 800d882:	3401      	adds	r4, #1
 800d884:	9304      	str	r3, [sp, #16]
 800d886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d88a:	482a      	ldr	r0, [pc, #168]	@ (800d934 <_vfiprintf_r+0x224>)
 800d88c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d890:	2206      	movs	r2, #6
 800d892:	f7f2 fc9d 	bl	80001d0 <memchr>
 800d896:	2800      	cmp	r0, #0
 800d898:	d03f      	beq.n	800d91a <_vfiprintf_r+0x20a>
 800d89a:	4b27      	ldr	r3, [pc, #156]	@ (800d938 <_vfiprintf_r+0x228>)
 800d89c:	bb1b      	cbnz	r3, 800d8e6 <_vfiprintf_r+0x1d6>
 800d89e:	9b03      	ldr	r3, [sp, #12]
 800d8a0:	3307      	adds	r3, #7
 800d8a2:	f023 0307 	bic.w	r3, r3, #7
 800d8a6:	3308      	adds	r3, #8
 800d8a8:	9303      	str	r3, [sp, #12]
 800d8aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8ac:	443b      	add	r3, r7
 800d8ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8b0:	e76a      	b.n	800d788 <_vfiprintf_r+0x78>
 800d8b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8b6:	460c      	mov	r4, r1
 800d8b8:	2001      	movs	r0, #1
 800d8ba:	e7a8      	b.n	800d80e <_vfiprintf_r+0xfe>
 800d8bc:	2300      	movs	r3, #0
 800d8be:	3401      	adds	r4, #1
 800d8c0:	9305      	str	r3, [sp, #20]
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	f04f 0c0a 	mov.w	ip, #10
 800d8c8:	4620      	mov	r0, r4
 800d8ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8ce:	3a30      	subs	r2, #48	@ 0x30
 800d8d0:	2a09      	cmp	r2, #9
 800d8d2:	d903      	bls.n	800d8dc <_vfiprintf_r+0x1cc>
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d0c6      	beq.n	800d866 <_vfiprintf_r+0x156>
 800d8d8:	9105      	str	r1, [sp, #20]
 800d8da:	e7c4      	b.n	800d866 <_vfiprintf_r+0x156>
 800d8dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8e0:	4604      	mov	r4, r0
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	e7f0      	b.n	800d8c8 <_vfiprintf_r+0x1b8>
 800d8e6:	ab03      	add	r3, sp, #12
 800d8e8:	9300      	str	r3, [sp, #0]
 800d8ea:	462a      	mov	r2, r5
 800d8ec:	4b13      	ldr	r3, [pc, #76]	@ (800d93c <_vfiprintf_r+0x22c>)
 800d8ee:	a904      	add	r1, sp, #16
 800d8f0:	4630      	mov	r0, r6
 800d8f2:	f7fd fbdd 	bl	800b0b0 <_printf_float>
 800d8f6:	4607      	mov	r7, r0
 800d8f8:	1c78      	adds	r0, r7, #1
 800d8fa:	d1d6      	bne.n	800d8aa <_vfiprintf_r+0x19a>
 800d8fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d8fe:	07d9      	lsls	r1, r3, #31
 800d900:	d405      	bmi.n	800d90e <_vfiprintf_r+0x1fe>
 800d902:	89ab      	ldrh	r3, [r5, #12]
 800d904:	059a      	lsls	r2, r3, #22
 800d906:	d402      	bmi.n	800d90e <_vfiprintf_r+0x1fe>
 800d908:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d90a:	f7fe f92f 	bl	800bb6c <__retarget_lock_release_recursive>
 800d90e:	89ab      	ldrh	r3, [r5, #12]
 800d910:	065b      	lsls	r3, r3, #25
 800d912:	f53f af1f 	bmi.w	800d754 <_vfiprintf_r+0x44>
 800d916:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d918:	e71e      	b.n	800d758 <_vfiprintf_r+0x48>
 800d91a:	ab03      	add	r3, sp, #12
 800d91c:	9300      	str	r3, [sp, #0]
 800d91e:	462a      	mov	r2, r5
 800d920:	4b06      	ldr	r3, [pc, #24]	@ (800d93c <_vfiprintf_r+0x22c>)
 800d922:	a904      	add	r1, sp, #16
 800d924:	4630      	mov	r0, r6
 800d926:	f7fd fe5d 	bl	800b5e4 <_printf_i>
 800d92a:	e7e4      	b.n	800d8f6 <_vfiprintf_r+0x1e6>
 800d92c:	0800de98 	.word	0x0800de98
 800d930:	0800de9e 	.word	0x0800de9e
 800d934:	0800dea2 	.word	0x0800dea2
 800d938:	0800b0b1 	.word	0x0800b0b1
 800d93c:	0800d6ed 	.word	0x0800d6ed

0800d940 <__swbuf_r>:
 800d940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d942:	460e      	mov	r6, r1
 800d944:	4614      	mov	r4, r2
 800d946:	4605      	mov	r5, r0
 800d948:	b118      	cbz	r0, 800d952 <__swbuf_r+0x12>
 800d94a:	6a03      	ldr	r3, [r0, #32]
 800d94c:	b90b      	cbnz	r3, 800d952 <__swbuf_r+0x12>
 800d94e:	f7fd fff5 	bl	800b93c <__sinit>
 800d952:	69a3      	ldr	r3, [r4, #24]
 800d954:	60a3      	str	r3, [r4, #8]
 800d956:	89a3      	ldrh	r3, [r4, #12]
 800d958:	071a      	lsls	r2, r3, #28
 800d95a:	d501      	bpl.n	800d960 <__swbuf_r+0x20>
 800d95c:	6923      	ldr	r3, [r4, #16]
 800d95e:	b943      	cbnz	r3, 800d972 <__swbuf_r+0x32>
 800d960:	4621      	mov	r1, r4
 800d962:	4628      	mov	r0, r5
 800d964:	f000 f82a 	bl	800d9bc <__swsetup_r>
 800d968:	b118      	cbz	r0, 800d972 <__swbuf_r+0x32>
 800d96a:	f04f 37ff 	mov.w	r7, #4294967295
 800d96e:	4638      	mov	r0, r7
 800d970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d972:	6823      	ldr	r3, [r4, #0]
 800d974:	6922      	ldr	r2, [r4, #16]
 800d976:	1a98      	subs	r0, r3, r2
 800d978:	6963      	ldr	r3, [r4, #20]
 800d97a:	b2f6      	uxtb	r6, r6
 800d97c:	4283      	cmp	r3, r0
 800d97e:	4637      	mov	r7, r6
 800d980:	dc05      	bgt.n	800d98e <__swbuf_r+0x4e>
 800d982:	4621      	mov	r1, r4
 800d984:	4628      	mov	r0, r5
 800d986:	f7ff fd9b 	bl	800d4c0 <_fflush_r>
 800d98a:	2800      	cmp	r0, #0
 800d98c:	d1ed      	bne.n	800d96a <__swbuf_r+0x2a>
 800d98e:	68a3      	ldr	r3, [r4, #8]
 800d990:	3b01      	subs	r3, #1
 800d992:	60a3      	str	r3, [r4, #8]
 800d994:	6823      	ldr	r3, [r4, #0]
 800d996:	1c5a      	adds	r2, r3, #1
 800d998:	6022      	str	r2, [r4, #0]
 800d99a:	701e      	strb	r6, [r3, #0]
 800d99c:	6962      	ldr	r2, [r4, #20]
 800d99e:	1c43      	adds	r3, r0, #1
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	d004      	beq.n	800d9ae <__swbuf_r+0x6e>
 800d9a4:	89a3      	ldrh	r3, [r4, #12]
 800d9a6:	07db      	lsls	r3, r3, #31
 800d9a8:	d5e1      	bpl.n	800d96e <__swbuf_r+0x2e>
 800d9aa:	2e0a      	cmp	r6, #10
 800d9ac:	d1df      	bne.n	800d96e <__swbuf_r+0x2e>
 800d9ae:	4621      	mov	r1, r4
 800d9b0:	4628      	mov	r0, r5
 800d9b2:	f7ff fd85 	bl	800d4c0 <_fflush_r>
 800d9b6:	2800      	cmp	r0, #0
 800d9b8:	d0d9      	beq.n	800d96e <__swbuf_r+0x2e>
 800d9ba:	e7d6      	b.n	800d96a <__swbuf_r+0x2a>

0800d9bc <__swsetup_r>:
 800d9bc:	b538      	push	{r3, r4, r5, lr}
 800d9be:	4b29      	ldr	r3, [pc, #164]	@ (800da64 <__swsetup_r+0xa8>)
 800d9c0:	4605      	mov	r5, r0
 800d9c2:	6818      	ldr	r0, [r3, #0]
 800d9c4:	460c      	mov	r4, r1
 800d9c6:	b118      	cbz	r0, 800d9d0 <__swsetup_r+0x14>
 800d9c8:	6a03      	ldr	r3, [r0, #32]
 800d9ca:	b90b      	cbnz	r3, 800d9d0 <__swsetup_r+0x14>
 800d9cc:	f7fd ffb6 	bl	800b93c <__sinit>
 800d9d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9d4:	0719      	lsls	r1, r3, #28
 800d9d6:	d422      	bmi.n	800da1e <__swsetup_r+0x62>
 800d9d8:	06da      	lsls	r2, r3, #27
 800d9da:	d407      	bmi.n	800d9ec <__swsetup_r+0x30>
 800d9dc:	2209      	movs	r2, #9
 800d9de:	602a      	str	r2, [r5, #0]
 800d9e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9e4:	81a3      	strh	r3, [r4, #12]
 800d9e6:	f04f 30ff 	mov.w	r0, #4294967295
 800d9ea:	e033      	b.n	800da54 <__swsetup_r+0x98>
 800d9ec:	0758      	lsls	r0, r3, #29
 800d9ee:	d512      	bpl.n	800da16 <__swsetup_r+0x5a>
 800d9f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d9f2:	b141      	cbz	r1, 800da06 <__swsetup_r+0x4a>
 800d9f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d9f8:	4299      	cmp	r1, r3
 800d9fa:	d002      	beq.n	800da02 <__swsetup_r+0x46>
 800d9fc:	4628      	mov	r0, r5
 800d9fe:	f7fe ff07 	bl	800c810 <_free_r>
 800da02:	2300      	movs	r3, #0
 800da04:	6363      	str	r3, [r4, #52]	@ 0x34
 800da06:	89a3      	ldrh	r3, [r4, #12]
 800da08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800da0c:	81a3      	strh	r3, [r4, #12]
 800da0e:	2300      	movs	r3, #0
 800da10:	6063      	str	r3, [r4, #4]
 800da12:	6923      	ldr	r3, [r4, #16]
 800da14:	6023      	str	r3, [r4, #0]
 800da16:	89a3      	ldrh	r3, [r4, #12]
 800da18:	f043 0308 	orr.w	r3, r3, #8
 800da1c:	81a3      	strh	r3, [r4, #12]
 800da1e:	6923      	ldr	r3, [r4, #16]
 800da20:	b94b      	cbnz	r3, 800da36 <__swsetup_r+0x7a>
 800da22:	89a3      	ldrh	r3, [r4, #12]
 800da24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800da28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da2c:	d003      	beq.n	800da36 <__swsetup_r+0x7a>
 800da2e:	4621      	mov	r1, r4
 800da30:	4628      	mov	r0, r5
 800da32:	f000 f883 	bl	800db3c <__smakebuf_r>
 800da36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da3a:	f013 0201 	ands.w	r2, r3, #1
 800da3e:	d00a      	beq.n	800da56 <__swsetup_r+0x9a>
 800da40:	2200      	movs	r2, #0
 800da42:	60a2      	str	r2, [r4, #8]
 800da44:	6962      	ldr	r2, [r4, #20]
 800da46:	4252      	negs	r2, r2
 800da48:	61a2      	str	r2, [r4, #24]
 800da4a:	6922      	ldr	r2, [r4, #16]
 800da4c:	b942      	cbnz	r2, 800da60 <__swsetup_r+0xa4>
 800da4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800da52:	d1c5      	bne.n	800d9e0 <__swsetup_r+0x24>
 800da54:	bd38      	pop	{r3, r4, r5, pc}
 800da56:	0799      	lsls	r1, r3, #30
 800da58:	bf58      	it	pl
 800da5a:	6962      	ldrpl	r2, [r4, #20]
 800da5c:	60a2      	str	r2, [r4, #8]
 800da5e:	e7f4      	b.n	800da4a <__swsetup_r+0x8e>
 800da60:	2000      	movs	r0, #0
 800da62:	e7f7      	b.n	800da54 <__swsetup_r+0x98>
 800da64:	20000108 	.word	0x20000108

0800da68 <_raise_r>:
 800da68:	291f      	cmp	r1, #31
 800da6a:	b538      	push	{r3, r4, r5, lr}
 800da6c:	4605      	mov	r5, r0
 800da6e:	460c      	mov	r4, r1
 800da70:	d904      	bls.n	800da7c <_raise_r+0x14>
 800da72:	2316      	movs	r3, #22
 800da74:	6003      	str	r3, [r0, #0]
 800da76:	f04f 30ff 	mov.w	r0, #4294967295
 800da7a:	bd38      	pop	{r3, r4, r5, pc}
 800da7c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800da7e:	b112      	cbz	r2, 800da86 <_raise_r+0x1e>
 800da80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da84:	b94b      	cbnz	r3, 800da9a <_raise_r+0x32>
 800da86:	4628      	mov	r0, r5
 800da88:	f000 f830 	bl	800daec <_getpid_r>
 800da8c:	4622      	mov	r2, r4
 800da8e:	4601      	mov	r1, r0
 800da90:	4628      	mov	r0, r5
 800da92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da96:	f000 b817 	b.w	800dac8 <_kill_r>
 800da9a:	2b01      	cmp	r3, #1
 800da9c:	d00a      	beq.n	800dab4 <_raise_r+0x4c>
 800da9e:	1c59      	adds	r1, r3, #1
 800daa0:	d103      	bne.n	800daaa <_raise_r+0x42>
 800daa2:	2316      	movs	r3, #22
 800daa4:	6003      	str	r3, [r0, #0]
 800daa6:	2001      	movs	r0, #1
 800daa8:	e7e7      	b.n	800da7a <_raise_r+0x12>
 800daaa:	2100      	movs	r1, #0
 800daac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dab0:	4620      	mov	r0, r4
 800dab2:	4798      	blx	r3
 800dab4:	2000      	movs	r0, #0
 800dab6:	e7e0      	b.n	800da7a <_raise_r+0x12>

0800dab8 <raise>:
 800dab8:	4b02      	ldr	r3, [pc, #8]	@ (800dac4 <raise+0xc>)
 800daba:	4601      	mov	r1, r0
 800dabc:	6818      	ldr	r0, [r3, #0]
 800dabe:	f7ff bfd3 	b.w	800da68 <_raise_r>
 800dac2:	bf00      	nop
 800dac4:	20000108 	.word	0x20000108

0800dac8 <_kill_r>:
 800dac8:	b538      	push	{r3, r4, r5, lr}
 800daca:	4d07      	ldr	r5, [pc, #28]	@ (800dae8 <_kill_r+0x20>)
 800dacc:	2300      	movs	r3, #0
 800dace:	4604      	mov	r4, r0
 800dad0:	4608      	mov	r0, r1
 800dad2:	4611      	mov	r1, r2
 800dad4:	602b      	str	r3, [r5, #0]
 800dad6:	f7f4 fa38 	bl	8001f4a <_kill>
 800dada:	1c43      	adds	r3, r0, #1
 800dadc:	d102      	bne.n	800dae4 <_kill_r+0x1c>
 800dade:	682b      	ldr	r3, [r5, #0]
 800dae0:	b103      	cbz	r3, 800dae4 <_kill_r+0x1c>
 800dae2:	6023      	str	r3, [r4, #0]
 800dae4:	bd38      	pop	{r3, r4, r5, pc}
 800dae6:	bf00      	nop
 800dae8:	200021fc 	.word	0x200021fc

0800daec <_getpid_r>:
 800daec:	f7f4 ba26 	b.w	8001f3c <_getpid>

0800daf0 <__swhatbuf_r>:
 800daf0:	b570      	push	{r4, r5, r6, lr}
 800daf2:	460c      	mov	r4, r1
 800daf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daf8:	2900      	cmp	r1, #0
 800dafa:	b096      	sub	sp, #88	@ 0x58
 800dafc:	4615      	mov	r5, r2
 800dafe:	461e      	mov	r6, r3
 800db00:	da0d      	bge.n	800db1e <__swhatbuf_r+0x2e>
 800db02:	89a3      	ldrh	r3, [r4, #12]
 800db04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800db08:	f04f 0100 	mov.w	r1, #0
 800db0c:	bf14      	ite	ne
 800db0e:	2340      	movne	r3, #64	@ 0x40
 800db10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800db14:	2000      	movs	r0, #0
 800db16:	6031      	str	r1, [r6, #0]
 800db18:	602b      	str	r3, [r5, #0]
 800db1a:	b016      	add	sp, #88	@ 0x58
 800db1c:	bd70      	pop	{r4, r5, r6, pc}
 800db1e:	466a      	mov	r2, sp
 800db20:	f000 f848 	bl	800dbb4 <_fstat_r>
 800db24:	2800      	cmp	r0, #0
 800db26:	dbec      	blt.n	800db02 <__swhatbuf_r+0x12>
 800db28:	9901      	ldr	r1, [sp, #4]
 800db2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800db2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800db32:	4259      	negs	r1, r3
 800db34:	4159      	adcs	r1, r3
 800db36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db3a:	e7eb      	b.n	800db14 <__swhatbuf_r+0x24>

0800db3c <__smakebuf_r>:
 800db3c:	898b      	ldrh	r3, [r1, #12]
 800db3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db40:	079d      	lsls	r5, r3, #30
 800db42:	4606      	mov	r6, r0
 800db44:	460c      	mov	r4, r1
 800db46:	d507      	bpl.n	800db58 <__smakebuf_r+0x1c>
 800db48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800db4c:	6023      	str	r3, [r4, #0]
 800db4e:	6123      	str	r3, [r4, #16]
 800db50:	2301      	movs	r3, #1
 800db52:	6163      	str	r3, [r4, #20]
 800db54:	b003      	add	sp, #12
 800db56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db58:	ab01      	add	r3, sp, #4
 800db5a:	466a      	mov	r2, sp
 800db5c:	f7ff ffc8 	bl	800daf0 <__swhatbuf_r>
 800db60:	9f00      	ldr	r7, [sp, #0]
 800db62:	4605      	mov	r5, r0
 800db64:	4639      	mov	r1, r7
 800db66:	4630      	mov	r0, r6
 800db68:	f7fe fec6 	bl	800c8f8 <_malloc_r>
 800db6c:	b948      	cbnz	r0, 800db82 <__smakebuf_r+0x46>
 800db6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db72:	059a      	lsls	r2, r3, #22
 800db74:	d4ee      	bmi.n	800db54 <__smakebuf_r+0x18>
 800db76:	f023 0303 	bic.w	r3, r3, #3
 800db7a:	f043 0302 	orr.w	r3, r3, #2
 800db7e:	81a3      	strh	r3, [r4, #12]
 800db80:	e7e2      	b.n	800db48 <__smakebuf_r+0xc>
 800db82:	89a3      	ldrh	r3, [r4, #12]
 800db84:	6020      	str	r0, [r4, #0]
 800db86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db8a:	81a3      	strh	r3, [r4, #12]
 800db8c:	9b01      	ldr	r3, [sp, #4]
 800db8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800db92:	b15b      	cbz	r3, 800dbac <__smakebuf_r+0x70>
 800db94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db98:	4630      	mov	r0, r6
 800db9a:	f000 f81d 	bl	800dbd8 <_isatty_r>
 800db9e:	b128      	cbz	r0, 800dbac <__smakebuf_r+0x70>
 800dba0:	89a3      	ldrh	r3, [r4, #12]
 800dba2:	f023 0303 	bic.w	r3, r3, #3
 800dba6:	f043 0301 	orr.w	r3, r3, #1
 800dbaa:	81a3      	strh	r3, [r4, #12]
 800dbac:	89a3      	ldrh	r3, [r4, #12]
 800dbae:	431d      	orrs	r5, r3
 800dbb0:	81a5      	strh	r5, [r4, #12]
 800dbb2:	e7cf      	b.n	800db54 <__smakebuf_r+0x18>

0800dbb4 <_fstat_r>:
 800dbb4:	b538      	push	{r3, r4, r5, lr}
 800dbb6:	4d07      	ldr	r5, [pc, #28]	@ (800dbd4 <_fstat_r+0x20>)
 800dbb8:	2300      	movs	r3, #0
 800dbba:	4604      	mov	r4, r0
 800dbbc:	4608      	mov	r0, r1
 800dbbe:	4611      	mov	r1, r2
 800dbc0:	602b      	str	r3, [r5, #0]
 800dbc2:	f7f4 fa21 	bl	8002008 <_fstat>
 800dbc6:	1c43      	adds	r3, r0, #1
 800dbc8:	d102      	bne.n	800dbd0 <_fstat_r+0x1c>
 800dbca:	682b      	ldr	r3, [r5, #0]
 800dbcc:	b103      	cbz	r3, 800dbd0 <_fstat_r+0x1c>
 800dbce:	6023      	str	r3, [r4, #0]
 800dbd0:	bd38      	pop	{r3, r4, r5, pc}
 800dbd2:	bf00      	nop
 800dbd4:	200021fc 	.word	0x200021fc

0800dbd8 <_isatty_r>:
 800dbd8:	b538      	push	{r3, r4, r5, lr}
 800dbda:	4d06      	ldr	r5, [pc, #24]	@ (800dbf4 <_isatty_r+0x1c>)
 800dbdc:	2300      	movs	r3, #0
 800dbde:	4604      	mov	r4, r0
 800dbe0:	4608      	mov	r0, r1
 800dbe2:	602b      	str	r3, [r5, #0]
 800dbe4:	f7f4 fa1f 	bl	8002026 <_isatty>
 800dbe8:	1c43      	adds	r3, r0, #1
 800dbea:	d102      	bne.n	800dbf2 <_isatty_r+0x1a>
 800dbec:	682b      	ldr	r3, [r5, #0]
 800dbee:	b103      	cbz	r3, 800dbf2 <_isatty_r+0x1a>
 800dbf0:	6023      	str	r3, [r4, #0]
 800dbf2:	bd38      	pop	{r3, r4, r5, pc}
 800dbf4:	200021fc 	.word	0x200021fc

0800dbf8 <_init>:
 800dbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbfa:	bf00      	nop
 800dbfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbfe:	bc08      	pop	{r3}
 800dc00:	469e      	mov	lr, r3
 800dc02:	4770      	bx	lr

0800dc04 <_fini>:
 800dc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc06:	bf00      	nop
 800dc08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc0a:	bc08      	pop	{r3}
 800dc0c:	469e      	mov	lr, r3
 800dc0e:	4770      	bx	lr
