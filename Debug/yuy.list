
yuy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da28  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  0800dbb8  0800dbb8  0000ebb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dfa0  0800dfa0  0000f2c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dfa0  0800dfa0  0000efa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dfa8  0800dfa8  0000f2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dfa8  0800dfa8  0000efa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dfac  0800dfac  0000efac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800dfb0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f2c4  2**0
                  CONTENTS
 10 .bss          00001f68  200002c8  200002c8  0000f2c8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20002230  20002230  0000f2c8  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000f2c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016f98  00000000  00000000  0000f2ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b94  00000000  00000000  00026286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001548  00000000  00000000  00029e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001056  00000000  00000000  0002b368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024863  00000000  00000000  0002c3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bb56  00000000  00000000  00050c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1d0d  00000000  00000000  0006c777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013e484  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006bec  00000000  00000000  0013e4c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  001450b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c8 	.word	0x200002c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dba0 	.word	0x0800dba0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002cc 	.word	0x200002cc
 80001cc:	0800dba0 	.word	0x0800dba0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_frsub>:
 8000ba8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bac:	e002      	b.n	8000bb4 <__addsf3>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fsub>:
 8000bb0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bb4 <__addsf3>:
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	bf1f      	itttt	ne
 8000bb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bbc:	ea92 0f03 	teqne	r2, r3
 8000bc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc8:	d06a      	beq.n	8000ca0 <__addsf3+0xec>
 8000bca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd2:	bfc1      	itttt	gt
 8000bd4:	18d2      	addgt	r2, r2, r3
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	4048      	eorgt	r0, r1
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	2b19      	cmp	r3, #25
 8000be2:	bf88      	it	hi
 8000be4:	4770      	bxhi	lr
 8000be6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bee:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bfa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bfe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4249      	negne	r1, r1
 8000c06:	ea92 0f03 	teq	r2, r3
 8000c0a:	d03f      	beq.n	8000c8c <__addsf3+0xd8>
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	fa41 fc03 	asr.w	ip, r1, r3
 8000c14:	eb10 000c 	adds.w	r0, r0, ip
 8000c18:	f1c3 0320 	rsb	r3, r3, #32
 8000c1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c20:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__addsf3+0x78>
 8000c26:	4249      	negs	r1, r1
 8000c28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c2c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c30:	d313      	bcc.n	8000c5a <__addsf3+0xa6>
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c36:	d306      	bcc.n	8000c46 <__addsf3+0x92>
 8000c38:	0840      	lsrs	r0, r0, #1
 8000c3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3e:	f102 0201 	add.w	r2, r2, #1
 8000c42:	2afe      	cmp	r2, #254	@ 0xfe
 8000c44:	d251      	bcs.n	8000cea <__addsf3+0x136>
 8000c46:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	ea40 0003 	orr.w	r0, r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	eb40 0000 	adc.w	r0, r0, r0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	bf28      	it	cs
 8000c64:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c68:	d2ed      	bcs.n	8000c46 <__addsf3+0x92>
 8000c6a:	fab0 fc80 	clz	ip, r0
 8000c6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c72:	ebb2 020c 	subs.w	r2, r2, ip
 8000c76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7a:	bfaa      	itet	ge
 8000c7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c80:	4252      	neglt	r2, r2
 8000c82:	4318      	orrge	r0, r3
 8000c84:	bfbc      	itt	lt
 8000c86:	40d0      	lsrlt	r0, r2
 8000c88:	4318      	orrlt	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	f092 0f00 	teq	r2, #0
 8000c90:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c94:	bf06      	itte	eq
 8000c96:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c9a:	3201      	addeq	r2, #1
 8000c9c:	3b01      	subne	r3, #1
 8000c9e:	e7b5      	b.n	8000c0c <__addsf3+0x58>
 8000ca0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cae:	d021      	beq.n	8000cf4 <__addsf3+0x140>
 8000cb0:	ea92 0f03 	teq	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__addsf3+0x10c>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	bf08      	it	eq
 8000cbc:	4608      	moveq	r0, r1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea90 0f01 	teq	r0, r1
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	4770      	bxne	lr
 8000cca:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cce:	d104      	bne.n	8000cda <__addsf3+0x126>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cde:	bf3c      	itt	cc
 8000ce0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bxcc	lr
 8000ce6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cea:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf8:	bf16      	itet	ne
 8000cfa:	4608      	movne	r0, r1
 8000cfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d00:	4601      	movne	r1, r0
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	bf06      	itte	eq
 8000d06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0a:	ea90 0f01 	teqeq	r0, r1
 8000d0e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_ui2f>:
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e004      	b.n	8000d24 <__aeabi_i2f+0x8>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_i2f>:
 8000d1c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d20:	bf48      	it	mi
 8000d22:	4240      	negmi	r0, r0
 8000d24:	ea5f 0c00 	movs.w	ip, r0
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d30:	4601      	mov	r1, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	e01c      	b.n	8000d72 <__aeabi_l2f+0x2a>

08000d38 <__aeabi_ul2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e00a      	b.n	8000d5c <__aeabi_l2f+0x14>
 8000d46:	bf00      	nop

08000d48 <__aeabi_l2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__aeabi_l2f+0x14>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	ea5f 0c01 	movs.w	ip, r1
 8000d60:	bf02      	ittt	eq
 8000d62:	4684      	moveq	ip, r0
 8000d64:	4601      	moveq	r1, r0
 8000d66:	2000      	moveq	r0, #0
 8000d68:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d6c:	bf08      	it	eq
 8000d6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d76:	fabc f28c 	clz	r2, ip
 8000d7a:	3a08      	subs	r2, #8
 8000d7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d80:	db10      	blt.n	8000da4 <__aeabi_l2f+0x5c>
 8000d82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d94:	fa20 f202 	lsr.w	r2, r0, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f102 0220 	add.w	r2, r2, #32
 8000da8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db4:	fa21 f202 	lsr.w	r2, r1, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_fmul>:
 8000dc4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000dc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dcc:	bf1e      	ittt	ne
 8000dce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dd2:	ea92 0f0c 	teqne	r2, ip
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d06f      	beq.n	8000ebc <__aeabi_fmul+0xf8>
 8000ddc:	441a      	add	r2, r3
 8000dde:	ea80 0c01 	eor.w	ip, r0, r1
 8000de2:	0240      	lsls	r0, r0, #9
 8000de4:	bf18      	it	ne
 8000de6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dea:	d01e      	beq.n	8000e2a <__aeabi_fmul+0x66>
 8000dec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000df0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000df4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dfc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e00:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e04:	bf3e      	ittt	cc
 8000e06:	0049      	lslcc	r1, r1, #1
 8000e08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e0c:	005b      	lslcc	r3, r3, #1
 8000e0e:	ea40 0001 	orr.w	r0, r0, r1
 8000e12:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e16:	2afd      	cmp	r2, #253	@ 0xfd
 8000e18:	d81d      	bhi.n	8000e56 <__aeabi_fmul+0x92>
 8000e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e22:	bf08      	it	eq
 8000e24:	f020 0001 	biceq.w	r0, r0, #1
 8000e28:	4770      	bx	lr
 8000e2a:	f090 0f00 	teq	r0, #0
 8000e2e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e32:	bf08      	it	eq
 8000e34:	0249      	lsleq	r1, r1, #9
 8000e36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e3e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e40:	bfc2      	ittt	gt
 8000e42:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4a:	4770      	bxgt	lr
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	3a01      	subs	r2, #1
 8000e56:	dc5d      	bgt.n	8000f14 <__aeabi_fmul+0x150>
 8000e58:	f112 0f19 	cmn.w	r2, #25
 8000e5c:	bfdc      	itt	le
 8000e5e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e62:	4770      	bxle	lr
 8000e64:	f1c2 0200 	rsb	r2, r2, #0
 8000e68:	0041      	lsls	r1, r0, #1
 8000e6a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e6e:	f1c2 0220 	rsb	r2, r2, #32
 8000e72:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e76:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e7a:	f140 0000 	adc.w	r0, r0, #0
 8000e7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e82:	bf08      	it	eq
 8000e84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e88:	4770      	bx	lr
 8000e8a:	f092 0f00 	teq	r2, #0
 8000e8e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e92:	bf02      	ittt	eq
 8000e94:	0040      	lsleq	r0, r0, #1
 8000e96:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e9a:	3a01      	subeq	r2, #1
 8000e9c:	d0f9      	beq.n	8000e92 <__aeabi_fmul+0xce>
 8000e9e:	ea40 000c 	orr.w	r0, r0, ip
 8000ea2:	f093 0f00 	teq	r3, #0
 8000ea6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000eaa:	bf02      	ittt	eq
 8000eac:	0049      	lsleq	r1, r1, #1
 8000eae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eb2:	3b01      	subeq	r3, #1
 8000eb4:	d0f9      	beq.n	8000eaa <__aeabi_fmul+0xe6>
 8000eb6:	ea41 010c 	orr.w	r1, r1, ip
 8000eba:	e78f      	b.n	8000ddc <__aeabi_fmul+0x18>
 8000ebc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec0:	ea92 0f0c 	teq	r2, ip
 8000ec4:	bf18      	it	ne
 8000ec6:	ea93 0f0c 	teqne	r3, ip
 8000eca:	d00a      	beq.n	8000ee2 <__aeabi_fmul+0x11e>
 8000ecc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ed0:	bf18      	it	ne
 8000ed2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ed6:	d1d8      	bne.n	8000e8a <__aeabi_fmul+0xc6>
 8000ed8:	ea80 0001 	eor.w	r0, r0, r1
 8000edc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ee0:	4770      	bx	lr
 8000ee2:	f090 0f00 	teq	r0, #0
 8000ee6:	bf17      	itett	ne
 8000ee8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eec:	4608      	moveq	r0, r1
 8000eee:	f091 0f00 	teqne	r1, #0
 8000ef2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ef6:	d014      	beq.n	8000f22 <__aeabi_fmul+0x15e>
 8000ef8:	ea92 0f0c 	teq	r2, ip
 8000efc:	d101      	bne.n	8000f02 <__aeabi_fmul+0x13e>
 8000efe:	0242      	lsls	r2, r0, #9
 8000f00:	d10f      	bne.n	8000f22 <__aeabi_fmul+0x15e>
 8000f02:	ea93 0f0c 	teq	r3, ip
 8000f06:	d103      	bne.n	8000f10 <__aeabi_fmul+0x14c>
 8000f08:	024b      	lsls	r3, r1, #9
 8000f0a:	bf18      	it	ne
 8000f0c:	4608      	movne	r0, r1
 8000f0e:	d108      	bne.n	8000f22 <__aeabi_fmul+0x15e>
 8000f10:	ea80 0001 	eor.w	r0, r0, r1
 8000f14:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f20:	4770      	bx	lr
 8000f22:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f26:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f2a:	4770      	bx	lr

08000f2c <__aeabi_fdiv>:
 8000f2c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f34:	bf1e      	ittt	ne
 8000f36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f3a:	ea92 0f0c 	teqne	r2, ip
 8000f3e:	ea93 0f0c 	teqne	r3, ip
 8000f42:	d069      	beq.n	8001018 <__aeabi_fdiv+0xec>
 8000f44:	eba2 0203 	sub.w	r2, r2, r3
 8000f48:	ea80 0c01 	eor.w	ip, r0, r1
 8000f4c:	0249      	lsls	r1, r1, #9
 8000f4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f52:	d037      	beq.n	8000fc4 <__aeabi_fdiv+0x98>
 8000f54:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f60:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f64:	428b      	cmp	r3, r1
 8000f66:	bf38      	it	cc
 8000f68:	005b      	lslcc	r3, r3, #1
 8000f6a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f6e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f72:	428b      	cmp	r3, r1
 8000f74:	bf24      	itt	cs
 8000f76:	1a5b      	subcs	r3, r3, r1
 8000f78:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f80:	bf24      	itt	cs
 8000f82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f8e:	bf24      	itt	cs
 8000f90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f9c:	bf24      	itt	cs
 8000f9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fa2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	bf18      	it	ne
 8000faa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fae:	d1e0      	bne.n	8000f72 <__aeabi_fdiv+0x46>
 8000fb0:	2afd      	cmp	r2, #253	@ 0xfd
 8000fb2:	f63f af50 	bhi.w	8000e56 <__aeabi_fmul+0x92>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fbc:	bf08      	it	eq
 8000fbe:	f020 0001 	biceq.w	r0, r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fc8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fcc:	327f      	adds	r2, #127	@ 0x7f
 8000fce:	bfc2      	ittt	gt
 8000fd0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fd4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd8:	4770      	bxgt	lr
 8000fda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	3a01      	subs	r2, #1
 8000fe4:	e737      	b.n	8000e56 <__aeabi_fmul+0x92>
 8000fe6:	f092 0f00 	teq	r2, #0
 8000fea:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fee:	bf02      	ittt	eq
 8000ff0:	0040      	lsleq	r0, r0, #1
 8000ff2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ff6:	3a01      	subeq	r2, #1
 8000ff8:	d0f9      	beq.n	8000fee <__aeabi_fdiv+0xc2>
 8000ffa:	ea40 000c 	orr.w	r0, r0, ip
 8000ffe:	f093 0f00 	teq	r3, #0
 8001002:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001006:	bf02      	ittt	eq
 8001008:	0049      	lsleq	r1, r1, #1
 800100a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800100e:	3b01      	subeq	r3, #1
 8001010:	d0f9      	beq.n	8001006 <__aeabi_fdiv+0xda>
 8001012:	ea41 010c 	orr.w	r1, r1, ip
 8001016:	e795      	b.n	8000f44 <__aeabi_fdiv+0x18>
 8001018:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800101c:	ea92 0f0c 	teq	r2, ip
 8001020:	d108      	bne.n	8001034 <__aeabi_fdiv+0x108>
 8001022:	0242      	lsls	r2, r0, #9
 8001024:	f47f af7d 	bne.w	8000f22 <__aeabi_fmul+0x15e>
 8001028:	ea93 0f0c 	teq	r3, ip
 800102c:	f47f af70 	bne.w	8000f10 <__aeabi_fmul+0x14c>
 8001030:	4608      	mov	r0, r1
 8001032:	e776      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001034:	ea93 0f0c 	teq	r3, ip
 8001038:	d104      	bne.n	8001044 <__aeabi_fdiv+0x118>
 800103a:	024b      	lsls	r3, r1, #9
 800103c:	f43f af4c 	beq.w	8000ed8 <__aeabi_fmul+0x114>
 8001040:	4608      	mov	r0, r1
 8001042:	e76e      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001044:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001048:	bf18      	it	ne
 800104a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800104e:	d1ca      	bne.n	8000fe6 <__aeabi_fdiv+0xba>
 8001050:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001054:	f47f af5c 	bne.w	8000f10 <__aeabi_fmul+0x14c>
 8001058:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800105c:	f47f af3c 	bne.w	8000ed8 <__aeabi_fmul+0x114>
 8001060:	e75f      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001062:	bf00      	nop

08001064 <__gesf2>:
 8001064:	f04f 3cff 	mov.w	ip, #4294967295
 8001068:	e006      	b.n	8001078 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__lesf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	e002      	b.n	8001078 <__cmpsf2+0x4>
 8001072:	bf00      	nop

08001074 <__cmpsf2>:
 8001074:	f04f 0c01 	mov.w	ip, #1
 8001078:	f84d cd04 	str.w	ip, [sp, #-4]!
 800107c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001080:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001084:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001088:	bf18      	it	ne
 800108a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800108e:	d011      	beq.n	80010b4 <__cmpsf2+0x40>
 8001090:	b001      	add	sp, #4
 8001092:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001096:	bf18      	it	ne
 8001098:	ea90 0f01 	teqne	r0, r1
 800109c:	bf58      	it	pl
 800109e:	ebb2 0003 	subspl.w	r0, r2, r3
 80010a2:	bf88      	it	hi
 80010a4:	17c8      	asrhi	r0, r1, #31
 80010a6:	bf38      	it	cc
 80010a8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010ac:	bf18      	it	ne
 80010ae:	f040 0001 	orrne.w	r0, r0, #1
 80010b2:	4770      	bx	lr
 80010b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b8:	d102      	bne.n	80010c0 <__cmpsf2+0x4c>
 80010ba:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010be:	d105      	bne.n	80010cc <__cmpsf2+0x58>
 80010c0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c4:	d1e4      	bne.n	8001090 <__cmpsf2+0x1c>
 80010c6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ca:	d0e1      	beq.n	8001090 <__cmpsf2+0x1c>
 80010cc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop

080010d4 <__aeabi_cfrcmple>:
 80010d4:	4684      	mov	ip, r0
 80010d6:	4608      	mov	r0, r1
 80010d8:	4661      	mov	r1, ip
 80010da:	e7ff      	b.n	80010dc <__aeabi_cfcmpeq>

080010dc <__aeabi_cfcmpeq>:
 80010dc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010de:	f7ff ffc9 	bl	8001074 <__cmpsf2>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	bf48      	it	mi
 80010e6:	f110 0f00 	cmnmi.w	r0, #0
 80010ea:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ec <__aeabi_fcmpeq>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff fff4 	bl	80010dc <__aeabi_cfcmpeq>
 80010f4:	bf0c      	ite	eq
 80010f6:	2001      	moveq	r0, #1
 80010f8:	2000      	movne	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_fcmplt>:
 8001100:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001104:	f7ff ffea 	bl	80010dc <__aeabi_cfcmpeq>
 8001108:	bf34      	ite	cc
 800110a:	2001      	movcc	r0, #1
 800110c:	2000      	movcs	r0, #0
 800110e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001112:	bf00      	nop

08001114 <__aeabi_fcmple>:
 8001114:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001118:	f7ff ffe0 	bl	80010dc <__aeabi_cfcmpeq>
 800111c:	bf94      	ite	ls
 800111e:	2001      	movls	r0, #1
 8001120:	2000      	movhi	r0, #0
 8001122:	f85d fb08 	ldr.w	pc, [sp], #8
 8001126:	bf00      	nop

08001128 <__aeabi_fcmpge>:
 8001128:	f84d ed08 	str.w	lr, [sp, #-8]!
 800112c:	f7ff ffd2 	bl	80010d4 <__aeabi_cfrcmple>
 8001130:	bf94      	ite	ls
 8001132:	2001      	movls	r0, #1
 8001134:	2000      	movhi	r0, #0
 8001136:	f85d fb08 	ldr.w	pc, [sp], #8
 800113a:	bf00      	nop

0800113c <__aeabi_fcmpgt>:
 800113c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001140:	f7ff ffc8 	bl	80010d4 <__aeabi_cfrcmple>
 8001144:	bf34      	ite	cc
 8001146:	2001      	movcc	r0, #1
 8001148:	2000      	movcs	r0, #0
 800114a:	f85d fb08 	ldr.w	pc, [sp], #8
 800114e:	bf00      	nop

08001150 <__aeabi_f2uiz>:
 8001150:	0042      	lsls	r2, r0, #1
 8001152:	d20e      	bcs.n	8001172 <__aeabi_f2uiz+0x22>
 8001154:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001158:	d30b      	bcc.n	8001172 <__aeabi_f2uiz+0x22>
 800115a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800115e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001162:	d409      	bmi.n	8001178 <__aeabi_f2uiz+0x28>
 8001164:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001168:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800116c:	fa23 f002 	lsr.w	r0, r3, r2
 8001170:	4770      	bx	lr
 8001172:	f04f 0000 	mov.w	r0, #0
 8001176:	4770      	bx	lr
 8001178:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800117c:	d101      	bne.n	8001182 <__aeabi_f2uiz+0x32>
 800117e:	0242      	lsls	r2, r0, #9
 8001180:	d102      	bne.n	8001188 <__aeabi_f2uiz+0x38>
 8001182:	f04f 30ff 	mov.w	r0, #4294967295
 8001186:	4770      	bx	lr
 8001188:	f04f 0000 	mov.w	r0, #0
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop

08001190 <__aeabi_uldivmod>:
 8001190:	b953      	cbnz	r3, 80011a8 <__aeabi_uldivmod+0x18>
 8001192:	b94a      	cbnz	r2, 80011a8 <__aeabi_uldivmod+0x18>
 8001194:	2900      	cmp	r1, #0
 8001196:	bf08      	it	eq
 8001198:	2800      	cmpeq	r0, #0
 800119a:	bf1c      	itt	ne
 800119c:	f04f 31ff 	movne.w	r1, #4294967295
 80011a0:	f04f 30ff 	movne.w	r0, #4294967295
 80011a4:	f000 b96a 	b.w	800147c <__aeabi_idiv0>
 80011a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80011ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011b0:	f000 f806 	bl	80011c0 <__udivmoddi4>
 80011b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011bc:	b004      	add	sp, #16
 80011be:	4770      	bx	lr

080011c0 <__udivmoddi4>:
 80011c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011c4:	9d08      	ldr	r5, [sp, #32]
 80011c6:	460c      	mov	r4, r1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d14e      	bne.n	800126a <__udivmoddi4+0xaa>
 80011cc:	4694      	mov	ip, r2
 80011ce:	458c      	cmp	ip, r1
 80011d0:	4686      	mov	lr, r0
 80011d2:	fab2 f282 	clz	r2, r2
 80011d6:	d962      	bls.n	800129e <__udivmoddi4+0xde>
 80011d8:	b14a      	cbz	r2, 80011ee <__udivmoddi4+0x2e>
 80011da:	f1c2 0320 	rsb	r3, r2, #32
 80011de:	4091      	lsls	r1, r2
 80011e0:	fa20 f303 	lsr.w	r3, r0, r3
 80011e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80011e8:	4319      	orrs	r1, r3
 80011ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80011ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011f2:	fa1f f68c 	uxth.w	r6, ip
 80011f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80011fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011fe:	fb07 1114 	mls	r1, r7, r4, r1
 8001202:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001206:	fb04 f106 	mul.w	r1, r4, r6
 800120a:	4299      	cmp	r1, r3
 800120c:	d90a      	bls.n	8001224 <__udivmoddi4+0x64>
 800120e:	eb1c 0303 	adds.w	r3, ip, r3
 8001212:	f104 30ff 	add.w	r0, r4, #4294967295
 8001216:	f080 8112 	bcs.w	800143e <__udivmoddi4+0x27e>
 800121a:	4299      	cmp	r1, r3
 800121c:	f240 810f 	bls.w	800143e <__udivmoddi4+0x27e>
 8001220:	3c02      	subs	r4, #2
 8001222:	4463      	add	r3, ip
 8001224:	1a59      	subs	r1, r3, r1
 8001226:	fa1f f38e 	uxth.w	r3, lr
 800122a:	fbb1 f0f7 	udiv	r0, r1, r7
 800122e:	fb07 1110 	mls	r1, r7, r0, r1
 8001232:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001236:	fb00 f606 	mul.w	r6, r0, r6
 800123a:	429e      	cmp	r6, r3
 800123c:	d90a      	bls.n	8001254 <__udivmoddi4+0x94>
 800123e:	eb1c 0303 	adds.w	r3, ip, r3
 8001242:	f100 31ff 	add.w	r1, r0, #4294967295
 8001246:	f080 80fc 	bcs.w	8001442 <__udivmoddi4+0x282>
 800124a:	429e      	cmp	r6, r3
 800124c:	f240 80f9 	bls.w	8001442 <__udivmoddi4+0x282>
 8001250:	4463      	add	r3, ip
 8001252:	3802      	subs	r0, #2
 8001254:	1b9b      	subs	r3, r3, r6
 8001256:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800125a:	2100      	movs	r1, #0
 800125c:	b11d      	cbz	r5, 8001266 <__udivmoddi4+0xa6>
 800125e:	40d3      	lsrs	r3, r2
 8001260:	2200      	movs	r2, #0
 8001262:	e9c5 3200 	strd	r3, r2, [r5]
 8001266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800126a:	428b      	cmp	r3, r1
 800126c:	d905      	bls.n	800127a <__udivmoddi4+0xba>
 800126e:	b10d      	cbz	r5, 8001274 <__udivmoddi4+0xb4>
 8001270:	e9c5 0100 	strd	r0, r1, [r5]
 8001274:	2100      	movs	r1, #0
 8001276:	4608      	mov	r0, r1
 8001278:	e7f5      	b.n	8001266 <__udivmoddi4+0xa6>
 800127a:	fab3 f183 	clz	r1, r3
 800127e:	2900      	cmp	r1, #0
 8001280:	d146      	bne.n	8001310 <__udivmoddi4+0x150>
 8001282:	42a3      	cmp	r3, r4
 8001284:	d302      	bcc.n	800128c <__udivmoddi4+0xcc>
 8001286:	4290      	cmp	r0, r2
 8001288:	f0c0 80f0 	bcc.w	800146c <__udivmoddi4+0x2ac>
 800128c:	1a86      	subs	r6, r0, r2
 800128e:	eb64 0303 	sbc.w	r3, r4, r3
 8001292:	2001      	movs	r0, #1
 8001294:	2d00      	cmp	r5, #0
 8001296:	d0e6      	beq.n	8001266 <__udivmoddi4+0xa6>
 8001298:	e9c5 6300 	strd	r6, r3, [r5]
 800129c:	e7e3      	b.n	8001266 <__udivmoddi4+0xa6>
 800129e:	2a00      	cmp	r2, #0
 80012a0:	f040 8090 	bne.w	80013c4 <__udivmoddi4+0x204>
 80012a4:	eba1 040c 	sub.w	r4, r1, ip
 80012a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012ac:	fa1f f78c 	uxth.w	r7, ip
 80012b0:	2101      	movs	r1, #1
 80012b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80012b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80012ba:	fb08 4416 	mls	r4, r8, r6, r4
 80012be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012c2:	fb07 f006 	mul.w	r0, r7, r6
 80012c6:	4298      	cmp	r0, r3
 80012c8:	d908      	bls.n	80012dc <__udivmoddi4+0x11c>
 80012ca:	eb1c 0303 	adds.w	r3, ip, r3
 80012ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80012d2:	d202      	bcs.n	80012da <__udivmoddi4+0x11a>
 80012d4:	4298      	cmp	r0, r3
 80012d6:	f200 80cd 	bhi.w	8001474 <__udivmoddi4+0x2b4>
 80012da:	4626      	mov	r6, r4
 80012dc:	1a1c      	subs	r4, r3, r0
 80012de:	fa1f f38e 	uxth.w	r3, lr
 80012e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80012e6:	fb08 4410 	mls	r4, r8, r0, r4
 80012ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012ee:	fb00 f707 	mul.w	r7, r0, r7
 80012f2:	429f      	cmp	r7, r3
 80012f4:	d908      	bls.n	8001308 <__udivmoddi4+0x148>
 80012f6:	eb1c 0303 	adds.w	r3, ip, r3
 80012fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80012fe:	d202      	bcs.n	8001306 <__udivmoddi4+0x146>
 8001300:	429f      	cmp	r7, r3
 8001302:	f200 80b0 	bhi.w	8001466 <__udivmoddi4+0x2a6>
 8001306:	4620      	mov	r0, r4
 8001308:	1bdb      	subs	r3, r3, r7
 800130a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800130e:	e7a5      	b.n	800125c <__udivmoddi4+0x9c>
 8001310:	f1c1 0620 	rsb	r6, r1, #32
 8001314:	408b      	lsls	r3, r1
 8001316:	fa22 f706 	lsr.w	r7, r2, r6
 800131a:	431f      	orrs	r7, r3
 800131c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001320:	fa04 f301 	lsl.w	r3, r4, r1
 8001324:	ea43 030c 	orr.w	r3, r3, ip
 8001328:	40f4      	lsrs	r4, r6
 800132a:	fa00 f801 	lsl.w	r8, r0, r1
 800132e:	0c38      	lsrs	r0, r7, #16
 8001330:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001334:	fbb4 fef0 	udiv	lr, r4, r0
 8001338:	fa1f fc87 	uxth.w	ip, r7
 800133c:	fb00 441e 	mls	r4, r0, lr, r4
 8001340:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001344:	fb0e f90c 	mul.w	r9, lr, ip
 8001348:	45a1      	cmp	r9, r4
 800134a:	fa02 f201 	lsl.w	r2, r2, r1
 800134e:	d90a      	bls.n	8001366 <__udivmoddi4+0x1a6>
 8001350:	193c      	adds	r4, r7, r4
 8001352:	f10e 3aff 	add.w	sl, lr, #4294967295
 8001356:	f080 8084 	bcs.w	8001462 <__udivmoddi4+0x2a2>
 800135a:	45a1      	cmp	r9, r4
 800135c:	f240 8081 	bls.w	8001462 <__udivmoddi4+0x2a2>
 8001360:	f1ae 0e02 	sub.w	lr, lr, #2
 8001364:	443c      	add	r4, r7
 8001366:	eba4 0409 	sub.w	r4, r4, r9
 800136a:	fa1f f983 	uxth.w	r9, r3
 800136e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001372:	fb00 4413 	mls	r4, r0, r3, r4
 8001376:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800137a:	fb03 fc0c 	mul.w	ip, r3, ip
 800137e:	45a4      	cmp	ip, r4
 8001380:	d907      	bls.n	8001392 <__udivmoddi4+0x1d2>
 8001382:	193c      	adds	r4, r7, r4
 8001384:	f103 30ff 	add.w	r0, r3, #4294967295
 8001388:	d267      	bcs.n	800145a <__udivmoddi4+0x29a>
 800138a:	45a4      	cmp	ip, r4
 800138c:	d965      	bls.n	800145a <__udivmoddi4+0x29a>
 800138e:	3b02      	subs	r3, #2
 8001390:	443c      	add	r4, r7
 8001392:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001396:	fba0 9302 	umull	r9, r3, r0, r2
 800139a:	eba4 040c 	sub.w	r4, r4, ip
 800139e:	429c      	cmp	r4, r3
 80013a0:	46ce      	mov	lr, r9
 80013a2:	469c      	mov	ip, r3
 80013a4:	d351      	bcc.n	800144a <__udivmoddi4+0x28a>
 80013a6:	d04e      	beq.n	8001446 <__udivmoddi4+0x286>
 80013a8:	b155      	cbz	r5, 80013c0 <__udivmoddi4+0x200>
 80013aa:	ebb8 030e 	subs.w	r3, r8, lr
 80013ae:	eb64 040c 	sbc.w	r4, r4, ip
 80013b2:	fa04 f606 	lsl.w	r6, r4, r6
 80013b6:	40cb      	lsrs	r3, r1
 80013b8:	431e      	orrs	r6, r3
 80013ba:	40cc      	lsrs	r4, r1
 80013bc:	e9c5 6400 	strd	r6, r4, [r5]
 80013c0:	2100      	movs	r1, #0
 80013c2:	e750      	b.n	8001266 <__udivmoddi4+0xa6>
 80013c4:	f1c2 0320 	rsb	r3, r2, #32
 80013c8:	fa20 f103 	lsr.w	r1, r0, r3
 80013cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80013d0:	fa24 f303 	lsr.w	r3, r4, r3
 80013d4:	4094      	lsls	r4, r2
 80013d6:	430c      	orrs	r4, r1
 80013d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80013dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80013e0:	fa1f f78c 	uxth.w	r7, ip
 80013e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80013e8:	fb08 3110 	mls	r1, r8, r0, r3
 80013ec:	0c23      	lsrs	r3, r4, #16
 80013ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013f2:	fb00 f107 	mul.w	r1, r0, r7
 80013f6:	4299      	cmp	r1, r3
 80013f8:	d908      	bls.n	800140c <__udivmoddi4+0x24c>
 80013fa:	eb1c 0303 	adds.w	r3, ip, r3
 80013fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8001402:	d22c      	bcs.n	800145e <__udivmoddi4+0x29e>
 8001404:	4299      	cmp	r1, r3
 8001406:	d92a      	bls.n	800145e <__udivmoddi4+0x29e>
 8001408:	3802      	subs	r0, #2
 800140a:	4463      	add	r3, ip
 800140c:	1a5b      	subs	r3, r3, r1
 800140e:	b2a4      	uxth	r4, r4
 8001410:	fbb3 f1f8 	udiv	r1, r3, r8
 8001414:	fb08 3311 	mls	r3, r8, r1, r3
 8001418:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800141c:	fb01 f307 	mul.w	r3, r1, r7
 8001420:	42a3      	cmp	r3, r4
 8001422:	d908      	bls.n	8001436 <__udivmoddi4+0x276>
 8001424:	eb1c 0404 	adds.w	r4, ip, r4
 8001428:	f101 36ff 	add.w	r6, r1, #4294967295
 800142c:	d213      	bcs.n	8001456 <__udivmoddi4+0x296>
 800142e:	42a3      	cmp	r3, r4
 8001430:	d911      	bls.n	8001456 <__udivmoddi4+0x296>
 8001432:	3902      	subs	r1, #2
 8001434:	4464      	add	r4, ip
 8001436:	1ae4      	subs	r4, r4, r3
 8001438:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800143c:	e739      	b.n	80012b2 <__udivmoddi4+0xf2>
 800143e:	4604      	mov	r4, r0
 8001440:	e6f0      	b.n	8001224 <__udivmoddi4+0x64>
 8001442:	4608      	mov	r0, r1
 8001444:	e706      	b.n	8001254 <__udivmoddi4+0x94>
 8001446:	45c8      	cmp	r8, r9
 8001448:	d2ae      	bcs.n	80013a8 <__udivmoddi4+0x1e8>
 800144a:	ebb9 0e02 	subs.w	lr, r9, r2
 800144e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001452:	3801      	subs	r0, #1
 8001454:	e7a8      	b.n	80013a8 <__udivmoddi4+0x1e8>
 8001456:	4631      	mov	r1, r6
 8001458:	e7ed      	b.n	8001436 <__udivmoddi4+0x276>
 800145a:	4603      	mov	r3, r0
 800145c:	e799      	b.n	8001392 <__udivmoddi4+0x1d2>
 800145e:	4630      	mov	r0, r6
 8001460:	e7d4      	b.n	800140c <__udivmoddi4+0x24c>
 8001462:	46d6      	mov	lr, sl
 8001464:	e77f      	b.n	8001366 <__udivmoddi4+0x1a6>
 8001466:	4463      	add	r3, ip
 8001468:	3802      	subs	r0, #2
 800146a:	e74d      	b.n	8001308 <__udivmoddi4+0x148>
 800146c:	4606      	mov	r6, r0
 800146e:	4623      	mov	r3, r4
 8001470:	4608      	mov	r0, r1
 8001472:	e70f      	b.n	8001294 <__udivmoddi4+0xd4>
 8001474:	3e02      	subs	r6, #2
 8001476:	4463      	add	r3, ip
 8001478:	e730      	b.n	80012dc <__udivmoddi4+0x11c>
 800147a:	bf00      	nop

0800147c <__aeabi_idiv0>:
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop

08001480 <lp_filter_init>:
 *      Author: siyoums
 */
#include "filter.h"


void lp_filter_init(LPFilter_t *filt, float cutoff_freq, float sample_time_s) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
	float rc = 1.0f / (6.28318530718f * cutoff_freq);
 800148c:	4918      	ldr	r1, [pc, #96]	@ (80014f0 <lp_filter_init+0x70>)
 800148e:	68b8      	ldr	r0, [r7, #8]
 8001490:	f7ff fc98 	bl	8000dc4 <__aeabi_fmul>
 8001494:	4603      	mov	r3, r0
 8001496:	4619      	mov	r1, r3
 8001498:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800149c:	f7ff fd46 	bl	8000f2c <__aeabi_fdiv>
 80014a0:	4603      	mov	r3, r0
 80014a2:	617b      	str	r3, [r7, #20]

	filt->coeff[0] = sample_time_s / (sample_time_s + rc);
 80014a4:	6979      	ldr	r1, [r7, #20]
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fb84 	bl	8000bb4 <__addsf3>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4619      	mov	r1, r3
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff fd3b 	bl	8000f2c <__aeabi_fdiv>
 80014b6:	4603      	mov	r3, r0
 80014b8:	461a      	mov	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	601a      	str	r2, [r3, #0]
	filt->coeff[1] = rc / (sample_time_s + rc);
 80014be:	6979      	ldr	r1, [r7, #20]
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff fb77 	bl	8000bb4 <__addsf3>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4619      	mov	r1, r3
 80014ca:	6978      	ldr	r0, [r7, #20]
 80014cc:	f7ff fd2e 	bl	8000f2c <__aeabi_fdiv>
 80014d0:	4603      	mov	r3, r0
 80014d2:	461a      	mov	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	605a      	str	r2, [r3, #4]

	filt->out[0] = 0.0f;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
	filt->out[1] = 0.0f;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]

}
 80014e8:	bf00      	nop
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40c90fdb 	.word	0x40c90fdb

080014f4 <lp_filter_update>:

float lp_filter_update(LPFilter_t *filt, float inp) {
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
	// shift the new sample to the old one evey time an update happens
	filt->out[1] = filt->out[0];
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	60da      	str	r2, [r3, #12]

	// difference equation in discrete time (from backwards euler)
	filt->out[0] = (filt->coeff[0] * inp) + (filt->coeff[1] * filt->out[1]);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6839      	ldr	r1, [r7, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fc59 	bl	8000dc4 <__aeabi_fmul>
 8001512:	4603      	mov	r3, r0
 8001514:	461c      	mov	r4, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	4619      	mov	r1, r3
 8001520:	4610      	mov	r0, r2
 8001522:	f7ff fc4f 	bl	8000dc4 <__aeabi_fmul>
 8001526:	4603      	mov	r3, r0
 8001528:	4619      	mov	r1, r3
 800152a:	4620      	mov	r0, r4
 800152c:	f7ff fb42 	bl	8000bb4 <__addsf3>
 8001530:	4603      	mov	r3, r0
 8001532:	461a      	mov	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	609a      	str	r2, [r3, #8]

	return (filt->out[0]);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bd90      	pop	{r4, r7, pc}

08001544 <fir_filter_init>:
// fir

//float fir_inpulse_response[]= {-0.0032906f,-0.0052635f,-0.0068811f,0.0000000f,0.0254209f,0.0724719f,0.1311260f,0.1805961f,0.2000000f,0.1805961f,0.1311260f,0.0724719f,0.0254209f,0.0000000f,-0.0068811f,-0.0052635f};
float fir_inpulse_response[]= {0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1};

void fir_filter_init(FIRFilter_t *filt) {
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	// clear filter buffer
	for (uint8_t i = 0; i < FIR_FILTER_LENGTH; i++) {
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e008      	b.n	8001564 <fir_filter_init+0x20>
		filt->buf[i] = 0.0f;
 8001552:	7bfa      	ldrb	r2, [r7, #15]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f04f 0100 	mov.w	r1, #0
 800155a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint8_t i = 0; i < FIR_FILTER_LENGTH; i++) {
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	3301      	adds	r3, #1
 8001562:	73fb      	strb	r3, [r7, #15]
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	2b09      	cmp	r3, #9
 8001568:	d9f3      	bls.n	8001552 <fir_filter_init+0xe>
	}

	filt->buf_index = 0;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

	filt->out = 0.0f;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800157a:	bf00      	nop
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <HAL_GPIO_EXTI_Callback>:
//	HAL_I2C_ER_IRQHandler(&hi2c1);
//}

char buffer[128];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
		if (GPIO_Pin == INT_MPU_Pin) {
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	2b04      	cmp	r3, #4
 8001592:	d103      	bne.n	800159c <HAL_GPIO_EXTI_Callback+0x18>
			mpu6050_read_accel_dma(&hi2c1, &accelerometer);
 8001594:	4903      	ldr	r1, [pc, #12]	@ (80015a4 <HAL_GPIO_EXTI_Callback+0x20>)
 8001596:	4804      	ldr	r0, [pc, #16]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x24>)
 8001598:	f000 fb14 	bl	8001bc4 <mpu6050_read_accel_dma>
	}
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000420 	.word	0x20000420
 80015a8:	200002e4 	.word	0x200002e4

080015ac <HAL_I2C_MemRxCpltCallback>:

// handle dma complete inturrept
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af02      	add	r7, sp, #8
 80015b2:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a12      	ldr	r2, [pc, #72]	@ (8001604 <HAL_I2C_MemRxCpltCallback+0x58>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d11e      	bne.n	80015fc <HAL_I2C_MemRxCpltCallback+0x50>
    	mpu6050_read_accel_dma_complete(&hi2c1, &accelerometer);
 80015be:	4912      	ldr	r1, [pc, #72]	@ (8001608 <HAL_I2C_MemRxCpltCallback+0x5c>)
 80015c0:	4812      	ldr	r0, [pc, #72]	@ (800160c <HAL_I2C_MemRxCpltCallback+0x60>)
 80015c2:	f000 fb18 	bl	8001bf6 <mpu6050_read_accel_dma_complete>
//    	mpu6050_process_after_filter(&hi2c1, &accelerometer); // conversion to g's
    	lp_filter_update(&lpf_acc, (float)accelerometer.Accel_X_RAW);
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <HAL_I2C_MemRxCpltCallback+0x5c>)
 80015c8:	891b      	ldrh	r3, [r3, #8]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fba2 	bl	8000d14 <__aeabi_ui2f>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4619      	mov	r1, r3
 80015d4:	480e      	ldr	r0, [pc, #56]	@ (8001610 <HAL_I2C_MemRxCpltCallback+0x64>)
 80015d6:	f7ff ff8d 	bl	80014f4 <lp_filter_update>
//    	fir_filter_update(&mvAvg, accelerometer.Accel_X_RAW);
    	sprintf(buffer, "%u,%.4f\r", accelerometer.Accel_X_RAW, lpf_acc.out[0]);
 80015da:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <HAL_I2C_MemRxCpltCallback+0x5c>)
 80015dc:	891b      	ldrh	r3, [r3, #8]
 80015de:	461c      	mov	r4, r3
 80015e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <HAL_I2C_MemRxCpltCallback+0x64>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ffaf 	bl	8000548 <__aeabi_f2d>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	e9cd 2300 	strd	r2, r3, [sp]
 80015f2:	4622      	mov	r2, r4
 80015f4:	4907      	ldr	r1, [pc, #28]	@ (8001614 <HAL_I2C_MemRxCpltCallback+0x68>)
 80015f6:	4808      	ldr	r0, [pc, #32]	@ (8001618 <HAL_I2C_MemRxCpltCallback+0x6c>)
 80015f8:	f00a f9a8 	bl	800b94c <siprintf>
    }
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	bd90      	pop	{r4, r7, pc}
 8001604:	40005400 	.word	0x40005400
 8001608:	20000420 	.word	0x20000420
 800160c:	200002e4 	.word	0x200002e4
 8001610:	200003e0 	.word	0x200003e0
 8001614:	0800dbb8 	.word	0x0800dbb8
 8001618:	20000478 	.word	0x20000478

0800161c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001622:	f000 fd4f 	bl	80020c4 <HAL_Init>

  /* USER CODE BEGIN Init */
  lp_filter_init(&lpf_acc, 5.0f, 0.01f);
 8001626:	4a2f      	ldr	r2, [pc, #188]	@ (80016e4 <main+0xc8>)
 8001628:	492f      	ldr	r1, [pc, #188]	@ (80016e8 <main+0xcc>)
 800162a:	4830      	ldr	r0, [pc, #192]	@ (80016ec <main+0xd0>)
 800162c:	f7ff ff28 	bl	8001480 <lp_filter_init>
  fir_filter_init(&firAcc);
 8001630:	482f      	ldr	r0, [pc, #188]	@ (80016f0 <main+0xd4>)
 8001632:	f7ff ff87 	bl	8001544 <fir_filter_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001636:	f000 f869 	bl	800170c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800163a:	f000 f995 	bl	8001968 <MX_GPIO_Init>
  MX_DMA_Init();
 800163e:	f000 f973 	bl	8001928 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8001642:	f008 ff55 	bl	800a4f0 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8001646:	f000 f8cb 	bl	80017e0 <MX_I2C1_Init>
  MX_TIM4_Init();
 800164a:	f000 f8f7 	bl	800183c <MX_TIM4_Init>

  /* USER CODE BEGIN 2 */
  while (mpu6050_init(&hi2c1, &accelerometer) == 1);
 800164e:	bf00      	nop
 8001650:	4928      	ldr	r1, [pc, #160]	@ (80016f4 <main+0xd8>)
 8001652:	4829      	ldr	r0, [pc, #164]	@ (80016f8 <main+0xdc>)
 8001654:	f000 f9fc 	bl	8001a50 <mpu6050_init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b01      	cmp	r3, #1
 800165c:	d0f8      	beq.n	8001650 <main+0x34>
  float duty_cycle = 0.0f;
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
  uint32_t tim4_start_time = HAL_GetTick();
 8001664:	f000 fd92 	bl	800218c <HAL_GetTick>
 8001668:	60b8      	str	r0, [r7, #8]
  uint32_t cdc_start_time = HAL_GetTick();
 800166a:	f000 fd8f 	bl	800218c <HAL_GetTick>
 800166e:	6078      	str	r0, [r7, #4]


  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001670:	2104      	movs	r1, #4
 8001672:	4822      	ldr	r0, [pc, #136]	@ (80016fc <main+0xe0>)
 8001674:	f004 fe80 	bl	8006378 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GetTick() - tim4_start_time >= 10) {
 8001678:	f000 fd88 	bl	800218c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b09      	cmp	r3, #9
 8001684:	d919      	bls.n	80016ba <main+0x9e>
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, (uint32_t)duty_cycle);
 8001686:	4b1d      	ldr	r3, [pc, #116]	@ (80016fc <main+0xe0>)
 8001688:	681c      	ldr	r4, [r3, #0]
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f7ff fd60 	bl	8001150 <__aeabi_f2uiz>
 8001690:	4603      	mov	r3, r0
 8001692:	63a3      	str	r3, [r4, #56]	@ 0x38
		  duty_cycle += 10.0f;
 8001694:	491a      	ldr	r1, [pc, #104]	@ (8001700 <main+0xe4>)
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f7ff fa8c 	bl	8000bb4 <__addsf3>
 800169c:	4603      	mov	r3, r0
 800169e:	60fb      	str	r3, [r7, #12]
		  if (duty_cycle > 1000.0) {
 80016a0:	4918      	ldr	r1, [pc, #96]	@ (8001704 <main+0xe8>)
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f7ff fd4a 	bl	800113c <__aeabi_fcmpgt>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <main+0x98>
			  duty_cycle = 0.0f;
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
		  }
		  tim4_start_time = HAL_GetTick();
 80016b4:	f000 fd6a 	bl	800218c <HAL_GetTick>
 80016b8:	60b8      	str	r0, [r7, #8]
	  }

	  if (HAL_GetTick() - cdc_start_time >= 10) {
 80016ba:	f000 fd67 	bl	800218c <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b09      	cmp	r3, #9
 80016c6:	d9d7      	bls.n	8001678 <main+0x5c>

		  CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
 80016c8:	480f      	ldr	r0, [pc, #60]	@ (8001708 <main+0xec>)
 80016ca:	f7fe fdd1 	bl	8000270 <strlen>
 80016ce:	4603      	mov	r3, r0
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	4619      	mov	r1, r3
 80016d4:	480c      	ldr	r0, [pc, #48]	@ (8001708 <main+0xec>)
 80016d6:	f008 ffc9 	bl	800a66c <CDC_Transmit_FS>
		  cdc_start_time = HAL_GetTick();
 80016da:	f000 fd57 	bl	800218c <HAL_GetTick>
 80016de:	6078      	str	r0, [r7, #4]
	  if (HAL_GetTick() - tim4_start_time >= 10) {
 80016e0:	e7ca      	b.n	8001678 <main+0x5c>
 80016e2:	bf00      	nop
 80016e4:	3c23d70a 	.word	0x3c23d70a
 80016e8:	40a00000 	.word	0x40a00000
 80016ec:	200003e0 	.word	0x200003e0
 80016f0:	200003f0 	.word	0x200003f0
 80016f4:	20000420 	.word	0x20000420
 80016f8:	200002e4 	.word	0x200002e4
 80016fc:	20000398 	.word	0x20000398
 8001700:	41200000 	.word	0x41200000
 8001704:	447a0000 	.word	0x447a0000
 8001708:	20000478 	.word	0x20000478

0800170c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b094      	sub	sp, #80	@ 0x50
 8001710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001712:	f107 0320 	add.w	r3, r7, #32
 8001716:	2230      	movs	r2, #48	@ 0x30
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f00a f979 	bl	800ba12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	4b28      	ldr	r3, [pc, #160]	@ (80017d8 <SystemClock_Config+0xcc>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001738:	4a27      	ldr	r2, [pc, #156]	@ (80017d8 <SystemClock_Config+0xcc>)
 800173a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800173e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001740:	4b25      	ldr	r3, [pc, #148]	@ (80017d8 <SystemClock_Config+0xcc>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800174c:	2300      	movs	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	4b22      	ldr	r3, [pc, #136]	@ (80017dc <SystemClock_Config+0xd0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a21      	ldr	r2, [pc, #132]	@ (80017dc <SystemClock_Config+0xd0>)
 8001756:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	4b1f      	ldr	r3, [pc, #124]	@ (80017dc <SystemClock_Config+0xd0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001768:	2301      	movs	r3, #1
 800176a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800176c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001772:	2302      	movs	r3, #2
 8001774:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001776:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800177a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800177c:	2304      	movs	r3, #4
 800177e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001780:	23a8      	movs	r3, #168	@ 0xa8
 8001782:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001784:	2302      	movs	r3, #2
 8001786:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001788:	2307      	movs	r3, #7
 800178a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178c:	f107 0320 	add.w	r3, r7, #32
 8001790:	4618      	mov	r0, r3
 8001792:	f004 f8c1 	bl	8005918 <HAL_RCC_OscConfig>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800179c:	f000 f952 	bl	8001a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a0:	230f      	movs	r3, #15
 80017a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a4:	2302      	movs	r3, #2
 80017a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	2105      	movs	r1, #5
 80017be:	4618      	mov	r0, r3
 80017c0:	f004 fb22 	bl	8005e08 <HAL_RCC_ClockConfig>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017ca:	f000 f93b 	bl	8001a44 <Error_Handler>
  }
}
 80017ce:	bf00      	nop
 80017d0:	3750      	adds	r7, #80	@ 0x50
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40007000 	.word	0x40007000

080017e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017e4:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <MX_I2C1_Init+0x50>)
 80017e6:	4a13      	ldr	r2, [pc, #76]	@ (8001834 <MX_I2C1_Init+0x54>)
 80017e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017ea:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <MX_I2C1_Init+0x50>)
 80017ec:	4a12      	ldr	r2, [pc, #72]	@ (8001838 <MX_I2C1_Init+0x58>)
 80017ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <MX_I2C1_Init+0x50>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <MX_I2C1_Init+0x50>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <MX_I2C1_Init+0x50>)
 80017fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001802:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001804:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <MX_I2C1_Init+0x50>)
 8001806:	2200      	movs	r2, #0
 8001808:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <MX_I2C1_Init+0x50>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <MX_I2C1_Init+0x50>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <MX_I2C1_Init+0x50>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800181c:	4804      	ldr	r0, [pc, #16]	@ (8001830 <MX_I2C1_Init+0x50>)
 800181e:	f001 fb3b 	bl	8002e98 <HAL_I2C_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001828:	f000 f90c 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	200002e4 	.word	0x200002e4
 8001834:	40005400 	.word	0x40005400
 8001838:	000186a0 	.word	0x000186a0

0800183c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08e      	sub	sp, #56	@ 0x38
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001842:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001850:	f107 0320 	add.w	r3, r7, #32
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
 8001868:	615a      	str	r2, [r3, #20]
 800186a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800186c:	4b2c      	ldr	r3, [pc, #176]	@ (8001920 <MX_TIM4_Init+0xe4>)
 800186e:	4a2d      	ldr	r2, [pc, #180]	@ (8001924 <MX_TIM4_Init+0xe8>)
 8001870:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001872:	4b2b      	ldr	r3, [pc, #172]	@ (8001920 <MX_TIM4_Init+0xe4>)
 8001874:	2253      	movs	r2, #83	@ 0x53
 8001876:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001878:	4b29      	ldr	r3, [pc, #164]	@ (8001920 <MX_TIM4_Init+0xe4>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800187e:	4b28      	ldr	r3, [pc, #160]	@ (8001920 <MX_TIM4_Init+0xe4>)
 8001880:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001884:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001886:	4b26      	ldr	r3, [pc, #152]	@ (8001920 <MX_TIM4_Init+0xe4>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188c:	4b24      	ldr	r3, [pc, #144]	@ (8001920 <MX_TIM4_Init+0xe4>)
 800188e:	2200      	movs	r2, #0
 8001890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001892:	4823      	ldr	r0, [pc, #140]	@ (8001920 <MX_TIM4_Init+0xe4>)
 8001894:	f004 fcc8 	bl	8006228 <HAL_TIM_Base_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800189e:	f000 f8d1 	bl	8001a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80018a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018ac:	4619      	mov	r1, r3
 80018ae:	481c      	ldr	r0, [pc, #112]	@ (8001920 <MX_TIM4_Init+0xe4>)
 80018b0:	f004 feec 	bl	800668c <HAL_TIM_ConfigClockSource>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80018ba:	f000 f8c3 	bl	8001a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80018be:	4818      	ldr	r0, [pc, #96]	@ (8001920 <MX_TIM4_Init+0xe4>)
 80018c0:	f004 fd01 	bl	80062c6 <HAL_TIM_PWM_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80018ca:	f000 f8bb 	bl	8001a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018d6:	f107 0320 	add.w	r3, r7, #32
 80018da:	4619      	mov	r1, r3
 80018dc:	4810      	ldr	r0, [pc, #64]	@ (8001920 <MX_TIM4_Init+0xe4>)
 80018de:	f005 faad 	bl	8006e3c <HAL_TIMEx_MasterConfigSynchronization>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80018e8:	f000 f8ac 	bl	8001a44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ec:	2360      	movs	r3, #96	@ 0x60
 80018ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	2204      	movs	r2, #4
 8001900:	4619      	mov	r1, r3
 8001902:	4807      	ldr	r0, [pc, #28]	@ (8001920 <MX_TIM4_Init+0xe4>)
 8001904:	f004 fe00 	bl	8006508 <HAL_TIM_PWM_ConfigChannel>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800190e:	f000 f899 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001912:	4803      	ldr	r0, [pc, #12]	@ (8001920 <MX_TIM4_Init+0xe4>)
 8001914:	f000 fa62 	bl	8001ddc <HAL_TIM_MspPostInit>

}
 8001918:	bf00      	nop
 800191a:	3738      	adds	r7, #56	@ 0x38
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000398 	.word	0x20000398
 8001924:	40000800 	.word	0x40000800

08001928 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <MX_DMA_Init+0x3c>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a0b      	ldr	r2, [pc, #44]	@ (8001964 <MX_DMA_Init+0x3c>)
 8001938:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <MX_DMA_Init+0x3c>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	2100      	movs	r1, #0
 800194e:	2010      	movs	r0, #16
 8001950:	f000 fd21 	bl	8002396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001954:	2010      	movs	r0, #16
 8001956:	f000 fd3a 	bl	80023ce <HAL_NVIC_EnableIRQ>

}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800

08001968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	@ 0x28
 800196c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	4b2e      	ldr	r3, [pc, #184]	@ (8001a3c <MX_GPIO_Init+0xd4>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	4a2d      	ldr	r2, [pc, #180]	@ (8001a3c <MX_GPIO_Init+0xd4>)
 8001988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800198c:	6313      	str	r3, [r2, #48]	@ 0x30
 800198e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a3c <MX_GPIO_Init+0xd4>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	4b27      	ldr	r3, [pc, #156]	@ (8001a3c <MX_GPIO_Init+0xd4>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	4a26      	ldr	r2, [pc, #152]	@ (8001a3c <MX_GPIO_Init+0xd4>)
 80019a4:	f043 0304 	orr.w	r3, r3, #4
 80019a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019aa:	4b24      	ldr	r3, [pc, #144]	@ (8001a3c <MX_GPIO_Init+0xd4>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	4b20      	ldr	r3, [pc, #128]	@ (8001a3c <MX_GPIO_Init+0xd4>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	4a1f      	ldr	r2, [pc, #124]	@ (8001a3c <MX_GPIO_Init+0xd4>)
 80019c0:	f043 0308 	orr.w	r3, r3, #8
 80019c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a3c <MX_GPIO_Init+0xd4>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	4b19      	ldr	r3, [pc, #100]	@ (8001a3c <MX_GPIO_Init+0xd4>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	4a18      	ldr	r2, [pc, #96]	@ (8001a3c <MX_GPIO_Init+0xd4>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e2:	4b16      	ldr	r3, [pc, #88]	@ (8001a3c <MX_GPIO_Init+0xd4>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	603b      	str	r3, [r7, #0]
 80019f2:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <MX_GPIO_Init+0xd4>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	4a11      	ldr	r2, [pc, #68]	@ (8001a3c <MX_GPIO_Init+0xd4>)
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fe:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <MX_GPIO_Init+0xd4>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : INT_MPU_Pin */
  GPIO_InitStruct.Pin = INT_MPU_Pin;
 8001a0a:	2304      	movs	r3, #4
 8001a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a0e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_MPU_GPIO_Port, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4808      	ldr	r0, [pc, #32]	@ (8001a40 <MX_GPIO_Init+0xd8>)
 8001a20:	f001 f888 	bl	8002b34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2100      	movs	r1, #0
 8001a28:	2008      	movs	r0, #8
 8001a2a:	f000 fcb4 	bl	8002396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001a2e:	2008      	movs	r0, #8
 8001a30:	f000 fccd 	bl	80023ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a34:	bf00      	nop
 8001a36:	3728      	adds	r7, #40	@ 0x28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020800 	.word	0x40020800

08001a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a48:	b672      	cpsid	i
}
 8001a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <Error_Handler+0x8>

08001a50 <mpu6050_init>:
#define MPU6050_ADDR 0xD0 //

const uint16_t i2c_timeout = 100;
const double  Accel_Z_corrector = 14418.0;

uint8_t mpu6050_init(I2C_HandleTypeDef *I2Cx, MPU6050_t* imu) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af04      	add	r7, sp, #16
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
    uint8_t check;
	uint8_t Data;

    HAL_Delay(50);
 8001a5a:	2032      	movs	r0, #50	@ 0x32
 8001a5c:	f000 fba0 	bl	80021a0 <HAL_Delay>

    // check device ID WHO_AM_ I
  HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001a60:	2364      	movs	r3, #100	@ 0x64
 8001a62:	9302      	str	r3, [sp, #8]
 8001a64:	2301      	movs	r3, #1
 8001a66:	9301      	str	r3, [sp, #4]
 8001a68:	f107 030c 	add.w	r3, r7, #12
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2301      	movs	r3, #1
 8001a70:	2275      	movs	r2, #117	@ 0x75
 8001a72:	21d0      	movs	r1, #208	@ 0xd0
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f001 fc4d 	bl	8003314 <HAL_I2C_Mem_Read>

	   if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001a7a:	7b3b      	ldrb	r3, [r7, #12]
 8001a7c:	2b68      	cmp	r3, #104	@ 0x68
 8001a7e:	f040 809c 	bne.w	8001bba <mpu6050_init+0x16a>
	     {
	         // reset, clksel, power management register 0X6B we should write all 0's to wake the sensor up
	         Data = 0x80;
 8001a82:	2380      	movs	r3, #128	@ 0x80
 8001a84:	72fb      	strb	r3, [r7, #11]
	         HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001a86:	2364      	movs	r3, #100	@ 0x64
 8001a88:	9302      	str	r3, [sp, #8]
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	f107 030b 	add.w	r3, r7, #11
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	2301      	movs	r3, #1
 8001a96:	226b      	movs	r2, #107	@ 0x6b
 8001a98:	21d0      	movs	r1, #208	@ 0xd0
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f001 fb40 	bl	8003120 <HAL_I2C_Mem_Write>
	         HAL_Delay(100);
 8001aa0:	2064      	movs	r0, #100	@ 0x64
 8001aa2:	f000 fb7d 	bl	80021a0 <HAL_Delay>

	         // select clock source
	         Data = 0x09;
 8001aa6:	2309      	movs	r3, #9
 8001aa8:	72fb      	strb	r3, [r7, #11]
	         HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001aaa:	2364      	movs	r3, #100	@ 0x64
 8001aac:	9302      	str	r3, [sp, #8]
 8001aae:	2301      	movs	r3, #1
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	f107 030b 	add.w	r3, r7, #11
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2301      	movs	r3, #1
 8001aba:	226b      	movs	r2, #107	@ 0x6b
 8001abc:	21d0      	movs	r1, #208	@ 0xd0
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f001 fb2e 	bl	8003120 <HAL_I2C_Mem_Write>

	         // wake up sensor

	         // Set sample RATE of 100Hz by writing SMPLRT_DIV register (not data output rate (1kz for acc)
	         Data = 79;
 8001ac4:	234f      	movs	r3, #79	@ 0x4f
 8001ac6:	72fb      	strb	r3, [r7, #11]
	         HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001ac8:	2364      	movs	r3, #100	@ 0x64
 8001aca:	9302      	str	r3, [sp, #8]
 8001acc:	2301      	movs	r3, #1
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	f107 030b 	add.w	r3, r7, #11
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	2219      	movs	r2, #25
 8001ada:	21d0      	movs	r1, #208	@ 0xd0
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f001 fb1f 	bl	8003120 <HAL_I2C_Mem_Write>
	         HAL_Delay(50);
 8001ae2:	2032      	movs	r0, #50	@ 0x32
 8001ae4:	f000 fb5c 	bl	80021a0 <HAL_Delay>

	         //dlpf
	         Data = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	72fb      	strb	r3, [r7, #11]
	         HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_CONFIG, 1, &Data, 1, i2c_timeout);
 8001aec:	2364      	movs	r3, #100	@ 0x64
 8001aee:	9302      	str	r3, [sp, #8]
 8001af0:	2301      	movs	r3, #1
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	f107 030b 	add.w	r3, r7, #11
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	2301      	movs	r3, #1
 8001afc:	221a      	movs	r2, #26
 8001afe:	21d0      	movs	r1, #208	@ 0xd0
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f001 fb0d 	bl	8003120 <HAL_I2C_Mem_Write>
	         HAL_Delay(50);
 8001b06:	2032      	movs	r0, #50	@ 0x32
 8001b08:	f000 fb4a 	bl	80021a0 <HAL_Delay>

	         // Set accelerometer configuration in ACCEL_CONFIG Register
	         // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
	         Data = 0x00;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	72fb      	strb	r3, [r7, #11]
	         HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001b10:	2364      	movs	r3, #100	@ 0x64
 8001b12:	9302      	str	r3, [sp, #8]
 8001b14:	2301      	movs	r3, #1
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	f107 030b 	add.w	r3, r7, #11
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	2301      	movs	r3, #1
 8001b20:	221c      	movs	r2, #28
 8001b22:	21d0      	movs	r1, #208	@ 0xd0
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f001 fafb 	bl	8003120 <HAL_I2C_Mem_Write>

	         // Set Gyroscopic configuration in GYRO_CONFIG Register
	         // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
	         Data = 0x00;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	72fb      	strb	r3, [r7, #11]
	         HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001b2e:	2364      	movs	r3, #100	@ 0x64
 8001b30:	9302      	str	r3, [sp, #8]
 8001b32:	2301      	movs	r3, #1
 8001b34:	9301      	str	r3, [sp, #4]
 8001b36:	f107 030b 	add.w	r3, r7, #11
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	221b      	movs	r2, #27
 8001b40:	21d0      	movs	r1, #208	@ 0xd0
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f001 faec 	bl	8003120 <HAL_I2C_Mem_Write>

	         // Configure INT pin to generate an interrupt whenever data is available / conversion complete
	         uint8_t INT_LEVEL = 0x0; // 0 - active high, 1 - active low
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]
	         uint8_t LATCH_INT_EN = 0x0; // /0 - INT 50us pulse, 1 - interrupt clear required
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	73bb      	strb	r3, [r7, #14]
	         uint8_t INT_RD_CLEAR = 0x1; //0 - INT flag cleared by reading INT_STATUS, 1 - INT flag cleared by any read operation
 8001b50:	2301      	movs	r3, #1
 8001b52:	737b      	strb	r3, [r7, #13]

	         Data = (INT_LEVEL<<7 | LATCH_INT_EN<<5 | INT_RD_CLEAR<<4);
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	01db      	lsls	r3, r3, #7
 8001b58:	b25a      	sxtb	r2, r3
 8001b5a:	7bbb      	ldrb	r3, [r7, #14]
 8001b5c:	015b      	lsls	r3, r3, #5
 8001b5e:	b25b      	sxtb	r3, r3
 8001b60:	4313      	orrs	r3, r2
 8001b62:	b25a      	sxtb	r2, r3
 8001b64:	7b7b      	ldrb	r3, [r7, #13]
 8001b66:	011b      	lsls	r3, r3, #4
 8001b68:	b25b      	sxtb	r3, r3
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	b25b      	sxtb	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	72fb      	strb	r3, [r7, #11]
	         HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_INT_PIN_CFG, 1, &Data, 1, i2c_timeout);
 8001b72:	2364      	movs	r3, #100	@ 0x64
 8001b74:	9302      	str	r3, [sp, #8]
 8001b76:	2301      	movs	r3, #1
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	f107 030b 	add.w	r3, r7, #11
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2301      	movs	r3, #1
 8001b82:	2237      	movs	r2, #55	@ 0x37
 8001b84:	21d0      	movs	r1, #208	@ 0xd0
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f001 faca 	bl	8003120 <HAL_I2C_Mem_Write>
	         HAL_Delay(50);
 8001b8c:	2032      	movs	r0, #50	@ 0x32
 8001b8e:	f000 fb07 	bl	80021a0 <HAL_Delay>

	         //interrupt enable settings
	     	uint8_t DATA_RDY_EN = 0x1; // 1 - enable, 0 - disable
 8001b92:	2301      	movs	r3, #1
 8001b94:	72bb      	strb	r3, [r7, #10]
	         HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_INT_ENABLE, 1, &DATA_RDY_EN, 1, i2c_timeout);
 8001b96:	2364      	movs	r3, #100	@ 0x64
 8001b98:	9302      	str	r3, [sp, #8]
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	9301      	str	r3, [sp, #4]
 8001b9e:	f107 030a 	add.w	r3, r7, #10
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	2238      	movs	r2, #56	@ 0x38
 8001ba8:	21d0      	movs	r1, #208	@ 0xd0
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f001 fab8 	bl	8003120 <HAL_I2C_Mem_Write>
	         HAL_Delay(50);
 8001bb0:	2032      	movs	r0, #50	@ 0x32
 8001bb2:	f000 faf5 	bl	80021a0 <HAL_Delay>


	         return 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e000      	b.n	8001bbc <mpu6050_init+0x16c>
	     }
	   return 1;
 8001bba:	2301      	movs	r3, #1


}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <mpu6050_read_accel_dma>:

uint8_t mpu6050_read_accel_dma(I2C_HandleTypeDef* i2c_handle, MPU6050_t *imu) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af02      	add	r7, sp, #8
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
	if (HAL_I2C_Mem_Read_DMA(i2c_handle, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, imu->Rec_Data, 6) == HAL_OK) {
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2206      	movs	r2, #6
 8001bd2:	9201      	str	r2, [sp, #4]
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	223b      	movs	r2, #59	@ 0x3b
 8001bda:	21d0      	movs	r1, #208	@ 0xd0
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f001 fdcb 	bl	8003778 <HAL_I2C_Mem_Read_DMA>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <mpu6050_read_accel_dma+0x28>
		return 1;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <mpu6050_read_accel_dma+0x2a>
	}
	return 0;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <mpu6050_read_accel_dma_complete>:

// process imu data
void mpu6050_read_accel_dma_complete(I2C_HandleTypeDef *i2c_handle, MPU6050_t *imu) {
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]

	imu->Accel_X_RAW = (int16_t)(imu->Rec_Data[0] << 8 | imu->Rec_Data[1]);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	b21a      	sxth	r2, r3
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	785b      	ldrb	r3, [r3, #1]
 8001c0c:	b21b      	sxth	r3, r3
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	b21b      	sxth	r3, r3
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	811a      	strh	r2, [r3, #8]
	imu->Accel_Y_RAW = (int16_t)(imu->Rec_Data[2] << 8 | imu->Rec_Data[3]);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	789b      	ldrb	r3, [r3, #2]
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	b21a      	sxth	r2, r3
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	78db      	ldrb	r3, [r3, #3]
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	4313      	orrs	r3, r2
 8001c28:	b21b      	sxth	r3, r3
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	815a      	strh	r2, [r3, #10]
	imu->Accel_Z_RAW = (int16_t)(imu->Rec_Data[4] << 8 | imu->Rec_Data[5]);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	791b      	ldrb	r3, [r3, #4]
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	b21a      	sxth	r2, r3
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	795b      	ldrb	r3, [r3, #5]
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff f86a 	bl	8000d1c <__aeabi_i2f>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	60da      	str	r2, [r3, #12]

//	imu->Ax = imu->Accel_X_RAW / 16384.0;
//	imu->Ay = imu->Accel_Y_RAW / 16384.0;
//	imu->Az = imu->Accel_Z_RAW / Accel_Z_corrector;
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <HAL_MspInit+0x4c>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	4a0f      	ldr	r2, [pc, #60]	@ (8001ca4 <HAL_MspInit+0x4c>)
 8001c68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca4 <HAL_MspInit+0x4c>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <HAL_MspInit+0x4c>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	4a08      	ldr	r2, [pc, #32]	@ (8001ca4 <HAL_MspInit+0x4c>)
 8001c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_MspInit+0x4c>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c96:	2007      	movs	r0, #7
 8001c98:	f000 fb72 	bl	8002380 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40023800 	.word	0x40023800

08001ca8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	@ 0x28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a30      	ldr	r2, [pc, #192]	@ (8001d88 <HAL_I2C_MspInit+0xe0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d15a      	bne.n	8001d80 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	4b2f      	ldr	r3, [pc, #188]	@ (8001d8c <HAL_I2C_MspInit+0xe4>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	4a2e      	ldr	r2, [pc, #184]	@ (8001d8c <HAL_I2C_MspInit+0xe4>)
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cda:	4b2c      	ldr	r3, [pc, #176]	@ (8001d8c <HAL_I2C_MspInit+0xe4>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ce6:	23c0      	movs	r3, #192	@ 0xc0
 8001ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cea:	2312      	movs	r3, #18
 8001cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4823      	ldr	r0, [pc, #140]	@ (8001d90 <HAL_I2C_MspInit+0xe8>)
 8001d02:	f000 ff17 	bl	8002b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b20      	ldr	r3, [pc, #128]	@ (8001d8c <HAL_I2C_MspInit+0xe4>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001d8c <HAL_I2C_MspInit+0xe4>)
 8001d10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d16:	4b1d      	ldr	r3, [pc, #116]	@ (8001d8c <HAL_I2C_MspInit+0xe4>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8001d22:	4b1c      	ldr	r3, [pc, #112]	@ (8001d94 <HAL_I2C_MspInit+0xec>)
 8001d24:	4a1c      	ldr	r2, [pc, #112]	@ (8001d98 <HAL_I2C_MspInit+0xf0>)
 8001d26:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001d28:	4b1a      	ldr	r3, [pc, #104]	@ (8001d94 <HAL_I2C_MspInit+0xec>)
 8001d2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d2e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d30:	4b18      	ldr	r3, [pc, #96]	@ (8001d94 <HAL_I2C_MspInit+0xec>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d36:	4b17      	ldr	r3, [pc, #92]	@ (8001d94 <HAL_I2C_MspInit+0xec>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d3c:	4b15      	ldr	r3, [pc, #84]	@ (8001d94 <HAL_I2C_MspInit+0xec>)
 8001d3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d42:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d44:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <HAL_I2C_MspInit+0xec>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d4a:	4b12      	ldr	r3, [pc, #72]	@ (8001d94 <HAL_I2C_MspInit+0xec>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001d50:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <HAL_I2C_MspInit+0xec>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001d56:	4b0f      	ldr	r3, [pc, #60]	@ (8001d94 <HAL_I2C_MspInit+0xec>)
 8001d58:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d5c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <HAL_I2C_MspInit+0xec>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001d64:	480b      	ldr	r0, [pc, #44]	@ (8001d94 <HAL_I2C_MspInit+0xec>)
 8001d66:	f000 fb4d 	bl	8002404 <HAL_DMA_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001d70:	f7ff fe68 	bl	8001a44 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a07      	ldr	r2, [pc, #28]	@ (8001d94 <HAL_I2C_MspInit+0xec>)
 8001d78:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d7a:	4a06      	ldr	r2, [pc, #24]	@ (8001d94 <HAL_I2C_MspInit+0xec>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d80:	bf00      	nop
 8001d82:	3728      	adds	r7, #40	@ 0x28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40005400 	.word	0x40005400
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40020400 	.word	0x40020400
 8001d94:	20000338 	.word	0x20000338
 8001d98:	40026088 	.word	0x40026088

08001d9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <HAL_TIM_Base_MspInit+0x38>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d10d      	bne.n	8001dca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b09      	ldr	r3, [pc, #36]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x3c>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	4a08      	ldr	r2, [pc, #32]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x3c>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dbe:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x3c>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr
 8001dd4:	40000800 	.word	0x40000800
 8001dd8:	40023800 	.word	0x40023800

08001ddc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 030c 	add.w	r3, r7, #12
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a12      	ldr	r2, [pc, #72]	@ (8001e44 <HAL_TIM_MspPostInit+0x68>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d11e      	bne.n	8001e3c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <HAL_TIM_MspPostInit+0x6c>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	4a10      	ldr	r2, [pc, #64]	@ (8001e48 <HAL_TIM_MspPostInit+0x6c>)
 8001e08:	f043 0308 	orr.w	r3, r3, #8
 8001e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e48 <HAL_TIM_MspPostInit+0x6c>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e30:	f107 030c 	add.w	r3, r7, #12
 8001e34:	4619      	mov	r1, r3
 8001e36:	4805      	ldr	r0, [pc, #20]	@ (8001e4c <HAL_TIM_MspPostInit+0x70>)
 8001e38:	f000 fe7c 	bl	8002b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e3c:	bf00      	nop
 8001e3e:	3720      	adds	r7, #32
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40000800 	.word	0x40000800
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40020c00 	.word	0x40020c00

08001e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <NMI_Handler+0x4>

08001e58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <HardFault_Handler+0x4>

08001e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <MemManage_Handler+0x4>

08001e68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e6c:	bf00      	nop
 8001e6e:	e7fd      	b.n	8001e6c <BusFault_Handler+0x4>

08001e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <UsageFault_Handler+0x4>

08001e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea0:	f000 f962 	bl	8002168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_MPU_Pin);
 8001eac:	2004      	movs	r0, #4
 8001eae:	f000 ffdb 	bl	8002e68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001ebc:	4802      	ldr	r0, [pc, #8]	@ (8001ec8 <DMA1_Stream5_IRQHandler+0x10>)
 8001ebe:	f000 fbc9 	bl	8002654 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000338 	.word	0x20000338

08001ecc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ed0:	4802      	ldr	r0, [pc, #8]	@ (8001edc <OTG_FS_IRQHandler+0x10>)
 8001ed2:	f002 fc18 	bl	8004706 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200019e0 	.word	0x200019e0

08001ee0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return 1;
 8001ee4:	2301      	movs	r3, #1
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr

08001eee <_kill>:

int _kill(int pid, int sig)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ef8:	f009 fdde 	bl	800bab8 <__errno>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2216      	movs	r2, #22
 8001f00:	601a      	str	r2, [r3, #0]
  return -1;
 8001f02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <_exit>:

void _exit (int status)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f16:	f04f 31ff 	mov.w	r1, #4294967295
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff ffe7 	bl	8001eee <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f20:	bf00      	nop
 8001f22:	e7fd      	b.n	8001f20 <_exit+0x12>

08001f24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	e00a      	b.n	8001f4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f36:	f3af 8000 	nop.w
 8001f3a:	4601      	mov	r1, r0
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	60ba      	str	r2, [r7, #8]
 8001f42:	b2ca      	uxtb	r2, r1
 8001f44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	dbf0      	blt.n	8001f36 <_read+0x12>
  }

  return len;
 8001f54:	687b      	ldr	r3, [r7, #4]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	60f8      	str	r0, [r7, #12]
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	e009      	b.n	8001f84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	60ba      	str	r2, [r7, #8]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3301      	adds	r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	dbf1      	blt.n	8001f70 <_write+0x12>
  }
  return len;
 8001f8c:	687b      	ldr	r3, [r7, #4]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <_close>:

int _close(int file)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fbc:	605a      	str	r2, [r3, #4]
  return 0;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr

08001fca <_isatty>:

int _isatty(int file)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fd2:	2301      	movs	r3, #1
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b085      	sub	sp, #20
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr
	...

08001ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002000:	4a14      	ldr	r2, [pc, #80]	@ (8002054 <_sbrk+0x5c>)
 8002002:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <_sbrk+0x60>)
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800200c:	4b13      	ldr	r3, [pc, #76]	@ (800205c <_sbrk+0x64>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d102      	bne.n	800201a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002014:	4b11      	ldr	r3, [pc, #68]	@ (800205c <_sbrk+0x64>)
 8002016:	4a12      	ldr	r2, [pc, #72]	@ (8002060 <_sbrk+0x68>)
 8002018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800201a:	4b10      	ldr	r3, [pc, #64]	@ (800205c <_sbrk+0x64>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	429a      	cmp	r2, r3
 8002026:	d207      	bcs.n	8002038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002028:	f009 fd46 	bl	800bab8 <__errno>
 800202c:	4603      	mov	r3, r0
 800202e:	220c      	movs	r2, #12
 8002030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295
 8002036:	e009      	b.n	800204c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002038:	4b08      	ldr	r3, [pc, #32]	@ (800205c <_sbrk+0x64>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800203e:	4b07      	ldr	r3, [pc, #28]	@ (800205c <_sbrk+0x64>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	4a05      	ldr	r2, [pc, #20]	@ (800205c <_sbrk+0x64>)
 8002048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800204a:	68fb      	ldr	r3, [r7, #12]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20020000 	.word	0x20020000
 8002058:	00000400 	.word	0x00000400
 800205c:	200004f8 	.word	0x200004f8
 8002060:	20002230 	.word	0x20002230

08002064 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002070:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002074:	f7ff fff6 	bl	8002064 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002078:	480c      	ldr	r0, [pc, #48]	@ (80020ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800207a:	490d      	ldr	r1, [pc, #52]	@ (80020b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800207c:	4a0d      	ldr	r2, [pc, #52]	@ (80020b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800207e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002080:	e002      	b.n	8002088 <LoopCopyDataInit>

08002082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002086:	3304      	adds	r3, #4

08002088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800208a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800208c:	d3f9      	bcc.n	8002082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800208e:	4a0a      	ldr	r2, [pc, #40]	@ (80020b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002090:	4c0a      	ldr	r4, [pc, #40]	@ (80020bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002094:	e001      	b.n	800209a <LoopFillZerobss>

08002096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002098:	3204      	adds	r2, #4

0800209a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800209a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800209c:	d3fb      	bcc.n	8002096 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800209e:	f009 fd11 	bl	800bac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020a2:	f7ff fabb 	bl	800161c <main>
  bx  lr    
 80020a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b0:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 80020b4:	0800dfb0 	.word	0x0800dfb0
  ldr r2, =_sbss
 80020b8:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 80020bc:	20002230 	.word	0x20002230

080020c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020c0:	e7fe      	b.n	80020c0 <ADC_IRQHandler>
	...

080020c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002104 <HAL_Init+0x40>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002104 <HAL_Init+0x40>)
 80020ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002104 <HAL_Init+0x40>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002104 <HAL_Init+0x40>)
 80020da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e0:	4b08      	ldr	r3, [pc, #32]	@ (8002104 <HAL_Init+0x40>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a07      	ldr	r2, [pc, #28]	@ (8002104 <HAL_Init+0x40>)
 80020e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ec:	2003      	movs	r0, #3
 80020ee:	f000 f947 	bl	8002380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020f2:	2000      	movs	r0, #0
 80020f4:	f000 f808 	bl	8002108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020f8:	f7ff fdae 	bl	8001c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40023c00 	.word	0x40023c00

08002108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002110:	4b12      	ldr	r3, [pc, #72]	@ (800215c <HAL_InitTick+0x54>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b12      	ldr	r3, [pc, #72]	@ (8002160 <HAL_InitTick+0x58>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4619      	mov	r1, r3
 800211a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800211e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002122:	fbb2 f3f3 	udiv	r3, r2, r3
 8002126:	4618      	mov	r0, r3
 8002128:	f000 f95f 	bl	80023ea <HAL_SYSTICK_Config>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e00e      	b.n	8002154 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b0f      	cmp	r3, #15
 800213a:	d80a      	bhi.n	8002152 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800213c:	2200      	movs	r2, #0
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	f04f 30ff 	mov.w	r0, #4294967295
 8002144:	f000 f927 	bl	8002396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002148:	4a06      	ldr	r2, [pc, #24]	@ (8002164 <HAL_InitTick+0x5c>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	e000      	b.n	8002154 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
}
 8002154:	4618      	mov	r0, r3
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000000 	.word	0x20000000
 8002160:	20000008 	.word	0x20000008
 8002164:	20000004 	.word	0x20000004

08002168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800216c:	4b05      	ldr	r3, [pc, #20]	@ (8002184 <HAL_IncTick+0x1c>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <HAL_IncTick+0x20>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4413      	add	r3, r2
 8002178:	4a03      	ldr	r2, [pc, #12]	@ (8002188 <HAL_IncTick+0x20>)
 800217a:	6013      	str	r3, [r2, #0]
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	20000008 	.word	0x20000008
 8002188:	200004fc 	.word	0x200004fc

0800218c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return uwTick;
 8002190:	4b02      	ldr	r3, [pc, #8]	@ (800219c <HAL_GetTick+0x10>)
 8002192:	681b      	ldr	r3, [r3, #0]
}
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	200004fc 	.word	0x200004fc

080021a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a8:	f7ff fff0 	bl	800218c <HAL_GetTick>
 80021ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b8:	d005      	beq.n	80021c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ba:	4b0a      	ldr	r3, [pc, #40]	@ (80021e4 <HAL_Delay+0x44>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4413      	add	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021c6:	bf00      	nop
 80021c8:	f7ff ffe0 	bl	800218c <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d8f7      	bhi.n	80021c8 <HAL_Delay+0x28>
  {
  }
}
 80021d8:	bf00      	nop
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000008 	.word	0x20000008

080021e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f8:	4b0c      	ldr	r3, [pc, #48]	@ (800222c <__NVIC_SetPriorityGrouping+0x44>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002204:	4013      	ands	r3, r2
 8002206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002210:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800221a:	4a04      	ldr	r2, [pc, #16]	@ (800222c <__NVIC_SetPriorityGrouping+0x44>)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	60d3      	str	r3, [r2, #12]
}
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002234:	4b04      	ldr	r3, [pc, #16]	@ (8002248 <__NVIC_GetPriorityGrouping+0x18>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	0a1b      	lsrs	r3, r3, #8
 800223a:	f003 0307 	and.w	r3, r3, #7
}
 800223e:	4618      	mov	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	2b00      	cmp	r3, #0
 800225c:	db0b      	blt.n	8002276 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	f003 021f 	and.w	r2, r3, #31
 8002264:	4906      	ldr	r1, [pc, #24]	@ (8002280 <__NVIC_EnableIRQ+0x34>)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	2001      	movs	r0, #1
 800226e:	fa00 f202 	lsl.w	r2, r0, r2
 8002272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr
 8002280:	e000e100 	.word	0xe000e100

08002284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	6039      	str	r1, [r7, #0]
 800228e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	2b00      	cmp	r3, #0
 8002296:	db0a      	blt.n	80022ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	b2da      	uxtb	r2, r3
 800229c:	490c      	ldr	r1, [pc, #48]	@ (80022d0 <__NVIC_SetPriority+0x4c>)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	0112      	lsls	r2, r2, #4
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	440b      	add	r3, r1
 80022a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022ac:	e00a      	b.n	80022c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4908      	ldr	r1, [pc, #32]	@ (80022d4 <__NVIC_SetPriority+0x50>)
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	3b04      	subs	r3, #4
 80022bc:	0112      	lsls	r2, r2, #4
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	440b      	add	r3, r1
 80022c2:	761a      	strb	r2, [r3, #24]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	e000e100 	.word	0xe000e100
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d8:	b480      	push	{r7}
 80022da:	b089      	sub	sp, #36	@ 0x24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f1c3 0307 	rsb	r3, r3, #7
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	bf28      	it	cs
 80022f6:	2304      	movcs	r3, #4
 80022f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	3304      	adds	r3, #4
 80022fe:	2b06      	cmp	r3, #6
 8002300:	d902      	bls.n	8002308 <NVIC_EncodePriority+0x30>
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3b03      	subs	r3, #3
 8002306:	e000      	b.n	800230a <NVIC_EncodePriority+0x32>
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	f04f 32ff 	mov.w	r2, #4294967295
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43da      	mvns	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	401a      	ands	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002320:	f04f 31ff 	mov.w	r1, #4294967295
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	fa01 f303 	lsl.w	r3, r1, r3
 800232a:	43d9      	mvns	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002330:	4313      	orrs	r3, r2
         );
}
 8002332:	4618      	mov	r0, r3
 8002334:	3724      	adds	r7, #36	@ 0x24
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800234c:	d301      	bcc.n	8002352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800234e:	2301      	movs	r3, #1
 8002350:	e00f      	b.n	8002372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002352:	4a0a      	ldr	r2, [pc, #40]	@ (800237c <SysTick_Config+0x40>)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800235a:	210f      	movs	r1, #15
 800235c:	f04f 30ff 	mov.w	r0, #4294967295
 8002360:	f7ff ff90 	bl	8002284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002364:	4b05      	ldr	r3, [pc, #20]	@ (800237c <SysTick_Config+0x40>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236a:	4b04      	ldr	r3, [pc, #16]	@ (800237c <SysTick_Config+0x40>)
 800236c:	2207      	movs	r2, #7
 800236e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	e000e010 	.word	0xe000e010

08002380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ff2d 	bl	80021e8 <__NVIC_SetPriorityGrouping>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002396:	b580      	push	{r7, lr}
 8002398:	b086      	sub	sp, #24
 800239a:	af00      	add	r7, sp, #0
 800239c:	4603      	mov	r3, r0
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023a8:	f7ff ff42 	bl	8002230 <__NVIC_GetPriorityGrouping>
 80023ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	68b9      	ldr	r1, [r7, #8]
 80023b2:	6978      	ldr	r0, [r7, #20]
 80023b4:	f7ff ff90 	bl	80022d8 <NVIC_EncodePriority>
 80023b8:	4602      	mov	r2, r0
 80023ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023be:	4611      	mov	r1, r2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff ff5f 	bl	8002284 <__NVIC_SetPriority>
}
 80023c6:	bf00      	nop
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	4603      	mov	r3, r0
 80023d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff35 	bl	800224c <__NVIC_EnableIRQ>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ffa2 	bl	800233c <SysTick_Config>
 80023f8:	4603      	mov	r3, r0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002410:	f7ff febc 	bl	800218c <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e099      	b.n	8002554 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0201 	bic.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002440:	e00f      	b.n	8002462 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002442:	f7ff fea3 	bl	800218c <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b05      	cmp	r3, #5
 800244e:	d908      	bls.n	8002462 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2220      	movs	r2, #32
 8002454:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2203      	movs	r2, #3
 800245a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e078      	b.n	8002554 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1e8      	bne.n	8002442 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	4b38      	ldr	r3, [pc, #224]	@ (800255c <HAL_DMA_Init+0x158>)
 800247c:	4013      	ands	r3, r2
 800247e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800248e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800249a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d107      	bne.n	80024cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c4:	4313      	orrs	r3, r2
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f023 0307 	bic.w	r3, r3, #7
 80024e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d117      	bne.n	8002526 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00e      	beq.n	8002526 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 fa99 	bl	8002a40 <DMA_CheckFifoParam>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2240      	movs	r2, #64	@ 0x40
 8002518:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002522:	2301      	movs	r3, #1
 8002524:	e016      	b.n	8002554 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fa52 	bl	80029d8 <DMA_CalcBaseAndBitshift>
 8002534:	4603      	mov	r3, r0
 8002536:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253c:	223f      	movs	r2, #63	@ 0x3f
 800253e:	409a      	lsls	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	f010803f 	.word	0xf010803f

08002560 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
 800256c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800256e:	2300      	movs	r3, #0
 8002570:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002576:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_DMA_Start_IT+0x26>
 8002582:	2302      	movs	r3, #2
 8002584:	e040      	b.n	8002608 <HAL_DMA_Start_IT+0xa8>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d12f      	bne.n	80025fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2202      	movs	r2, #2
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f9e5 	bl	800297e <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b8:	223f      	movs	r2, #63	@ 0x3f
 80025ba:	409a      	lsls	r2, r3
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0216 	orr.w	r2, r2, #22
 80025ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d007      	beq.n	80025e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0208 	orr.w	r2, r2, #8
 80025e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	e005      	b.n	8002606 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002602:	2302      	movs	r3, #2
 8002604:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002606:	7dfb      	ldrb	r3, [r7, #23]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d004      	beq.n	800262e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2280      	movs	r2, #128	@ 0x80
 8002628:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e00c      	b.n	8002648 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2205      	movs	r2, #5
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0201 	bic.w	r2, r2, #1
 8002644:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr
	...

08002654 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002660:	4b8e      	ldr	r3, [pc, #568]	@ (800289c <HAL_DMA_IRQHandler+0x248>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a8e      	ldr	r2, [pc, #568]	@ (80028a0 <HAL_DMA_IRQHandler+0x24c>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	0a9b      	lsrs	r3, r3, #10
 800266c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002672:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267e:	2208      	movs	r2, #8
 8002680:	409a      	lsls	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d01a      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d013      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0204 	bic.w	r2, r2, #4
 80026a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ac:	2208      	movs	r2, #8
 80026ae:	409a      	lsls	r2, r3
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b8:	f043 0201 	orr.w	r2, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c4:	2201      	movs	r2, #1
 80026c6:	409a      	lsls	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d012      	beq.n	80026f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00b      	beq.n	80026f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e2:	2201      	movs	r2, #1
 80026e4:	409a      	lsls	r2, r3
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ee:	f043 0202 	orr.w	r2, r3, #2
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fa:	2204      	movs	r2, #4
 80026fc:	409a      	lsls	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d012      	beq.n	800272c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00b      	beq.n	800272c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002718:	2204      	movs	r2, #4
 800271a:	409a      	lsls	r2, r3
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002724:	f043 0204 	orr.w	r2, r3, #4
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002730:	2210      	movs	r2, #16
 8002732:	409a      	lsls	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4013      	ands	r3, r2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d043      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d03c      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274e:	2210      	movs	r2, #16
 8002750:	409a      	lsls	r2, r3
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d018      	beq.n	8002796 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d108      	bne.n	8002784 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d024      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	4798      	blx	r3
 8002782:	e01f      	b.n	80027c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002788:	2b00      	cmp	r3, #0
 800278a:	d01b      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
 8002794:	e016      	b.n	80027c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d107      	bne.n	80027b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0208 	bic.w	r2, r2, #8
 80027b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c8:	2220      	movs	r2, #32
 80027ca:	409a      	lsls	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 808f 	beq.w	80028f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 8087 	beq.w	80028f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ea:	2220      	movs	r2, #32
 80027ec:	409a      	lsls	r2, r3
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b05      	cmp	r3, #5
 80027fc:	d136      	bne.n	800286c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0216 	bic.w	r2, r2, #22
 800280c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695a      	ldr	r2, [r3, #20]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800281c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	2b00      	cmp	r3, #0
 8002824:	d103      	bne.n	800282e <HAL_DMA_IRQHandler+0x1da>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800282a:	2b00      	cmp	r3, #0
 800282c:	d007      	beq.n	800283e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0208 	bic.w	r2, r2, #8
 800283c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002842:	223f      	movs	r2, #63	@ 0x3f
 8002844:	409a      	lsls	r2, r3
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800285e:	2b00      	cmp	r3, #0
 8002860:	d07e      	beq.n	8002960 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	4798      	blx	r3
        }
        return;
 800286a:	e079      	b.n	8002960 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d01d      	beq.n	80028b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10d      	bne.n	80028a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288c:	2b00      	cmp	r3, #0
 800288e:	d031      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	4798      	blx	r3
 8002898:	e02c      	b.n	80028f4 <HAL_DMA_IRQHandler+0x2a0>
 800289a:	bf00      	nop
 800289c:	20000000 	.word	0x20000000
 80028a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d023      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	4798      	blx	r3
 80028b4:	e01e      	b.n	80028f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10f      	bne.n	80028e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0210 	bic.w	r2, r2, #16
 80028d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d032      	beq.n	8002962 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d022      	beq.n	800294e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2205      	movs	r2, #5
 800290c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	3301      	adds	r3, #1
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	429a      	cmp	r2, r3
 800292a:	d307      	bcc.n	800293c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f2      	bne.n	8002920 <HAL_DMA_IRQHandler+0x2cc>
 800293a:	e000      	b.n	800293e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800293c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	4798      	blx	r3
 800295e:	e000      	b.n	8002962 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002960:	bf00      	nop
    }
  }
}
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800297e:	b480      	push	{r7}
 8002980:	b085      	sub	sp, #20
 8002982:	af00      	add	r7, sp, #0
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
 800298a:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800299a:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2b40      	cmp	r3, #64	@ 0x40
 80029aa:	d108      	bne.n	80029be <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029bc:	e007      	b.n	80029ce <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	60da      	str	r2, [r3, #12]
}
 80029ce:	bf00      	nop
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	3b10      	subs	r3, #16
 80029e8:	4a13      	ldr	r2, [pc, #76]	@ (8002a38 <DMA_CalcBaseAndBitshift+0x60>)
 80029ea:	fba2 2303 	umull	r2, r3, r2, r3
 80029ee:	091b      	lsrs	r3, r3, #4
 80029f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029f2:	4a12      	ldr	r2, [pc, #72]	@ (8002a3c <DMA_CalcBaseAndBitshift+0x64>)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4413      	add	r3, r2
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d909      	bls.n	8002a1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a0e:	f023 0303 	bic.w	r3, r3, #3
 8002a12:	1d1a      	adds	r2, r3, #4
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a18:	e007      	b.n	8002a2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a22:	f023 0303 	bic.w	r3, r3, #3
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr
 8002a38:	aaaaaaab 	.word	0xaaaaaaab
 8002a3c:	0800dc24 	.word	0x0800dc24

08002a40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d11f      	bne.n	8002a9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d856      	bhi.n	8002b0e <DMA_CheckFifoParam+0xce>
 8002a60:	a201      	add	r2, pc, #4	@ (adr r2, 8002a68 <DMA_CheckFifoParam+0x28>)
 8002a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a66:	bf00      	nop
 8002a68:	08002a79 	.word	0x08002a79
 8002a6c:	08002a8b 	.word	0x08002a8b
 8002a70:	08002a79 	.word	0x08002a79
 8002a74:	08002b0f 	.word	0x08002b0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d046      	beq.n	8002b12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a88:	e043      	b.n	8002b12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a92:	d140      	bne.n	8002b16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a98:	e03d      	b.n	8002b16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002aa2:	d121      	bne.n	8002ae8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d837      	bhi.n	8002b1a <DMA_CheckFifoParam+0xda>
 8002aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab0 <DMA_CheckFifoParam+0x70>)
 8002aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab0:	08002ac1 	.word	0x08002ac1
 8002ab4:	08002ac7 	.word	0x08002ac7
 8002ab8:	08002ac1 	.word	0x08002ac1
 8002abc:	08002ad9 	.word	0x08002ad9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac4:	e030      	b.n	8002b28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d025      	beq.n	8002b1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad6:	e022      	b.n	8002b1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002adc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ae0:	d11f      	bne.n	8002b22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ae6:	e01c      	b.n	8002b22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d903      	bls.n	8002af6 <DMA_CheckFifoParam+0xb6>
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d003      	beq.n	8002afc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002af4:	e018      	b.n	8002b28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	73fb      	strb	r3, [r7, #15]
      break;
 8002afa:	e015      	b.n	8002b28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00e      	beq.n	8002b26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b0c:	e00b      	b.n	8002b26 <DMA_CheckFifoParam+0xe6>
      break;
 8002b0e:	bf00      	nop
 8002b10:	e00a      	b.n	8002b28 <DMA_CheckFifoParam+0xe8>
      break;
 8002b12:	bf00      	nop
 8002b14:	e008      	b.n	8002b28 <DMA_CheckFifoParam+0xe8>
      break;
 8002b16:	bf00      	nop
 8002b18:	e006      	b.n	8002b28 <DMA_CheckFifoParam+0xe8>
      break;
 8002b1a:	bf00      	nop
 8002b1c:	e004      	b.n	8002b28 <DMA_CheckFifoParam+0xe8>
      break;
 8002b1e:	bf00      	nop
 8002b20:	e002      	b.n	8002b28 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b22:	bf00      	nop
 8002b24:	e000      	b.n	8002b28 <DMA_CheckFifoParam+0xe8>
      break;
 8002b26:	bf00      	nop
    }
  } 
  
  return status; 
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b089      	sub	sp, #36	@ 0x24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	e16b      	b.n	8002e28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b50:	2201      	movs	r2, #1
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	4013      	ands	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	f040 815a 	bne.w	8002e22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d005      	beq.n	8002b86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d130      	bne.n	8002be8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	2203      	movs	r2, #3
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	43db      	mvns	r3, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	f003 0201 	and.w	r2, r3, #1
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d017      	beq.n	8002c24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	2203      	movs	r2, #3
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d123      	bne.n	8002c78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	08da      	lsrs	r2, r3, #3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3208      	adds	r2, #8
 8002c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	220f      	movs	r2, #15
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	08da      	lsrs	r2, r3, #3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3208      	adds	r2, #8
 8002c72:	69b9      	ldr	r1, [r7, #24]
 8002c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	2203      	movs	r2, #3
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0203 	and.w	r2, r3, #3
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 80b4 	beq.w	8002e22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	4b5f      	ldr	r3, [pc, #380]	@ (8002e3c <HAL_GPIO_Init+0x308>)
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc2:	4a5e      	ldr	r2, [pc, #376]	@ (8002e3c <HAL_GPIO_Init+0x308>)
 8002cc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cca:	4b5c      	ldr	r3, [pc, #368]	@ (8002e3c <HAL_GPIO_Init+0x308>)
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cd6:	4a5a      	ldr	r2, [pc, #360]	@ (8002e40 <HAL_GPIO_Init+0x30c>)
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	089b      	lsrs	r3, r3, #2
 8002cdc:	3302      	adds	r3, #2
 8002cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	220f      	movs	r2, #15
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a51      	ldr	r2, [pc, #324]	@ (8002e44 <HAL_GPIO_Init+0x310>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d02b      	beq.n	8002d5a <HAL_GPIO_Init+0x226>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a50      	ldr	r2, [pc, #320]	@ (8002e48 <HAL_GPIO_Init+0x314>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d025      	beq.n	8002d56 <HAL_GPIO_Init+0x222>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a4f      	ldr	r2, [pc, #316]	@ (8002e4c <HAL_GPIO_Init+0x318>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d01f      	beq.n	8002d52 <HAL_GPIO_Init+0x21e>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a4e      	ldr	r2, [pc, #312]	@ (8002e50 <HAL_GPIO_Init+0x31c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d019      	beq.n	8002d4e <HAL_GPIO_Init+0x21a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a4d      	ldr	r2, [pc, #308]	@ (8002e54 <HAL_GPIO_Init+0x320>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d013      	beq.n	8002d4a <HAL_GPIO_Init+0x216>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a4c      	ldr	r2, [pc, #304]	@ (8002e58 <HAL_GPIO_Init+0x324>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d00d      	beq.n	8002d46 <HAL_GPIO_Init+0x212>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a4b      	ldr	r2, [pc, #300]	@ (8002e5c <HAL_GPIO_Init+0x328>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d007      	beq.n	8002d42 <HAL_GPIO_Init+0x20e>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a4a      	ldr	r2, [pc, #296]	@ (8002e60 <HAL_GPIO_Init+0x32c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d101      	bne.n	8002d3e <HAL_GPIO_Init+0x20a>
 8002d3a:	2307      	movs	r3, #7
 8002d3c:	e00e      	b.n	8002d5c <HAL_GPIO_Init+0x228>
 8002d3e:	2308      	movs	r3, #8
 8002d40:	e00c      	b.n	8002d5c <HAL_GPIO_Init+0x228>
 8002d42:	2306      	movs	r3, #6
 8002d44:	e00a      	b.n	8002d5c <HAL_GPIO_Init+0x228>
 8002d46:	2305      	movs	r3, #5
 8002d48:	e008      	b.n	8002d5c <HAL_GPIO_Init+0x228>
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	e006      	b.n	8002d5c <HAL_GPIO_Init+0x228>
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e004      	b.n	8002d5c <HAL_GPIO_Init+0x228>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e002      	b.n	8002d5c <HAL_GPIO_Init+0x228>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <HAL_GPIO_Init+0x228>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	69fa      	ldr	r2, [r7, #28]
 8002d5e:	f002 0203 	and.w	r2, r2, #3
 8002d62:	0092      	lsls	r2, r2, #2
 8002d64:	4093      	lsls	r3, r2
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d6c:	4934      	ldr	r1, [pc, #208]	@ (8002e40 <HAL_GPIO_Init+0x30c>)
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	089b      	lsrs	r3, r3, #2
 8002d72:	3302      	adds	r3, #2
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d7a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e64 <HAL_GPIO_Init+0x330>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d9e:	4a31      	ldr	r2, [pc, #196]	@ (8002e64 <HAL_GPIO_Init+0x330>)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002da4:	4b2f      	ldr	r3, [pc, #188]	@ (8002e64 <HAL_GPIO_Init+0x330>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dc8:	4a26      	ldr	r2, [pc, #152]	@ (8002e64 <HAL_GPIO_Init+0x330>)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dce:	4b25      	ldr	r3, [pc, #148]	@ (8002e64 <HAL_GPIO_Init+0x330>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002df2:	4a1c      	ldr	r2, [pc, #112]	@ (8002e64 <HAL_GPIO_Init+0x330>)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002df8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e64 <HAL_GPIO_Init+0x330>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e1c:	4a11      	ldr	r2, [pc, #68]	@ (8002e64 <HAL_GPIO_Init+0x330>)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3301      	adds	r3, #1
 8002e26:	61fb      	str	r3, [r7, #28]
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	2b0f      	cmp	r3, #15
 8002e2c:	f67f ae90 	bls.w	8002b50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e30:	bf00      	nop
 8002e32:	bf00      	nop
 8002e34:	3724      	adds	r7, #36	@ 0x24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40013800 	.word	0x40013800
 8002e44:	40020000 	.word	0x40020000
 8002e48:	40020400 	.word	0x40020400
 8002e4c:	40020800 	.word	0x40020800
 8002e50:	40020c00 	.word	0x40020c00
 8002e54:	40021000 	.word	0x40021000
 8002e58:	40021400 	.word	0x40021400
 8002e5c:	40021800 	.word	0x40021800
 8002e60:	40021c00 	.word	0x40021c00
 8002e64:	40013c00 	.word	0x40013c00

08002e68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e72:	4b08      	ldr	r3, [pc, #32]	@ (8002e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d006      	beq.n	8002e8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e7e:	4a05      	ldr	r2, [pc, #20]	@ (8002e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e80:	88fb      	ldrh	r3, [r7, #6]
 8002e82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fe fb7c 	bl	8001584 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40013c00 	.word	0x40013c00

08002e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e12b      	b.n	8003102 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fe fef2 	bl	8001ca8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2224      	movs	r2, #36	@ 0x24
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0201 	bic.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002eea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002efa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002efc:	f003 f980 	bl	8006200 <HAL_RCC_GetPCLK1Freq>
 8002f00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	4a81      	ldr	r2, [pc, #516]	@ (800310c <HAL_I2C_Init+0x274>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d807      	bhi.n	8002f1c <HAL_I2C_Init+0x84>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4a80      	ldr	r2, [pc, #512]	@ (8003110 <HAL_I2C_Init+0x278>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	bf94      	ite	ls
 8002f14:	2301      	movls	r3, #1
 8002f16:	2300      	movhi	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e006      	b.n	8002f2a <HAL_I2C_Init+0x92>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4a7d      	ldr	r2, [pc, #500]	@ (8003114 <HAL_I2C_Init+0x27c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	bf94      	ite	ls
 8002f24:	2301      	movls	r3, #1
 8002f26:	2300      	movhi	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e0e7      	b.n	8003102 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4a78      	ldr	r2, [pc, #480]	@ (8003118 <HAL_I2C_Init+0x280>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	0c9b      	lsrs	r3, r3, #18
 8002f3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	4a6a      	ldr	r2, [pc, #424]	@ (800310c <HAL_I2C_Init+0x274>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d802      	bhi.n	8002f6c <HAL_I2C_Init+0xd4>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	e009      	b.n	8002f80 <HAL_I2C_Init+0xe8>
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f72:	fb02 f303 	mul.w	r3, r2, r3
 8002f76:	4a69      	ldr	r2, [pc, #420]	@ (800311c <HAL_I2C_Init+0x284>)
 8002f78:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7c:	099b      	lsrs	r3, r3, #6
 8002f7e:	3301      	adds	r3, #1
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	430b      	orrs	r3, r1
 8002f86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f92:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	495c      	ldr	r1, [pc, #368]	@ (800310c <HAL_I2C_Init+0x274>)
 8002f9c:	428b      	cmp	r3, r1
 8002f9e:	d819      	bhi.n	8002fd4 <HAL_I2C_Init+0x13c>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	1e59      	subs	r1, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fae:	1c59      	adds	r1, r3, #1
 8002fb0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002fb4:	400b      	ands	r3, r1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <HAL_I2C_Init+0x138>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1e59      	subs	r1, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fce:	e051      	b.n	8003074 <HAL_I2C_Init+0x1dc>
 8002fd0:	2304      	movs	r3, #4
 8002fd2:	e04f      	b.n	8003074 <HAL_I2C_Init+0x1dc>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d111      	bne.n	8003000 <HAL_I2C_Init+0x168>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	1e58      	subs	r0, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6859      	ldr	r1, [r3, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	440b      	add	r3, r1
 8002fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf0c      	ite	eq
 8002ff8:	2301      	moveq	r3, #1
 8002ffa:	2300      	movne	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	e012      	b.n	8003026 <HAL_I2C_Init+0x18e>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1e58      	subs	r0, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	0099      	lsls	r1, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	fbb0 f3f3 	udiv	r3, r0, r3
 8003016:	3301      	adds	r3, #1
 8003018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301c:	2b00      	cmp	r3, #0
 800301e:	bf0c      	ite	eq
 8003020:	2301      	moveq	r3, #1
 8003022:	2300      	movne	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_I2C_Init+0x196>
 800302a:	2301      	movs	r3, #1
 800302c:	e022      	b.n	8003074 <HAL_I2C_Init+0x1dc>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10e      	bne.n	8003054 <HAL_I2C_Init+0x1bc>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1e58      	subs	r0, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6859      	ldr	r1, [r3, #4]
 800303e:	460b      	mov	r3, r1
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	440b      	add	r3, r1
 8003044:	fbb0 f3f3 	udiv	r3, r0, r3
 8003048:	3301      	adds	r3, #1
 800304a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800304e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003052:	e00f      	b.n	8003074 <HAL_I2C_Init+0x1dc>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1e58      	subs	r0, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	0099      	lsls	r1, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	fbb0 f3f3 	udiv	r3, r0, r3
 800306a:	3301      	adds	r3, #1
 800306c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003070:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	6809      	ldr	r1, [r1, #0]
 8003078:	4313      	orrs	r3, r2
 800307a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69da      	ldr	r2, [r3, #28]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80030a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6911      	ldr	r1, [r2, #16]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68d2      	ldr	r2, [r2, #12]
 80030ae:	4311      	orrs	r1, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	430b      	orrs	r3, r1
 80030b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	000186a0 	.word	0x000186a0
 8003110:	001e847f 	.word	0x001e847f
 8003114:	003d08ff 	.word	0x003d08ff
 8003118:	431bde83 	.word	0x431bde83
 800311c:	10624dd3 	.word	0x10624dd3

08003120 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af02      	add	r7, sp, #8
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	4608      	mov	r0, r1
 800312a:	4611      	mov	r1, r2
 800312c:	461a      	mov	r2, r3
 800312e:	4603      	mov	r3, r0
 8003130:	817b      	strh	r3, [r7, #10]
 8003132:	460b      	mov	r3, r1
 8003134:	813b      	strh	r3, [r7, #8]
 8003136:	4613      	mov	r3, r2
 8003138:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800313a:	f7ff f827 	bl	800218c <HAL_GetTick>
 800313e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b20      	cmp	r3, #32
 800314a:	f040 80d9 	bne.w	8003300 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	2319      	movs	r3, #25
 8003154:	2201      	movs	r2, #1
 8003156:	496d      	ldr	r1, [pc, #436]	@ (800330c <HAL_I2C_Mem_Write+0x1ec>)
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 ff5b 	bl	8004014 <I2C_WaitOnFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003164:	2302      	movs	r3, #2
 8003166:	e0cc      	b.n	8003302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_I2C_Mem_Write+0x56>
 8003172:	2302      	movs	r3, #2
 8003174:	e0c5      	b.n	8003302 <HAL_I2C_Mem_Write+0x1e2>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b01      	cmp	r3, #1
 800318a:	d007      	beq.n	800319c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0201 	orr.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2221      	movs	r2, #33	@ 0x21
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2240      	movs	r2, #64	@ 0x40
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a3a      	ldr	r2, [r7, #32]
 80031c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80031cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4a4d      	ldr	r2, [pc, #308]	@ (8003310 <HAL_I2C_Mem_Write+0x1f0>)
 80031dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031de:	88f8      	ldrh	r0, [r7, #6]
 80031e0:	893a      	ldrh	r2, [r7, #8]
 80031e2:	8979      	ldrh	r1, [r7, #10]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	4603      	mov	r3, r0
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fc76 	bl	8003ae0 <I2C_RequestMemoryWrite>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d052      	beq.n	80032a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e081      	b.n	8003302 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f001 f820 	bl	8004248 <I2C_WaitOnTXEFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00d      	beq.n	800322a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003212:	2b04      	cmp	r3, #4
 8003214:	d107      	bne.n	8003226 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003224:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e06b      	b.n	8003302 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322e:	781a      	ldrb	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b04      	cmp	r3, #4
 8003266:	d11b      	bne.n	80032a0 <HAL_I2C_Mem_Write+0x180>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800326c:	2b00      	cmp	r3, #0
 800326e:	d017      	beq.n	80032a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003274:	781a      	ldrb	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1aa      	bne.n	80031fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f001 f813 	bl	80042d8 <I2C_WaitOnBTFFlagUntilTimeout>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00d      	beq.n	80032d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d107      	bne.n	80032d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e016      	b.n	8003302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	e000      	b.n	8003302 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003300:	2302      	movs	r3, #2
  }
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	00100002 	.word	0x00100002
 8003310:	ffff0000 	.word	0xffff0000

08003314 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08c      	sub	sp, #48	@ 0x30
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	4608      	mov	r0, r1
 800331e:	4611      	mov	r1, r2
 8003320:	461a      	mov	r2, r3
 8003322:	4603      	mov	r3, r0
 8003324:	817b      	strh	r3, [r7, #10]
 8003326:	460b      	mov	r3, r1
 8003328:	813b      	strh	r3, [r7, #8]
 800332a:	4613      	mov	r3, r2
 800332c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800332e:	f7fe ff2d 	bl	800218c <HAL_GetTick>
 8003332:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b20      	cmp	r3, #32
 800333e:	f040 8214 	bne.w	800376a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	2319      	movs	r3, #25
 8003348:	2201      	movs	r2, #1
 800334a:	497b      	ldr	r1, [pc, #492]	@ (8003538 <HAL_I2C_Mem_Read+0x224>)
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 fe61 	bl	8004014 <I2C_WaitOnFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003358:	2302      	movs	r3, #2
 800335a:	e207      	b.n	800376c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_I2C_Mem_Read+0x56>
 8003366:	2302      	movs	r3, #2
 8003368:	e200      	b.n	800376c <HAL_I2C_Mem_Read+0x458>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b01      	cmp	r3, #1
 800337e:	d007      	beq.n	8003390 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800339e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2222      	movs	r2, #34	@ 0x22
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2240      	movs	r2, #64	@ 0x40
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80033c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4a5b      	ldr	r2, [pc, #364]	@ (800353c <HAL_I2C_Mem_Read+0x228>)
 80033d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033d2:	88f8      	ldrh	r0, [r7, #6]
 80033d4:	893a      	ldrh	r2, [r7, #8]
 80033d6:	8979      	ldrh	r1, [r7, #10]
 80033d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033da:	9301      	str	r3, [sp, #4]
 80033dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	4603      	mov	r3, r0
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 fc12 	bl	8003c0c <I2C_RequestMemoryRead>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e1bc      	b.n	800376c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d113      	bne.n	8003422 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033fa:	2300      	movs	r3, #0
 80033fc:	623b      	str	r3, [r7, #32]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	623b      	str	r3, [r7, #32]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	623b      	str	r3, [r7, #32]
 800340e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	e190      	b.n	8003744 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003426:	2b01      	cmp	r3, #1
 8003428:	d11b      	bne.n	8003462 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003438:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800343a:	2300      	movs	r3, #0
 800343c:	61fb      	str	r3, [r7, #28]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	e170      	b.n	8003744 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003466:	2b02      	cmp	r3, #2
 8003468:	d11b      	bne.n	80034a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003478:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003488:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800348a:	2300      	movs	r3, #0
 800348c:	61bb      	str	r3, [r7, #24]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	61bb      	str	r3, [r7, #24]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	61bb      	str	r3, [r7, #24]
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	e150      	b.n	8003744 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80034b8:	e144      	b.n	8003744 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034be:	2b03      	cmp	r3, #3
 80034c0:	f200 80f1 	bhi.w	80036a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d123      	bne.n	8003514 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 ff49 	bl	8004368 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e145      	b.n	800376c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691a      	ldr	r2, [r3, #16]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003508:	b29b      	uxth	r3, r3
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003512:	e117      	b.n	8003744 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003518:	2b02      	cmp	r3, #2
 800351a:	d14e      	bne.n	80035ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003522:	2200      	movs	r2, #0
 8003524:	4906      	ldr	r1, [pc, #24]	@ (8003540 <HAL_I2C_Mem_Read+0x22c>)
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 fd74 	bl	8004014 <I2C_WaitOnFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e11a      	b.n	800376c <HAL_I2C_Mem_Read+0x458>
 8003536:	bf00      	nop
 8003538:	00100002 	.word	0x00100002
 800353c:	ffff0000 	.word	0xffff0000
 8003540:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003552:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691a      	ldr	r2, [r3, #16]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357c:	b29b      	uxth	r3, r3
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035b8:	e0c4      	b.n	8003744 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c0:	2200      	movs	r2, #0
 80035c2:	496c      	ldr	r1, [pc, #432]	@ (8003774 <HAL_I2C_Mem_Read+0x460>)
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 fd25 	bl	8004014 <I2C_WaitOnFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0cb      	b.n	800376c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800361c:	2200      	movs	r2, #0
 800361e:	4955      	ldr	r1, [pc, #340]	@ (8003774 <HAL_I2C_Mem_Read+0x460>)
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 fcf7 	bl	8004014 <I2C_WaitOnFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e09d      	b.n	800376c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800363e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036a4:	e04e      	b.n	8003744 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 fe5c 	bl	8004368 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e058      	b.n	800376c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d124      	bne.n	8003744 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036fe:	2b03      	cmp	r3, #3
 8003700:	d107      	bne.n	8003712 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003710:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003748:	2b00      	cmp	r3, #0
 800374a:	f47f aeb6 	bne.w	80034ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	e000      	b.n	800376c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800376a:	2302      	movs	r3, #2
  }
}
 800376c:	4618      	mov	r0, r3
 800376e:	3728      	adds	r7, #40	@ 0x28
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	00010004 	.word	0x00010004

08003778 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08c      	sub	sp, #48	@ 0x30
 800377c:	af02      	add	r7, sp, #8
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	4608      	mov	r0, r1
 8003782:	4611      	mov	r1, r2
 8003784:	461a      	mov	r2, r3
 8003786:	4603      	mov	r3, r0
 8003788:	817b      	strh	r3, [r7, #10]
 800378a:	460b      	mov	r3, r1
 800378c:	813b      	strh	r3, [r7, #8]
 800378e:	4613      	mov	r3, r2
 8003790:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003792:	f7fe fcfb 	bl	800218c <HAL_GetTick>
 8003796:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b20      	cmp	r3, #32
 80037a6:	f040 8172 	bne.w	8003a8e <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80037aa:	4b93      	ldr	r3, [pc, #588]	@ (80039f8 <HAL_I2C_Mem_Read_DMA+0x280>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	08db      	lsrs	r3, r3, #3
 80037b0:	4a92      	ldr	r2, [pc, #584]	@ (80039fc <HAL_I2C_Mem_Read_DMA+0x284>)
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	0a1a      	lsrs	r2, r3, #8
 80037b8:	4613      	mov	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	009a      	lsls	r2, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d112      	bne.n	80037f6 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	f043 0220 	orr.w	r2, r3, #32
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80037f2:	2302      	movs	r3, #2
 80037f4:	e14c      	b.n	8003a90 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b02      	cmp	r3, #2
 8003802:	d0df      	beq.n	80037c4 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_I2C_Mem_Read_DMA+0x9a>
 800380e:	2302      	movs	r3, #2
 8003810:	e13e      	b.n	8003a90 <HAL_I2C_Mem_Read_DMA+0x318>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d007      	beq.n	8003838 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003846:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2222      	movs	r2, #34	@ 0x22
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2240      	movs	r2, #64	@ 0x40
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003862:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003868:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4a62      	ldr	r2, [pc, #392]	@ (8003a00 <HAL_I2C_Mem_Read_DMA+0x288>)
 8003878:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800387a:	897a      	ldrh	r2, [r7, #10]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8003880:	893a      	ldrh	r2, [r7, #8]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003886:	88fa      	ldrh	r2, [r7, #6]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 80cc 	beq.w	8003a34 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d02d      	beq.n	8003900 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a8:	4a56      	ldr	r2, [pc, #344]	@ (8003a04 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80038aa:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b0:	4a55      	ldr	r2, [pc, #340]	@ (8003a08 <HAL_I2C_Mem_Read_DMA+0x290>)
 80038b2:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b8:	2200      	movs	r2, #0
 80038ba:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c0:	2200      	movs	r2, #0
 80038c2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c8:	2200      	movs	r2, #0
 80038ca:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d0:	2200      	movs	r2, #0
 80038d2:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3310      	adds	r3, #16
 80038de:	4619      	mov	r1, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e4:	461a      	mov	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ea:	f7fe fe39 	bl	8002560 <HAL_DMA_Start_IT>
 80038ee:	4603      	mov	r3, r0
 80038f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80038f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f040 8087 	bne.w	8003a0c <HAL_I2C_Mem_Read_DMA+0x294>
 80038fe:	e013      	b.n	8003928 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003914:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0b3      	b.n	8003a90 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003928:	88f8      	ldrh	r0, [r7, #6]
 800392a:	893a      	ldrh	r2, [r7, #8]
 800392c:	8979      	ldrh	r1, [r7, #10]
 800392e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003930:	9301      	str	r3, [sp, #4]
 8003932:	2323      	movs	r3, #35	@ 0x23
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	4603      	mov	r3, r0
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f967 	bl	8003c0c <I2C_RequestMemoryRead>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d023      	beq.n	800398c <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003948:	4618      	mov	r0, r3
 800394a:	f7fe fe61 	bl	8002610 <HAL_DMA_Abort_IT>
 800394e:	4603      	mov	r3, r0
 8003950:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003958:	2200      	movs	r2, #0
 800395a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800396a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0201 	bic.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e081      	b.n	8003a90 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003990:	2b01      	cmp	r3, #1
 8003992:	d108      	bne.n	80039a6 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	e007      	b.n	80039b6 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80039b4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b6:	2300      	movs	r3, #0
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	61bb      	str	r3, [r7, #24]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	61bb      	str	r3, [r7, #24]
 80039ca:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039e2:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039f2:	605a      	str	r2, [r3, #4]
 80039f4:	e049      	b.n	8003a8a <HAL_I2C_Mem_Read_DMA+0x312>
 80039f6:	bf00      	nop
 80039f8:	20000000 	.word	0x20000000
 80039fc:	14f8b589 	.word	0x14f8b589
 8003a00:	ffff0000 	.word	0xffff0000
 8003a04:	08003ddd 	.word	0x08003ddd
 8003a08:	08003f9b 	.word	0x08003f9b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a20:	f043 0210 	orr.w	r2, r3, #16
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e02d      	b.n	8003a90 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003a34:	88f8      	ldrh	r0, [r7, #6]
 8003a36:	893a      	ldrh	r2, [r7, #8]
 8003a38:	8979      	ldrh	r1, [r7, #10]
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3c:	9301      	str	r3, [sp, #4]
 8003a3e:	2323      	movs	r3, #35	@ 0x23
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	4603      	mov	r3, r0
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f8e1 	bl	8003c0c <I2C_RequestMemoryRead>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e01d      	b.n	8003a90 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a78:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e000      	b.n	8003a90 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8003a8e:	2302      	movs	r3, #2
  }
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3728      	adds	r7, #40	@ 0x28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc80      	pop	{r7}
 8003aa8:	4770      	bx	lr

08003aaa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr

08003ace <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	4608      	mov	r0, r1
 8003aea:	4611      	mov	r1, r2
 8003aec:	461a      	mov	r2, r3
 8003aee:	4603      	mov	r3, r0
 8003af0:	817b      	strh	r3, [r7, #10]
 8003af2:	460b      	mov	r3, r1
 8003af4:	813b      	strh	r3, [r7, #8]
 8003af6:	4613      	mov	r3, r2
 8003af8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 fa7c 	bl	8004014 <I2C_WaitOnFlagUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00d      	beq.n	8003b3e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b30:	d103      	bne.n	8003b3a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b38:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e05f      	b.n	8003bfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b3e:	897b      	ldrh	r3, [r7, #10]
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	461a      	mov	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	6a3a      	ldr	r2, [r7, #32]
 8003b52:	492d      	ldr	r1, [pc, #180]	@ (8003c08 <I2C_RequestMemoryWrite+0x128>)
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 fad7 	bl	8004108 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e04c      	b.n	8003bfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b7c:	6a39      	ldr	r1, [r7, #32]
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 fb62 	bl	8004248 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00d      	beq.n	8003ba6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d107      	bne.n	8003ba2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ba0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e02b      	b.n	8003bfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d105      	bne.n	8003bb8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bac:	893b      	ldrh	r3, [r7, #8]
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	611a      	str	r2, [r3, #16]
 8003bb6:	e021      	b.n	8003bfc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003bb8:	893b      	ldrh	r3, [r7, #8]
 8003bba:	0a1b      	lsrs	r3, r3, #8
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bc8:	6a39      	ldr	r1, [r7, #32]
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 fb3c 	bl	8004248 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00d      	beq.n	8003bf2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d107      	bne.n	8003bee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e005      	b.n	8003bfe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bf2:	893b      	ldrh	r3, [r7, #8]
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	00010002 	.word	0x00010002

08003c0c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	4608      	mov	r0, r1
 8003c16:	4611      	mov	r1, r2
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	817b      	strh	r3, [r7, #10]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	813b      	strh	r3, [r7, #8]
 8003c22:	4613      	mov	r3, r2
 8003c24:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c34:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 f9de 	bl	8004014 <I2C_WaitOnFlagUntilTimeout>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00d      	beq.n	8003c7a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c6c:	d103      	bne.n	8003c76 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c74:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e0aa      	b.n	8003dd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c7a:	897b      	ldrh	r3, [r7, #10]
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	461a      	mov	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	6a3a      	ldr	r2, [r7, #32]
 8003c8e:	4952      	ldr	r1, [pc, #328]	@ (8003dd8 <I2C_RequestMemoryRead+0x1cc>)
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 fa39 	bl	8004108 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e097      	b.n	8003dd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cb8:	6a39      	ldr	r1, [r7, #32]
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 fac4 	bl	8004248 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00d      	beq.n	8003ce2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d107      	bne.n	8003cde <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cdc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e076      	b.n	8003dd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ce2:	88fb      	ldrh	r3, [r7, #6]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d105      	bne.n	8003cf4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ce8:	893b      	ldrh	r3, [r7, #8]
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	611a      	str	r2, [r3, #16]
 8003cf2:	e021      	b.n	8003d38 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cf4:	893b      	ldrh	r3, [r7, #8]
 8003cf6:	0a1b      	lsrs	r3, r3, #8
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d04:	6a39      	ldr	r1, [r7, #32]
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 fa9e 	bl	8004248 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00d      	beq.n	8003d2e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d107      	bne.n	8003d2a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e050      	b.n	8003dd0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d2e:	893b      	ldrh	r3, [r7, #8]
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d3a:	6a39      	ldr	r1, [r7, #32]
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 fa83 	bl	8004248 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00d      	beq.n	8003d64 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d107      	bne.n	8003d60 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d5e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e035      	b.n	8003dd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d72:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 f947 	bl	8004014 <I2C_WaitOnFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00d      	beq.n	8003da8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d9a:	d103      	bne.n	8003da4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003da2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e013      	b.n	8003dd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003da8:	897b      	ldrh	r3, [r7, #10]
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	f043 0301 	orr.w	r3, r3, #1
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dba:	6a3a      	ldr	r2, [r7, #32]
 8003dbc:	4906      	ldr	r1, [pc, #24]	@ (8003dd8 <I2C_RequestMemoryRead+0x1cc>)
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 f9a2 	bl	8004108 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	00010002 	.word	0x00010002

08003ddc <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003df0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003df8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003e0e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003e30:	7cfb      	ldrb	r3, [r7, #19]
 8003e32:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003e36:	2b21      	cmp	r3, #33	@ 0x21
 8003e38:	d007      	beq.n	8003e4a <I2C_DMAXferCplt+0x6e>
 8003e3a:	7cfb      	ldrb	r3, [r7, #19]
 8003e3c:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8003e40:	2b22      	cmp	r3, #34	@ 0x22
 8003e42:	d131      	bne.n	8003ea8 <I2C_DMAXferCplt+0xcc>
 8003e44:	7cbb      	ldrb	r3, [r7, #18]
 8003e46:	2b20      	cmp	r3, #32
 8003e48:	d12e      	bne.n	8003ea8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e58:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003e60:	7cfb      	ldrb	r3, [r7, #19]
 8003e62:	2b29      	cmp	r3, #41	@ 0x29
 8003e64:	d10a      	bne.n	8003e7c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2221      	movs	r2, #33	@ 0x21
 8003e6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	2228      	movs	r2, #40	@ 0x28
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e74:	6978      	ldr	r0, [r7, #20]
 8003e76:	f7ff fe18 	bl	8003aaa <HAL_I2C_SlaveTxCpltCallback>
 8003e7a:	e00c      	b.n	8003e96 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003e7c:	7cfb      	ldrb	r3, [r7, #19]
 8003e7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e80:	d109      	bne.n	8003e96 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2222      	movs	r2, #34	@ 0x22
 8003e86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	2228      	movs	r2, #40	@ 0x28
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e90:	6978      	ldr	r0, [r7, #20]
 8003e92:	f7ff fe13 	bl	8003abc <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003ea4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003ea6:	e074      	b.n	8003f92 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d06e      	beq.n	8003f92 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d107      	bne.n	8003ece <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ecc:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003edc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ee4:	d009      	beq.n	8003efa <I2C_DMAXferCplt+0x11e>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d006      	beq.n	8003efa <I2C_DMAXferCplt+0x11e>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003ef2:	d002      	beq.n	8003efa <I2C_DMAXferCplt+0x11e>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b20      	cmp	r3, #32
 8003ef8:	d107      	bne.n	8003f0a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f08:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f18:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f28:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003f38:	6978      	ldr	r0, [r7, #20]
 8003f3a:	f7ff fdc8 	bl	8003ace <HAL_I2C_ErrorCallback>
}
 8003f3e:	e028      	b.n	8003f92 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b40      	cmp	r3, #64	@ 0x40
 8003f52:	d10a      	bne.n	8003f6a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003f62:	6978      	ldr	r0, [r7, #20]
 8003f64:	f7fd fb22 	bl	80015ac <HAL_I2C_MemRxCpltCallback>
}
 8003f68:	e013      	b.n	8003f92 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	d002      	beq.n	8003f7e <I2C_DMAXferCplt+0x1a2>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	d103      	bne.n	8003f86 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2200      	movs	r2, #0
 8003f82:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f84:	e002      	b.n	8003f8c <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2212      	movs	r2, #18
 8003f8a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f8c:	6978      	ldr	r0, [r7, #20]
 8003f8e:	f7ff fd83 	bl	8003a98 <HAL_I2C_MasterRxCpltCallback>
}
 8003f92:	bf00      	nop
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7fe fccd 	bl	8002968 <HAL_DMA_GetError>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d01b      	beq.n	800400c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fe2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffe:	f043 0210 	orr.w	r2, r3, #16
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f7ff fd61 	bl	8003ace <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800400c:	bf00      	nop
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	4613      	mov	r3, r2
 8004022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004024:	e048      	b.n	80040b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402c:	d044      	beq.n	80040b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800402e:	f7fe f8ad 	bl	800218c <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d302      	bcc.n	8004044 <I2C_WaitOnFlagUntilTimeout+0x30>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d139      	bne.n	80040b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	0c1b      	lsrs	r3, r3, #16
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b01      	cmp	r3, #1
 800404c:	d10d      	bne.n	800406a <I2C_WaitOnFlagUntilTimeout+0x56>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	43da      	mvns	r2, r3
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	4013      	ands	r3, r2
 800405a:	b29b      	uxth	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	bf0c      	ite	eq
 8004060:	2301      	moveq	r3, #1
 8004062:	2300      	movne	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	e00c      	b.n	8004084 <I2C_WaitOnFlagUntilTimeout+0x70>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	43da      	mvns	r2, r3
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	4013      	ands	r3, r2
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	bf0c      	ite	eq
 800407c:	2301      	moveq	r3, #1
 800407e:	2300      	movne	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	461a      	mov	r2, r3
 8004084:	79fb      	ldrb	r3, [r7, #7]
 8004086:	429a      	cmp	r2, r3
 8004088:	d116      	bne.n	80040b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a4:	f043 0220 	orr.w	r2, r3, #32
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e023      	b.n	8004100 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	0c1b      	lsrs	r3, r3, #16
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d10d      	bne.n	80040de <I2C_WaitOnFlagUntilTimeout+0xca>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	43da      	mvns	r2, r3
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	4013      	ands	r3, r2
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	bf0c      	ite	eq
 80040d4:	2301      	moveq	r3, #1
 80040d6:	2300      	movne	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	461a      	mov	r2, r3
 80040dc:	e00c      	b.n	80040f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	43da      	mvns	r2, r3
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	4013      	ands	r3, r2
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	bf0c      	ite	eq
 80040f0:	2301      	moveq	r3, #1
 80040f2:	2300      	movne	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	461a      	mov	r2, r3
 80040f8:	79fb      	ldrb	r3, [r7, #7]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d093      	beq.n	8004026 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004116:	e071      	b.n	80041fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004126:	d123      	bne.n	8004170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004136:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004140:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415c:	f043 0204 	orr.w	r2, r3, #4
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e067      	b.n	8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004176:	d041      	beq.n	80041fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004178:	f7fe f808 	bl	800218c <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	429a      	cmp	r2, r3
 8004186:	d302      	bcc.n	800418e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d136      	bne.n	80041fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	0c1b      	lsrs	r3, r3, #16
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b01      	cmp	r3, #1
 8004196:	d10c      	bne.n	80041b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	43da      	mvns	r2, r3
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4013      	ands	r3, r2
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	bf14      	ite	ne
 80041aa:	2301      	movne	r3, #1
 80041ac:	2300      	moveq	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	e00b      	b.n	80041ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	43da      	mvns	r2, r3
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	4013      	ands	r3, r2
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	bf14      	ite	ne
 80041c4:	2301      	movne	r3, #1
 80041c6:	2300      	moveq	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d016      	beq.n	80041fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e8:	f043 0220 	orr.w	r2, r3, #32
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e021      	b.n	8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	0c1b      	lsrs	r3, r3, #16
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b01      	cmp	r3, #1
 8004204:	d10c      	bne.n	8004220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	43da      	mvns	r2, r3
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	4013      	ands	r3, r2
 8004212:	b29b      	uxth	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	bf14      	ite	ne
 8004218:	2301      	movne	r3, #1
 800421a:	2300      	moveq	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	e00b      	b.n	8004238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	43da      	mvns	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4013      	ands	r3, r2
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	bf14      	ite	ne
 8004232:	2301      	movne	r3, #1
 8004234:	2300      	moveq	r3, #0
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	f47f af6d 	bne.w	8004118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004254:	e034      	b.n	80042c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 f8e3 	bl	8004422 <I2C_IsAcknowledgeFailed>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e034      	b.n	80042d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426c:	d028      	beq.n	80042c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426e:	f7fd ff8d 	bl	800218c <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	429a      	cmp	r2, r3
 800427c:	d302      	bcc.n	8004284 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d11d      	bne.n	80042c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800428e:	2b80      	cmp	r3, #128	@ 0x80
 8004290:	d016      	beq.n	80042c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ac:	f043 0220 	orr.w	r2, r3, #32
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e007      	b.n	80042d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ca:	2b80      	cmp	r3, #128	@ 0x80
 80042cc:	d1c3      	bne.n	8004256 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042e4:	e034      	b.n	8004350 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f89b 	bl	8004422 <I2C_IsAcknowledgeFailed>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e034      	b.n	8004360 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fc:	d028      	beq.n	8004350 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fe:	f7fd ff45 	bl	800218c <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	429a      	cmp	r2, r3
 800430c:	d302      	bcc.n	8004314 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d11d      	bne.n	8004350 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b04      	cmp	r3, #4
 8004320:	d016      	beq.n	8004350 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433c:	f043 0220 	orr.w	r2, r3, #32
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e007      	b.n	8004360 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b04      	cmp	r3, #4
 800435c:	d1c3      	bne.n	80042e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004374:	e049      	b.n	800440a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b10      	cmp	r3, #16
 8004382:	d119      	bne.n	80043b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0210 	mvn.w	r2, #16
 800438c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e030      	b.n	800441a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b8:	f7fd fee8 	bl	800218c <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d302      	bcc.n	80043ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d11d      	bne.n	800440a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d8:	2b40      	cmp	r3, #64	@ 0x40
 80043da:	d016      	beq.n	800440a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f6:	f043 0220 	orr.w	r2, r3, #32
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e007      	b.n	800441a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004414:	2b40      	cmp	r3, #64	@ 0x40
 8004416:	d1ae      	bne.n	8004376 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004434:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004438:	d11b      	bne.n	8004472 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004442:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2220      	movs	r2, #32
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	f043 0204 	orr.w	r2, r3, #4
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	bc80      	pop	{r7}
 800447c:	4770      	bx	lr

0800447e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b086      	sub	sp, #24
 8004482:	af02      	add	r7, sp, #8
 8004484:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e101      	b.n	8004694 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d106      	bne.n	80044b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f006 fa22 	bl	800a8f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2203      	movs	r2, #3
 80044b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044be:	d102      	bne.n	80044c6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f002 fe46 	bl	800715c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6818      	ldr	r0, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	7c1a      	ldrb	r2, [r3, #16]
 80044d8:	f88d 2000 	strb.w	r2, [sp]
 80044dc:	3304      	adds	r3, #4
 80044de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044e0:	f002 fd26 	bl	8006f30 <USB_CoreInit>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d005      	beq.n	80044f6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2202      	movs	r2, #2
 80044ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e0ce      	b.n	8004694 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2100      	movs	r1, #0
 80044fc:	4618      	mov	r0, r3
 80044fe:	f002 fe3d 	bl	800717c <USB_SetCurrentMode>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e0bf      	b.n	8004694 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004514:	2300      	movs	r3, #0
 8004516:	73fb      	strb	r3, [r7, #15]
 8004518:	e04a      	b.n	80045b0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800451a:	7bfa      	ldrb	r2, [r7, #15]
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	3315      	adds	r3, #21
 800452a:	2201      	movs	r2, #1
 800452c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800452e:	7bfa      	ldrb	r2, [r7, #15]
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	3314      	adds	r3, #20
 800453e:	7bfa      	ldrb	r2, [r7, #15]
 8004540:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004542:	7bfa      	ldrb	r2, [r7, #15]
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	b298      	uxth	r0, r3
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	440b      	add	r3, r1
 8004554:	332e      	adds	r3, #46	@ 0x2e
 8004556:	4602      	mov	r2, r0
 8004558:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800455a:	7bfa      	ldrb	r2, [r7, #15]
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	4613      	mov	r3, r2
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	4413      	add	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	440b      	add	r3, r1
 8004568:	3318      	adds	r3, #24
 800456a:	2200      	movs	r2, #0
 800456c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800456e:	7bfa      	ldrb	r2, [r7, #15]
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	4413      	add	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	331c      	adds	r3, #28
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004582:	7bfa      	ldrb	r2, [r7, #15]
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	4613      	mov	r3, r2
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	4413      	add	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	440b      	add	r3, r1
 8004590:	3320      	adds	r3, #32
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004596:	7bfa      	ldrb	r2, [r7, #15]
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	3324      	adds	r3, #36	@ 0x24
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	3301      	adds	r3, #1
 80045ae:	73fb      	strb	r3, [r7, #15]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	791b      	ldrb	r3, [r3, #4]
 80045b4:	7bfa      	ldrb	r2, [r7, #15]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d3af      	bcc.n	800451a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ba:	2300      	movs	r3, #0
 80045bc:	73fb      	strb	r3, [r7, #15]
 80045be:	e044      	b.n	800464a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045c0:	7bfa      	ldrb	r2, [r7, #15]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80045d2:	2200      	movs	r2, #0
 80045d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045d6:	7bfa      	ldrb	r2, [r7, #15]
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	4613      	mov	r3, r2
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	4413      	add	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	440b      	add	r3, r1
 80045e4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80045e8:	7bfa      	ldrb	r2, [r7, #15]
 80045ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045ec:	7bfa      	ldrb	r2, [r7, #15]
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80045fe:	2200      	movs	r2, #0
 8004600:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004602:	7bfa      	ldrb	r2, [r7, #15]
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	4613      	mov	r3, r2
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	4413      	add	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	440b      	add	r3, r1
 8004610:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004618:	7bfa      	ldrb	r2, [r7, #15]
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	4613      	mov	r3, r2
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	4413      	add	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800462e:	7bfa      	ldrb	r2, [r7, #15]
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	4413      	add	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	440b      	add	r3, r1
 800463c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	3301      	adds	r3, #1
 8004648:	73fb      	strb	r3, [r7, #15]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	791b      	ldrb	r3, [r3, #4]
 800464e:	7bfa      	ldrb	r2, [r7, #15]
 8004650:	429a      	cmp	r2, r3
 8004652:	d3b5      	bcc.n	80045c0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6818      	ldr	r0, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	7c1a      	ldrb	r2, [r3, #16]
 800465c:	f88d 2000 	strb.w	r2, [sp]
 8004660:	3304      	adds	r3, #4
 8004662:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004664:	f002 fdd6 	bl	8007214 <USB_DevInit>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2202      	movs	r2, #2
 8004672:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e00c      	b.n	8004694 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f003 fe0d 	bl	80082ac <USB_DevDisconnect>

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <HAL_PCD_Start+0x1c>
 80046b4:	2302      	movs	r3, #2
 80046b6:	e022      	b.n	80046fe <HAL_PCD_Start+0x62>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d009      	beq.n	80046e0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d105      	bne.n	80046e0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f002 fd29 	bl	800713c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f003 fdbc 	bl	800826c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004706:	b590      	push	{r4, r7, lr}
 8004708:	b08d      	sub	sp, #52	@ 0x34
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4618      	mov	r0, r3
 800471e:	f003 fe73 	bl	8008408 <USB_GetMode>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	f040 848c 	bne.w	8005042 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f003 fddc 	bl	80082ec <USB_ReadInterrupts>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 8482 	beq.w	8005040 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	0a1b      	lsrs	r3, r3, #8
 8004746:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f003 fdc9 	bl	80082ec <USB_ReadInterrupts>
 800475a:	4603      	mov	r3, r0
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b02      	cmp	r3, #2
 8004762:	d107      	bne.n	8004774 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695a      	ldr	r2, [r3, #20]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f002 0202 	and.w	r2, r2, #2
 8004772:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f003 fdb7 	bl	80082ec <USB_ReadInterrupts>
 800477e:	4603      	mov	r3, r0
 8004780:	f003 0310 	and.w	r3, r3, #16
 8004784:	2b10      	cmp	r3, #16
 8004786:	d161      	bne.n	800484c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699a      	ldr	r2, [r3, #24]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0210 	bic.w	r2, r2, #16
 8004796:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	f003 020f 	and.w	r2, r3, #15
 80047a4:	4613      	mov	r3, r2
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	4413      	add	r3, r2
 80047b4:	3304      	adds	r3, #4
 80047b6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	0c5b      	lsrs	r3, r3, #17
 80047bc:	f003 030f 	and.w	r3, r3, #15
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d124      	bne.n	800480e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80047ca:	4013      	ands	r3, r2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d035      	beq.n	800483c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	091b      	lsrs	r3, r3, #4
 80047d8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80047da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047de:	b29b      	uxth	r3, r3
 80047e0:	461a      	mov	r2, r3
 80047e2:	6a38      	ldr	r0, [r7, #32]
 80047e4:	f003 fbf4 	bl	8007fd0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	091b      	lsrs	r3, r3, #4
 80047f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047f4:	441a      	add	r2, r3
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	695a      	ldr	r2, [r3, #20]
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	091b      	lsrs	r3, r3, #4
 8004802:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004806:	441a      	add	r2, r3
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	615a      	str	r2, [r3, #20]
 800480c:	e016      	b.n	800483c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	0c5b      	lsrs	r3, r3, #17
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	2b06      	cmp	r3, #6
 8004818:	d110      	bne.n	800483c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004820:	2208      	movs	r2, #8
 8004822:	4619      	mov	r1, r3
 8004824:	6a38      	ldr	r0, [r7, #32]
 8004826:	f003 fbd3 	bl	8007fd0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	695a      	ldr	r2, [r3, #20]
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	091b      	lsrs	r3, r3, #4
 8004832:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004836:	441a      	add	r2, r3
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0210 	orr.w	r2, r2, #16
 800484a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f003 fd4b 	bl	80082ec <USB_ReadInterrupts>
 8004856:	4603      	mov	r3, r0
 8004858:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800485c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004860:	f040 80a7 	bne.w	80049b2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f003 fd4f 	bl	8008310 <USB_ReadDevAllOutEpInterrupt>
 8004872:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004874:	e099      	b.n	80049aa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 808e 	beq.w	800499e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	4611      	mov	r1, r2
 800488c:	4618      	mov	r0, r3
 800488e:	f003 fd71 	bl	8008374 <USB_ReadDevOutEPInterrupt>
 8004892:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00c      	beq.n	80048b8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800489e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048aa:	461a      	mov	r2, r3
 80048ac:	2301      	movs	r3, #1
 80048ae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80048b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fea0 	bl	80055f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00c      	beq.n	80048dc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80048c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048ce:	461a      	mov	r2, r3
 80048d0:	2308      	movs	r3, #8
 80048d2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80048d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 ff76 	bl	80057c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f003 0310 	and.w	r3, r3, #16
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d008      	beq.n	80048f8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80048e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e8:	015a      	lsls	r2, r3, #5
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048f2:	461a      	mov	r2, r3
 80048f4:	2310      	movs	r3, #16
 80048f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d030      	beq.n	8004964 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800490a:	2b80      	cmp	r3, #128	@ 0x80
 800490c:	d109      	bne.n	8004922 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	69fa      	ldr	r2, [r7, #28]
 8004918:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800491c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004920:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004924:	4613      	mov	r3, r2
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	4413      	add	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	4413      	add	r3, r2
 8004934:	3304      	adds	r3, #4
 8004936:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	78db      	ldrb	r3, [r3, #3]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d108      	bne.n	8004952 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	2200      	movs	r2, #0
 8004944:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004948:	b2db      	uxtb	r3, r3
 800494a:	4619      	mov	r1, r3
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f006 f8d7 	bl	800ab00 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800495e:	461a      	mov	r2, r3
 8004960:	2302      	movs	r3, #2
 8004962:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b00      	cmp	r3, #0
 800496c:	d008      	beq.n	8004980 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800496e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	4413      	add	r3, r2
 8004976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800497a:	461a      	mov	r2, r3
 800497c:	2320      	movs	r3, #32
 800497e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d009      	beq.n	800499e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004996:	461a      	mov	r2, r3
 8004998:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800499c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800499e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a0:	3301      	adds	r3, #1
 80049a2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80049a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a6:	085b      	lsrs	r3, r3, #1
 80049a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80049aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f47f af62 	bne.w	8004876 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f003 fc98 	bl	80082ec <USB_ReadInterrupts>
 80049bc:	4603      	mov	r3, r0
 80049be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049c6:	f040 80db 	bne.w	8004b80 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f003 fcb7 	bl	8008342 <USB_ReadDevAllInEpInterrupt>
 80049d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80049da:	e0cd      	b.n	8004b78 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80049dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 80c2 	beq.w	8004b6c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	4611      	mov	r1, r2
 80049f2:	4618      	mov	r0, r3
 80049f4:	f003 fcdb 	bl	80083ae <USB_ReadDevInEPInterrupt>
 80049f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d057      	beq.n	8004ab4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	69f9      	ldr	r1, [r7, #28]
 8004a20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a24:	4013      	ands	r3, r2
 8004a26:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a34:	461a      	mov	r2, r3
 8004a36:	2301      	movs	r3, #1
 8004a38:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	799b      	ldrb	r3, [r3, #6]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d132      	bne.n	8004aa8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a46:	4613      	mov	r3, r2
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	4413      	add	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	440b      	add	r3, r1
 8004a50:	3320      	adds	r3, #32
 8004a52:	6819      	ldr	r1, [r3, #0]
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a58:	4613      	mov	r3, r2
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4403      	add	r3, r0
 8004a62:	331c      	adds	r3, #28
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4419      	add	r1, r3
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4403      	add	r3, r0
 8004a76:	3320      	adds	r3, #32
 8004a78:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d113      	bne.n	8004aa8 <HAL_PCD_IRQHandler+0x3a2>
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a84:	4613      	mov	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	4413      	add	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	3324      	adds	r3, #36	@ 0x24
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d108      	bne.n	8004aa8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	f003 fce0 	bl	8008468 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	4619      	mov	r1, r3
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f005 ffa1 	bl	800a9f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d008      	beq.n	8004ad0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aca:	461a      	mov	r2, r3
 8004acc:	2308      	movs	r3, #8
 8004ace:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	f003 0310 	and.w	r3, r3, #16
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d008      	beq.n	8004aec <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	2310      	movs	r3, #16
 8004aea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d008      	beq.n	8004b08 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b02:	461a      	mov	r2, r3
 8004b04:	2340      	movs	r3, #64	@ 0x40
 8004b06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d023      	beq.n	8004b5a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004b12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b14:	6a38      	ldr	r0, [r7, #32]
 8004b16:	f002 fce1 	bl	80074dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	3310      	adds	r3, #16
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	4413      	add	r3, r2
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	78db      	ldrb	r3, [r3, #3]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d108      	bne.n	8004b48 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	4619      	mov	r1, r3
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f005 ffee 	bl	800ab24 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b54:	461a      	mov	r2, r3
 8004b56:	2302      	movs	r3, #2
 8004b58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004b64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fcba 	bl	80054e0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6e:	3301      	adds	r3, #1
 8004b70:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b74:	085b      	lsrs	r3, r3, #1
 8004b76:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f47f af2e 	bne.w	80049dc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f003 fbb1 	bl	80082ec <USB_ReadInterrupts>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b94:	d122      	bne.n	8004bdc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	69fa      	ldr	r2, [r7, #28]
 8004ba0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ba4:	f023 0301 	bic.w	r3, r3, #1
 8004ba8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d108      	bne.n	8004bc6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fe9e 	bl	8005900 <HAL_PCDEx_LPM_Callback>
 8004bc4:	e002      	b.n	8004bcc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f005 ff8c 	bl	800aae4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695a      	ldr	r2, [r3, #20]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004bda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f003 fb83 	bl	80082ec <USB_ReadInterrupts>
 8004be6:	4603      	mov	r3, r0
 8004be8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bf0:	d112      	bne.n	8004c18 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d102      	bne.n	8004c08 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f005 ff48 	bl	800aa98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695a      	ldr	r2, [r3, #20]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004c16:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f003 fb65 	bl	80082ec <USB_ReadInterrupts>
 8004c22:	4603      	mov	r3, r0
 8004c24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c2c:	f040 80b7 	bne.w	8004d9e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	69fa      	ldr	r2, [r7, #28]
 8004c3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c3e:	f023 0301 	bic.w	r3, r3, #1
 8004c42:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2110      	movs	r1, #16
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f002 fc46 	bl	80074dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c50:	2300      	movs	r3, #0
 8004c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c54:	e046      	b.n	8004ce4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c62:	461a      	mov	r2, r3
 8004c64:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c68:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c7a:	0151      	lsls	r1, r2, #5
 8004c7c:	69fa      	ldr	r2, [r7, #28]
 8004c7e:	440a      	add	r2, r1
 8004c80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c84:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c88:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c96:	461a      	mov	r2, r3
 8004c98:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c9c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cae:	0151      	lsls	r1, r2, #5
 8004cb0:	69fa      	ldr	r2, [r7, #28]
 8004cb2:	440a      	add	r2, r1
 8004cb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cb8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004cbc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cce:	0151      	lsls	r1, r2, #5
 8004cd0:	69fa      	ldr	r2, [r7, #28]
 8004cd2:	440a      	add	r2, r1
 8004cd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cd8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004cdc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	791b      	ldrb	r3, [r3, #4]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d3b2      	bcc.n	8004c56 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cfe:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004d02:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	7bdb      	ldrb	r3, [r3, #15]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d016      	beq.n	8004d3a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d16:	69fa      	ldr	r2, [r7, #28]
 8004d18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d1c:	f043 030b 	orr.w	r3, r3, #11
 8004d20:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2c:	69fa      	ldr	r2, [r7, #28]
 8004d2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d32:	f043 030b 	orr.w	r3, r3, #11
 8004d36:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d38:	e015      	b.n	8004d66 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	69fa      	ldr	r2, [r7, #28]
 8004d44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d48:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004d4c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004d50:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	69fa      	ldr	r2, [r7, #28]
 8004d5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d60:	f043 030b 	orr.w	r3, r3, #11
 8004d64:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69fa      	ldr	r2, [r7, #28]
 8004d70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d74:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004d78:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d88:	461a      	mov	r2, r3
 8004d8a:	f003 fb6d 	bl	8008468 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695a      	ldr	r2, [r3, #20]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004d9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f003 faa2 	bl	80082ec <USB_ReadInterrupts>
 8004da8:	4603      	mov	r3, r0
 8004daa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004db2:	d123      	bne.n	8004dfc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f003 fb32 	bl	8008422 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f002 fc00 	bl	80075c8 <USB_GetDevSpeed>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	461a      	mov	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681c      	ldr	r4, [r3, #0]
 8004dd4:	f001 fa0a 	bl	80061ec <HAL_RCC_GetHCLKFreq>
 8004dd8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004dde:	461a      	mov	r2, r3
 8004de0:	4620      	mov	r0, r4
 8004de2:	f002 f909 	bl	8006ff8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f005 fe2d 	bl	800aa46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695a      	ldr	r2, [r3, #20]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004dfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f003 fa73 	bl	80082ec <USB_ReadInterrupts>
 8004e06:	4603      	mov	r3, r0
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d10a      	bne.n	8004e26 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f005 fe0a 	bl	800aa2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695a      	ldr	r2, [r3, #20]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f002 0208 	and.w	r2, r2, #8
 8004e24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f003 fa5e 	bl	80082ec <USB_ReadInterrupts>
 8004e30:	4603      	mov	r3, r0
 8004e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e36:	2b80      	cmp	r3, #128	@ 0x80
 8004e38:	d123      	bne.n	8004e82 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e46:	2301      	movs	r3, #1
 8004e48:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e4a:	e014      	b.n	8004e76 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e50:	4613      	mov	r3, r2
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d105      	bne.n	8004e70 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	4619      	mov	r1, r3
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fb07 	bl	800547e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e72:	3301      	adds	r3, #1
 8004e74:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	791b      	ldrb	r3, [r3, #4]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d3e4      	bcc.n	8004e4c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f003 fa30 	bl	80082ec <USB_ReadInterrupts>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e96:	d13c      	bne.n	8004f12 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e98:	2301      	movs	r3, #1
 8004e9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e9c:	e02b      	b.n	8004ef6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004eae:	6879      	ldr	r1, [r7, #4]
 8004eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	4413      	add	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	440b      	add	r3, r1
 8004ebc:	3318      	adds	r3, #24
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d115      	bne.n	8004ef0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004ec4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	da12      	bge.n	8004ef0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ece:	4613      	mov	r3, r2
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	3317      	adds	r3, #23
 8004eda:	2201      	movs	r2, #1
 8004edc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	4619      	mov	r1, r3
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fac7 	bl	800547e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	791b      	ldrb	r3, [r3, #4]
 8004efa:	461a      	mov	r2, r3
 8004efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d3cd      	bcc.n	8004e9e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695a      	ldr	r2, [r3, #20]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004f10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f003 f9e8 	bl	80082ec <USB_ReadInterrupts>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f26:	d156      	bne.n	8004fd6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f28:	2301      	movs	r3, #1
 8004f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f2c:	e045      	b.n	8004fba <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f42:	4613      	mov	r3, r2
 8004f44:	00db      	lsls	r3, r3, #3
 8004f46:	4413      	add	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d12e      	bne.n	8004fb4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f56:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	da2b      	bge.n	8004fb4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004f68:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d121      	bne.n	8004fb4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f74:	4613      	mov	r3, r2
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	4413      	add	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	440b      	add	r3, r1
 8004f7e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004f82:	2201      	movs	r2, #1
 8004f84:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10a      	bne.n	8004fb4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	69fa      	ldr	r2, [r7, #28]
 8004fa8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fb0:	6053      	str	r3, [r2, #4]
            break;
 8004fb2:	e008      	b.n	8004fc6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	791b      	ldrb	r3, [r3, #4]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d3b3      	bcc.n	8004f2e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695a      	ldr	r2, [r3, #20]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004fd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f003 f986 	bl	80082ec <USB_ReadInterrupts>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fea:	d10a      	bne.n	8005002 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f005 fdab 	bl	800ab48 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	695a      	ldr	r2, [r3, #20]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005000:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f003 f970 	bl	80082ec <USB_ReadInterrupts>
 800500c:	4603      	mov	r3, r0
 800500e:	f003 0304 	and.w	r3, r3, #4
 8005012:	2b04      	cmp	r3, #4
 8005014:	d115      	bne.n	8005042 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f005 fd9b 	bl	800ab64 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6859      	ldr	r1, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	430a      	orrs	r2, r1
 800503c:	605a      	str	r2, [r3, #4]
 800503e:	e000      	b.n	8005042 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005040:	bf00      	nop
    }
  }
}
 8005042:	3734      	adds	r7, #52	@ 0x34
 8005044:	46bd      	mov	sp, r7
 8005046:	bd90      	pop	{r4, r7, pc}

08005048 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	460b      	mov	r3, r1
 8005052:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_PCD_SetAddress+0x1a>
 800505e:	2302      	movs	r3, #2
 8005060:	e012      	b.n	8005088 <HAL_PCD_SetAddress+0x40>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	78fa      	ldrb	r2, [r7, #3]
 800506e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	78fa      	ldrb	r2, [r7, #3]
 8005076:	4611      	mov	r1, r2
 8005078:	4618      	mov	r0, r3
 800507a:	f003 f8d2 	bl	8008222 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	4608      	mov	r0, r1
 800509a:	4611      	mov	r1, r2
 800509c:	461a      	mov	r2, r3
 800509e:	4603      	mov	r3, r0
 80050a0:	70fb      	strb	r3, [r7, #3]
 80050a2:	460b      	mov	r3, r1
 80050a4:	803b      	strh	r3, [r7, #0]
 80050a6:	4613      	mov	r3, r2
 80050a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80050ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	da0f      	bge.n	80050d6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	f003 020f 	and.w	r2, r3, #15
 80050bc:	4613      	mov	r3, r2
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	4413      	add	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	3310      	adds	r3, #16
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	4413      	add	r3, r2
 80050ca:	3304      	adds	r3, #4
 80050cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	705a      	strb	r2, [r3, #1]
 80050d4:	e00f      	b.n	80050f6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050d6:	78fb      	ldrb	r3, [r7, #3]
 80050d8:	f003 020f 	and.w	r2, r3, #15
 80050dc:	4613      	mov	r3, r2
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	4413      	add	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	4413      	add	r3, r2
 80050ec:	3304      	adds	r3, #4
 80050ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80050f6:	78fb      	ldrb	r3, [r7, #3]
 80050f8:	f003 030f 	and.w	r3, r3, #15
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005102:	883a      	ldrh	r2, [r7, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	78ba      	ldrb	r2, [r7, #2]
 800510c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	785b      	ldrb	r3, [r3, #1]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d004      	beq.n	8005120 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	461a      	mov	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005120:	78bb      	ldrb	r3, [r7, #2]
 8005122:	2b02      	cmp	r3, #2
 8005124:	d102      	bne.n	800512c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005132:	2b01      	cmp	r3, #1
 8005134:	d101      	bne.n	800513a <HAL_PCD_EP_Open+0xaa>
 8005136:	2302      	movs	r3, #2
 8005138:	e00e      	b.n	8005158 <HAL_PCD_EP_Open+0xc8>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68f9      	ldr	r1, [r7, #12]
 8005148:	4618      	mov	r0, r3
 800514a:	f002 fa61 	bl	8007610 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005156:	7afb      	ldrb	r3, [r7, #11]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800516c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005170:	2b00      	cmp	r3, #0
 8005172:	da0f      	bge.n	8005194 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	f003 020f 	and.w	r2, r3, #15
 800517a:	4613      	mov	r3, r2
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	4413      	add	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	3310      	adds	r3, #16
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	4413      	add	r3, r2
 8005188:	3304      	adds	r3, #4
 800518a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2201      	movs	r2, #1
 8005190:	705a      	strb	r2, [r3, #1]
 8005192:	e00f      	b.n	80051b4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	f003 020f 	and.w	r2, r3, #15
 800519a:	4613      	mov	r3, r2
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	4413      	add	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	4413      	add	r3, r2
 80051aa:	3304      	adds	r3, #4
 80051ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80051b4:	78fb      	ldrb	r3, [r7, #3]
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d101      	bne.n	80051ce <HAL_PCD_EP_Close+0x6e>
 80051ca:	2302      	movs	r3, #2
 80051cc:	e00e      	b.n	80051ec <HAL_PCD_EP_Close+0x8c>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68f9      	ldr	r1, [r7, #12]
 80051dc:	4618      	mov	r0, r3
 80051de:	f002 fa9d 	bl	800771c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	607a      	str	r2, [r7, #4]
 80051fe:	603b      	str	r3, [r7, #0]
 8005200:	460b      	mov	r3, r1
 8005202:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005204:	7afb      	ldrb	r3, [r7, #11]
 8005206:	f003 020f 	and.w	r2, r3, #15
 800520a:	4613      	mov	r3, r2
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	4413      	add	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4413      	add	r3, r2
 800521a:	3304      	adds	r3, #4
 800521c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2200      	movs	r2, #0
 800522e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2200      	movs	r2, #0
 8005234:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005236:	7afb      	ldrb	r3, [r7, #11]
 8005238:	f003 030f 	and.w	r3, r3, #15
 800523c:	b2da      	uxtb	r2, r3
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	799b      	ldrb	r3, [r3, #6]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d102      	bne.n	8005250 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6818      	ldr	r0, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	799b      	ldrb	r3, [r3, #6]
 8005258:	461a      	mov	r2, r3
 800525a:	6979      	ldr	r1, [r7, #20]
 800525c:	f002 fb3a 	bl	80078d4 <USB_EPStartXfer>

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3718      	adds	r7, #24
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	460b      	mov	r3, r1
 8005274:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005276:	78fb      	ldrb	r3, [r7, #3]
 8005278:	f003 020f 	and.w	r2, r3, #15
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	4613      	mov	r3, r2
 8005280:	00db      	lsls	r3, r3, #3
 8005282:	4413      	add	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	440b      	add	r3, r1
 8005288:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800528c:	681b      	ldr	r3, [r3, #0]
}
 800528e:	4618      	mov	r0, r3
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	bc80      	pop	{r7}
 8005296:	4770      	bx	lr

08005298 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	607a      	str	r2, [r7, #4]
 80052a2:	603b      	str	r3, [r7, #0]
 80052a4:	460b      	mov	r3, r1
 80052a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052a8:	7afb      	ldrb	r3, [r7, #11]
 80052aa:	f003 020f 	and.w	r2, r3, #15
 80052ae:	4613      	mov	r3, r2
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	4413      	add	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	3310      	adds	r3, #16
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	4413      	add	r3, r2
 80052bc:	3304      	adds	r3, #4
 80052be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	2200      	movs	r2, #0
 80052d0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2201      	movs	r2, #1
 80052d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052d8:	7afb      	ldrb	r3, [r7, #11]
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	799b      	ldrb	r3, [r3, #6]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d102      	bne.n	80052f2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6818      	ldr	r0, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	799b      	ldrb	r3, [r3, #6]
 80052fa:	461a      	mov	r2, r3
 80052fc:	6979      	ldr	r1, [r7, #20]
 80052fe:	f002 fae9 	bl	80078d4 <USB_EPStartXfer>

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	460b      	mov	r3, r1
 8005316:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005318:	78fb      	ldrb	r3, [r7, #3]
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	7912      	ldrb	r2, [r2, #4]
 8005322:	4293      	cmp	r3, r2
 8005324:	d901      	bls.n	800532a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e04f      	b.n	80053ca <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800532a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800532e:	2b00      	cmp	r3, #0
 8005330:	da0f      	bge.n	8005352 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005332:	78fb      	ldrb	r3, [r7, #3]
 8005334:	f003 020f 	and.w	r2, r3, #15
 8005338:	4613      	mov	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	4413      	add	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	3310      	adds	r3, #16
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	4413      	add	r3, r2
 8005346:	3304      	adds	r3, #4
 8005348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2201      	movs	r2, #1
 800534e:	705a      	strb	r2, [r3, #1]
 8005350:	e00d      	b.n	800536e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005352:	78fa      	ldrb	r2, [r7, #3]
 8005354:	4613      	mov	r3, r2
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	4413      	add	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	4413      	add	r3, r2
 8005364:	3304      	adds	r3, #4
 8005366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2201      	movs	r2, #1
 8005372:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	b2da      	uxtb	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005386:	2b01      	cmp	r3, #1
 8005388:	d101      	bne.n	800538e <HAL_PCD_EP_SetStall+0x82>
 800538a:	2302      	movs	r3, #2
 800538c:	e01d      	b.n	80053ca <HAL_PCD_EP_SetStall+0xbe>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68f9      	ldr	r1, [r7, #12]
 800539c:	4618      	mov	r0, r3
 800539e:	f002 fe6e 	bl	800807e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053a2:	78fb      	ldrb	r3, [r7, #3]
 80053a4:	f003 030f 	and.w	r3, r3, #15
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d109      	bne.n	80053c0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6818      	ldr	r0, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	7999      	ldrb	r1, [r3, #6]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80053ba:	461a      	mov	r2, r3
 80053bc:	f003 f854 	bl	8008468 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b084      	sub	sp, #16
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	460b      	mov	r3, r1
 80053dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80053de:	78fb      	ldrb	r3, [r7, #3]
 80053e0:	f003 030f 	and.w	r3, r3, #15
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	7912      	ldrb	r2, [r2, #4]
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d901      	bls.n	80053f0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e042      	b.n	8005476 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	da0f      	bge.n	8005418 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053f8:	78fb      	ldrb	r3, [r7, #3]
 80053fa:	f003 020f 	and.w	r2, r3, #15
 80053fe:	4613      	mov	r3, r2
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	4413      	add	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	3310      	adds	r3, #16
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	4413      	add	r3, r2
 800540c:	3304      	adds	r3, #4
 800540e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2201      	movs	r2, #1
 8005414:	705a      	strb	r2, [r3, #1]
 8005416:	e00f      	b.n	8005438 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005418:	78fb      	ldrb	r3, [r7, #3]
 800541a:	f003 020f 	and.w	r2, r3, #15
 800541e:	4613      	mov	r3, r2
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	4413      	add	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	4413      	add	r3, r2
 800542e:	3304      	adds	r3, #4
 8005430:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	f003 030f 	and.w	r3, r3, #15
 8005444:	b2da      	uxtb	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <HAL_PCD_EP_ClrStall+0x86>
 8005454:	2302      	movs	r3, #2
 8005456:	e00e      	b.n	8005476 <HAL_PCD_EP_ClrStall+0xa4>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68f9      	ldr	r1, [r7, #12]
 8005466:	4618      	mov	r0, r3
 8005468:	f002 fe76 	bl	8008158 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b084      	sub	sp, #16
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
 8005486:	460b      	mov	r3, r1
 8005488:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800548a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800548e:	2b00      	cmp	r3, #0
 8005490:	da0c      	bge.n	80054ac <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	f003 020f 	and.w	r2, r3, #15
 8005498:	4613      	mov	r3, r2
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	4413      	add	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	3310      	adds	r3, #16
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	4413      	add	r3, r2
 80054a6:	3304      	adds	r3, #4
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	e00c      	b.n	80054c6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054ac:	78fb      	ldrb	r3, [r7, #3]
 80054ae:	f003 020f 	and.w	r2, r3, #15
 80054b2:	4613      	mov	r3, r2
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	4413      	add	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	4413      	add	r3, r2
 80054c2:	3304      	adds	r3, #4
 80054c4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68f9      	ldr	r1, [r7, #12]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f002 fc99 	bl	8007e04 <USB_EPStopXfer>
 80054d2:	4603      	mov	r3, r0
 80054d4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80054d6:	7afb      	ldrb	r3, [r7, #11]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08a      	sub	sp, #40	@ 0x28
 80054e4:	af02      	add	r7, sp, #8
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	4613      	mov	r3, r2
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	4413      	add	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	3310      	adds	r3, #16
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	4413      	add	r3, r2
 8005504:	3304      	adds	r3, #4
 8005506:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	695a      	ldr	r2, [r3, #20]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	429a      	cmp	r2, r3
 8005512:	d901      	bls.n	8005518 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e06b      	b.n	80055f0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	691a      	ldr	r2, [r3, #16]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	69fa      	ldr	r2, [r7, #28]
 800552a:	429a      	cmp	r2, r3
 800552c:	d902      	bls.n	8005534 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	3303      	adds	r3, #3
 8005538:	089b      	lsrs	r3, r3, #2
 800553a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800553c:	e02a      	b.n	8005594 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	69fa      	ldr	r2, [r7, #28]
 8005550:	429a      	cmp	r2, r3
 8005552:	d902      	bls.n	800555a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	3303      	adds	r3, #3
 800555e:	089b      	lsrs	r3, r3, #2
 8005560:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	68d9      	ldr	r1, [r3, #12]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	b2da      	uxtb	r2, r3
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	4603      	mov	r3, r0
 8005576:	6978      	ldr	r0, [r7, #20]
 8005578:	f002 fced 	bl	8007f56 <USB_WritePacket>

    ep->xfer_buff  += len;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	68da      	ldr	r2, [r3, #12]
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	441a      	add	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	695a      	ldr	r2, [r3, #20]
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	441a      	add	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d809      	bhi.n	80055be <PCD_WriteEmptyTxFifo+0xde>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	695a      	ldr	r2, [r3, #20]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d203      	bcs.n	80055be <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1bf      	bne.n	800553e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d811      	bhi.n	80055ee <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	f003 030f 	and.w	r3, r3, #15
 80055d0:	2201      	movs	r2, #1
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	43db      	mvns	r3, r3
 80055e4:	6939      	ldr	r1, [r7, #16]
 80055e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055ea:	4013      	ands	r3, r2
 80055ec:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3720      	adds	r7, #32
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b088      	sub	sp, #32
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	333c      	adds	r3, #60	@ 0x3c
 8005610:	3304      	adds	r3, #4
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	4413      	add	r3, r2
 800561e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	799b      	ldrb	r3, [r3, #6]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d17b      	bne.n	8005726 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d015      	beq.n	8005664 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	4a61      	ldr	r2, [pc, #388]	@ (80057c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800563c:	4293      	cmp	r3, r2
 800563e:	f240 80b9 	bls.w	80057b4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 80b3 	beq.w	80057b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800565a:	461a      	mov	r2, r3
 800565c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005660:	6093      	str	r3, [r2, #8]
 8005662:	e0a7      	b.n	80057b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f003 0320 	and.w	r3, r3, #32
 800566a:	2b00      	cmp	r3, #0
 800566c:	d009      	beq.n	8005682 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800567a:	461a      	mov	r2, r3
 800567c:	2320      	movs	r3, #32
 800567e:	6093      	str	r3, [r2, #8]
 8005680:	e098      	b.n	80057b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005688:	2b00      	cmp	r3, #0
 800568a:	f040 8093 	bne.w	80057b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	4a4b      	ldr	r2, [pc, #300]	@ (80057c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d90f      	bls.n	80056b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00a      	beq.n	80056b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ac:	461a      	mov	r2, r3
 80056ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056b2:	6093      	str	r3, [r2, #8]
 80056b4:	e07e      	b.n	80057b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	4613      	mov	r3, r2
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	4413      	add	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	4413      	add	r3, r2
 80056c8:	3304      	adds	r3, #4
 80056ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a1a      	ldr	r2, [r3, #32]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	0159      	lsls	r1, r3, #5
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	440b      	add	r3, r1
 80056d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e2:	1ad2      	subs	r2, r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d114      	bne.n	8005718 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d109      	bne.n	800570a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6818      	ldr	r0, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005700:	461a      	mov	r2, r3
 8005702:	2101      	movs	r1, #1
 8005704:	f002 feb0 	bl	8008468 <USB_EP0_OutStart>
 8005708:	e006      	b.n	8005718 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	441a      	add	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	b2db      	uxtb	r3, r3
 800571c:	4619      	mov	r1, r3
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f005 f94e 	bl	800a9c0 <HAL_PCD_DataOutStageCallback>
 8005724:	e046      	b.n	80057b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	4a26      	ldr	r2, [pc, #152]	@ (80057c4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d124      	bne.n	8005778 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00a      	beq.n	800574e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005744:	461a      	mov	r2, r3
 8005746:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800574a:	6093      	str	r3, [r2, #8]
 800574c:	e032      	b.n	80057b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	f003 0320 	and.w	r3, r3, #32
 8005754:	2b00      	cmp	r3, #0
 8005756:	d008      	beq.n	800576a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005764:	461a      	mov	r2, r3
 8005766:	2320      	movs	r3, #32
 8005768:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	b2db      	uxtb	r3, r3
 800576e:	4619      	mov	r1, r3
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f005 f925 	bl	800a9c0 <HAL_PCD_DataOutStageCallback>
 8005776:	e01d      	b.n	80057b4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d114      	bne.n	80057a8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	4613      	mov	r3, r2
 8005784:	00db      	lsls	r3, r3, #3
 8005786:	4413      	add	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	440b      	add	r3, r1
 800578c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d108      	bne.n	80057a8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80057a0:	461a      	mov	r2, r3
 80057a2:	2100      	movs	r1, #0
 80057a4:	f002 fe60 	bl	8008468 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	4619      	mov	r1, r3
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f005 f906 	bl	800a9c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3720      	adds	r7, #32
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	4f54300a 	.word	0x4f54300a
 80057c4:	4f54310a 	.word	0x4f54310a

080057c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	333c      	adds	r3, #60	@ 0x3c
 80057e0:	3304      	adds	r3, #4
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4a15      	ldr	r2, [pc, #84]	@ (8005850 <PCD_EP_OutSetupPacket_int+0x88>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d90e      	bls.n	800581c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005804:	2b00      	cmp	r3, #0
 8005806:	d009      	beq.n	800581c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005814:	461a      	mov	r2, r3
 8005816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800581a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f005 f8bd 	bl	800a99c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4a0a      	ldr	r2, [pc, #40]	@ (8005850 <PCD_EP_OutSetupPacket_int+0x88>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d90c      	bls.n	8005844 <PCD_EP_OutSetupPacket_int+0x7c>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	799b      	ldrb	r3, [r3, #6]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d108      	bne.n	8005844 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6818      	ldr	r0, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800583c:	461a      	mov	r2, r3
 800583e:	2101      	movs	r1, #1
 8005840:	f002 fe12 	bl	8008468 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	4f54300a 	.word	0x4f54300a

08005854 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	460b      	mov	r3, r1
 800585e:	70fb      	strb	r3, [r7, #3]
 8005860:	4613      	mov	r3, r2
 8005862:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d107      	bne.n	8005882 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005872:	883b      	ldrh	r3, [r7, #0]
 8005874:	0419      	lsls	r1, r3, #16
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	430a      	orrs	r2, r1
 800587e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005880:	e028      	b.n	80058d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005888:	0c1b      	lsrs	r3, r3, #16
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	4413      	add	r3, r2
 800588e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005890:	2300      	movs	r3, #0
 8005892:	73fb      	strb	r3, [r7, #15]
 8005894:	e00d      	b.n	80058b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	7bfb      	ldrb	r3, [r7, #15]
 800589c:	3340      	adds	r3, #64	@ 0x40
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	0c1b      	lsrs	r3, r3, #16
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	4413      	add	r3, r2
 80058aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
 80058ae:	3301      	adds	r3, #1
 80058b0:	73fb      	strb	r3, [r7, #15]
 80058b2:	7bfa      	ldrb	r2, [r7, #15]
 80058b4:	78fb      	ldrb	r3, [r7, #3]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d3ec      	bcc.n	8005896 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80058bc:	883b      	ldrh	r3, [r7, #0]
 80058be:	0418      	lsls	r0, r3, #16
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6819      	ldr	r1, [r3, #0]
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	4302      	orrs	r2, r0
 80058cc:	3340      	adds	r3, #64	@ 0x40
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	440b      	add	r3, r1
 80058d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr

080058e0 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	460b      	mov	r3, r1
 80058ea:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	887a      	ldrh	r2, [r7, #2]
 80058f2:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bc80      	pop	{r7}
 80058fe:	4770      	bx	lr

08005900 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	460b      	mov	r3, r1
 800590a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	bc80      	pop	{r7}
 8005914:	4770      	bx	lr
	...

08005918 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e267      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d075      	beq.n	8005a22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005936:	4b88      	ldr	r3, [pc, #544]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 030c 	and.w	r3, r3, #12
 800593e:	2b04      	cmp	r3, #4
 8005940:	d00c      	beq.n	800595c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005942:	4b85      	ldr	r3, [pc, #532]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800594a:	2b08      	cmp	r3, #8
 800594c:	d112      	bne.n	8005974 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800594e:	4b82      	ldr	r3, [pc, #520]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005956:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800595a:	d10b      	bne.n	8005974 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800595c:	4b7e      	ldr	r3, [pc, #504]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d05b      	beq.n	8005a20 <HAL_RCC_OscConfig+0x108>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d157      	bne.n	8005a20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e242      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800597c:	d106      	bne.n	800598c <HAL_RCC_OscConfig+0x74>
 800597e:	4b76      	ldr	r3, [pc, #472]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a75      	ldr	r2, [pc, #468]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	e01d      	b.n	80059c8 <HAL_RCC_OscConfig+0xb0>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005994:	d10c      	bne.n	80059b0 <HAL_RCC_OscConfig+0x98>
 8005996:	4b70      	ldr	r3, [pc, #448]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a6f      	ldr	r2, [pc, #444]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 800599c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	4b6d      	ldr	r3, [pc, #436]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a6c      	ldr	r2, [pc, #432]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 80059a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	e00b      	b.n	80059c8 <HAL_RCC_OscConfig+0xb0>
 80059b0:	4b69      	ldr	r3, [pc, #420]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a68      	ldr	r2, [pc, #416]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 80059b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	4b66      	ldr	r3, [pc, #408]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a65      	ldr	r2, [pc, #404]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 80059c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d013      	beq.n	80059f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d0:	f7fc fbdc 	bl	800218c <HAL_GetTick>
 80059d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059d8:	f7fc fbd8 	bl	800218c <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b64      	cmp	r3, #100	@ 0x64
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e207      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ea:	4b5b      	ldr	r3, [pc, #364]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0f0      	beq.n	80059d8 <HAL_RCC_OscConfig+0xc0>
 80059f6:	e014      	b.n	8005a22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f8:	f7fc fbc8 	bl	800218c <HAL_GetTick>
 80059fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059fe:	e008      	b.n	8005a12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a00:	f7fc fbc4 	bl	800218c <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b64      	cmp	r3, #100	@ 0x64
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e1f3      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a12:	4b51      	ldr	r3, [pc, #324]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1f0      	bne.n	8005a00 <HAL_RCC_OscConfig+0xe8>
 8005a1e:	e000      	b.n	8005a22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d063      	beq.n	8005af6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a2e:	4b4a      	ldr	r3, [pc, #296]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 030c 	and.w	r3, r3, #12
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00b      	beq.n	8005a52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a3a:	4b47      	ldr	r3, [pc, #284]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d11c      	bne.n	8005a80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a46:	4b44      	ldr	r3, [pc, #272]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d116      	bne.n	8005a80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a52:	4b41      	ldr	r3, [pc, #260]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d005      	beq.n	8005a6a <HAL_RCC_OscConfig+0x152>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d001      	beq.n	8005a6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e1c7      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a6a:	4b3b      	ldr	r3, [pc, #236]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	4937      	ldr	r1, [pc, #220]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a7e:	e03a      	b.n	8005af6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d020      	beq.n	8005aca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a88:	4b34      	ldr	r3, [pc, #208]	@ (8005b5c <HAL_RCC_OscConfig+0x244>)
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a8e:	f7fc fb7d 	bl	800218c <HAL_GetTick>
 8005a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a94:	e008      	b.n	8005aa8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a96:	f7fc fb79 	bl	800218c <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e1a8      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d0f0      	beq.n	8005a96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ab4:	4b28      	ldr	r3, [pc, #160]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	4925      	ldr	r1, [pc, #148]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	600b      	str	r3, [r1, #0]
 8005ac8:	e015      	b.n	8005af6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aca:	4b24      	ldr	r3, [pc, #144]	@ (8005b5c <HAL_RCC_OscConfig+0x244>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad0:	f7fc fb5c 	bl	800218c <HAL_GetTick>
 8005ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ad6:	e008      	b.n	8005aea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ad8:	f7fc fb58 	bl	800218c <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e187      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aea:	4b1b      	ldr	r3, [pc, #108]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1f0      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0308 	and.w	r3, r3, #8
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d036      	beq.n	8005b70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d016      	beq.n	8005b38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b0a:	4b15      	ldr	r3, [pc, #84]	@ (8005b60 <HAL_RCC_OscConfig+0x248>)
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b10:	f7fc fb3c 	bl	800218c <HAL_GetTick>
 8005b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b16:	e008      	b.n	8005b2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b18:	f7fc fb38 	bl	800218c <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e167      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b58 <HAL_RCC_OscConfig+0x240>)
 8005b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0f0      	beq.n	8005b18 <HAL_RCC_OscConfig+0x200>
 8005b36:	e01b      	b.n	8005b70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b38:	4b09      	ldr	r3, [pc, #36]	@ (8005b60 <HAL_RCC_OscConfig+0x248>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b3e:	f7fc fb25 	bl	800218c <HAL_GetTick>
 8005b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b44:	e00e      	b.n	8005b64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b46:	f7fc fb21 	bl	800218c <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d907      	bls.n	8005b64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e150      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
 8005b58:	40023800 	.word	0x40023800
 8005b5c:	42470000 	.word	0x42470000
 8005b60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b64:	4b88      	ldr	r3, [pc, #544]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005b66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1ea      	bne.n	8005b46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 8097 	beq.w	8005cac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b82:	4b81      	ldr	r3, [pc, #516]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10f      	bne.n	8005bae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60bb      	str	r3, [r7, #8]
 8005b92:	4b7d      	ldr	r3, [pc, #500]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b96:	4a7c      	ldr	r2, [pc, #496]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b9e:	4b7a      	ldr	r3, [pc, #488]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ba6:	60bb      	str	r3, [r7, #8]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005baa:	2301      	movs	r3, #1
 8005bac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bae:	4b77      	ldr	r3, [pc, #476]	@ (8005d8c <HAL_RCC_OscConfig+0x474>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d118      	bne.n	8005bec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bba:	4b74      	ldr	r3, [pc, #464]	@ (8005d8c <HAL_RCC_OscConfig+0x474>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a73      	ldr	r2, [pc, #460]	@ (8005d8c <HAL_RCC_OscConfig+0x474>)
 8005bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bc6:	f7fc fae1 	bl	800218c <HAL_GetTick>
 8005bca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bcc:	e008      	b.n	8005be0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bce:	f7fc fadd 	bl	800218c <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d901      	bls.n	8005be0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e10c      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005be0:	4b6a      	ldr	r3, [pc, #424]	@ (8005d8c <HAL_RCC_OscConfig+0x474>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d0f0      	beq.n	8005bce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d106      	bne.n	8005c02 <HAL_RCC_OscConfig+0x2ea>
 8005bf4:	4b64      	ldr	r3, [pc, #400]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bf8:	4a63      	ldr	r2, [pc, #396]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005bfa:	f043 0301 	orr.w	r3, r3, #1
 8005bfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c00:	e01c      	b.n	8005c3c <HAL_RCC_OscConfig+0x324>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	2b05      	cmp	r3, #5
 8005c08:	d10c      	bne.n	8005c24 <HAL_RCC_OscConfig+0x30c>
 8005c0a:	4b5f      	ldr	r3, [pc, #380]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c0e:	4a5e      	ldr	r2, [pc, #376]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c10:	f043 0304 	orr.w	r3, r3, #4
 8005c14:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c16:	4b5c      	ldr	r3, [pc, #368]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c1a:	4a5b      	ldr	r2, [pc, #364]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c1c:	f043 0301 	orr.w	r3, r3, #1
 8005c20:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c22:	e00b      	b.n	8005c3c <HAL_RCC_OscConfig+0x324>
 8005c24:	4b58      	ldr	r3, [pc, #352]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c28:	4a57      	ldr	r2, [pc, #348]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c2a:	f023 0301 	bic.w	r3, r3, #1
 8005c2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c30:	4b55      	ldr	r3, [pc, #340]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c34:	4a54      	ldr	r2, [pc, #336]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c36:	f023 0304 	bic.w	r3, r3, #4
 8005c3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d015      	beq.n	8005c70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c44:	f7fc faa2 	bl	800218c <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c4a:	e00a      	b.n	8005c62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c4c:	f7fc fa9e 	bl	800218c <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e0cb      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c62:	4b49      	ldr	r3, [pc, #292]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0ee      	beq.n	8005c4c <HAL_RCC_OscConfig+0x334>
 8005c6e:	e014      	b.n	8005c9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c70:	f7fc fa8c 	bl	800218c <HAL_GetTick>
 8005c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c76:	e00a      	b.n	8005c8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c78:	f7fc fa88 	bl	800218c <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e0b5      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c8e:	4b3e      	ldr	r3, [pc, #248]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1ee      	bne.n	8005c78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c9a:	7dfb      	ldrb	r3, [r7, #23]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d105      	bne.n	8005cac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ca0:	4b39      	ldr	r3, [pc, #228]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca4:	4a38      	ldr	r2, [pc, #224]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005ca6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005caa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 80a1 	beq.w	8005df8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cb6:	4b34      	ldr	r3, [pc, #208]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 030c 	and.w	r3, r3, #12
 8005cbe:	2b08      	cmp	r3, #8
 8005cc0:	d05c      	beq.n	8005d7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d141      	bne.n	8005d4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cca:	4b31      	ldr	r3, [pc, #196]	@ (8005d90 <HAL_RCC_OscConfig+0x478>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd0:	f7fc fa5c 	bl	800218c <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cd6:	e008      	b.n	8005cea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cd8:	f7fc fa58 	bl	800218c <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e087      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cea:	4b27      	ldr	r3, [pc, #156]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1f0      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	69da      	ldr	r2, [r3, #28]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d04:	019b      	lsls	r3, r3, #6
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d0c:	085b      	lsrs	r3, r3, #1
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	041b      	lsls	r3, r3, #16
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d18:	061b      	lsls	r3, r3, #24
 8005d1a:	491b      	ldr	r1, [pc, #108]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d20:	4b1b      	ldr	r3, [pc, #108]	@ (8005d90 <HAL_RCC_OscConfig+0x478>)
 8005d22:	2201      	movs	r2, #1
 8005d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d26:	f7fc fa31 	bl	800218c <HAL_GetTick>
 8005d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d2c:	e008      	b.n	8005d40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d2e:	f7fc fa2d 	bl	800218c <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e05c      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d40:	4b11      	ldr	r3, [pc, #68]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0f0      	beq.n	8005d2e <HAL_RCC_OscConfig+0x416>
 8005d4c:	e054      	b.n	8005df8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d4e:	4b10      	ldr	r3, [pc, #64]	@ (8005d90 <HAL_RCC_OscConfig+0x478>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d54:	f7fc fa1a 	bl	800218c <HAL_GetTick>
 8005d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d5a:	e008      	b.n	8005d6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d5c:	f7fc fa16 	bl	800218c <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e045      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d6e:	4b06      	ldr	r3, [pc, #24]	@ (8005d88 <HAL_RCC_OscConfig+0x470>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1f0      	bne.n	8005d5c <HAL_RCC_OscConfig+0x444>
 8005d7a:	e03d      	b.n	8005df8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d107      	bne.n	8005d94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e038      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
 8005d88:	40023800 	.word	0x40023800
 8005d8c:	40007000 	.word	0x40007000
 8005d90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d94:	4b1b      	ldr	r3, [pc, #108]	@ (8005e04 <HAL_RCC_OscConfig+0x4ec>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d028      	beq.n	8005df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d121      	bne.n	8005df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d11a      	bne.n	8005df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005dca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d111      	bne.n	8005df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dda:	085b      	lsrs	r3, r3, #1
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d107      	bne.n	8005df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d001      	beq.n	8005df8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e000      	b.n	8005dfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3718      	adds	r7, #24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	40023800 	.word	0x40023800

08005e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e0cc      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e1c:	4b68      	ldr	r3, [pc, #416]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d90c      	bls.n	8005e44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e2a:	4b65      	ldr	r3, [pc, #404]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	b2d2      	uxtb	r2, r2
 8005e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e32:	4b63      	ldr	r3, [pc, #396]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0307 	and.w	r3, r3, #7
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d001      	beq.n	8005e44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e0b8      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d020      	beq.n	8005e92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d005      	beq.n	8005e68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e5c:	4b59      	ldr	r3, [pc, #356]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	4a58      	ldr	r2, [pc, #352]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005e66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0308 	and.w	r3, r3, #8
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d005      	beq.n	8005e80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e74:	4b53      	ldr	r3, [pc, #332]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	4a52      	ldr	r2, [pc, #328]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005e7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e80:	4b50      	ldr	r3, [pc, #320]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	494d      	ldr	r1, [pc, #308]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d044      	beq.n	8005f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d107      	bne.n	8005eb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ea6:	4b47      	ldr	r3, [pc, #284]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d119      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e07f      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d003      	beq.n	8005ec6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	d107      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ec6:	4b3f      	ldr	r3, [pc, #252]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d109      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e06f      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed6:	4b3b      	ldr	r3, [pc, #236]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e067      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ee6:	4b37      	ldr	r3, [pc, #220]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f023 0203 	bic.w	r2, r3, #3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	4934      	ldr	r1, [pc, #208]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ef8:	f7fc f948 	bl	800218c <HAL_GetTick>
 8005efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005efe:	e00a      	b.n	8005f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f00:	f7fc f944 	bl	800218c <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e04f      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f16:	4b2b      	ldr	r3, [pc, #172]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f003 020c 	and.w	r2, r3, #12
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d1eb      	bne.n	8005f00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f28:	4b25      	ldr	r3, [pc, #148]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d20c      	bcs.n	8005f50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f36:	4b22      	ldr	r3, [pc, #136]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f3e:	4b20      	ldr	r3, [pc, #128]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0307 	and.w	r3, r3, #7
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d001      	beq.n	8005f50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e032      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0304 	and.w	r3, r3, #4
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d008      	beq.n	8005f6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f5c:	4b19      	ldr	r3, [pc, #100]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	4916      	ldr	r1, [pc, #88]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d009      	beq.n	8005f8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f7a:	4b12      	ldr	r3, [pc, #72]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	490e      	ldr	r1, [pc, #56]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f8e:	f000 f821 	bl	8005fd4 <HAL_RCC_GetSysClockFreq>
 8005f92:	4602      	mov	r2, r0
 8005f94:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	091b      	lsrs	r3, r3, #4
 8005f9a:	f003 030f 	and.w	r3, r3, #15
 8005f9e:	490a      	ldr	r1, [pc, #40]	@ (8005fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005fa0:	5ccb      	ldrb	r3, [r1, r3]
 8005fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa6:	4a09      	ldr	r2, [pc, #36]	@ (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005faa:	4b09      	ldr	r3, [pc, #36]	@ (8005fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fc f8aa 	bl	8002108 <HAL_InitTick>

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	40023c00 	.word	0x40023c00
 8005fc4:	40023800 	.word	0x40023800
 8005fc8:	0800dc0c 	.word	0x0800dc0c
 8005fcc:	20000000 	.word	0x20000000
 8005fd0:	20000004 	.word	0x20000004

08005fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fd8:	b094      	sub	sp, #80	@ 0x50
 8005fda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fec:	4b7c      	ldr	r3, [pc, #496]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f003 030c 	and.w	r3, r3, #12
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d00d      	beq.n	8006014 <HAL_RCC_GetSysClockFreq+0x40>
 8005ff8:	2b08      	cmp	r3, #8
 8005ffa:	f200 80e7 	bhi.w	80061cc <HAL_RCC_GetSysClockFreq+0x1f8>
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d002      	beq.n	8006008 <HAL_RCC_GetSysClockFreq+0x34>
 8006002:	2b04      	cmp	r3, #4
 8006004:	d003      	beq.n	800600e <HAL_RCC_GetSysClockFreq+0x3a>
 8006006:	e0e1      	b.n	80061cc <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006008:	4b76      	ldr	r3, [pc, #472]	@ (80061e4 <HAL_RCC_GetSysClockFreq+0x210>)
 800600a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800600c:	e0e1      	b.n	80061d2 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800600e:	4b76      	ldr	r3, [pc, #472]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0x214>)
 8006010:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006012:	e0de      	b.n	80061d2 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006014:	4b72      	ldr	r3, [pc, #456]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800601c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800601e:	4b70      	ldr	r3, [pc, #448]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d065      	beq.n	80060f6 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800602a:	4b6d      	ldr	r3, [pc, #436]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0x20c>)
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	099b      	lsrs	r3, r3, #6
 8006030:	2200      	movs	r2, #0
 8006032:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006034:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800603c:	633b      	str	r3, [r7, #48]	@ 0x30
 800603e:	2300      	movs	r3, #0
 8006040:	637b      	str	r3, [r7, #52]	@ 0x34
 8006042:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006046:	4622      	mov	r2, r4
 8006048:	462b      	mov	r3, r5
 800604a:	f04f 0000 	mov.w	r0, #0
 800604e:	f04f 0100 	mov.w	r1, #0
 8006052:	0159      	lsls	r1, r3, #5
 8006054:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006058:	0150      	lsls	r0, r2, #5
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	4621      	mov	r1, r4
 8006060:	1a51      	subs	r1, r2, r1
 8006062:	6139      	str	r1, [r7, #16]
 8006064:	4629      	mov	r1, r5
 8006066:	eb63 0301 	sbc.w	r3, r3, r1
 800606a:	617b      	str	r3, [r7, #20]
 800606c:	f04f 0200 	mov.w	r2, #0
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006078:	4659      	mov	r1, fp
 800607a:	018b      	lsls	r3, r1, #6
 800607c:	4651      	mov	r1, sl
 800607e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006082:	4651      	mov	r1, sl
 8006084:	018a      	lsls	r2, r1, #6
 8006086:	46d4      	mov	ip, sl
 8006088:	ebb2 080c 	subs.w	r8, r2, ip
 800608c:	4659      	mov	r1, fp
 800608e:	eb63 0901 	sbc.w	r9, r3, r1
 8006092:	f04f 0200 	mov.w	r2, #0
 8006096:	f04f 0300 	mov.w	r3, #0
 800609a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800609e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060a6:	4690      	mov	r8, r2
 80060a8:	4699      	mov	r9, r3
 80060aa:	4623      	mov	r3, r4
 80060ac:	eb18 0303 	adds.w	r3, r8, r3
 80060b0:	60bb      	str	r3, [r7, #8]
 80060b2:	462b      	mov	r3, r5
 80060b4:	eb49 0303 	adc.w	r3, r9, r3
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	f04f 0200 	mov.w	r2, #0
 80060be:	f04f 0300 	mov.w	r3, #0
 80060c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80060c6:	4629      	mov	r1, r5
 80060c8:	024b      	lsls	r3, r1, #9
 80060ca:	4620      	mov	r0, r4
 80060cc:	4629      	mov	r1, r5
 80060ce:	4604      	mov	r4, r0
 80060d0:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80060d4:	4601      	mov	r1, r0
 80060d6:	024a      	lsls	r2, r1, #9
 80060d8:	4610      	mov	r0, r2
 80060da:	4619      	mov	r1, r3
 80060dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060de:	2200      	movs	r2, #0
 80060e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80060e8:	f7fb f852 	bl	8001190 <__aeabi_uldivmod>
 80060ec:	4602      	mov	r2, r0
 80060ee:	460b      	mov	r3, r1
 80060f0:	4613      	mov	r3, r2
 80060f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060f4:	e05c      	b.n	80061b0 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060f6:	4b3a      	ldr	r3, [pc, #232]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0x20c>)
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	099b      	lsrs	r3, r3, #6
 80060fc:	2200      	movs	r2, #0
 80060fe:	4618      	mov	r0, r3
 8006100:	4611      	mov	r1, r2
 8006102:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006106:	623b      	str	r3, [r7, #32]
 8006108:	2300      	movs	r3, #0
 800610a:	627b      	str	r3, [r7, #36]	@ 0x24
 800610c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006110:	4642      	mov	r2, r8
 8006112:	464b      	mov	r3, r9
 8006114:	f04f 0000 	mov.w	r0, #0
 8006118:	f04f 0100 	mov.w	r1, #0
 800611c:	0159      	lsls	r1, r3, #5
 800611e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006122:	0150      	lsls	r0, r2, #5
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	46c4      	mov	ip, r8
 800612a:	ebb2 0a0c 	subs.w	sl, r2, ip
 800612e:	4640      	mov	r0, r8
 8006130:	4649      	mov	r1, r9
 8006132:	468c      	mov	ip, r1
 8006134:	eb63 0b0c 	sbc.w	fp, r3, ip
 8006138:	f04f 0200 	mov.w	r2, #0
 800613c:	f04f 0300 	mov.w	r3, #0
 8006140:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006144:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006148:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800614c:	ebb2 040a 	subs.w	r4, r2, sl
 8006150:	eb63 050b 	sbc.w	r5, r3, fp
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	f04f 0300 	mov.w	r3, #0
 800615c:	00eb      	lsls	r3, r5, #3
 800615e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006162:	00e2      	lsls	r2, r4, #3
 8006164:	4614      	mov	r4, r2
 8006166:	461d      	mov	r5, r3
 8006168:	4603      	mov	r3, r0
 800616a:	18e3      	adds	r3, r4, r3
 800616c:	603b      	str	r3, [r7, #0]
 800616e:	460b      	mov	r3, r1
 8006170:	eb45 0303 	adc.w	r3, r5, r3
 8006174:	607b      	str	r3, [r7, #4]
 8006176:	f04f 0200 	mov.w	r2, #0
 800617a:	f04f 0300 	mov.w	r3, #0
 800617e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006182:	4629      	mov	r1, r5
 8006184:	028b      	lsls	r3, r1, #10
 8006186:	4620      	mov	r0, r4
 8006188:	4629      	mov	r1, r5
 800618a:	4604      	mov	r4, r0
 800618c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8006190:	4601      	mov	r1, r0
 8006192:	028a      	lsls	r2, r1, #10
 8006194:	4610      	mov	r0, r2
 8006196:	4619      	mov	r1, r3
 8006198:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800619a:	2200      	movs	r2, #0
 800619c:	61bb      	str	r3, [r7, #24]
 800619e:	61fa      	str	r2, [r7, #28]
 80061a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061a4:	f7fa fff4 	bl	8001190 <__aeabi_uldivmod>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	4613      	mov	r3, r2
 80061ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061b0:	4b0b      	ldr	r3, [pc, #44]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0x20c>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	0c1b      	lsrs	r3, r3, #16
 80061b6:	f003 0303 	and.w	r3, r3, #3
 80061ba:	3301      	adds	r3, #1
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80061c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061ca:	e002      	b.n	80061d2 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061cc:	4b05      	ldr	r3, [pc, #20]	@ (80061e4 <HAL_RCC_GetSysClockFreq+0x210>)
 80061ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3750      	adds	r7, #80	@ 0x50
 80061d8:	46bd      	mov	sp, r7
 80061da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061de:	bf00      	nop
 80061e0:	40023800 	.word	0x40023800
 80061e4:	00f42400 	.word	0x00f42400
 80061e8:	007a1200 	.word	0x007a1200

080061ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061f0:	4b02      	ldr	r3, [pc, #8]	@ (80061fc <HAL_RCC_GetHCLKFreq+0x10>)
 80061f2:	681b      	ldr	r3, [r3, #0]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bc80      	pop	{r7}
 80061fa:	4770      	bx	lr
 80061fc:	20000000 	.word	0x20000000

08006200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006204:	f7ff fff2 	bl	80061ec <HAL_RCC_GetHCLKFreq>
 8006208:	4602      	mov	r2, r0
 800620a:	4b05      	ldr	r3, [pc, #20]	@ (8006220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	0a9b      	lsrs	r3, r3, #10
 8006210:	f003 0307 	and.w	r3, r3, #7
 8006214:	4903      	ldr	r1, [pc, #12]	@ (8006224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006216:	5ccb      	ldrb	r3, [r1, r3]
 8006218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800621c:	4618      	mov	r0, r3
 800621e:	bd80      	pop	{r7, pc}
 8006220:	40023800 	.word	0x40023800
 8006224:	0800dc1c 	.word	0x0800dc1c

08006228 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e041      	b.n	80062be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d106      	bne.n	8006254 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fb fda4 	bl	8001d9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	3304      	adds	r3, #4
 8006264:	4619      	mov	r1, r3
 8006266:	4610      	mov	r0, r2
 8006268:	f000 fad8 	bl	800681c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b082      	sub	sp, #8
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e041      	b.n	800635c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d106      	bne.n	80062f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f839 	bl	8006364 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2202      	movs	r2, #2
 80062f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3304      	adds	r3, #4
 8006302:	4619      	mov	r1, r3
 8006304:	4610      	mov	r0, r2
 8006306:	f000 fa89 	bl	800681c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	bc80      	pop	{r7}
 8006374:	4770      	bx	lr
	...

08006378 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d109      	bne.n	800639c <HAL_TIM_PWM_Start+0x24>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b01      	cmp	r3, #1
 8006392:	bf14      	ite	ne
 8006394:	2301      	movne	r3, #1
 8006396:	2300      	moveq	r3, #0
 8006398:	b2db      	uxtb	r3, r3
 800639a:	e022      	b.n	80063e2 <HAL_TIM_PWM_Start+0x6a>
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d109      	bne.n	80063b6 <HAL_TIM_PWM_Start+0x3e>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	bf14      	ite	ne
 80063ae:	2301      	movne	r3, #1
 80063b0:	2300      	moveq	r3, #0
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	e015      	b.n	80063e2 <HAL_TIM_PWM_Start+0x6a>
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b08      	cmp	r3, #8
 80063ba:	d109      	bne.n	80063d0 <HAL_TIM_PWM_Start+0x58>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	bf14      	ite	ne
 80063c8:	2301      	movne	r3, #1
 80063ca:	2300      	moveq	r3, #0
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	e008      	b.n	80063e2 <HAL_TIM_PWM_Start+0x6a>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b01      	cmp	r3, #1
 80063da:	bf14      	ite	ne
 80063dc:	2301      	movne	r3, #1
 80063de:	2300      	moveq	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e07c      	b.n	80064e4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d104      	bne.n	80063fa <HAL_TIM_PWM_Start+0x82>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063f8:	e013      	b.n	8006422 <HAL_TIM_PWM_Start+0xaa>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b04      	cmp	r3, #4
 80063fe:	d104      	bne.n	800640a <HAL_TIM_PWM_Start+0x92>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2202      	movs	r2, #2
 8006404:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006408:	e00b      	b.n	8006422 <HAL_TIM_PWM_Start+0xaa>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b08      	cmp	r3, #8
 800640e:	d104      	bne.n	800641a <HAL_TIM_PWM_Start+0xa2>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006418:	e003      	b.n	8006422 <HAL_TIM_PWM_Start+0xaa>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2202      	movs	r2, #2
 800641e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2201      	movs	r2, #1
 8006428:	6839      	ldr	r1, [r7, #0]
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fce2 	bl	8006df4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a2d      	ldr	r2, [pc, #180]	@ (80064ec <HAL_TIM_PWM_Start+0x174>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d004      	beq.n	8006444 <HAL_TIM_PWM_Start+0xcc>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a2c      	ldr	r2, [pc, #176]	@ (80064f0 <HAL_TIM_PWM_Start+0x178>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d101      	bne.n	8006448 <HAL_TIM_PWM_Start+0xd0>
 8006444:	2301      	movs	r3, #1
 8006446:	e000      	b.n	800644a <HAL_TIM_PWM_Start+0xd2>
 8006448:	2300      	movs	r3, #0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d007      	beq.n	800645e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800645c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a22      	ldr	r2, [pc, #136]	@ (80064ec <HAL_TIM_PWM_Start+0x174>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d022      	beq.n	80064ae <HAL_TIM_PWM_Start+0x136>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006470:	d01d      	beq.n	80064ae <HAL_TIM_PWM_Start+0x136>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a1f      	ldr	r2, [pc, #124]	@ (80064f4 <HAL_TIM_PWM_Start+0x17c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d018      	beq.n	80064ae <HAL_TIM_PWM_Start+0x136>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a1d      	ldr	r2, [pc, #116]	@ (80064f8 <HAL_TIM_PWM_Start+0x180>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d013      	beq.n	80064ae <HAL_TIM_PWM_Start+0x136>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a1c      	ldr	r2, [pc, #112]	@ (80064fc <HAL_TIM_PWM_Start+0x184>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00e      	beq.n	80064ae <HAL_TIM_PWM_Start+0x136>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a16      	ldr	r2, [pc, #88]	@ (80064f0 <HAL_TIM_PWM_Start+0x178>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d009      	beq.n	80064ae <HAL_TIM_PWM_Start+0x136>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a18      	ldr	r2, [pc, #96]	@ (8006500 <HAL_TIM_PWM_Start+0x188>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d004      	beq.n	80064ae <HAL_TIM_PWM_Start+0x136>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a16      	ldr	r2, [pc, #88]	@ (8006504 <HAL_TIM_PWM_Start+0x18c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d111      	bne.n	80064d2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f003 0307 	and.w	r3, r3, #7
 80064b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2b06      	cmp	r3, #6
 80064be:	d010      	beq.n	80064e2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 0201 	orr.w	r2, r2, #1
 80064ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d0:	e007      	b.n	80064e2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f042 0201 	orr.w	r2, r2, #1
 80064e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	40010000 	.word	0x40010000
 80064f0:	40010400 	.word	0x40010400
 80064f4:	40000400 	.word	0x40000400
 80064f8:	40000800 	.word	0x40000800
 80064fc:	40000c00 	.word	0x40000c00
 8006500:	40014000 	.word	0x40014000
 8006504:	40001800 	.word	0x40001800

08006508 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006514:	2300      	movs	r3, #0
 8006516:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800651e:	2b01      	cmp	r3, #1
 8006520:	d101      	bne.n	8006526 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006522:	2302      	movs	r3, #2
 8006524:	e0ae      	b.n	8006684 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b0c      	cmp	r3, #12
 8006532:	f200 809f 	bhi.w	8006674 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006536:	a201      	add	r2, pc, #4	@ (adr r2, 800653c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653c:	08006571 	.word	0x08006571
 8006540:	08006675 	.word	0x08006675
 8006544:	08006675 	.word	0x08006675
 8006548:	08006675 	.word	0x08006675
 800654c:	080065b1 	.word	0x080065b1
 8006550:	08006675 	.word	0x08006675
 8006554:	08006675 	.word	0x08006675
 8006558:	08006675 	.word	0x08006675
 800655c:	080065f3 	.word	0x080065f3
 8006560:	08006675 	.word	0x08006675
 8006564:	08006675 	.word	0x08006675
 8006568:	08006675 	.word	0x08006675
 800656c:	08006633 	.word	0x08006633
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68b9      	ldr	r1, [r7, #8]
 8006576:	4618      	mov	r0, r3
 8006578:	f000 f9fa 	bl	8006970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699a      	ldr	r2, [r3, #24]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0208 	orr.w	r2, r2, #8
 800658a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	699a      	ldr	r2, [r3, #24]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f022 0204 	bic.w	r2, r2, #4
 800659a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6999      	ldr	r1, [r3, #24]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	691a      	ldr	r2, [r3, #16]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	619a      	str	r2, [r3, #24]
      break;
 80065ae:	e064      	b.n	800667a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68b9      	ldr	r1, [r7, #8]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 fa4a 	bl	8006a50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699a      	ldr	r2, [r3, #24]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	699a      	ldr	r2, [r3, #24]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6999      	ldr	r1, [r3, #24]
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	021a      	lsls	r2, r3, #8
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	430a      	orrs	r2, r1
 80065ee:	619a      	str	r2, [r3, #24]
      break;
 80065f0:	e043      	b.n	800667a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68b9      	ldr	r1, [r7, #8]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 fa9d 	bl	8006b38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69da      	ldr	r2, [r3, #28]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 0208 	orr.w	r2, r2, #8
 800660c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69da      	ldr	r2, [r3, #28]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 0204 	bic.w	r2, r2, #4
 800661c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	69d9      	ldr	r1, [r3, #28]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	691a      	ldr	r2, [r3, #16]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	430a      	orrs	r2, r1
 800662e:	61da      	str	r2, [r3, #28]
      break;
 8006630:	e023      	b.n	800667a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68b9      	ldr	r1, [r7, #8]
 8006638:	4618      	mov	r0, r3
 800663a:	f000 faf1 	bl	8006c20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	69da      	ldr	r2, [r3, #28]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800664c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69da      	ldr	r2, [r3, #28]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800665c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	69d9      	ldr	r1, [r3, #28]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	021a      	lsls	r2, r3, #8
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	61da      	str	r2, [r3, #28]
      break;
 8006672:	e002      	b.n	800667a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	75fb      	strb	r3, [r7, #23]
      break;
 8006678:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006682:	7dfb      	ldrb	r3, [r7, #23]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d101      	bne.n	80066a8 <HAL_TIM_ConfigClockSource+0x1c>
 80066a4:	2302      	movs	r3, #2
 80066a6:	e0b4      	b.n	8006812 <HAL_TIM_ConfigClockSource+0x186>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80066c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066e0:	d03e      	beq.n	8006760 <HAL_TIM_ConfigClockSource+0xd4>
 80066e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066e6:	f200 8087 	bhi.w	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
 80066ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ee:	f000 8086 	beq.w	80067fe <HAL_TIM_ConfigClockSource+0x172>
 80066f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066f6:	d87f      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
 80066f8:	2b70      	cmp	r3, #112	@ 0x70
 80066fa:	d01a      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0xa6>
 80066fc:	2b70      	cmp	r3, #112	@ 0x70
 80066fe:	d87b      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006700:	2b60      	cmp	r3, #96	@ 0x60
 8006702:	d050      	beq.n	80067a6 <HAL_TIM_ConfigClockSource+0x11a>
 8006704:	2b60      	cmp	r3, #96	@ 0x60
 8006706:	d877      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006708:	2b50      	cmp	r3, #80	@ 0x50
 800670a:	d03c      	beq.n	8006786 <HAL_TIM_ConfigClockSource+0xfa>
 800670c:	2b50      	cmp	r3, #80	@ 0x50
 800670e:	d873      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006710:	2b40      	cmp	r3, #64	@ 0x40
 8006712:	d058      	beq.n	80067c6 <HAL_TIM_ConfigClockSource+0x13a>
 8006714:	2b40      	cmp	r3, #64	@ 0x40
 8006716:	d86f      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006718:	2b30      	cmp	r3, #48	@ 0x30
 800671a:	d064      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x15a>
 800671c:	2b30      	cmp	r3, #48	@ 0x30
 800671e:	d86b      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006720:	2b20      	cmp	r3, #32
 8006722:	d060      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x15a>
 8006724:	2b20      	cmp	r3, #32
 8006726:	d867      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006728:	2b00      	cmp	r3, #0
 800672a:	d05c      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x15a>
 800672c:	2b10      	cmp	r3, #16
 800672e:	d05a      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x15a>
 8006730:	e062      	b.n	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006742:	f000 fb38 	bl	8006db6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006754:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	609a      	str	r2, [r3, #8]
      break;
 800675e:	e04f      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006770:	f000 fb21 	bl	8006db6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689a      	ldr	r2, [r3, #8]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006782:	609a      	str	r2, [r3, #8]
      break;
 8006784:	e03c      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006792:	461a      	mov	r2, r3
 8006794:	f000 fa98 	bl	8006cc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2150      	movs	r1, #80	@ 0x50
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 faef 	bl	8006d82 <TIM_ITRx_SetConfig>
      break;
 80067a4:	e02c      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067b2:	461a      	mov	r2, r3
 80067b4:	f000 fab6 	bl	8006d24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2160      	movs	r1, #96	@ 0x60
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fadf 	bl	8006d82 <TIM_ITRx_SetConfig>
      break;
 80067c4:	e01c      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067d2:	461a      	mov	r2, r3
 80067d4:	f000 fa78 	bl	8006cc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2140      	movs	r1, #64	@ 0x40
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 facf 	bl	8006d82 <TIM_ITRx_SetConfig>
      break;
 80067e4:	e00c      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4619      	mov	r1, r3
 80067f0:	4610      	mov	r0, r2
 80067f2:	f000 fac6 	bl	8006d82 <TIM_ITRx_SetConfig>
      break;
 80067f6:	e003      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	73fb      	strb	r3, [r7, #15]
      break;
 80067fc:	e000      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006810:	7bfb      	ldrb	r3, [r7, #15]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
	...

0800681c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a45      	ldr	r2, [pc, #276]	@ (8006944 <TIM_Base_SetConfig+0x128>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d013      	beq.n	800685c <TIM_Base_SetConfig+0x40>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800683a:	d00f      	beq.n	800685c <TIM_Base_SetConfig+0x40>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a42      	ldr	r2, [pc, #264]	@ (8006948 <TIM_Base_SetConfig+0x12c>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d00b      	beq.n	800685c <TIM_Base_SetConfig+0x40>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a41      	ldr	r2, [pc, #260]	@ (800694c <TIM_Base_SetConfig+0x130>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d007      	beq.n	800685c <TIM_Base_SetConfig+0x40>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a40      	ldr	r2, [pc, #256]	@ (8006950 <TIM_Base_SetConfig+0x134>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d003      	beq.n	800685c <TIM_Base_SetConfig+0x40>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a3f      	ldr	r2, [pc, #252]	@ (8006954 <TIM_Base_SetConfig+0x138>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d108      	bne.n	800686e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006862:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	4313      	orrs	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a34      	ldr	r2, [pc, #208]	@ (8006944 <TIM_Base_SetConfig+0x128>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d02b      	beq.n	80068ce <TIM_Base_SetConfig+0xb2>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800687c:	d027      	beq.n	80068ce <TIM_Base_SetConfig+0xb2>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a31      	ldr	r2, [pc, #196]	@ (8006948 <TIM_Base_SetConfig+0x12c>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d023      	beq.n	80068ce <TIM_Base_SetConfig+0xb2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a30      	ldr	r2, [pc, #192]	@ (800694c <TIM_Base_SetConfig+0x130>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d01f      	beq.n	80068ce <TIM_Base_SetConfig+0xb2>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a2f      	ldr	r2, [pc, #188]	@ (8006950 <TIM_Base_SetConfig+0x134>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d01b      	beq.n	80068ce <TIM_Base_SetConfig+0xb2>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a2e      	ldr	r2, [pc, #184]	@ (8006954 <TIM_Base_SetConfig+0x138>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d017      	beq.n	80068ce <TIM_Base_SetConfig+0xb2>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a2d      	ldr	r2, [pc, #180]	@ (8006958 <TIM_Base_SetConfig+0x13c>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d013      	beq.n	80068ce <TIM_Base_SetConfig+0xb2>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a2c      	ldr	r2, [pc, #176]	@ (800695c <TIM_Base_SetConfig+0x140>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d00f      	beq.n	80068ce <TIM_Base_SetConfig+0xb2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a2b      	ldr	r2, [pc, #172]	@ (8006960 <TIM_Base_SetConfig+0x144>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d00b      	beq.n	80068ce <TIM_Base_SetConfig+0xb2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a2a      	ldr	r2, [pc, #168]	@ (8006964 <TIM_Base_SetConfig+0x148>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d007      	beq.n	80068ce <TIM_Base_SetConfig+0xb2>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a29      	ldr	r2, [pc, #164]	@ (8006968 <TIM_Base_SetConfig+0x14c>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d003      	beq.n	80068ce <TIM_Base_SetConfig+0xb2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a28      	ldr	r2, [pc, #160]	@ (800696c <TIM_Base_SetConfig+0x150>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d108      	bne.n	80068e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	4313      	orrs	r3, r2
 80068de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a0f      	ldr	r2, [pc, #60]	@ (8006944 <TIM_Base_SetConfig+0x128>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d003      	beq.n	8006914 <TIM_Base_SetConfig+0xf8>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a11      	ldr	r2, [pc, #68]	@ (8006954 <TIM_Base_SetConfig+0x138>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d103      	bne.n	800691c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	691a      	ldr	r2, [r3, #16]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b01      	cmp	r3, #1
 800692c:	d105      	bne.n	800693a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f023 0201 	bic.w	r2, r3, #1
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	611a      	str	r2, [r3, #16]
  }
}
 800693a:	bf00      	nop
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	bc80      	pop	{r7}
 8006942:	4770      	bx	lr
 8006944:	40010000 	.word	0x40010000
 8006948:	40000400 	.word	0x40000400
 800694c:	40000800 	.word	0x40000800
 8006950:	40000c00 	.word	0x40000c00
 8006954:	40010400 	.word	0x40010400
 8006958:	40014000 	.word	0x40014000
 800695c:	40014400 	.word	0x40014400
 8006960:	40014800 	.word	0x40014800
 8006964:	40001800 	.word	0x40001800
 8006968:	40001c00 	.word	0x40001c00
 800696c:	40002000 	.word	0x40002000

08006970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	f023 0201 	bic.w	r2, r3, #1
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800699e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0303 	bic.w	r3, r3, #3
 80069a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f023 0302 	bic.w	r3, r3, #2
 80069b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a20      	ldr	r2, [pc, #128]	@ (8006a48 <TIM_OC1_SetConfig+0xd8>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d003      	beq.n	80069d4 <TIM_OC1_SetConfig+0x64>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a1f      	ldr	r2, [pc, #124]	@ (8006a4c <TIM_OC1_SetConfig+0xdc>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d10c      	bne.n	80069ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f023 0308 	bic.w	r3, r3, #8
 80069da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f023 0304 	bic.w	r3, r3, #4
 80069ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a15      	ldr	r2, [pc, #84]	@ (8006a48 <TIM_OC1_SetConfig+0xd8>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d003      	beq.n	80069fe <TIM_OC1_SetConfig+0x8e>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a14      	ldr	r2, [pc, #80]	@ (8006a4c <TIM_OC1_SetConfig+0xdc>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d111      	bne.n	8006a22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	621a      	str	r2, [r3, #32]
}
 8006a3c:	bf00      	nop
 8006a3e:	371c      	adds	r7, #28
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bc80      	pop	{r7}
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	40010000 	.word	0x40010000
 8006a4c:	40010400 	.word	0x40010400

08006a50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	f023 0210 	bic.w	r2, r3, #16
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	021b      	lsls	r3, r3, #8
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f023 0320 	bic.w	r3, r3, #32
 8006a9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	011b      	lsls	r3, r3, #4
 8006aa2:	697a      	ldr	r2, [r7, #20]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a21      	ldr	r2, [pc, #132]	@ (8006b30 <TIM_OC2_SetConfig+0xe0>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d003      	beq.n	8006ab8 <TIM_OC2_SetConfig+0x68>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a20      	ldr	r2, [pc, #128]	@ (8006b34 <TIM_OC2_SetConfig+0xe4>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d10d      	bne.n	8006ad4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	011b      	lsls	r3, r3, #4
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ad2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a16      	ldr	r2, [pc, #88]	@ (8006b30 <TIM_OC2_SetConfig+0xe0>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d003      	beq.n	8006ae4 <TIM_OC2_SetConfig+0x94>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a15      	ldr	r2, [pc, #84]	@ (8006b34 <TIM_OC2_SetConfig+0xe4>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d113      	bne.n	8006b0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006aea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006af2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	621a      	str	r2, [r3, #32]
}
 8006b26:	bf00      	nop
 8006b28:	371c      	adds	r7, #28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bc80      	pop	{r7}
 8006b2e:	4770      	bx	lr
 8006b30:	40010000 	.word	0x40010000
 8006b34:	40010400 	.word	0x40010400

08006b38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f023 0303 	bic.w	r3, r3, #3
 8006b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	021b      	lsls	r3, r3, #8
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a21      	ldr	r2, [pc, #132]	@ (8006c18 <TIM_OC3_SetConfig+0xe0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d003      	beq.n	8006b9e <TIM_OC3_SetConfig+0x66>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a20      	ldr	r2, [pc, #128]	@ (8006c1c <TIM_OC3_SetConfig+0xe4>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d10d      	bne.n	8006bba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ba4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	021b      	lsls	r3, r3, #8
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006bb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a16      	ldr	r2, [pc, #88]	@ (8006c18 <TIM_OC3_SetConfig+0xe0>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d003      	beq.n	8006bca <TIM_OC3_SetConfig+0x92>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a15      	ldr	r2, [pc, #84]	@ (8006c1c <TIM_OC3_SetConfig+0xe4>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d113      	bne.n	8006bf2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	011b      	lsls	r3, r3, #4
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	011b      	lsls	r3, r3, #4
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	621a      	str	r2, [r3, #32]
}
 8006c0c:	bf00      	nop
 8006c0e:	371c      	adds	r7, #28
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bc80      	pop	{r7}
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	40010000 	.word	0x40010000
 8006c1c:	40010400 	.word	0x40010400

08006c20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b087      	sub	sp, #28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	021b      	lsls	r3, r3, #8
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	031b      	lsls	r3, r3, #12
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a11      	ldr	r2, [pc, #68]	@ (8006cc0 <TIM_OC4_SetConfig+0xa0>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d003      	beq.n	8006c88 <TIM_OC4_SetConfig+0x68>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a10      	ldr	r2, [pc, #64]	@ (8006cc4 <TIM_OC4_SetConfig+0xa4>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d109      	bne.n	8006c9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	019b      	lsls	r3, r3, #6
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	621a      	str	r2, [r3, #32]
}
 8006cb6:	bf00      	nop
 8006cb8:	371c      	adds	r7, #28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bc80      	pop	{r7}
 8006cbe:	4770      	bx	lr
 8006cc0:	40010000 	.word	0x40010000
 8006cc4:	40010400 	.word	0x40010400

08006cc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b087      	sub	sp, #28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	f023 0201 	bic.w	r2, r3, #1
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	011b      	lsls	r3, r3, #4
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f023 030a 	bic.w	r3, r3, #10
 8006d04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	621a      	str	r2, [r3, #32]
}
 8006d1a:	bf00      	nop
 8006d1c:	371c      	adds	r7, #28
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bc80      	pop	{r7}
 8006d22:	4770      	bx	lr

08006d24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b087      	sub	sp, #28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	f023 0210 	bic.w	r2, r3, #16
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	031b      	lsls	r3, r3, #12
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d60:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	621a      	str	r2, [r3, #32]
}
 8006d78:	bf00      	nop
 8006d7a:	371c      	adds	r7, #28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bc80      	pop	{r7}
 8006d80:	4770      	bx	lr

08006d82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b085      	sub	sp, #20
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
 8006d8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	f043 0307 	orr.w	r3, r3, #7
 8006da4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	609a      	str	r2, [r3, #8]
}
 8006dac:	bf00      	nop
 8006dae:	3714      	adds	r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bc80      	pop	{r7}
 8006db4:	4770      	bx	lr

08006db6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b087      	sub	sp, #28
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	60b9      	str	r1, [r7, #8]
 8006dc0:	607a      	str	r2, [r7, #4]
 8006dc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	021a      	lsls	r2, r3, #8
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	609a      	str	r2, [r3, #8]
}
 8006dea:	bf00      	nop
 8006dec:	371c      	adds	r7, #28
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bc80      	pop	{r7}
 8006df2:	4770      	bx	lr

08006df4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f003 031f 	and.w	r3, r3, #31
 8006e06:	2201      	movs	r2, #1
 8006e08:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6a1a      	ldr	r2, [r3, #32]
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	43db      	mvns	r3, r3
 8006e16:	401a      	ands	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6a1a      	ldr	r2, [r3, #32]
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f003 031f 	and.w	r3, r3, #31
 8006e26:	6879      	ldr	r1, [r7, #4]
 8006e28:	fa01 f303 	lsl.w	r3, r1, r3
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	621a      	str	r2, [r3, #32]
}
 8006e32:	bf00      	nop
 8006e34:	371c      	adds	r7, #28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bc80      	pop	{r7}
 8006e3a:	4770      	bx	lr

08006e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d101      	bne.n	8006e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e50:	2302      	movs	r3, #2
 8006e52:	e05a      	b.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a20      	ldr	r2, [pc, #128]	@ (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d022      	beq.n	8006ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ea0:	d01d      	beq.n	8006ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8006f18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d018      	beq.n	8006ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a1a      	ldr	r2, [pc, #104]	@ (8006f1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d013      	beq.n	8006ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a19      	ldr	r2, [pc, #100]	@ (8006f20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00e      	beq.n	8006ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a17      	ldr	r2, [pc, #92]	@ (8006f24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d009      	beq.n	8006ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a16      	ldr	r2, [pc, #88]	@ (8006f28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d004      	beq.n	8006ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a14      	ldr	r2, [pc, #80]	@ (8006f2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d10c      	bne.n	8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ee4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bc80      	pop	{r7}
 8006f12:	4770      	bx	lr
 8006f14:	40010000 	.word	0x40010000
 8006f18:	40000400 	.word	0x40000400
 8006f1c:	40000800 	.word	0x40000800
 8006f20:	40000c00 	.word	0x40000c00
 8006f24:	40010400 	.word	0x40010400
 8006f28:	40014000 	.word	0x40014000
 8006f2c:	40001800 	.word	0x40001800

08006f30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f30:	b084      	sub	sp, #16
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b084      	sub	sp, #16
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	f107 001c 	add.w	r0, r7, #28
 8006f3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f42:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d123      	bne.n	8006f92 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006f5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d105      	bne.n	8006f86 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f001 faca 	bl	8008520 <USB_CoreReset>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	73fb      	strb	r3, [r7, #15]
 8006f90:	e01b      	b.n	8006fca <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f001 fabe 	bl	8008520 <USB_CoreReset>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006fa8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d106      	bne.n	8006fbe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	639a      	str	r2, [r3, #56]	@ 0x38
 8006fbc:	e005      	b.n	8006fca <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006fca:	7fbb      	ldrb	r3, [r7, #30]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d10b      	bne.n	8006fe8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f043 0206 	orr.w	r2, r3, #6
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f043 0220 	orr.w	r2, r3, #32
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ff4:	b004      	add	sp, #16
 8006ff6:	4770      	bx	lr

08006ff8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	4613      	mov	r3, r2
 8007004:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007006:	79fb      	ldrb	r3, [r7, #7]
 8007008:	2b02      	cmp	r3, #2
 800700a:	d165      	bne.n	80070d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	4a41      	ldr	r2, [pc, #260]	@ (8007114 <USB_SetTurnaroundTime+0x11c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d906      	bls.n	8007022 <USB_SetTurnaroundTime+0x2a>
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	4a40      	ldr	r2, [pc, #256]	@ (8007118 <USB_SetTurnaroundTime+0x120>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d202      	bcs.n	8007022 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800701c:	230f      	movs	r3, #15
 800701e:	617b      	str	r3, [r7, #20]
 8007020:	e062      	b.n	80070e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	4a3c      	ldr	r2, [pc, #240]	@ (8007118 <USB_SetTurnaroundTime+0x120>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d306      	bcc.n	8007038 <USB_SetTurnaroundTime+0x40>
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	4a3b      	ldr	r2, [pc, #236]	@ (800711c <USB_SetTurnaroundTime+0x124>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d202      	bcs.n	8007038 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007032:	230e      	movs	r3, #14
 8007034:	617b      	str	r3, [r7, #20]
 8007036:	e057      	b.n	80070e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	4a38      	ldr	r2, [pc, #224]	@ (800711c <USB_SetTurnaroundTime+0x124>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d306      	bcc.n	800704e <USB_SetTurnaroundTime+0x56>
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	4a37      	ldr	r2, [pc, #220]	@ (8007120 <USB_SetTurnaroundTime+0x128>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d202      	bcs.n	800704e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007048:	230d      	movs	r3, #13
 800704a:	617b      	str	r3, [r7, #20]
 800704c:	e04c      	b.n	80070e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	4a33      	ldr	r2, [pc, #204]	@ (8007120 <USB_SetTurnaroundTime+0x128>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d306      	bcc.n	8007064 <USB_SetTurnaroundTime+0x6c>
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	4a32      	ldr	r2, [pc, #200]	@ (8007124 <USB_SetTurnaroundTime+0x12c>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d802      	bhi.n	8007064 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800705e:	230c      	movs	r3, #12
 8007060:	617b      	str	r3, [r7, #20]
 8007062:	e041      	b.n	80070e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	4a2f      	ldr	r2, [pc, #188]	@ (8007124 <USB_SetTurnaroundTime+0x12c>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d906      	bls.n	800707a <USB_SetTurnaroundTime+0x82>
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	4a2e      	ldr	r2, [pc, #184]	@ (8007128 <USB_SetTurnaroundTime+0x130>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d802      	bhi.n	800707a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007074:	230b      	movs	r3, #11
 8007076:	617b      	str	r3, [r7, #20]
 8007078:	e036      	b.n	80070e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	4a2a      	ldr	r2, [pc, #168]	@ (8007128 <USB_SetTurnaroundTime+0x130>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d906      	bls.n	8007090 <USB_SetTurnaroundTime+0x98>
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	4a29      	ldr	r2, [pc, #164]	@ (800712c <USB_SetTurnaroundTime+0x134>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d802      	bhi.n	8007090 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800708a:	230a      	movs	r3, #10
 800708c:	617b      	str	r3, [r7, #20]
 800708e:	e02b      	b.n	80070e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	4a26      	ldr	r2, [pc, #152]	@ (800712c <USB_SetTurnaroundTime+0x134>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d906      	bls.n	80070a6 <USB_SetTurnaroundTime+0xae>
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	4a25      	ldr	r2, [pc, #148]	@ (8007130 <USB_SetTurnaroundTime+0x138>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d202      	bcs.n	80070a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80070a0:	2309      	movs	r3, #9
 80070a2:	617b      	str	r3, [r7, #20]
 80070a4:	e020      	b.n	80070e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	4a21      	ldr	r2, [pc, #132]	@ (8007130 <USB_SetTurnaroundTime+0x138>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d306      	bcc.n	80070bc <USB_SetTurnaroundTime+0xc4>
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	4a20      	ldr	r2, [pc, #128]	@ (8007134 <USB_SetTurnaroundTime+0x13c>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d802      	bhi.n	80070bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80070b6:	2308      	movs	r3, #8
 80070b8:	617b      	str	r3, [r7, #20]
 80070ba:	e015      	b.n	80070e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	4a1d      	ldr	r2, [pc, #116]	@ (8007134 <USB_SetTurnaroundTime+0x13c>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d906      	bls.n	80070d2 <USB_SetTurnaroundTime+0xda>
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	4a1c      	ldr	r2, [pc, #112]	@ (8007138 <USB_SetTurnaroundTime+0x140>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d202      	bcs.n	80070d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80070cc:	2307      	movs	r3, #7
 80070ce:	617b      	str	r3, [r7, #20]
 80070d0:	e00a      	b.n	80070e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80070d2:	2306      	movs	r3, #6
 80070d4:	617b      	str	r3, [r7, #20]
 80070d6:	e007      	b.n	80070e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80070d8:	79fb      	ldrb	r3, [r7, #7]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d102      	bne.n	80070e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80070de:	2309      	movs	r3, #9
 80070e0:	617b      	str	r3, [r7, #20]
 80070e2:	e001      	b.n	80070e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80070e4:	2309      	movs	r3, #9
 80070e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	68da      	ldr	r2, [r3, #12]
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	029b      	lsls	r3, r3, #10
 80070fc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007100:	431a      	orrs	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	371c      	adds	r7, #28
 800710c:	46bd      	mov	sp, r7
 800710e:	bc80      	pop	{r7}
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	00d8acbf 	.word	0x00d8acbf
 8007118:	00e4e1c0 	.word	0x00e4e1c0
 800711c:	00f42400 	.word	0x00f42400
 8007120:	01067380 	.word	0x01067380
 8007124:	011a499f 	.word	0x011a499f
 8007128:	01312cff 	.word	0x01312cff
 800712c:	014ca43f 	.word	0x014ca43f
 8007130:	016e3600 	.word	0x016e3600
 8007134:	01a6ab1f 	.word	0x01a6ab1f
 8007138:	01e84800 	.word	0x01e84800

0800713c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f043 0201 	orr.w	r2, r3, #1
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	bc80      	pop	{r7}
 800715a:	4770      	bx	lr

0800715c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f023 0201 	bic.w	r2, r3, #1
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	bc80      	pop	{r7}
 800717a:	4770      	bx	lr

0800717c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	460b      	mov	r3, r1
 8007186:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007188:	2300      	movs	r3, #0
 800718a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007198:	78fb      	ldrb	r3, [r7, #3]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d115      	bne.n	80071ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80071aa:	200a      	movs	r0, #10
 80071ac:	f7fa fff8 	bl	80021a0 <HAL_Delay>
      ms += 10U;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	330a      	adds	r3, #10
 80071b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f001 f926 	bl	8008408 <USB_GetMode>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d01e      	beq.n	8007200 <USB_SetCurrentMode+0x84>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80071c6:	d9f0      	bls.n	80071aa <USB_SetCurrentMode+0x2e>
 80071c8:	e01a      	b.n	8007200 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80071ca:	78fb      	ldrb	r3, [r7, #3]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d115      	bne.n	80071fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80071dc:	200a      	movs	r0, #10
 80071de:	f7fa ffdf 	bl	80021a0 <HAL_Delay>
      ms += 10U;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	330a      	adds	r3, #10
 80071e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f001 f90d 	bl	8008408 <USB_GetMode>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d005      	beq.n	8007200 <USB_SetCurrentMode+0x84>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2bc7      	cmp	r3, #199	@ 0xc7
 80071f8:	d9f0      	bls.n	80071dc <USB_SetCurrentMode+0x60>
 80071fa:	e001      	b.n	8007200 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e005      	b.n	800720c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2bc8      	cmp	r3, #200	@ 0xc8
 8007204:	d101      	bne.n	800720a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e000      	b.n	800720c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007214:	b084      	sub	sp, #16
 8007216:	b580      	push	{r7, lr}
 8007218:	b086      	sub	sp, #24
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007222:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800722e:	2300      	movs	r3, #0
 8007230:	613b      	str	r3, [r7, #16]
 8007232:	e009      	b.n	8007248 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	3340      	adds	r3, #64	@ 0x40
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4413      	add	r3, r2
 800723e:	2200      	movs	r2, #0
 8007240:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	3301      	adds	r3, #1
 8007246:	613b      	str	r3, [r7, #16]
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	2b0e      	cmp	r3, #14
 800724c:	d9f2      	bls.n	8007234 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800724e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007252:	2b00      	cmp	r3, #0
 8007254:	d11c      	bne.n	8007290 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007264:	f043 0302 	orr.w	r3, r3, #2
 8007268:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800726e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800727a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007286:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	639a      	str	r2, [r3, #56]	@ 0x38
 800728e:	e00b      	b.n	80072a8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007294:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80072ae:	461a      	mov	r2, r3
 80072b0:	2300      	movs	r3, #0
 80072b2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072b4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d10d      	bne.n	80072d8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80072bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d104      	bne.n	80072ce <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80072c4:	2100      	movs	r1, #0
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f966 	bl	8007598 <USB_SetDevSpeed>
 80072cc:	e008      	b.n	80072e0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80072ce:	2101      	movs	r1, #1
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f961 	bl	8007598 <USB_SetDevSpeed>
 80072d6:	e003      	b.n	80072e0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80072d8:	2103      	movs	r1, #3
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f95c 	bl	8007598 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80072e0:	2110      	movs	r1, #16
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f8fa 	bl	80074dc <USB_FlushTxFifo>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f923 	bl	800753e <USB_FlushRxFifo>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007308:	461a      	mov	r2, r3
 800730a:	2300      	movs	r3, #0
 800730c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007314:	461a      	mov	r2, r3
 8007316:	2300      	movs	r3, #0
 8007318:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007320:	461a      	mov	r2, r3
 8007322:	2300      	movs	r3, #0
 8007324:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007326:	2300      	movs	r3, #0
 8007328:	613b      	str	r3, [r7, #16]
 800732a:	e043      	b.n	80073b4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	4413      	add	r3, r2
 8007334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800733e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007342:	d118      	bne.n	8007376 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10a      	bne.n	8007360 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	4413      	add	r3, r2
 8007352:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007356:	461a      	mov	r2, r3
 8007358:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800735c:	6013      	str	r3, [r2, #0]
 800735e:	e013      	b.n	8007388 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	015a      	lsls	r2, r3, #5
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	4413      	add	r3, r2
 8007368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800736c:	461a      	mov	r2, r3
 800736e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007372:	6013      	str	r3, [r2, #0]
 8007374:	e008      	b.n	8007388 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007382:	461a      	mov	r2, r3
 8007384:	2300      	movs	r3, #0
 8007386:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007394:	461a      	mov	r2, r3
 8007396:	2300      	movs	r3, #0
 8007398:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073a6:	461a      	mov	r2, r3
 80073a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80073ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	3301      	adds	r3, #1
 80073b2:	613b      	str	r3, [r7, #16]
 80073b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80073b8:	461a      	mov	r2, r3
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	4293      	cmp	r3, r2
 80073be:	d3b5      	bcc.n	800732c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073c0:	2300      	movs	r3, #0
 80073c2:	613b      	str	r3, [r7, #16]
 80073c4:	e043      	b.n	800744e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073dc:	d118      	bne.n	8007410 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10a      	bne.n	80073fa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	015a      	lsls	r2, r3, #5
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073f0:	461a      	mov	r2, r3
 80073f2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80073f6:	6013      	str	r3, [r2, #0]
 80073f8:	e013      	b.n	8007422 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	015a      	lsls	r2, r3, #5
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	4413      	add	r3, r2
 8007402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007406:	461a      	mov	r2, r3
 8007408:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800740c:	6013      	str	r3, [r2, #0]
 800740e:	e008      	b.n	8007422 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800741c:	461a      	mov	r2, r3
 800741e:	2300      	movs	r3, #0
 8007420:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	4413      	add	r3, r2
 800742a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800742e:	461a      	mov	r2, r3
 8007430:	2300      	movs	r3, #0
 8007432:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	015a      	lsls	r2, r3, #5
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4413      	add	r3, r2
 800743c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007440:	461a      	mov	r2, r3
 8007442:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007446:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	3301      	adds	r3, #1
 800744c:	613b      	str	r3, [r7, #16]
 800744e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007452:	461a      	mov	r2, r3
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	4293      	cmp	r3, r2
 8007458:	d3b5      	bcc.n	80073c6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007468:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800746c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800747a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800747c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007480:	2b00      	cmp	r3, #0
 8007482:	d105      	bne.n	8007490 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	f043 0210 	orr.w	r2, r3, #16
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	699a      	ldr	r2, [r3, #24]
 8007494:	4b10      	ldr	r3, [pc, #64]	@ (80074d8 <USB_DevInit+0x2c4>)
 8007496:	4313      	orrs	r3, r2
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800749c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d005      	beq.n	80074b0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	f043 0208 	orr.w	r2, r3, #8
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80074b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d107      	bne.n	80074c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80074c0:	f043 0304 	orr.w	r3, r3, #4
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80074c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074d4:	b004      	add	sp, #16
 80074d6:	4770      	bx	lr
 80074d8:	803c3800 	.word	0x803c3800

080074dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3301      	adds	r3, #1
 80074ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074f6:	d901      	bls.n	80074fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e01b      	b.n	8007534 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	daf2      	bge.n	80074ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007504:	2300      	movs	r3, #0
 8007506:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	019b      	lsls	r3, r3, #6
 800750c:	f043 0220 	orr.w	r2, r3, #32
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	3301      	adds	r3, #1
 8007518:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007520:	d901      	bls.n	8007526 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e006      	b.n	8007534 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	f003 0320 	and.w	r3, r3, #32
 800752e:	2b20      	cmp	r3, #32
 8007530:	d0f0      	beq.n	8007514 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	bc80      	pop	{r7}
 800753c:	4770      	bx	lr

0800753e <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800753e:	b480      	push	{r7}
 8007540:	b085      	sub	sp, #20
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007546:	2300      	movs	r3, #0
 8007548:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	3301      	adds	r3, #1
 800754e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007556:	d901      	bls.n	800755c <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e018      	b.n	800758e <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	2b00      	cmp	r3, #0
 8007562:	daf2      	bge.n	800754a <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007564:	2300      	movs	r3, #0
 8007566:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2210      	movs	r2, #16
 800756c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3301      	adds	r3, #1
 8007572:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800757a:	d901      	bls.n	8007580 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e006      	b.n	800758e <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	f003 0310 	and.w	r3, r3, #16
 8007588:	2b10      	cmp	r3, #16
 800758a:	d0f0      	beq.n	800756e <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	bc80      	pop	{r7}
 8007596:	4770      	bx	lr

08007598 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	78fb      	ldrb	r3, [r7, #3]
 80075b2:	68f9      	ldr	r1, [r7, #12]
 80075b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80075b8:	4313      	orrs	r3, r2
 80075ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3714      	adds	r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bc80      	pop	{r7}
 80075c6:	4770      	bx	lr

080075c8 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b087      	sub	sp, #28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f003 0306 	and.w	r3, r3, #6
 80075e0:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d102      	bne.n	80075ee <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80075e8:	2300      	movs	r3, #0
 80075ea:	75fb      	strb	r3, [r7, #23]
 80075ec:	e00a      	b.n	8007604 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d002      	beq.n	80075fa <USB_GetDevSpeed+0x32>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2b06      	cmp	r3, #6
 80075f8:	d102      	bne.n	8007600 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80075fa:	2302      	movs	r3, #2
 80075fc:	75fb      	strb	r3, [r7, #23]
 80075fe:	e001      	b.n	8007604 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007600:	230f      	movs	r3, #15
 8007602:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007604:	7dfb      	ldrb	r3, [r7, #23]
}
 8007606:	4618      	mov	r0, r3
 8007608:	371c      	adds	r7, #28
 800760a:	46bd      	mov	sp, r7
 800760c:	bc80      	pop	{r7}
 800760e:	4770      	bx	lr

08007610 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	785b      	ldrb	r3, [r3, #1]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d13a      	bne.n	80076a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007632:	69da      	ldr	r2, [r3, #28]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	f003 030f 	and.w	r3, r3, #15
 800763c:	2101      	movs	r1, #1
 800763e:	fa01 f303 	lsl.w	r3, r1, r3
 8007642:	b29b      	uxth	r3, r3
 8007644:	68f9      	ldr	r1, [r7, #12]
 8007646:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800764a:	4313      	orrs	r3, r2
 800764c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	015a      	lsls	r2, r3, #5
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	4413      	add	r3, r2
 8007656:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d155      	bne.n	8007710 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	791b      	ldrb	r3, [r3, #4]
 800767e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007680:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	059b      	lsls	r3, r3, #22
 8007686:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007688:	4313      	orrs	r3, r2
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	0151      	lsls	r1, r2, #5
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	440a      	add	r2, r1
 8007692:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800769a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800769e:	6013      	str	r3, [r2, #0]
 80076a0:	e036      	b.n	8007710 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076a8:	69da      	ldr	r2, [r3, #28]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	f003 030f 	and.w	r3, r3, #15
 80076b2:	2101      	movs	r1, #1
 80076b4:	fa01 f303 	lsl.w	r3, r1, r3
 80076b8:	041b      	lsls	r3, r3, #16
 80076ba:	68f9      	ldr	r1, [r7, #12]
 80076bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076c0:	4313      	orrs	r3, r2
 80076c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	015a      	lsls	r2, r3, #5
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d11a      	bne.n	8007710 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	791b      	ldrb	r3, [r3, #4]
 80076f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80076f6:	430b      	orrs	r3, r1
 80076f8:	4313      	orrs	r3, r2
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	0151      	lsls	r1, r2, #5
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	440a      	add	r2, r1
 8007702:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800770a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800770e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3714      	adds	r7, #20
 8007716:	46bd      	mov	sp, r7
 8007718:	bc80      	pop	{r7}
 800771a:	4770      	bx	lr

0800771c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	785b      	ldrb	r3, [r3, #1]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d161      	bne.n	80077fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	015a      	lsls	r2, r3, #5
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	4413      	add	r3, r2
 8007740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800774a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800774e:	d11f      	bne.n	8007790 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	015a      	lsls	r2, r3, #5
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4413      	add	r3, r2
 8007758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	0151      	lsls	r1, r2, #5
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	440a      	add	r2, r1
 8007766:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800776a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800776e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	4413      	add	r3, r2
 8007778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	0151      	lsls	r1, r2, #5
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	440a      	add	r2, r1
 8007786:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800778a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800778e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007796:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	f003 030f 	and.w	r3, r3, #15
 80077a0:	2101      	movs	r1, #1
 80077a2:	fa01 f303 	lsl.w	r3, r1, r3
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	43db      	mvns	r3, r3
 80077aa:	68f9      	ldr	r1, [r7, #12]
 80077ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077b0:	4013      	ands	r3, r2
 80077b2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ba:	69da      	ldr	r2, [r3, #28]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	f003 030f 	and.w	r3, r3, #15
 80077c4:	2101      	movs	r1, #1
 80077c6:	fa01 f303 	lsl.w	r3, r1, r3
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	43db      	mvns	r3, r3
 80077ce:	68f9      	ldr	r1, [r7, #12]
 80077d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077d4:	4013      	ands	r3, r2
 80077d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	015a      	lsls	r2, r3, #5
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	4413      	add	r3, r2
 80077e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	0159      	lsls	r1, r3, #5
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	440b      	add	r3, r1
 80077ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077f2:	4619      	mov	r1, r3
 80077f4:	4b35      	ldr	r3, [pc, #212]	@ (80078cc <USB_DeactivateEndpoint+0x1b0>)
 80077f6:	4013      	ands	r3, r2
 80077f8:	600b      	str	r3, [r1, #0]
 80077fa:	e060      	b.n	80078be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	015a      	lsls	r2, r3, #5
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	4413      	add	r3, r2
 8007804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800780e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007812:	d11f      	bne.n	8007854 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	015a      	lsls	r2, r3, #5
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	4413      	add	r3, r2
 800781c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	0151      	lsls	r1, r2, #5
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	440a      	add	r2, r1
 800782a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800782e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007832:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	4413      	add	r3, r2
 800783c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	0151      	lsls	r1, r2, #5
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	440a      	add	r2, r1
 800784a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800784e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007852:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800785a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	f003 030f 	and.w	r3, r3, #15
 8007864:	2101      	movs	r1, #1
 8007866:	fa01 f303 	lsl.w	r3, r1, r3
 800786a:	041b      	lsls	r3, r3, #16
 800786c:	43db      	mvns	r3, r3
 800786e:	68f9      	ldr	r1, [r7, #12]
 8007870:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007874:	4013      	ands	r3, r2
 8007876:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800787e:	69da      	ldr	r2, [r3, #28]
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	f003 030f 	and.w	r3, r3, #15
 8007888:	2101      	movs	r1, #1
 800788a:	fa01 f303 	lsl.w	r3, r1, r3
 800788e:	041b      	lsls	r3, r3, #16
 8007890:	43db      	mvns	r3, r3
 8007892:	68f9      	ldr	r1, [r7, #12]
 8007894:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007898:	4013      	ands	r3, r2
 800789a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	015a      	lsls	r2, r3, #5
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	4413      	add	r3, r2
 80078a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	0159      	lsls	r1, r3, #5
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	440b      	add	r3, r1
 80078b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078b6:	4619      	mov	r1, r3
 80078b8:	4b05      	ldr	r3, [pc, #20]	@ (80078d0 <USB_DeactivateEndpoint+0x1b4>)
 80078ba:	4013      	ands	r3, r2
 80078bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3714      	adds	r7, #20
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bc80      	pop	{r7}
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	ec337800 	.word	0xec337800
 80078d0:	eff37800 	.word	0xeff37800

080078d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b08a      	sub	sp, #40	@ 0x28
 80078d8:	af02      	add	r7, sp, #8
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	4613      	mov	r3, r2
 80078e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	785b      	ldrb	r3, [r3, #1]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	f040 817a 	bne.w	8007bea <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d132      	bne.n	8007964 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	015a      	lsls	r2, r3, #5
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	4413      	add	r3, r2
 8007906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	69ba      	ldr	r2, [r7, #24]
 800790e:	0151      	lsls	r1, r2, #5
 8007910:	69fa      	ldr	r2, [r7, #28]
 8007912:	440a      	add	r2, r1
 8007914:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007918:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800791c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007920:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	015a      	lsls	r2, r3, #5
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	4413      	add	r3, r2
 800792a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	69ba      	ldr	r2, [r7, #24]
 8007932:	0151      	lsls	r1, r2, #5
 8007934:	69fa      	ldr	r2, [r7, #28]
 8007936:	440a      	add	r2, r1
 8007938:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800793c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007940:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	015a      	lsls	r2, r3, #5
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	4413      	add	r3, r2
 800794a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	69ba      	ldr	r2, [r7, #24]
 8007952:	0151      	lsls	r1, r2, #5
 8007954:	69fa      	ldr	r2, [r7, #28]
 8007956:	440a      	add	r2, r1
 8007958:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800795c:	0cdb      	lsrs	r3, r3, #19
 800795e:	04db      	lsls	r3, r3, #19
 8007960:	6113      	str	r3, [r2, #16]
 8007962:	e092      	b.n	8007a8a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	4413      	add	r3, r2
 800796c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	69ba      	ldr	r2, [r7, #24]
 8007974:	0151      	lsls	r1, r2, #5
 8007976:	69fa      	ldr	r2, [r7, #28]
 8007978:	440a      	add	r2, r1
 800797a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800797e:	0cdb      	lsrs	r3, r3, #19
 8007980:	04db      	lsls	r3, r3, #19
 8007982:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	4413      	add	r3, r2
 800798c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	69ba      	ldr	r2, [r7, #24]
 8007994:	0151      	lsls	r1, r2, #5
 8007996:	69fa      	ldr	r2, [r7, #28]
 8007998:	440a      	add	r2, r1
 800799a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800799e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80079a2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80079a6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d11a      	bne.n	80079e4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	691a      	ldr	r2, [r3, #16]
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d903      	bls.n	80079c2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	689a      	ldr	r2, [r3, #8]
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	015a      	lsls	r2, r3, #5
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	4413      	add	r3, r2
 80079ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	69ba      	ldr	r2, [r7, #24]
 80079d2:	0151      	lsls	r1, r2, #5
 80079d4:	69fa      	ldr	r2, [r7, #28]
 80079d6:	440a      	add	r2, r1
 80079d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80079e0:	6113      	str	r3, [r2, #16]
 80079e2:	e01b      	b.n	8007a1c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079f0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	6919      	ldr	r1, [r3, #16]
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	440b      	add	r3, r1
 80079fc:	1e59      	subs	r1, r3, #1
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a06:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007a08:	4ba2      	ldr	r3, [pc, #648]	@ (8007c94 <USB_EPStartXfer+0x3c0>)
 8007a0a:	400b      	ands	r3, r1
 8007a0c:	69b9      	ldr	r1, [r7, #24]
 8007a0e:	0148      	lsls	r0, r1, #5
 8007a10:	69f9      	ldr	r1, [r7, #28]
 8007a12:	4401      	add	r1, r0
 8007a14:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a28:	691a      	ldr	r2, [r3, #16]
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a32:	69b9      	ldr	r1, [r7, #24]
 8007a34:	0148      	lsls	r0, r1, #5
 8007a36:	69f9      	ldr	r1, [r7, #28]
 8007a38:	4401      	add	r1, r0
 8007a3a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	791b      	ldrb	r3, [r3, #4]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d11f      	bne.n	8007a8a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	015a      	lsls	r2, r3, #5
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	4413      	add	r3, r2
 8007a52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	69ba      	ldr	r2, [r7, #24]
 8007a5a:	0151      	lsls	r1, r2, #5
 8007a5c:	69fa      	ldr	r2, [r7, #28]
 8007a5e:	440a      	add	r2, r1
 8007a60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a64:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007a68:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	015a      	lsls	r2, r3, #5
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	4413      	add	r3, r2
 8007a72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	0151      	lsls	r1, r2, #5
 8007a7c:	69fa      	ldr	r2, [r7, #28]
 8007a7e:	440a      	add	r2, r1
 8007a80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a84:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007a88:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007a8a:	79fb      	ldrb	r3, [r7, #7]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d14b      	bne.n	8007b28 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	69db      	ldr	r3, [r3, #28]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d009      	beq.n	8007aac <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	69db      	ldr	r3, [r3, #28]
 8007aaa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	791b      	ldrb	r3, [r3, #4]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d128      	bne.n	8007b06 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d110      	bne.n	8007ae6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	69ba      	ldr	r2, [r7, #24]
 8007ad4:	0151      	lsls	r1, r2, #5
 8007ad6:	69fa      	ldr	r2, [r7, #28]
 8007ad8:	440a      	add	r2, r1
 8007ada:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ade:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007ae2:	6013      	str	r3, [r2, #0]
 8007ae4:	e00f      	b.n	8007b06 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	0151      	lsls	r1, r2, #5
 8007af8:	69fa      	ldr	r2, [r7, #28]
 8007afa:	440a      	add	r2, r1
 8007afc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b04:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	015a      	lsls	r2, r3, #5
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	69ba      	ldr	r2, [r7, #24]
 8007b16:	0151      	lsls	r1, r2, #5
 8007b18:	69fa      	ldr	r2, [r7, #28]
 8007b1a:	440a      	add	r2, r1
 8007b1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b20:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007b24:	6013      	str	r3, [r2, #0]
 8007b26:	e165      	b.n	8007df4 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	015a      	lsls	r2, r3, #5
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	69ba      	ldr	r2, [r7, #24]
 8007b38:	0151      	lsls	r1, r2, #5
 8007b3a:	69fa      	ldr	r2, [r7, #28]
 8007b3c:	440a      	add	r2, r1
 8007b3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b42:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007b46:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	791b      	ldrb	r3, [r3, #4]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d015      	beq.n	8007b7c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 814d 	beq.w	8007df4 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	f003 030f 	and.w	r3, r3, #15
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b70:	69f9      	ldr	r1, [r7, #28]
 8007b72:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b76:	4313      	orrs	r3, r2
 8007b78:	634b      	str	r3, [r1, #52]	@ 0x34
 8007b7a:	e13b      	b.n	8007df4 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d110      	bne.n	8007bae <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	015a      	lsls	r2, r3, #5
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	4413      	add	r3, r2
 8007b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	69ba      	ldr	r2, [r7, #24]
 8007b9c:	0151      	lsls	r1, r2, #5
 8007b9e:	69fa      	ldr	r2, [r7, #28]
 8007ba0:	440a      	add	r2, r1
 8007ba2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ba6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007baa:	6013      	str	r3, [r2, #0]
 8007bac:	e00f      	b.n	8007bce <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	015a      	lsls	r2, r3, #5
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	69ba      	ldr	r2, [r7, #24]
 8007bbe:	0151      	lsls	r1, r2, #5
 8007bc0:	69fa      	ldr	r2, [r7, #28]
 8007bc2:	440a      	add	r2, r1
 8007bc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bcc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	68d9      	ldr	r1, [r3, #12]
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	781a      	ldrb	r2, [r3, #0]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	b298      	uxth	r0, r3
 8007bdc:	79fb      	ldrb	r3, [r7, #7]
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	4603      	mov	r3, r0
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f000 f9b7 	bl	8007f56 <USB_WritePacket>
 8007be8:	e104      	b.n	8007df4 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	015a      	lsls	r2, r3, #5
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	69ba      	ldr	r2, [r7, #24]
 8007bfa:	0151      	lsls	r1, r2, #5
 8007bfc:	69fa      	ldr	r2, [r7, #28]
 8007bfe:	440a      	add	r2, r1
 8007c00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c04:	0cdb      	lsrs	r3, r3, #19
 8007c06:	04db      	lsls	r3, r3, #19
 8007c08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	015a      	lsls	r2, r3, #5
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	4413      	add	r3, r2
 8007c12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	69ba      	ldr	r2, [r7, #24]
 8007c1a:	0151      	lsls	r1, r2, #5
 8007c1c:	69fa      	ldr	r2, [r7, #28]
 8007c1e:	440a      	add	r2, r1
 8007c20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c24:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007c28:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007c2c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d131      	bne.n	8007c98 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	689a      	ldr	r2, [r3, #8]
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	015a      	lsls	r2, r3, #5
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	4413      	add	r3, r2
 8007c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c58:	691a      	ldr	r2, [r3, #16]
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c62:	69b9      	ldr	r1, [r7, #24]
 8007c64:	0148      	lsls	r0, r1, #5
 8007c66:	69f9      	ldr	r1, [r7, #28]
 8007c68:	4401      	add	r1, r0
 8007c6a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	0151      	lsls	r1, r2, #5
 8007c84:	69fa      	ldr	r2, [r7, #28]
 8007c86:	440a      	add	r2, r1
 8007c88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c90:	6113      	str	r3, [r2, #16]
 8007c92:	e061      	b.n	8007d58 <USB_EPStartXfer+0x484>
 8007c94:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d123      	bne.n	8007ce8 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cac:	691a      	ldr	r2, [r3, #16]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cb6:	69b9      	ldr	r1, [r7, #24]
 8007cb8:	0148      	lsls	r0, r1, #5
 8007cba:	69f9      	ldr	r1, [r7, #28]
 8007cbc:	4401      	add	r1, r0
 8007cbe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	015a      	lsls	r2, r3, #5
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	4413      	add	r3, r2
 8007cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	0151      	lsls	r1, r2, #5
 8007cd8:	69fa      	ldr	r2, [r7, #28]
 8007cda:	440a      	add	r2, r1
 8007cdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ce0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ce4:	6113      	str	r3, [r2, #16]
 8007ce6:	e037      	b.n	8007d58 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	691a      	ldr	r2, [r3, #16]
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	1e5a      	subs	r2, r3, #1
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cfc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	8afa      	ldrh	r2, [r7, #22]
 8007d04:	fb03 f202 	mul.w	r2, r3, r2
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d18:	691a      	ldr	r2, [r3, #16]
 8007d1a:	8afb      	ldrh	r3, [r7, #22]
 8007d1c:	04d9      	lsls	r1, r3, #19
 8007d1e:	4b38      	ldr	r3, [pc, #224]	@ (8007e00 <USB_EPStartXfer+0x52c>)
 8007d20:	400b      	ands	r3, r1
 8007d22:	69b9      	ldr	r1, [r7, #24]
 8007d24:	0148      	lsls	r0, r1, #5
 8007d26:	69f9      	ldr	r1, [r7, #28]
 8007d28:	4401      	add	r1, r0
 8007d2a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d3e:	691a      	ldr	r2, [r3, #16]
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d48:	69b9      	ldr	r1, [r7, #24]
 8007d4a:	0148      	lsls	r0, r1, #5
 8007d4c:	69f9      	ldr	r1, [r7, #28]
 8007d4e:	4401      	add	r1, r0
 8007d50:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d54:	4313      	orrs	r3, r2
 8007d56:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007d58:	79fb      	ldrb	r3, [r7, #7]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d10d      	bne.n	8007d7a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d009      	beq.n	8007d7a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	68d9      	ldr	r1, [r3, #12]
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d76:	460a      	mov	r2, r1
 8007d78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	791b      	ldrb	r3, [r3, #4]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d128      	bne.n	8007dd4 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d110      	bne.n	8007db4 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	015a      	lsls	r2, r3, #5
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	4413      	add	r3, r2
 8007d9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	0151      	lsls	r1, r2, #5
 8007da4:	69fa      	ldr	r2, [r7, #28]
 8007da6:	440a      	add	r2, r1
 8007da8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007db0:	6013      	str	r3, [r2, #0]
 8007db2:	e00f      	b.n	8007dd4 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	69ba      	ldr	r2, [r7, #24]
 8007dc4:	0151      	lsls	r1, r2, #5
 8007dc6:	69fa      	ldr	r2, [r7, #28]
 8007dc8:	440a      	add	r2, r1
 8007dca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007dd2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	69ba      	ldr	r2, [r7, #24]
 8007de4:	0151      	lsls	r1, r2, #5
 8007de6:	69fa      	ldr	r2, [r7, #28]
 8007de8:	440a      	add	r2, r1
 8007dea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007df2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3720      	adds	r7, #32
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	1ff80000 	.word	0x1ff80000

08007e04 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	785b      	ldrb	r3, [r3, #1]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d14a      	bne.n	8007eb8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	015a      	lsls	r2, r3, #5
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e3a:	f040 8086 	bne.w	8007f4a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	7812      	ldrb	r2, [r2, #0]
 8007e52:	0151      	lsls	r1, r2, #5
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	440a      	add	r2, r1
 8007e58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e5c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007e60:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	015a      	lsls	r2, r3, #5
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	683a      	ldr	r2, [r7, #0]
 8007e74:	7812      	ldrb	r2, [r2, #0]
 8007e76:	0151      	lsls	r1, r2, #5
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	440a      	add	r2, r1
 8007e7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d902      	bls.n	8007e9c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	75fb      	strb	r3, [r7, #23]
          break;
 8007e9a:	e056      	b.n	8007f4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	015a      	lsls	r2, r3, #5
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007eb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007eb4:	d0e7      	beq.n	8007e86 <USB_EPStopXfer+0x82>
 8007eb6:	e048      	b.n	8007f4a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	015a      	lsls	r2, r3, #5
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ecc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ed0:	d13b      	bne.n	8007f4a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	015a      	lsls	r2, r3, #5
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	4413      	add	r3, r2
 8007edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	7812      	ldrb	r2, [r2, #0]
 8007ee6:	0151      	lsls	r1, r2, #5
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	440a      	add	r2, r1
 8007eec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ef0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007ef4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	015a      	lsls	r2, r3, #5
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	7812      	ldrb	r2, [r2, #0]
 8007f0a:	0151      	lsls	r1, r2, #5
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	440a      	add	r2, r1
 8007f10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d902      	bls.n	8007f30 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f2e:	e00c      	b.n	8007f4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	015a      	lsls	r2, r3, #5
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	4413      	add	r3, r2
 8007f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f48:	d0e7      	beq.n	8007f1a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	371c      	adds	r7, #28
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bc80      	pop	{r7}
 8007f54:	4770      	bx	lr

08007f56 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b089      	sub	sp, #36	@ 0x24
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	60f8      	str	r0, [r7, #12]
 8007f5e:	60b9      	str	r1, [r7, #8]
 8007f60:	4611      	mov	r1, r2
 8007f62:	461a      	mov	r2, r3
 8007f64:	460b      	mov	r3, r1
 8007f66:	71fb      	strb	r3, [r7, #7]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007f74:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d123      	bne.n	8007fc4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007f7c:	88bb      	ldrh	r3, [r7, #4]
 8007f7e:	3303      	adds	r3, #3
 8007f80:	089b      	lsrs	r3, r3, #2
 8007f82:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007f84:	2300      	movs	r3, #0
 8007f86:	61bb      	str	r3, [r7, #24]
 8007f88:	e018      	b.n	8007fbc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007f8a:	79fb      	ldrb	r3, [r7, #7]
 8007f8c:	031a      	lsls	r2, r3, #12
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	4413      	add	r3, r2
 8007f92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f96:	461a      	mov	r2, r3
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	3301      	adds	r3, #1
 8007fae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	61bb      	str	r3, [r7, #24]
 8007fbc:	69ba      	ldr	r2, [r7, #24]
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d3e2      	bcc.n	8007f8a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3724      	adds	r7, #36	@ 0x24
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bc80      	pop	{r7}
 8007fce:	4770      	bx	lr

08007fd0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b08b      	sub	sp, #44	@ 0x2c
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007fe6:	88fb      	ldrh	r3, [r7, #6]
 8007fe8:	089b      	lsrs	r3, r3, #2
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007fee:	88fb      	ldrh	r3, [r7, #6]
 8007ff0:	f003 0303 	and.w	r3, r3, #3
 8007ff4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	623b      	str	r3, [r7, #32]
 8007ffa:	e014      	b.n	8008026 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008006:	601a      	str	r2, [r3, #0]
    pDest++;
 8008008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800a:	3301      	adds	r3, #1
 800800c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800800e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008010:	3301      	adds	r3, #1
 8008012:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008016:	3301      	adds	r3, #1
 8008018:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800801a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801c:	3301      	adds	r3, #1
 800801e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008020:	6a3b      	ldr	r3, [r7, #32]
 8008022:	3301      	adds	r3, #1
 8008024:	623b      	str	r3, [r7, #32]
 8008026:	6a3a      	ldr	r2, [r7, #32]
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	429a      	cmp	r2, r3
 800802c:	d3e6      	bcc.n	8007ffc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800802e:	8bfb      	ldrh	r3, [r7, #30]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d01e      	beq.n	8008072 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008034:	2300      	movs	r3, #0
 8008036:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800803e:	461a      	mov	r2, r3
 8008040:	f107 0310 	add.w	r3, r7, #16
 8008044:	6812      	ldr	r2, [r2, #0]
 8008046:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	6a3b      	ldr	r3, [r7, #32]
 800804c:	b2db      	uxtb	r3, r3
 800804e:	00db      	lsls	r3, r3, #3
 8008050:	fa22 f303 	lsr.w	r3, r2, r3
 8008054:	b2da      	uxtb	r2, r3
 8008056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008058:	701a      	strb	r2, [r3, #0]
      i++;
 800805a:	6a3b      	ldr	r3, [r7, #32]
 800805c:	3301      	adds	r3, #1
 800805e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008062:	3301      	adds	r3, #1
 8008064:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008066:	8bfb      	ldrh	r3, [r7, #30]
 8008068:	3b01      	subs	r3, #1
 800806a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800806c:	8bfb      	ldrh	r3, [r7, #30]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1ea      	bne.n	8008048 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008074:	4618      	mov	r0, r3
 8008076:	372c      	adds	r7, #44	@ 0x2c
 8008078:	46bd      	mov	sp, r7
 800807a:	bc80      	pop	{r7}
 800807c:	4770      	bx	lr

0800807e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800807e:	b480      	push	{r7}
 8008080:	b085      	sub	sp, #20
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	785b      	ldrb	r3, [r3, #1]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d12c      	bne.n	80080f4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	015a      	lsls	r2, r3, #5
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	4413      	add	r3, r2
 80080a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	db12      	blt.n	80080d2 <USB_EPSetStall+0x54>
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00f      	beq.n	80080d2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	015a      	lsls	r2, r3, #5
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	0151      	lsls	r1, r2, #5
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	440a      	add	r2, r1
 80080c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80080d0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	015a      	lsls	r2, r3, #5
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	4413      	add	r3, r2
 80080da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	0151      	lsls	r1, r2, #5
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	440a      	add	r2, r1
 80080e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80080f0:	6013      	str	r3, [r2, #0]
 80080f2:	e02b      	b.n	800814c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	015a      	lsls	r2, r3, #5
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4413      	add	r3, r2
 80080fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	db12      	blt.n	800812c <USB_EPSetStall+0xae>
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00f      	beq.n	800812c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	015a      	lsls	r2, r3, #5
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4413      	add	r3, r2
 8008114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	0151      	lsls	r1, r2, #5
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	440a      	add	r2, r1
 8008122:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008126:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800812a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	4413      	add	r3, r2
 8008134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	0151      	lsls	r1, r2, #5
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	440a      	add	r2, r1
 8008142:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008146:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800814a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	bc80      	pop	{r7}
 8008156:	4770      	bx	lr

08008158 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	785b      	ldrb	r3, [r3, #1]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d128      	bne.n	80081c6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	015a      	lsls	r2, r3, #5
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	4413      	add	r3, r2
 800817c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	0151      	lsls	r1, r2, #5
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	440a      	add	r2, r1
 800818a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800818e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008192:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	791b      	ldrb	r3, [r3, #4]
 8008198:	2b03      	cmp	r3, #3
 800819a:	d003      	beq.n	80081a4 <USB_EPClearStall+0x4c>
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	791b      	ldrb	r3, [r3, #4]
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d138      	bne.n	8008216 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	015a      	lsls	r2, r3, #5
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	4413      	add	r3, r2
 80081ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	0151      	lsls	r1, r2, #5
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	440a      	add	r2, r1
 80081ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081c2:	6013      	str	r3, [r2, #0]
 80081c4:	e027      	b.n	8008216 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	0151      	lsls	r1, r2, #5
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	440a      	add	r2, r1
 80081dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80081e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	791b      	ldrb	r3, [r3, #4]
 80081ea:	2b03      	cmp	r3, #3
 80081ec:	d003      	beq.n	80081f6 <USB_EPClearStall+0x9e>
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	791b      	ldrb	r3, [r3, #4]
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d10f      	bne.n	8008216 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	015a      	lsls	r2, r3, #5
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	4413      	add	r3, r2
 80081fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	0151      	lsls	r1, r2, #5
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	440a      	add	r2, r1
 800820c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008214:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3714      	adds	r7, #20
 800821c:	46bd      	mov	sp, r7
 800821e:	bc80      	pop	{r7}
 8008220:	4770      	bx	lr

08008222 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008222:	b480      	push	{r7}
 8008224:	b085      	sub	sp, #20
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	460b      	mov	r3, r1
 800822c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008240:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008244:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	78fb      	ldrb	r3, [r7, #3]
 8008250:	011b      	lsls	r3, r3, #4
 8008252:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008256:	68f9      	ldr	r1, [r7, #12]
 8008258:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800825c:	4313      	orrs	r3, r2
 800825e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	bc80      	pop	{r7}
 800826a:	4770      	bx	lr

0800826c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008286:	f023 0303 	bic.w	r3, r3, #3
 800828a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800829a:	f023 0302 	bic.w	r3, r3, #2
 800829e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3714      	adds	r7, #20
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bc80      	pop	{r7}
 80082aa:	4770      	bx	lr

080082ac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b085      	sub	sp, #20
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80082c6:	f023 0303 	bic.w	r3, r3, #3
 80082ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082da:	f043 0302 	orr.w	r3, r3, #2
 80082de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3714      	adds	r7, #20
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bc80      	pop	{r7}
 80082ea:	4770      	bx	lr

080082ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	695b      	ldr	r3, [r3, #20]
 80082f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	4013      	ands	r3, r2
 8008302:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008304:	68fb      	ldr	r3, [r7, #12]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	bc80      	pop	{r7}
 800830e:	4770      	bx	lr

08008310 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800832c:	69db      	ldr	r3, [r3, #28]
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	4013      	ands	r3, r2
 8008332:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	0c1b      	lsrs	r3, r3, #16
}
 8008338:	4618      	mov	r0, r3
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	bc80      	pop	{r7}
 8008340:	4770      	bx	lr

08008342 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008342:	b480      	push	{r7}
 8008344:	b085      	sub	sp, #20
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800835e:	69db      	ldr	r3, [r3, #28]
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	4013      	ands	r3, r2
 8008364:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	b29b      	uxth	r3, r3
}
 800836a:	4618      	mov	r0, r3
 800836c:	3714      	adds	r7, #20
 800836e:	46bd      	mov	sp, r7
 8008370:	bc80      	pop	{r7}
 8008372:	4770      	bx	lr

08008374 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008384:	78fb      	ldrb	r3, [r7, #3]
 8008386:	015a      	lsls	r2, r3, #5
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	4413      	add	r3, r2
 800838c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800839a:	695b      	ldr	r3, [r3, #20]
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	4013      	ands	r3, r2
 80083a0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80083a2:	68bb      	ldr	r3, [r7, #8]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3714      	adds	r7, #20
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bc80      	pop	{r7}
 80083ac:	4770      	bx	lr

080083ae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b087      	sub	sp, #28
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	460b      	mov	r3, r1
 80083b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083d0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80083d2:	78fb      	ldrb	r3, [r7, #3]
 80083d4:	f003 030f 	and.w	r3, r3, #15
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	fa22 f303 	lsr.w	r3, r2, r3
 80083de:	01db      	lsls	r3, r3, #7
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80083e8:	78fb      	ldrb	r3, [r7, #3]
 80083ea:	015a      	lsls	r2, r3, #5
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	4413      	add	r3, r2
 80083f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	4013      	ands	r3, r2
 80083fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80083fc:	68bb      	ldr	r3, [r7, #8]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	371c      	adds	r7, #28
 8008402:	46bd      	mov	sp, r7
 8008404:	bc80      	pop	{r7}
 8008406:	4770      	bx	lr

08008408 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	695b      	ldr	r3, [r3, #20]
 8008414:	f003 0301 	and.w	r3, r3, #1
}
 8008418:	4618      	mov	r0, r3
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	bc80      	pop	{r7}
 8008420:	4770      	bx	lr

08008422 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008422:	b480      	push	{r7}
 8008424:	b085      	sub	sp, #20
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800843c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008440:	f023 0307 	bic.w	r3, r3, #7
 8008444:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008458:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3714      	adds	r7, #20
 8008460:	46bd      	mov	sp, r7
 8008462:	bc80      	pop	{r7}
 8008464:	4770      	bx	lr
	...

08008468 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008468:	b480      	push	{r7}
 800846a:	b087      	sub	sp, #28
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	460b      	mov	r3, r1
 8008472:	607a      	str	r2, [r7, #4]
 8008474:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	333c      	adds	r3, #60	@ 0x3c
 800847e:	3304      	adds	r3, #4
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	4a25      	ldr	r2, [pc, #148]	@ (800851c <USB_EP0_OutStart+0xb4>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d90a      	bls.n	80084a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008498:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800849c:	d101      	bne.n	80084a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	e037      	b.n	8008512 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084a8:	461a      	mov	r2, r3
 80084aa:	2300      	movs	r3, #0
 80084ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80084c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	697a      	ldr	r2, [r7, #20]
 80084cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084d0:	f043 0318 	orr.w	r3, r3, #24
 80084d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	697a      	ldr	r2, [r7, #20]
 80084e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084e4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80084e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80084ea:	7afb      	ldrb	r3, [r7, #11]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d10f      	bne.n	8008510 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084f6:	461a      	mov	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800850a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800850e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	371c      	adds	r7, #28
 8008516:	46bd      	mov	sp, r7
 8008518:	bc80      	pop	{r7}
 800851a:	4770      	bx	lr
 800851c:	4f54300a 	.word	0x4f54300a

08008520 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008528:	2300      	movs	r3, #0
 800852a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	3301      	adds	r3, #1
 8008530:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008538:	d901      	bls.n	800853e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e01b      	b.n	8008576 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	2b00      	cmp	r3, #0
 8008544:	daf2      	bge.n	800852c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008546:	2300      	movs	r3, #0
 8008548:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	f043 0201 	orr.w	r2, r3, #1
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	3301      	adds	r3, #1
 800855a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008562:	d901      	bls.n	8008568 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e006      	b.n	8008576 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	f003 0301 	and.w	r3, r3, #1
 8008570:	2b01      	cmp	r3, #1
 8008572:	d0f0      	beq.n	8008556 <USB_CoreReset+0x36>

  return HAL_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3714      	adds	r7, #20
 800857a:	46bd      	mov	sp, r7
 800857c:	bc80      	pop	{r7}
 800857e:	4770      	bx	lr

08008580 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	460b      	mov	r3, r1
 800858a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800858c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008590:	f002 fc80 	bl	800ae94 <USBD_static_malloc>
 8008594:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d109      	bne.n	80085b0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	32b0      	adds	r2, #176	@ 0xb0
 80085a6:	2100      	movs	r1, #0
 80085a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80085ac:	2302      	movs	r3, #2
 80085ae:	e0d4      	b.n	800875a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80085b0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80085b4:	2100      	movs	r1, #0
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f003 fa2b 	bl	800ba12 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	32b0      	adds	r2, #176	@ 0xb0
 80085c6:	68f9      	ldr	r1, [r7, #12]
 80085c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	32b0      	adds	r2, #176	@ 0xb0
 80085d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	7c1b      	ldrb	r3, [r3, #16]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d138      	bne.n	800865a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80085e8:	4b5e      	ldr	r3, [pc, #376]	@ (8008764 <USBD_CDC_Init+0x1e4>)
 80085ea:	7819      	ldrb	r1, [r3, #0]
 80085ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80085f0:	2202      	movs	r2, #2
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f002 fb2b 	bl	800ac4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80085f8:	4b5a      	ldr	r3, [pc, #360]	@ (8008764 <USBD_CDC_Init+0x1e4>)
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	f003 020f 	and.w	r2, r3, #15
 8008600:	6879      	ldr	r1, [r7, #4]
 8008602:	4613      	mov	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4413      	add	r3, r2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	440b      	add	r3, r1
 800860c:	3324      	adds	r3, #36	@ 0x24
 800860e:	2201      	movs	r2, #1
 8008610:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008612:	4b55      	ldr	r3, [pc, #340]	@ (8008768 <USBD_CDC_Init+0x1e8>)
 8008614:	7819      	ldrb	r1, [r3, #0]
 8008616:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800861a:	2202      	movs	r2, #2
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f002 fb16 	bl	800ac4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008622:	4b51      	ldr	r3, [pc, #324]	@ (8008768 <USBD_CDC_Init+0x1e8>)
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	f003 020f 	and.w	r2, r3, #15
 800862a:	6879      	ldr	r1, [r7, #4]
 800862c:	4613      	mov	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4413      	add	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	440b      	add	r3, r1
 8008636:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800863a:	2201      	movs	r2, #1
 800863c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800863e:	4b4b      	ldr	r3, [pc, #300]	@ (800876c <USBD_CDC_Init+0x1ec>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	f003 020f 	and.w	r2, r3, #15
 8008646:	6879      	ldr	r1, [r7, #4]
 8008648:	4613      	mov	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	440b      	add	r3, r1
 8008652:	3326      	adds	r3, #38	@ 0x26
 8008654:	2210      	movs	r2, #16
 8008656:	801a      	strh	r2, [r3, #0]
 8008658:	e035      	b.n	80086c6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800865a:	4b42      	ldr	r3, [pc, #264]	@ (8008764 <USBD_CDC_Init+0x1e4>)
 800865c:	7819      	ldrb	r1, [r3, #0]
 800865e:	2340      	movs	r3, #64	@ 0x40
 8008660:	2202      	movs	r2, #2
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f002 faf3 	bl	800ac4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008668:	4b3e      	ldr	r3, [pc, #248]	@ (8008764 <USBD_CDC_Init+0x1e4>)
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	f003 020f 	and.w	r2, r3, #15
 8008670:	6879      	ldr	r1, [r7, #4]
 8008672:	4613      	mov	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	440b      	add	r3, r1
 800867c:	3324      	adds	r3, #36	@ 0x24
 800867e:	2201      	movs	r2, #1
 8008680:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008682:	4b39      	ldr	r3, [pc, #228]	@ (8008768 <USBD_CDC_Init+0x1e8>)
 8008684:	7819      	ldrb	r1, [r3, #0]
 8008686:	2340      	movs	r3, #64	@ 0x40
 8008688:	2202      	movs	r2, #2
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f002 fadf 	bl	800ac4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008690:	4b35      	ldr	r3, [pc, #212]	@ (8008768 <USBD_CDC_Init+0x1e8>)
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	f003 020f 	and.w	r2, r3, #15
 8008698:	6879      	ldr	r1, [r7, #4]
 800869a:	4613      	mov	r3, r2
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	4413      	add	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	440b      	add	r3, r1
 80086a4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80086a8:	2201      	movs	r2, #1
 80086aa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80086ac:	4b2f      	ldr	r3, [pc, #188]	@ (800876c <USBD_CDC_Init+0x1ec>)
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	f003 020f 	and.w	r2, r3, #15
 80086b4:	6879      	ldr	r1, [r7, #4]
 80086b6:	4613      	mov	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	440b      	add	r3, r1
 80086c0:	3326      	adds	r3, #38	@ 0x26
 80086c2:	2210      	movs	r2, #16
 80086c4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80086c6:	4b29      	ldr	r3, [pc, #164]	@ (800876c <USBD_CDC_Init+0x1ec>)
 80086c8:	7819      	ldrb	r1, [r3, #0]
 80086ca:	2308      	movs	r3, #8
 80086cc:	2203      	movs	r2, #3
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f002 fabd 	bl	800ac4e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80086d4:	4b25      	ldr	r3, [pc, #148]	@ (800876c <USBD_CDC_Init+0x1ec>)
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	f003 020f 	and.w	r2, r3, #15
 80086dc:	6879      	ldr	r1, [r7, #4]
 80086de:	4613      	mov	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	440b      	add	r3, r1
 80086e8:	3324      	adds	r3, #36	@ 0x24
 80086ea:	2201      	movs	r2, #1
 80086ec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	33b0      	adds	r3, #176	@ 0xb0
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008720:	2b00      	cmp	r3, #0
 8008722:	d101      	bne.n	8008728 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008724:	2302      	movs	r3, #2
 8008726:	e018      	b.n	800875a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	7c1b      	ldrb	r3, [r3, #16]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10a      	bne.n	8008746 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008730:	4b0d      	ldr	r3, [pc, #52]	@ (8008768 <USBD_CDC_Init+0x1e8>)
 8008732:	7819      	ldrb	r1, [r3, #0]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800873a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f002 fb73 	bl	800ae2a <USBD_LL_PrepareReceive>
 8008744:	e008      	b.n	8008758 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008746:	4b08      	ldr	r3, [pc, #32]	@ (8008768 <USBD_CDC_Init+0x1e8>)
 8008748:	7819      	ldrb	r1, [r3, #0]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008750:	2340      	movs	r3, #64	@ 0x40
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f002 fb69 	bl	800ae2a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	20000093 	.word	0x20000093
 8008768:	20000094 	.word	0x20000094
 800876c:	20000095 	.word	0x20000095

08008770 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	460b      	mov	r3, r1
 800877a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800877c:	4b3a      	ldr	r3, [pc, #232]	@ (8008868 <USBD_CDC_DeInit+0xf8>)
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	4619      	mov	r1, r3
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f002 fa89 	bl	800ac9a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008788:	4b37      	ldr	r3, [pc, #220]	@ (8008868 <USBD_CDC_DeInit+0xf8>)
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	f003 020f 	and.w	r2, r3, #15
 8008790:	6879      	ldr	r1, [r7, #4]
 8008792:	4613      	mov	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4413      	add	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	440b      	add	r3, r1
 800879c:	3324      	adds	r3, #36	@ 0x24
 800879e:	2200      	movs	r2, #0
 80087a0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80087a2:	4b32      	ldr	r3, [pc, #200]	@ (800886c <USBD_CDC_DeInit+0xfc>)
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	4619      	mov	r1, r3
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f002 fa76 	bl	800ac9a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80087ae:	4b2f      	ldr	r3, [pc, #188]	@ (800886c <USBD_CDC_DeInit+0xfc>)
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	f003 020f 	and.w	r2, r3, #15
 80087b6:	6879      	ldr	r1, [r7, #4]
 80087b8:	4613      	mov	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4413      	add	r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	440b      	add	r3, r1
 80087c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80087c6:	2200      	movs	r2, #0
 80087c8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80087ca:	4b29      	ldr	r3, [pc, #164]	@ (8008870 <USBD_CDC_DeInit+0x100>)
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	4619      	mov	r1, r3
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f002 fa62 	bl	800ac9a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80087d6:	4b26      	ldr	r3, [pc, #152]	@ (8008870 <USBD_CDC_DeInit+0x100>)
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	f003 020f 	and.w	r2, r3, #15
 80087de:	6879      	ldr	r1, [r7, #4]
 80087e0:	4613      	mov	r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	4413      	add	r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	440b      	add	r3, r1
 80087ea:	3324      	adds	r3, #36	@ 0x24
 80087ec:	2200      	movs	r2, #0
 80087ee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80087f0:	4b1f      	ldr	r3, [pc, #124]	@ (8008870 <USBD_CDC_DeInit+0x100>)
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	f003 020f 	and.w	r2, r3, #15
 80087f8:	6879      	ldr	r1, [r7, #4]
 80087fa:	4613      	mov	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	440b      	add	r3, r1
 8008804:	3326      	adds	r3, #38	@ 0x26
 8008806:	2200      	movs	r2, #0
 8008808:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	32b0      	adds	r2, #176	@ 0xb0
 8008814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d01f      	beq.n	800885c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	33b0      	adds	r3, #176	@ 0xb0
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	4413      	add	r3, r2
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	32b0      	adds	r2, #176	@ 0xb0
 800883a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800883e:	4618      	mov	r0, r3
 8008840:	f002 fb34 	bl	800aeac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	32b0      	adds	r2, #176	@ 0xb0
 800884e:	2100      	movs	r1, #0
 8008850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	20000093 	.word	0x20000093
 800886c:	20000094 	.word	0x20000094
 8008870:	20000095 	.word	0x20000095

08008874 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	32b0      	adds	r2, #176	@ 0xb0
 8008888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800888c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800888e:	2300      	movs	r3, #0
 8008890:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008892:	2300      	movs	r3, #0
 8008894:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d101      	bne.n	80088a4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e0bf      	b.n	8008a24 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d050      	beq.n	8008952 <USBD_CDC_Setup+0xde>
 80088b0:	2b20      	cmp	r3, #32
 80088b2:	f040 80af 	bne.w	8008a14 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	88db      	ldrh	r3, [r3, #6]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d03a      	beq.n	8008934 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	b25b      	sxtb	r3, r3
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	da1b      	bge.n	8008900 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	33b0      	adds	r3, #176	@ 0xb0
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4413      	add	r3, r2
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80088de:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80088e0:	683a      	ldr	r2, [r7, #0]
 80088e2:	88d2      	ldrh	r2, [r2, #6]
 80088e4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	88db      	ldrh	r3, [r3, #6]
 80088ea:	2b07      	cmp	r3, #7
 80088ec:	bf28      	it	cs
 80088ee:	2307      	movcs	r3, #7
 80088f0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	89fa      	ldrh	r2, [r7, #14]
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f001 fd78 	bl	800a3ee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80088fe:	e090      	b.n	8008a22 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	785a      	ldrb	r2, [r3, #1]
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	88db      	ldrh	r3, [r3, #6]
 800890e:	2b3f      	cmp	r3, #63	@ 0x3f
 8008910:	d803      	bhi.n	800891a <USBD_CDC_Setup+0xa6>
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	88db      	ldrh	r3, [r3, #6]
 8008916:	b2da      	uxtb	r2, r3
 8008918:	e000      	b.n	800891c <USBD_CDC_Setup+0xa8>
 800891a:	2240      	movs	r2, #64	@ 0x40
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008922:	6939      	ldr	r1, [r7, #16]
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800892a:	461a      	mov	r2, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f001 fd8a 	bl	800a446 <USBD_CtlPrepareRx>
      break;
 8008932:	e076      	b.n	8008a22 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	33b0      	adds	r3, #176	@ 0xb0
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	683a      	ldr	r2, [r7, #0]
 8008948:	7850      	ldrb	r0, [r2, #1]
 800894a:	2200      	movs	r2, #0
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	4798      	blx	r3
      break;
 8008950:	e067      	b.n	8008a22 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	785b      	ldrb	r3, [r3, #1]
 8008956:	2b0b      	cmp	r3, #11
 8008958:	d851      	bhi.n	80089fe <USBD_CDC_Setup+0x18a>
 800895a:	a201      	add	r2, pc, #4	@ (adr r2, 8008960 <USBD_CDC_Setup+0xec>)
 800895c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008960:	08008991 	.word	0x08008991
 8008964:	08008a0d 	.word	0x08008a0d
 8008968:	080089ff 	.word	0x080089ff
 800896c:	080089ff 	.word	0x080089ff
 8008970:	080089ff 	.word	0x080089ff
 8008974:	080089ff 	.word	0x080089ff
 8008978:	080089ff 	.word	0x080089ff
 800897c:	080089ff 	.word	0x080089ff
 8008980:	080089ff 	.word	0x080089ff
 8008984:	080089ff 	.word	0x080089ff
 8008988:	080089bb 	.word	0x080089bb
 800898c:	080089e5 	.word	0x080089e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b03      	cmp	r3, #3
 800899a:	d107      	bne.n	80089ac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800899c:	f107 030a 	add.w	r3, r7, #10
 80089a0:	2202      	movs	r2, #2
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f001 fd22 	bl	800a3ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089aa:	e032      	b.n	8008a12 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f001 fcad 	bl	800a30e <USBD_CtlError>
            ret = USBD_FAIL;
 80089b4:	2303      	movs	r3, #3
 80089b6:	75fb      	strb	r3, [r7, #23]
          break;
 80089b8:	e02b      	b.n	8008a12 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b03      	cmp	r3, #3
 80089c4:	d107      	bne.n	80089d6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80089c6:	f107 030d 	add.w	r3, r7, #13
 80089ca:	2201      	movs	r2, #1
 80089cc:	4619      	mov	r1, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f001 fd0d 	bl	800a3ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089d4:	e01d      	b.n	8008a12 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f001 fc98 	bl	800a30e <USBD_CtlError>
            ret = USBD_FAIL;
 80089de:	2303      	movs	r3, #3
 80089e0:	75fb      	strb	r3, [r7, #23]
          break;
 80089e2:	e016      	b.n	8008a12 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	2b03      	cmp	r3, #3
 80089ee:	d00f      	beq.n	8008a10 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f001 fc8b 	bl	800a30e <USBD_CtlError>
            ret = USBD_FAIL;
 80089f8:	2303      	movs	r3, #3
 80089fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80089fc:	e008      	b.n	8008a10 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f001 fc84 	bl	800a30e <USBD_CtlError>
          ret = USBD_FAIL;
 8008a06:	2303      	movs	r3, #3
 8008a08:	75fb      	strb	r3, [r7, #23]
          break;
 8008a0a:	e002      	b.n	8008a12 <USBD_CDC_Setup+0x19e>
          break;
 8008a0c:	bf00      	nop
 8008a0e:	e008      	b.n	8008a22 <USBD_CDC_Setup+0x1ae>
          break;
 8008a10:	bf00      	nop
      }
      break;
 8008a12:	e006      	b.n	8008a22 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008a14:	6839      	ldr	r1, [r7, #0]
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f001 fc79 	bl	800a30e <USBD_CtlError>
      ret = USBD_FAIL;
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8008a20:	bf00      	nop
  }

  return (uint8_t)ret;
 8008a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3718      	adds	r7, #24
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	460b      	mov	r3, r1
 8008a36:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	32b0      	adds	r2, #176	@ 0xb0
 8008a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d101      	bne.n	8008a56 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008a52:	2303      	movs	r3, #3
 8008a54:	e065      	b.n	8008b22 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	32b0      	adds	r2, #176	@ 0xb0
 8008a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a64:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008a66:	78fb      	ldrb	r3, [r7, #3]
 8008a68:	f003 020f 	and.w	r2, r3, #15
 8008a6c:	6879      	ldr	r1, [r7, #4]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4413      	add	r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	440b      	add	r3, r1
 8008a78:	3318      	adds	r3, #24
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d02f      	beq.n	8008ae0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008a80:	78fb      	ldrb	r3, [r7, #3]
 8008a82:	f003 020f 	and.w	r2, r3, #15
 8008a86:	6879      	ldr	r1, [r7, #4]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	440b      	add	r3, r1
 8008a92:	3318      	adds	r3, #24
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	78fb      	ldrb	r3, [r7, #3]
 8008a98:	f003 010f 	and.w	r1, r3, #15
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	00db      	lsls	r3, r3, #3
 8008aa2:	440b      	add	r3, r1
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4403      	add	r3, r0
 8008aa8:	331c      	adds	r3, #28
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	fbb2 f1f3 	udiv	r1, r2, r3
 8008ab0:	fb01 f303 	mul.w	r3, r1, r3
 8008ab4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d112      	bne.n	8008ae0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008aba:	78fb      	ldrb	r3, [r7, #3]
 8008abc:	f003 020f 	and.w	r2, r3, #15
 8008ac0:	6879      	ldr	r1, [r7, #4]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	440b      	add	r3, r1
 8008acc:	3318      	adds	r3, #24
 8008ace:	2200      	movs	r2, #0
 8008ad0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008ad2:	78f9      	ldrb	r1, [r7, #3]
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f002 f985 	bl	800ade8 <USBD_LL_Transmit>
 8008ade:	e01f      	b.n	8008b20 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	33b0      	adds	r3, #176	@ 0xb0
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	4413      	add	r3, r2
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d010      	beq.n	8008b20 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	33b0      	adds	r3, #176	@ 0xb0
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008b1c:	78fa      	ldrb	r2, [r7, #3]
 8008b1e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b084      	sub	sp, #16
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	460b      	mov	r3, r1
 8008b34:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	32b0      	adds	r2, #176	@ 0xb0
 8008b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b44:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	32b0      	adds	r2, #176	@ 0xb0
 8008b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d101      	bne.n	8008b5c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e01a      	b.n	8008b92 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008b5c:	78fb      	ldrb	r3, [r7, #3]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f002 f983 	bl	800ae6c <USBD_LL_GetRxDataSize>
 8008b66:	4602      	mov	r2, r0
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	33b0      	adds	r3, #176	@ 0xb0
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b084      	sub	sp, #16
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	32b0      	adds	r2, #176	@ 0xb0
 8008bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d101      	bne.n	8008bbc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	e024      	b.n	8008c06 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	33b0      	adds	r3, #176	@ 0xb0
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d019      	beq.n	8008c04 <USBD_CDC_EP0_RxReady+0x6a>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008bd6:	2bff      	cmp	r3, #255	@ 0xff
 8008bd8:	d014      	beq.n	8008c04 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	33b0      	adds	r3, #176	@ 0xb0
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4413      	add	r3, r2
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008bf2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008bfa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	22ff      	movs	r2, #255	@ 0xff
 8008c00:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
	...

08008c10 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c18:	2182      	movs	r1, #130	@ 0x82
 8008c1a:	4818      	ldr	r0, [pc, #96]	@ (8008c7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c1c:	f000 fd44 	bl	80096a8 <USBD_GetEpDesc>
 8008c20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c22:	2101      	movs	r1, #1
 8008c24:	4815      	ldr	r0, [pc, #84]	@ (8008c7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c26:	f000 fd3f 	bl	80096a8 <USBD_GetEpDesc>
 8008c2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c2c:	2181      	movs	r1, #129	@ 0x81
 8008c2e:	4813      	ldr	r0, [pc, #76]	@ (8008c7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c30:	f000 fd3a 	bl	80096a8 <USBD_GetEpDesc>
 8008c34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d002      	beq.n	8008c42 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	2210      	movs	r2, #16
 8008c40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d006      	beq.n	8008c56 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c50:	711a      	strb	r2, [r3, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d006      	beq.n	8008c6a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c64:	711a      	strb	r2, [r3, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2243      	movs	r2, #67	@ 0x43
 8008c6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008c70:	4b02      	ldr	r3, [pc, #8]	@ (8008c7c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3718      	adds	r7, #24
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20000050 	.word	0x20000050

08008c80 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c88:	2182      	movs	r1, #130	@ 0x82
 8008c8a:	4818      	ldr	r0, [pc, #96]	@ (8008cec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c8c:	f000 fd0c 	bl	80096a8 <USBD_GetEpDesc>
 8008c90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c92:	2101      	movs	r1, #1
 8008c94:	4815      	ldr	r0, [pc, #84]	@ (8008cec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c96:	f000 fd07 	bl	80096a8 <USBD_GetEpDesc>
 8008c9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c9c:	2181      	movs	r1, #129	@ 0x81
 8008c9e:	4813      	ldr	r0, [pc, #76]	@ (8008cec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ca0:	f000 fd02 	bl	80096a8 <USBD_GetEpDesc>
 8008ca4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d002      	beq.n	8008cb2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	2210      	movs	r2, #16
 8008cb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d006      	beq.n	8008cc6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	711a      	strb	r2, [r3, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f042 0202 	orr.w	r2, r2, #2
 8008cc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d006      	beq.n	8008cda <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	711a      	strb	r2, [r3, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f042 0202 	orr.w	r2, r2, #2
 8008cd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2243      	movs	r2, #67	@ 0x43
 8008cde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ce0:	4b02      	ldr	r3, [pc, #8]	@ (8008cec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3718      	adds	r7, #24
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	20000050 	.word	0x20000050

08008cf0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008cf8:	2182      	movs	r1, #130	@ 0x82
 8008cfa:	4818      	ldr	r0, [pc, #96]	@ (8008d5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008cfc:	f000 fcd4 	bl	80096a8 <USBD_GetEpDesc>
 8008d00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d02:	2101      	movs	r1, #1
 8008d04:	4815      	ldr	r0, [pc, #84]	@ (8008d5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d06:	f000 fccf 	bl	80096a8 <USBD_GetEpDesc>
 8008d0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d0c:	2181      	movs	r1, #129	@ 0x81
 8008d0e:	4813      	ldr	r0, [pc, #76]	@ (8008d5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d10:	f000 fcca 	bl	80096a8 <USBD_GetEpDesc>
 8008d14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	2210      	movs	r2, #16
 8008d20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d006      	beq.n	8008d36 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d30:	711a      	strb	r2, [r3, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d006      	beq.n	8008d4a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d44:	711a      	strb	r2, [r3, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2243      	movs	r2, #67	@ 0x43
 8008d4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008d50:	4b02      	ldr	r3, [pc, #8]	@ (8008d5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3718      	adds	r7, #24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	20000050 	.word	0x20000050

08008d60 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	220a      	movs	r2, #10
 8008d6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008d6e:	4b03      	ldr	r3, [pc, #12]	@ (8008d7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bc80      	pop	{r7}
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	2000000c 	.word	0x2000000c

08008d80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d101      	bne.n	8008d94 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e009      	b.n	8008da8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	33b0      	adds	r3, #176	@ 0xb0
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	4413      	add	r3, r2
 8008da2:	683a      	ldr	r2, [r7, #0]
 8008da4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bc80      	pop	{r7}
 8008db0:	4770      	bx	lr

08008db2 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008db2:	b480      	push	{r7}
 8008db4:	b087      	sub	sp, #28
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	60f8      	str	r0, [r7, #12]
 8008dba:	60b9      	str	r1, [r7, #8]
 8008dbc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	32b0      	adds	r2, #176	@ 0xb0
 8008dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dcc:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d101      	bne.n	8008dd8 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008dd4:	2303      	movs	r3, #3
 8008dd6:	e008      	b.n	8008dea <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	68ba      	ldr	r2, [r7, #8]
 8008ddc:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	371c      	adds	r7, #28
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bc80      	pop	{r7}
 8008df2:	4770      	bx	lr

08008df4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	32b0      	adds	r2, #176	@ 0xb0
 8008e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d101      	bne.n	8008e18 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008e14:	2303      	movs	r3, #3
 8008e16:	e004      	b.n	8008e22 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	683a      	ldr	r2, [r7, #0]
 8008e1c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bc80      	pop	{r7}
 8008e2a:	4770      	bx	lr

08008e2c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	32b0      	adds	r2, #176	@ 0xb0
 8008e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e42:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008e44:	2301      	movs	r3, #1
 8008e46:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008e4e:	2303      	movs	r3, #3
 8008e50:	e025      	b.n	8008e9e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d11f      	bne.n	8008e9c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008e64:	4b10      	ldr	r3, [pc, #64]	@ (8008ea8 <USBD_CDC_TransmitPacket+0x7c>)
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	f003 020f 	and.w	r2, r3, #15
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	4613      	mov	r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	4413      	add	r3, r2
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	4403      	add	r3, r0
 8008e7e:	3318      	adds	r3, #24
 8008e80:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008e82:	4b09      	ldr	r3, [pc, #36]	@ (8008ea8 <USBD_CDC_TransmitPacket+0x7c>)
 8008e84:	7819      	ldrb	r1, [r3, #0]
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f001 ffa8 	bl	800ade8 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	20000093 	.word	0x20000093

08008eac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	32b0      	adds	r2, #176	@ 0xb0
 8008ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	32b0      	adds	r2, #176	@ 0xb0
 8008ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e018      	b.n	8008f0c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	7c1b      	ldrb	r3, [r3, #16]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d10a      	bne.n	8008ef8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8008f14 <USBD_CDC_ReceivePacket+0x68>)
 8008ee4:	7819      	ldrb	r1, [r3, #0]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008eec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f001 ff9a 	bl	800ae2a <USBD_LL_PrepareReceive>
 8008ef6:	e008      	b.n	8008f0a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ef8:	4b06      	ldr	r3, [pc, #24]	@ (8008f14 <USBD_CDC_ReceivePacket+0x68>)
 8008efa:	7819      	ldrb	r1, [r3, #0]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f02:	2340      	movs	r3, #64	@ 0x40
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f001 ff90 	bl	800ae2a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	20000094 	.word	0x20000094

08008f18 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	4613      	mov	r3, r2
 8008f24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d101      	bne.n	8008f30 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e01f      	b.n	8008f70 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d003      	beq.n	8008f56 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	79fa      	ldrb	r2, [r7, #7]
 8008f62:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f001 fe0b 	bl	800ab80 <USBD_LL_Init>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3718      	adds	r7, #24
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f82:	2300      	movs	r3, #0
 8008f84:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d101      	bne.n	8008f90 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e025      	b.n	8008fdc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	32ae      	adds	r2, #174	@ 0xae
 8008fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00f      	beq.n	8008fcc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	32ae      	adds	r2, #174	@ 0xae
 8008fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fbc:	f107 020e 	add.w	r2, r7, #14
 8008fc0:	4610      	mov	r0, r2
 8008fc2:	4798      	blx	r3
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008fd2:	1c5a      	adds	r2, r3, #1
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f001 fe13 	bl	800ac18 <USBD_LL_Start>
 8008ff2:	4603      	mov	r3, r0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009004:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009006:	4618      	mov	r0, r3
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	bc80      	pop	{r7}
 800900e:	4770      	bx	lr

08009010 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	460b      	mov	r3, r1
 800901a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800901c:	2300      	movs	r3, #0
 800901e:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009026:	2b00      	cmp	r3, #0
 8009028:	d009      	beq.n	800903e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	78fa      	ldrb	r2, [r7, #3]
 8009034:	4611      	mov	r1, r2
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	4798      	blx	r3
 800903a:	4603      	mov	r3, r0
 800903c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800903e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	460b      	mov	r3, r1
 8009052:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	78fa      	ldrb	r2, [r7, #3]
 8009062:	4611      	mov	r1, r2
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	4798      	blx	r3
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800906e:	2303      	movs	r3, #3
 8009070:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009072:	7bfb      	ldrb	r3, [r7, #15]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800908c:	6839      	ldr	r1, [r7, #0]
 800908e:	4618      	mov	r0, r3
 8009090:	f001 f903 	bl	800a29a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80090a2:	461a      	mov	r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80090b0:	f003 031f 	and.w	r3, r3, #31
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d01a      	beq.n	80090ee <USBD_LL_SetupStage+0x72>
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	d822      	bhi.n	8009102 <USBD_LL_SetupStage+0x86>
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d002      	beq.n	80090c6 <USBD_LL_SetupStage+0x4a>
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d00a      	beq.n	80090da <USBD_LL_SetupStage+0x5e>
 80090c4:	e01d      	b.n	8009102 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80090cc:	4619      	mov	r1, r3
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fb5a 	bl	8009788 <USBD_StdDevReq>
 80090d4:	4603      	mov	r3, r0
 80090d6:	73fb      	strb	r3, [r7, #15]
      break;
 80090d8:	e020      	b.n	800911c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80090e0:	4619      	mov	r1, r3
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 fbc2 	bl	800986c <USBD_StdItfReq>
 80090e8:	4603      	mov	r3, r0
 80090ea:	73fb      	strb	r3, [r7, #15]
      break;
 80090ec:	e016      	b.n	800911c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80090f4:	4619      	mov	r1, r3
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 fc24 	bl	8009944 <USBD_StdEPReq>
 80090fc:	4603      	mov	r3, r0
 80090fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009100:	e00c      	b.n	800911c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009108:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800910c:	b2db      	uxtb	r3, r3
 800910e:	4619      	mov	r1, r3
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f001 fde1 	bl	800acd8 <USBD_LL_StallEP>
 8009116:	4603      	mov	r3, r0
 8009118:	73fb      	strb	r3, [r7, #15]
      break;
 800911a:	bf00      	nop
  }

  return ret;
 800911c:	7bfb      	ldrb	r3, [r7, #15]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b086      	sub	sp, #24
 800912a:	af00      	add	r7, sp, #0
 800912c:	60f8      	str	r0, [r7, #12]
 800912e:	460b      	mov	r3, r1
 8009130:	607a      	str	r2, [r7, #4]
 8009132:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009138:	7afb      	ldrb	r3, [r7, #11]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d16e      	bne.n	800921c <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009144:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800914c:	2b03      	cmp	r3, #3
 800914e:	f040 8098 	bne.w	8009282 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	689a      	ldr	r2, [r3, #8]
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	429a      	cmp	r2, r3
 800915c:	d913      	bls.n	8009186 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	689a      	ldr	r2, [r3, #8]
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	1ad2      	subs	r2, r2, r3
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	68da      	ldr	r2, [r3, #12]
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	4293      	cmp	r3, r2
 8009176:	bf28      	it	cs
 8009178:	4613      	movcs	r3, r2
 800917a:	461a      	mov	r2, r3
 800917c:	6879      	ldr	r1, [r7, #4]
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f001 f97e 	bl	800a480 <USBD_CtlContinueRx>
 8009184:	e07d      	b.n	8009282 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800918c:	f003 031f 	and.w	r3, r3, #31
 8009190:	2b02      	cmp	r3, #2
 8009192:	d014      	beq.n	80091be <USBD_LL_DataOutStage+0x98>
 8009194:	2b02      	cmp	r3, #2
 8009196:	d81d      	bhi.n	80091d4 <USBD_LL_DataOutStage+0xae>
 8009198:	2b00      	cmp	r3, #0
 800919a:	d002      	beq.n	80091a2 <USBD_LL_DataOutStage+0x7c>
 800919c:	2b01      	cmp	r3, #1
 800919e:	d003      	beq.n	80091a8 <USBD_LL_DataOutStage+0x82>
 80091a0:	e018      	b.n	80091d4 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80091a2:	2300      	movs	r3, #0
 80091a4:	75bb      	strb	r3, [r7, #22]
            break;
 80091a6:	e018      	b.n	80091da <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	4619      	mov	r1, r3
 80091b2:	68f8      	ldr	r0, [r7, #12]
 80091b4:	f000 fa60 	bl	8009678 <USBD_CoreFindIF>
 80091b8:	4603      	mov	r3, r0
 80091ba:	75bb      	strb	r3, [r7, #22]
            break;
 80091bc:	e00d      	b.n	80091da <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	4619      	mov	r1, r3
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f000 fa61 	bl	8009690 <USBD_CoreFindEP>
 80091ce:	4603      	mov	r3, r0
 80091d0:	75bb      	strb	r3, [r7, #22]
            break;
 80091d2:	e002      	b.n	80091da <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80091d4:	2300      	movs	r3, #0
 80091d6:	75bb      	strb	r3, [r7, #22]
            break;
 80091d8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80091da:	7dbb      	ldrb	r3, [r7, #22]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d119      	bne.n	8009214 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	2b03      	cmp	r3, #3
 80091ea:	d113      	bne.n	8009214 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80091ec:	7dba      	ldrb	r2, [r7, #22]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	32ae      	adds	r2, #174	@ 0xae
 80091f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00b      	beq.n	8009214 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80091fc:	7dba      	ldrb	r2, [r7, #22]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009204:	7dba      	ldrb	r2, [r7, #22]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	32ae      	adds	r2, #174	@ 0xae
 800920a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f001 f944 	bl	800a4a2 <USBD_CtlSendStatus>
 800921a:	e032      	b.n	8009282 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800921c:	7afb      	ldrb	r3, [r7, #11]
 800921e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009222:	b2db      	uxtb	r3, r3
 8009224:	4619      	mov	r1, r3
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f000 fa32 	bl	8009690 <USBD_CoreFindEP>
 800922c:	4603      	mov	r3, r0
 800922e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009230:	7dbb      	ldrb	r3, [r7, #22]
 8009232:	2bff      	cmp	r3, #255	@ 0xff
 8009234:	d025      	beq.n	8009282 <USBD_LL_DataOutStage+0x15c>
 8009236:	7dbb      	ldrb	r3, [r7, #22]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d122      	bne.n	8009282 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009242:	b2db      	uxtb	r3, r3
 8009244:	2b03      	cmp	r3, #3
 8009246:	d117      	bne.n	8009278 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009248:	7dba      	ldrb	r2, [r7, #22]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	32ae      	adds	r2, #174	@ 0xae
 800924e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009252:	699b      	ldr	r3, [r3, #24]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00f      	beq.n	8009278 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009258:	7dba      	ldrb	r2, [r7, #22]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009260:	7dba      	ldrb	r2, [r7, #22]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	32ae      	adds	r2, #174	@ 0xae
 8009266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800926a:	699b      	ldr	r3, [r3, #24]
 800926c:	7afa      	ldrb	r2, [r7, #11]
 800926e:	4611      	mov	r1, r2
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	4798      	blx	r3
 8009274:	4603      	mov	r3, r0
 8009276:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009278:	7dfb      	ldrb	r3, [r7, #23]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d001      	beq.n	8009282 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800927e:	7dfb      	ldrb	r3, [r7, #23]
 8009280:	e000      	b.n	8009284 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3718      	adds	r7, #24
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b086      	sub	sp, #24
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	460b      	mov	r3, r1
 8009296:	607a      	str	r2, [r7, #4]
 8009298:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800929a:	7afb      	ldrb	r3, [r7, #11]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d16f      	bne.n	8009380 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	3314      	adds	r3, #20
 80092a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d15a      	bne.n	8009366 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	689a      	ldr	r2, [r3, #8]
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d914      	bls.n	80092e6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	689a      	ldr	r2, [r3, #8]
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	1ad2      	subs	r2, r2, r3
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	461a      	mov	r2, r3
 80092d0:	6879      	ldr	r1, [r7, #4]
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	f001 f8a6 	bl	800a424 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092d8:	2300      	movs	r3, #0
 80092da:	2200      	movs	r2, #0
 80092dc:	2100      	movs	r1, #0
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f001 fda3 	bl	800ae2a <USBD_LL_PrepareReceive>
 80092e4:	e03f      	b.n	8009366 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	68da      	ldr	r2, [r3, #12]
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d11c      	bne.n	800932c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d316      	bcc.n	800932c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	685a      	ldr	r2, [r3, #4]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009308:	429a      	cmp	r2, r3
 800930a:	d20f      	bcs.n	800932c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800930c:	2200      	movs	r2, #0
 800930e:	2100      	movs	r1, #0
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f001 f887 	bl	800a424 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800931e:	2300      	movs	r3, #0
 8009320:	2200      	movs	r2, #0
 8009322:	2100      	movs	r1, #0
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f001 fd80 	bl	800ae2a <USBD_LL_PrepareReceive>
 800932a:	e01c      	b.n	8009366 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b03      	cmp	r3, #3
 8009336:	d10f      	bne.n	8009358 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d009      	beq.n	8009358 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2200      	movs	r2, #0
 8009348:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009358:	2180      	movs	r1, #128	@ 0x80
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f001 fcbc 	bl	800acd8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f001 f8b1 	bl	800a4c8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d03a      	beq.n	80093e6 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f7ff fe43 	bl	8008ffc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2200      	movs	r2, #0
 800937a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800937e:	e032      	b.n	80093e6 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009380:	7afb      	ldrb	r3, [r7, #11]
 8009382:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009386:	b2db      	uxtb	r3, r3
 8009388:	4619      	mov	r1, r3
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f000 f980 	bl	8009690 <USBD_CoreFindEP>
 8009390:	4603      	mov	r3, r0
 8009392:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009394:	7dfb      	ldrb	r3, [r7, #23]
 8009396:	2bff      	cmp	r3, #255	@ 0xff
 8009398:	d025      	beq.n	80093e6 <USBD_LL_DataInStage+0x15a>
 800939a:	7dfb      	ldrb	r3, [r7, #23]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d122      	bne.n	80093e6 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	2b03      	cmp	r3, #3
 80093aa:	d11c      	bne.n	80093e6 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80093ac:	7dfa      	ldrb	r2, [r7, #23]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	32ae      	adds	r2, #174	@ 0xae
 80093b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b6:	695b      	ldr	r3, [r3, #20]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d014      	beq.n	80093e6 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80093bc:	7dfa      	ldrb	r2, [r7, #23]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80093c4:	7dfa      	ldrb	r2, [r7, #23]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	32ae      	adds	r2, #174	@ 0xae
 80093ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ce:	695b      	ldr	r3, [r3, #20]
 80093d0:	7afa      	ldrb	r2, [r7, #11]
 80093d2:	4611      	mov	r1, r2
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	4798      	blx	r3
 80093d8:	4603      	mov	r3, r0
 80093da:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80093dc:	7dbb      	ldrb	r3, [r7, #22]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d001      	beq.n	80093e6 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80093e2:	7dbb      	ldrb	r3, [r7, #22]
 80093e4:	e000      	b.n	80093e8 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3718      	adds	r7, #24
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009428:	2b00      	cmp	r3, #0
 800942a:	d014      	beq.n	8009456 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00e      	beq.n	8009456 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	6852      	ldr	r2, [r2, #4]
 8009444:	b2d2      	uxtb	r2, r2
 8009446:	4611      	mov	r1, r2
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	4798      	blx	r3
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009452:	2303      	movs	r3, #3
 8009454:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009456:	2340      	movs	r3, #64	@ 0x40
 8009458:	2200      	movs	r2, #0
 800945a:	2100      	movs	r1, #0
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f001 fbf6 	bl	800ac4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2201      	movs	r2, #1
 8009466:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2240      	movs	r2, #64	@ 0x40
 800946e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009472:	2340      	movs	r3, #64	@ 0x40
 8009474:	2200      	movs	r2, #0
 8009476:	2180      	movs	r1, #128	@ 0x80
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f001 fbe8 	bl	800ac4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2201      	movs	r2, #1
 8009482:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2240      	movs	r2, #64	@ 0x40
 8009488:	621a      	str	r2, [r3, #32]

  return ret;
 800948a:	7bfb      	ldrb	r3, [r7, #15]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	460b      	mov	r3, r1
 800949e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	78fa      	ldrb	r2, [r7, #3]
 80094a4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bc80      	pop	{r7}
 80094b0:	4770      	bx	lr

080094b2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80094b2:	b480      	push	{r7}
 80094b4:	b083      	sub	sp, #12
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	2b04      	cmp	r3, #4
 80094c4:	d006      	beq.n	80094d4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2204      	movs	r2, #4
 80094d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	370c      	adds	r7, #12
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bc80      	pop	{r7}
 80094e6:	4770      	bx	lr

080094e8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	2b04      	cmp	r3, #4
 80094fa:	d106      	bne.n	800950a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009502:	b2da      	uxtb	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	bc80      	pop	{r7}
 8009514:	4770      	bx	lr

08009516 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b082      	sub	sp, #8
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009524:	b2db      	uxtb	r3, r3
 8009526:	2b03      	cmp	r3, #3
 8009528:	d110      	bne.n	800954c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00b      	beq.n	800954c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800953a:	69db      	ldr	r3, [r3, #28]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d005      	beq.n	800954c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009546:	69db      	ldr	r3, [r3, #28]
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800954c:	2300      	movs	r3, #0
}
 800954e:	4618      	mov	r0, r3
 8009550:	3708      	adds	r7, #8
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b082      	sub	sp, #8
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	460b      	mov	r3, r1
 8009560:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	32ae      	adds	r2, #174	@ 0xae
 800956c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d101      	bne.n	8009578 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009574:	2303      	movs	r3, #3
 8009576:	e01c      	b.n	80095b2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800957e:	b2db      	uxtb	r3, r3
 8009580:	2b03      	cmp	r3, #3
 8009582:	d115      	bne.n	80095b0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	32ae      	adds	r2, #174	@ 0xae
 800958e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009592:	6a1b      	ldr	r3, [r3, #32]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d00b      	beq.n	80095b0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	32ae      	adds	r2, #174	@ 0xae
 80095a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a6:	6a1b      	ldr	r3, [r3, #32]
 80095a8:	78fa      	ldrb	r2, [r7, #3]
 80095aa:	4611      	mov	r1, r2
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b082      	sub	sp, #8
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	460b      	mov	r3, r1
 80095c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	32ae      	adds	r2, #174	@ 0xae
 80095d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d101      	bne.n	80095dc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80095d8:	2303      	movs	r3, #3
 80095da:	e01c      	b.n	8009616 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	2b03      	cmp	r3, #3
 80095e6:	d115      	bne.n	8009614 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	32ae      	adds	r2, #174	@ 0xae
 80095f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00b      	beq.n	8009614 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	32ae      	adds	r2, #174	@ 0xae
 8009606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800960a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800960c:	78fa      	ldrb	r2, [r7, #3]
 800960e:	4611      	mov	r1, r2
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800961e:	b480      	push	{r7}
 8009620:	b083      	sub	sp, #12
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009626:	2300      	movs	r3, #0
}
 8009628:	4618      	mov	r0, r3
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	bc80      	pop	{r7}
 8009630:	4770      	bx	lr

08009632 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b084      	sub	sp, #16
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800963a:	2300      	movs	r3, #0
 800963c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2201      	movs	r2, #1
 8009642:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00e      	beq.n	800966e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	6852      	ldr	r2, [r2, #4]
 800965c:	b2d2      	uxtb	r2, r2
 800965e:	4611      	mov	r1, r2
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	4798      	blx	r3
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d001      	beq.n	800966e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800966a:	2303      	movs	r3, #3
 800966c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800966e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009684:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009686:	4618      	mov	r0, r3
 8009688:	370c      	adds	r7, #12
 800968a:	46bd      	mov	sp, r7
 800968c:	bc80      	pop	{r7}
 800968e:	4770      	bx	lr

08009690 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	460b      	mov	r3, r1
 800969a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800969c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800969e:	4618      	mov	r0, r3
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bc80      	pop	{r7}
 80096a6:	4770      	bx	lr

080096a8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b086      	sub	sp, #24
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	460b      	mov	r3, r1
 80096b2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80096bc:	2300      	movs	r3, #0
 80096be:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	885b      	ldrh	r3, [r3, #2]
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	68fa      	ldr	r2, [r7, #12]
 80096c8:	7812      	ldrb	r2, [r2, #0]
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d91f      	bls.n	800970e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80096d4:	e013      	b.n	80096fe <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80096d6:	f107 030a 	add.w	r3, r7, #10
 80096da:	4619      	mov	r1, r3
 80096dc:	6978      	ldr	r0, [r7, #20]
 80096de:	f000 f81b 	bl	8009718 <USBD_GetNextDesc>
 80096e2:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	785b      	ldrb	r3, [r3, #1]
 80096e8:	2b05      	cmp	r3, #5
 80096ea:	d108      	bne.n	80096fe <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	789b      	ldrb	r3, [r3, #2]
 80096f4:	78fa      	ldrb	r2, [r7, #3]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d008      	beq.n	800970c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80096fa:	2300      	movs	r3, #0
 80096fc:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	885b      	ldrh	r3, [r3, #2]
 8009702:	b29a      	uxth	r2, r3
 8009704:	897b      	ldrh	r3, [r7, #10]
 8009706:	429a      	cmp	r2, r3
 8009708:	d8e5      	bhi.n	80096d6 <USBD_GetEpDesc+0x2e>
 800970a:	e000      	b.n	800970e <USBD_GetEpDesc+0x66>
          break;
 800970c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800970e:	693b      	ldr	r3, [r7, #16]
}
 8009710:	4618      	mov	r0, r3
 8009712:	3718      	adds	r7, #24
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	881b      	ldrh	r3, [r3, #0]
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	7812      	ldrb	r2, [r2, #0]
 800972e:	4413      	add	r3, r2
 8009730:	b29a      	uxth	r2, r3
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	461a      	mov	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4413      	add	r3, r2
 8009740:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009742:	68fb      	ldr	r3, [r7, #12]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3714      	adds	r7, #20
 8009748:	46bd      	mov	sp, r7
 800974a:	bc80      	pop	{r7}
 800974c:	4770      	bx	lr

0800974e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800974e:	b480      	push	{r7}
 8009750:	b087      	sub	sp, #28
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	3301      	adds	r3, #1
 8009764:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800976c:	8a3b      	ldrh	r3, [r7, #16]
 800976e:	021b      	lsls	r3, r3, #8
 8009770:	b21a      	sxth	r2, r3
 8009772:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009776:	4313      	orrs	r3, r2
 8009778:	b21b      	sxth	r3, r3
 800977a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800977c:	89fb      	ldrh	r3, [r7, #14]
}
 800977e:	4618      	mov	r0, r3
 8009780:	371c      	adds	r7, #28
 8009782:	46bd      	mov	sp, r7
 8009784:	bc80      	pop	{r7}
 8009786:	4770      	bx	lr

08009788 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009792:	2300      	movs	r3, #0
 8009794:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800979e:	2b40      	cmp	r3, #64	@ 0x40
 80097a0:	d005      	beq.n	80097ae <USBD_StdDevReq+0x26>
 80097a2:	2b40      	cmp	r3, #64	@ 0x40
 80097a4:	d857      	bhi.n	8009856 <USBD_StdDevReq+0xce>
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00f      	beq.n	80097ca <USBD_StdDevReq+0x42>
 80097aa:	2b20      	cmp	r3, #32
 80097ac:	d153      	bne.n	8009856 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	32ae      	adds	r2, #174	@ 0xae
 80097b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	6839      	ldr	r1, [r7, #0]
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	4798      	blx	r3
 80097c4:	4603      	mov	r3, r0
 80097c6:	73fb      	strb	r3, [r7, #15]
      break;
 80097c8:	e04a      	b.n	8009860 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	785b      	ldrb	r3, [r3, #1]
 80097ce:	2b09      	cmp	r3, #9
 80097d0:	d83b      	bhi.n	800984a <USBD_StdDevReq+0xc2>
 80097d2:	a201      	add	r2, pc, #4	@ (adr r2, 80097d8 <USBD_StdDevReq+0x50>)
 80097d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d8:	0800982d 	.word	0x0800982d
 80097dc:	08009841 	.word	0x08009841
 80097e0:	0800984b 	.word	0x0800984b
 80097e4:	08009837 	.word	0x08009837
 80097e8:	0800984b 	.word	0x0800984b
 80097ec:	0800980b 	.word	0x0800980b
 80097f0:	08009801 	.word	0x08009801
 80097f4:	0800984b 	.word	0x0800984b
 80097f8:	08009823 	.word	0x08009823
 80097fc:	08009815 	.word	0x08009815
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009800:	6839      	ldr	r1, [r7, #0]
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fa3c 	bl	8009c80 <USBD_GetDescriptor>
          break;
 8009808:	e024      	b.n	8009854 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800980a:	6839      	ldr	r1, [r7, #0]
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fba1 	bl	8009f54 <USBD_SetAddress>
          break;
 8009812:	e01f      	b.n	8009854 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fbe0 	bl	8009fdc <USBD_SetConfig>
 800981c:	4603      	mov	r3, r0
 800981e:	73fb      	strb	r3, [r7, #15]
          break;
 8009820:	e018      	b.n	8009854 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009822:	6839      	ldr	r1, [r7, #0]
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 fc83 	bl	800a130 <USBD_GetConfig>
          break;
 800982a:	e013      	b.n	8009854 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800982c:	6839      	ldr	r1, [r7, #0]
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fcb4 	bl	800a19c <USBD_GetStatus>
          break;
 8009834:	e00e      	b.n	8009854 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009836:	6839      	ldr	r1, [r7, #0]
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 fce3 	bl	800a204 <USBD_SetFeature>
          break;
 800983e:	e009      	b.n	8009854 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009840:	6839      	ldr	r1, [r7, #0]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 fd07 	bl	800a256 <USBD_ClrFeature>
          break;
 8009848:	e004      	b.n	8009854 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800984a:	6839      	ldr	r1, [r7, #0]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fd5e 	bl	800a30e <USBD_CtlError>
          break;
 8009852:	bf00      	nop
      }
      break;
 8009854:	e004      	b.n	8009860 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 fd58 	bl	800a30e <USBD_CtlError>
      break;
 800985e:	bf00      	nop
  }

  return ret;
 8009860:	7bfb      	ldrb	r3, [r7, #15]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop

0800986c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009876:	2300      	movs	r3, #0
 8009878:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009882:	2b40      	cmp	r3, #64	@ 0x40
 8009884:	d005      	beq.n	8009892 <USBD_StdItfReq+0x26>
 8009886:	2b40      	cmp	r3, #64	@ 0x40
 8009888:	d852      	bhi.n	8009930 <USBD_StdItfReq+0xc4>
 800988a:	2b00      	cmp	r3, #0
 800988c:	d001      	beq.n	8009892 <USBD_StdItfReq+0x26>
 800988e:	2b20      	cmp	r3, #32
 8009890:	d14e      	bne.n	8009930 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009898:	b2db      	uxtb	r3, r3
 800989a:	3b01      	subs	r3, #1
 800989c:	2b02      	cmp	r3, #2
 800989e:	d840      	bhi.n	8009922 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	889b      	ldrh	r3, [r3, #4]
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d836      	bhi.n	8009918 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	889b      	ldrh	r3, [r3, #4]
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	4619      	mov	r1, r3
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f7ff fee0 	bl	8009678 <USBD_CoreFindIF>
 80098b8:	4603      	mov	r3, r0
 80098ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80098bc:	7bbb      	ldrb	r3, [r7, #14]
 80098be:	2bff      	cmp	r3, #255	@ 0xff
 80098c0:	d01d      	beq.n	80098fe <USBD_StdItfReq+0x92>
 80098c2:	7bbb      	ldrb	r3, [r7, #14]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d11a      	bne.n	80098fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80098c8:	7bba      	ldrb	r2, [r7, #14]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	32ae      	adds	r2, #174	@ 0xae
 80098ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00f      	beq.n	80098f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80098d8:	7bba      	ldrb	r2, [r7, #14]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80098e0:	7bba      	ldrb	r2, [r7, #14]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	32ae      	adds	r2, #174	@ 0xae
 80098e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	6839      	ldr	r1, [r7, #0]
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	4798      	blx	r3
 80098f2:	4603      	mov	r3, r0
 80098f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80098f6:	e004      	b.n	8009902 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80098f8:	2303      	movs	r3, #3
 80098fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80098fc:	e001      	b.n	8009902 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80098fe:	2303      	movs	r3, #3
 8009900:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	88db      	ldrh	r3, [r3, #6]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d110      	bne.n	800992c <USBD_StdItfReq+0xc0>
 800990a:	7bfb      	ldrb	r3, [r7, #15]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10d      	bne.n	800992c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 fdc6 	bl	800a4a2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009916:	e009      	b.n	800992c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009918:	6839      	ldr	r1, [r7, #0]
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 fcf7 	bl	800a30e <USBD_CtlError>
          break;
 8009920:	e004      	b.n	800992c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fcf2 	bl	800a30e <USBD_CtlError>
          break;
 800992a:	e000      	b.n	800992e <USBD_StdItfReq+0xc2>
          break;
 800992c:	bf00      	nop
      }
      break;
 800992e:	e004      	b.n	800993a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009930:	6839      	ldr	r1, [r7, #0]
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 fceb 	bl	800a30e <USBD_CtlError>
      break;
 8009938:	bf00      	nop
  }

  return ret;
 800993a:	7bfb      	ldrb	r3, [r7, #15]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	889b      	ldrh	r3, [r3, #4]
 8009956:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009960:	2b40      	cmp	r3, #64	@ 0x40
 8009962:	d007      	beq.n	8009974 <USBD_StdEPReq+0x30>
 8009964:	2b40      	cmp	r3, #64	@ 0x40
 8009966:	f200 817f 	bhi.w	8009c68 <USBD_StdEPReq+0x324>
 800996a:	2b00      	cmp	r3, #0
 800996c:	d02a      	beq.n	80099c4 <USBD_StdEPReq+0x80>
 800996e:	2b20      	cmp	r3, #32
 8009970:	f040 817a 	bne.w	8009c68 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009974:	7bbb      	ldrb	r3, [r7, #14]
 8009976:	4619      	mov	r1, r3
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7ff fe89 	bl	8009690 <USBD_CoreFindEP>
 800997e:	4603      	mov	r3, r0
 8009980:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009982:	7b7b      	ldrb	r3, [r7, #13]
 8009984:	2bff      	cmp	r3, #255	@ 0xff
 8009986:	f000 8174 	beq.w	8009c72 <USBD_StdEPReq+0x32e>
 800998a:	7b7b      	ldrb	r3, [r7, #13]
 800998c:	2b00      	cmp	r3, #0
 800998e:	f040 8170 	bne.w	8009c72 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009992:	7b7a      	ldrb	r2, [r7, #13]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800999a:	7b7a      	ldrb	r2, [r7, #13]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	32ae      	adds	r2, #174	@ 0xae
 80099a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f000 8163 	beq.w	8009c72 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80099ac:	7b7a      	ldrb	r2, [r7, #13]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	32ae      	adds	r2, #174	@ 0xae
 80099b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	6839      	ldr	r1, [r7, #0]
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	4798      	blx	r3
 80099be:	4603      	mov	r3, r0
 80099c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80099c2:	e156      	b.n	8009c72 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	785b      	ldrb	r3, [r3, #1]
 80099c8:	2b03      	cmp	r3, #3
 80099ca:	d008      	beq.n	80099de <USBD_StdEPReq+0x9a>
 80099cc:	2b03      	cmp	r3, #3
 80099ce:	f300 8145 	bgt.w	8009c5c <USBD_StdEPReq+0x318>
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f000 809b 	beq.w	8009b0e <USBD_StdEPReq+0x1ca>
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d03c      	beq.n	8009a56 <USBD_StdEPReq+0x112>
 80099dc:	e13e      	b.n	8009c5c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	d002      	beq.n	80099f0 <USBD_StdEPReq+0xac>
 80099ea:	2b03      	cmp	r3, #3
 80099ec:	d016      	beq.n	8009a1c <USBD_StdEPReq+0xd8>
 80099ee:	e02c      	b.n	8009a4a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099f0:	7bbb      	ldrb	r3, [r7, #14]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00d      	beq.n	8009a12 <USBD_StdEPReq+0xce>
 80099f6:	7bbb      	ldrb	r3, [r7, #14]
 80099f8:	2b80      	cmp	r3, #128	@ 0x80
 80099fa:	d00a      	beq.n	8009a12 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80099fc:	7bbb      	ldrb	r3, [r7, #14]
 80099fe:	4619      	mov	r1, r3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f001 f969 	bl	800acd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a06:	2180      	movs	r1, #128	@ 0x80
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f001 f965 	bl	800acd8 <USBD_LL_StallEP>
 8009a0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a10:	e020      	b.n	8009a54 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009a12:	6839      	ldr	r1, [r7, #0]
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fc7a 	bl	800a30e <USBD_CtlError>
              break;
 8009a1a:	e01b      	b.n	8009a54 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	885b      	ldrh	r3, [r3, #2]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10e      	bne.n	8009a42 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a24:	7bbb      	ldrb	r3, [r7, #14]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00b      	beq.n	8009a42 <USBD_StdEPReq+0xfe>
 8009a2a:	7bbb      	ldrb	r3, [r7, #14]
 8009a2c:	2b80      	cmp	r3, #128	@ 0x80
 8009a2e:	d008      	beq.n	8009a42 <USBD_StdEPReq+0xfe>
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	88db      	ldrh	r3, [r3, #6]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d104      	bne.n	8009a42 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a38:	7bbb      	ldrb	r3, [r7, #14]
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f001 f94b 	bl	800acd8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fd2d 	bl	800a4a2 <USBD_CtlSendStatus>

              break;
 8009a48:	e004      	b.n	8009a54 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009a4a:	6839      	ldr	r1, [r7, #0]
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 fc5e 	bl	800a30e <USBD_CtlError>
              break;
 8009a52:	bf00      	nop
          }
          break;
 8009a54:	e107      	b.n	8009c66 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d002      	beq.n	8009a68 <USBD_StdEPReq+0x124>
 8009a62:	2b03      	cmp	r3, #3
 8009a64:	d016      	beq.n	8009a94 <USBD_StdEPReq+0x150>
 8009a66:	e04b      	b.n	8009b00 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a68:	7bbb      	ldrb	r3, [r7, #14]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00d      	beq.n	8009a8a <USBD_StdEPReq+0x146>
 8009a6e:	7bbb      	ldrb	r3, [r7, #14]
 8009a70:	2b80      	cmp	r3, #128	@ 0x80
 8009a72:	d00a      	beq.n	8009a8a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a74:	7bbb      	ldrb	r3, [r7, #14]
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f001 f92d 	bl	800acd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a7e:	2180      	movs	r1, #128	@ 0x80
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f001 f929 	bl	800acd8 <USBD_LL_StallEP>
 8009a86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a88:	e040      	b.n	8009b0c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009a8a:	6839      	ldr	r1, [r7, #0]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fc3e 	bl	800a30e <USBD_CtlError>
              break;
 8009a92:	e03b      	b.n	8009b0c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	885b      	ldrh	r3, [r3, #2]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d136      	bne.n	8009b0a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009a9c:	7bbb      	ldrb	r3, [r7, #14]
 8009a9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d004      	beq.n	8009ab0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009aa6:	7bbb      	ldrb	r3, [r7, #14]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f001 f933 	bl	800ad16 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fcf6 	bl	800a4a2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009ab6:	7bbb      	ldrb	r3, [r7, #14]
 8009ab8:	4619      	mov	r1, r3
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f7ff fde8 	bl	8009690 <USBD_CoreFindEP>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ac4:	7b7b      	ldrb	r3, [r7, #13]
 8009ac6:	2bff      	cmp	r3, #255	@ 0xff
 8009ac8:	d01f      	beq.n	8009b0a <USBD_StdEPReq+0x1c6>
 8009aca:	7b7b      	ldrb	r3, [r7, #13]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d11c      	bne.n	8009b0a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009ad0:	7b7a      	ldrb	r2, [r7, #13]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009ad8:	7b7a      	ldrb	r2, [r7, #13]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	32ae      	adds	r2, #174	@ 0xae
 8009ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d010      	beq.n	8009b0a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009ae8:	7b7a      	ldrb	r2, [r7, #13]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	32ae      	adds	r2, #174	@ 0xae
 8009aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	6839      	ldr	r1, [r7, #0]
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	4798      	blx	r3
 8009afa:	4603      	mov	r3, r0
 8009afc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009afe:	e004      	b.n	8009b0a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009b00:	6839      	ldr	r1, [r7, #0]
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 fc03 	bl	800a30e <USBD_CtlError>
              break;
 8009b08:	e000      	b.n	8009b0c <USBD_StdEPReq+0x1c8>
              break;
 8009b0a:	bf00      	nop
          }
          break;
 8009b0c:	e0ab      	b.n	8009c66 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b02      	cmp	r3, #2
 8009b18:	d002      	beq.n	8009b20 <USBD_StdEPReq+0x1dc>
 8009b1a:	2b03      	cmp	r3, #3
 8009b1c:	d032      	beq.n	8009b84 <USBD_StdEPReq+0x240>
 8009b1e:	e097      	b.n	8009c50 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b20:	7bbb      	ldrb	r3, [r7, #14]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d007      	beq.n	8009b36 <USBD_StdEPReq+0x1f2>
 8009b26:	7bbb      	ldrb	r3, [r7, #14]
 8009b28:	2b80      	cmp	r3, #128	@ 0x80
 8009b2a:	d004      	beq.n	8009b36 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009b2c:	6839      	ldr	r1, [r7, #0]
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 fbed 	bl	800a30e <USBD_CtlError>
                break;
 8009b34:	e091      	b.n	8009c5a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	da0b      	bge.n	8009b56 <USBD_StdEPReq+0x212>
 8009b3e:	7bbb      	ldrb	r3, [r7, #14]
 8009b40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b44:	4613      	mov	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4413      	add	r3, r2
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	3310      	adds	r3, #16
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	4413      	add	r3, r2
 8009b52:	3304      	adds	r3, #4
 8009b54:	e00b      	b.n	8009b6e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b56:	7bbb      	ldrb	r3, [r7, #14]
 8009b58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	4413      	add	r3, r2
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	3304      	adds	r3, #4
 8009b6e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	2200      	movs	r2, #0
 8009b74:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	2202      	movs	r2, #2
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 fc36 	bl	800a3ee <USBD_CtlSendData>
              break;
 8009b82:	e06a      	b.n	8009c5a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009b84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	da11      	bge.n	8009bb0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009b8c:	7bbb      	ldrb	r3, [r7, #14]
 8009b8e:	f003 020f 	and.w	r2, r3, #15
 8009b92:	6879      	ldr	r1, [r7, #4]
 8009b94:	4613      	mov	r3, r2
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	4413      	add	r3, r2
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	440b      	add	r3, r1
 8009b9e:	3324      	adds	r3, #36	@ 0x24
 8009ba0:	881b      	ldrh	r3, [r3, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d117      	bne.n	8009bd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009ba6:	6839      	ldr	r1, [r7, #0]
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 fbb0 	bl	800a30e <USBD_CtlError>
                  break;
 8009bae:	e054      	b.n	8009c5a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009bb0:	7bbb      	ldrb	r3, [r7, #14]
 8009bb2:	f003 020f 	and.w	r2, r3, #15
 8009bb6:	6879      	ldr	r1, [r7, #4]
 8009bb8:	4613      	mov	r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	4413      	add	r3, r2
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	440b      	add	r3, r1
 8009bc2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009bc6:	881b      	ldrh	r3, [r3, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d104      	bne.n	8009bd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009bcc:	6839      	ldr	r1, [r7, #0]
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fb9d 	bl	800a30e <USBD_CtlError>
                  break;
 8009bd4:	e041      	b.n	8009c5a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	da0b      	bge.n	8009bf6 <USBD_StdEPReq+0x2b2>
 8009bde:	7bbb      	ldrb	r3, [r7, #14]
 8009be0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009be4:	4613      	mov	r3, r2
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	4413      	add	r3, r2
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	3310      	adds	r3, #16
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	3304      	adds	r3, #4
 8009bf4:	e00b      	b.n	8009c0e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009bf6:	7bbb      	ldrb	r3, [r7, #14]
 8009bf8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	4413      	add	r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	3304      	adds	r3, #4
 8009c0e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c10:	7bbb      	ldrb	r3, [r7, #14]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d002      	beq.n	8009c1c <USBD_StdEPReq+0x2d8>
 8009c16:	7bbb      	ldrb	r3, [r7, #14]
 8009c18:	2b80      	cmp	r3, #128	@ 0x80
 8009c1a:	d103      	bne.n	8009c24 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	601a      	str	r2, [r3, #0]
 8009c22:	e00e      	b.n	8009c42 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009c24:	7bbb      	ldrb	r3, [r7, #14]
 8009c26:	4619      	mov	r1, r3
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f001 f893 	bl	800ad54 <USBD_LL_IsStallEP>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d003      	beq.n	8009c3c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	2201      	movs	r2, #1
 8009c38:	601a      	str	r2, [r3, #0]
 8009c3a:	e002      	b.n	8009c42 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	2202      	movs	r2, #2
 8009c46:	4619      	mov	r1, r3
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fbd0 	bl	800a3ee <USBD_CtlSendData>
              break;
 8009c4e:	e004      	b.n	8009c5a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009c50:	6839      	ldr	r1, [r7, #0]
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fb5b 	bl	800a30e <USBD_CtlError>
              break;
 8009c58:	bf00      	nop
          }
          break;
 8009c5a:	e004      	b.n	8009c66 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009c5c:	6839      	ldr	r1, [r7, #0]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fb55 	bl	800a30e <USBD_CtlError>
          break;
 8009c64:	bf00      	nop
      }
      break;
 8009c66:	e005      	b.n	8009c74 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009c68:	6839      	ldr	r1, [r7, #0]
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 fb4f 	bl	800a30e <USBD_CtlError>
      break;
 8009c70:	e000      	b.n	8009c74 <USBD_StdEPReq+0x330>
      break;
 8009c72:	bf00      	nop
  }

  return ret;
 8009c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
	...

08009c80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009c92:	2300      	movs	r3, #0
 8009c94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	885b      	ldrh	r3, [r3, #2]
 8009c9a:	0a1b      	lsrs	r3, r3, #8
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	2b06      	cmp	r3, #6
 8009ca2:	f200 8128 	bhi.w	8009ef6 <USBD_GetDescriptor+0x276>
 8009ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8009cac <USBD_GetDescriptor+0x2c>)
 8009ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cac:	08009cc9 	.word	0x08009cc9
 8009cb0:	08009ce1 	.word	0x08009ce1
 8009cb4:	08009d21 	.word	0x08009d21
 8009cb8:	08009ef7 	.word	0x08009ef7
 8009cbc:	08009ef7 	.word	0x08009ef7
 8009cc0:	08009e97 	.word	0x08009e97
 8009cc4:	08009ec3 	.word	0x08009ec3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	7c12      	ldrb	r2, [r2, #16]
 8009cd4:	f107 0108 	add.w	r1, r7, #8
 8009cd8:	4610      	mov	r0, r2
 8009cda:	4798      	blx	r3
 8009cdc:	60f8      	str	r0, [r7, #12]
      break;
 8009cde:	e112      	b.n	8009f06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	7c1b      	ldrb	r3, [r3, #16]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10d      	bne.n	8009d04 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cf0:	f107 0208 	add.w	r2, r7, #8
 8009cf4:	4610      	mov	r0, r2
 8009cf6:	4798      	blx	r3
 8009cf8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	2202      	movs	r2, #2
 8009d00:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d02:	e100      	b.n	8009f06 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d0c:	f107 0208 	add.w	r2, r7, #8
 8009d10:	4610      	mov	r0, r2
 8009d12:	4798      	blx	r3
 8009d14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	2202      	movs	r2, #2
 8009d1c:	701a      	strb	r2, [r3, #0]
      break;
 8009d1e:	e0f2      	b.n	8009f06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	885b      	ldrh	r3, [r3, #2]
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	2b05      	cmp	r3, #5
 8009d28:	f200 80ac 	bhi.w	8009e84 <USBD_GetDescriptor+0x204>
 8009d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009d34 <USBD_GetDescriptor+0xb4>)
 8009d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d32:	bf00      	nop
 8009d34:	08009d4d 	.word	0x08009d4d
 8009d38:	08009d81 	.word	0x08009d81
 8009d3c:	08009db5 	.word	0x08009db5
 8009d40:	08009de9 	.word	0x08009de9
 8009d44:	08009e1d 	.word	0x08009e1d
 8009d48:	08009e51 	.word	0x08009e51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00b      	beq.n	8009d70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	7c12      	ldrb	r2, [r2, #16]
 8009d64:	f107 0108 	add.w	r1, r7, #8
 8009d68:	4610      	mov	r0, r2
 8009d6a:	4798      	blx	r3
 8009d6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d6e:	e091      	b.n	8009e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d70:	6839      	ldr	r1, [r7, #0]
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 facb 	bl	800a30e <USBD_CtlError>
            err++;
 8009d78:	7afb      	ldrb	r3, [r7, #11]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d7e:	e089      	b.n	8009e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00b      	beq.n	8009da4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	7c12      	ldrb	r2, [r2, #16]
 8009d98:	f107 0108 	add.w	r1, r7, #8
 8009d9c:	4610      	mov	r0, r2
 8009d9e:	4798      	blx	r3
 8009da0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009da2:	e077      	b.n	8009e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 fab1 	bl	800a30e <USBD_CtlError>
            err++;
 8009dac:	7afb      	ldrb	r3, [r7, #11]
 8009dae:	3301      	adds	r3, #1
 8009db0:	72fb      	strb	r3, [r7, #11]
          break;
 8009db2:	e06f      	b.n	8009e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00b      	beq.n	8009dd8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	7c12      	ldrb	r2, [r2, #16]
 8009dcc:	f107 0108 	add.w	r1, r7, #8
 8009dd0:	4610      	mov	r0, r2
 8009dd2:	4798      	blx	r3
 8009dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dd6:	e05d      	b.n	8009e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009dd8:	6839      	ldr	r1, [r7, #0]
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fa97 	bl	800a30e <USBD_CtlError>
            err++;
 8009de0:	7afb      	ldrb	r3, [r7, #11]
 8009de2:	3301      	adds	r3, #1
 8009de4:	72fb      	strb	r3, [r7, #11]
          break;
 8009de6:	e055      	b.n	8009e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00b      	beq.n	8009e0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	7c12      	ldrb	r2, [r2, #16]
 8009e00:	f107 0108 	add.w	r1, r7, #8
 8009e04:	4610      	mov	r0, r2
 8009e06:	4798      	blx	r3
 8009e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e0a:	e043      	b.n	8009e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e0c:	6839      	ldr	r1, [r7, #0]
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fa7d 	bl	800a30e <USBD_CtlError>
            err++;
 8009e14:	7afb      	ldrb	r3, [r7, #11]
 8009e16:	3301      	adds	r3, #1
 8009e18:	72fb      	strb	r3, [r7, #11]
          break;
 8009e1a:	e03b      	b.n	8009e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e22:	695b      	ldr	r3, [r3, #20]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00b      	beq.n	8009e40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e2e:	695b      	ldr	r3, [r3, #20]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	7c12      	ldrb	r2, [r2, #16]
 8009e34:	f107 0108 	add.w	r1, r7, #8
 8009e38:	4610      	mov	r0, r2
 8009e3a:	4798      	blx	r3
 8009e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e3e:	e029      	b.n	8009e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fa63 	bl	800a30e <USBD_CtlError>
            err++;
 8009e48:	7afb      	ldrb	r3, [r7, #11]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e4e:	e021      	b.n	8009e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e56:	699b      	ldr	r3, [r3, #24]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00b      	beq.n	8009e74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e62:	699b      	ldr	r3, [r3, #24]
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	7c12      	ldrb	r2, [r2, #16]
 8009e68:	f107 0108 	add.w	r1, r7, #8
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	4798      	blx	r3
 8009e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e72:	e00f      	b.n	8009e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fa49 	bl	800a30e <USBD_CtlError>
            err++;
 8009e7c:	7afb      	ldrb	r3, [r7, #11]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	72fb      	strb	r3, [r7, #11]
          break;
 8009e82:	e007      	b.n	8009e94 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009e84:	6839      	ldr	r1, [r7, #0]
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fa41 	bl	800a30e <USBD_CtlError>
          err++;
 8009e8c:	7afb      	ldrb	r3, [r7, #11]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009e92:	bf00      	nop
      }
      break;
 8009e94:	e037      	b.n	8009f06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	7c1b      	ldrb	r3, [r3, #16]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d109      	bne.n	8009eb2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ea6:	f107 0208 	add.w	r2, r7, #8
 8009eaa:	4610      	mov	r0, r2
 8009eac:	4798      	blx	r3
 8009eae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009eb0:	e029      	b.n	8009f06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009eb2:	6839      	ldr	r1, [r7, #0]
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fa2a 	bl	800a30e <USBD_CtlError>
        err++;
 8009eba:	7afb      	ldrb	r3, [r7, #11]
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	72fb      	strb	r3, [r7, #11]
      break;
 8009ec0:	e021      	b.n	8009f06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	7c1b      	ldrb	r3, [r3, #16]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d10d      	bne.n	8009ee6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ed2:	f107 0208 	add.w	r2, r7, #8
 8009ed6:	4610      	mov	r0, r2
 8009ed8:	4798      	blx	r3
 8009eda:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	2207      	movs	r2, #7
 8009ee2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ee4:	e00f      	b.n	8009f06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fa10 	bl	800a30e <USBD_CtlError>
        err++;
 8009eee:	7afb      	ldrb	r3, [r7, #11]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	72fb      	strb	r3, [r7, #11]
      break;
 8009ef4:	e007      	b.n	8009f06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009ef6:	6839      	ldr	r1, [r7, #0]
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 fa08 	bl	800a30e <USBD_CtlError>
      err++;
 8009efe:	7afb      	ldrb	r3, [r7, #11]
 8009f00:	3301      	adds	r3, #1
 8009f02:	72fb      	strb	r3, [r7, #11]
      break;
 8009f04:	bf00      	nop
  }

  if (err != 0U)
 8009f06:	7afb      	ldrb	r3, [r7, #11]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d11e      	bne.n	8009f4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	88db      	ldrh	r3, [r3, #6]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d016      	beq.n	8009f42 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009f14:	893b      	ldrh	r3, [r7, #8]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d00e      	beq.n	8009f38 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	88da      	ldrh	r2, [r3, #6]
 8009f1e:	893b      	ldrh	r3, [r7, #8]
 8009f20:	4293      	cmp	r3, r2
 8009f22:	bf28      	it	cs
 8009f24:	4613      	movcs	r3, r2
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f2a:	893b      	ldrh	r3, [r7, #8]
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	68f9      	ldr	r1, [r7, #12]
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 fa5c 	bl	800a3ee <USBD_CtlSendData>
 8009f36:	e009      	b.n	8009f4c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009f38:	6839      	ldr	r1, [r7, #0]
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f9e7 	bl	800a30e <USBD_CtlError>
 8009f40:	e004      	b.n	8009f4c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 faad 	bl	800a4a2 <USBD_CtlSendStatus>
 8009f48:	e000      	b.n	8009f4c <USBD_GetDescriptor+0x2cc>
    return;
 8009f4a:	bf00      	nop
  }
}
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop

08009f54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	889b      	ldrh	r3, [r3, #4]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d131      	bne.n	8009fca <USBD_SetAddress+0x76>
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	88db      	ldrh	r3, [r3, #6]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d12d      	bne.n	8009fca <USBD_SetAddress+0x76>
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	885b      	ldrh	r3, [r3, #2]
 8009f72:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f74:	d829      	bhi.n	8009fca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	885b      	ldrh	r3, [r3, #2]
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	2b03      	cmp	r3, #3
 8009f8c:	d104      	bne.n	8009f98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009f8e:	6839      	ldr	r1, [r7, #0]
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 f9bc 	bl	800a30e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f96:	e01d      	b.n	8009fd4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	7bfa      	ldrb	r2, [r7, #15]
 8009f9c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009fa0:	7bfb      	ldrb	r3, [r7, #15]
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 ff00 	bl	800adaa <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 fa79 	bl	800a4a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009fb0:	7bfb      	ldrb	r3, [r7, #15]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d004      	beq.n	8009fc0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2202      	movs	r2, #2
 8009fba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fbe:	e009      	b.n	8009fd4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fc8:	e004      	b.n	8009fd4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f99e 	bl	800a30e <USBD_CtlError>
  }
}
 8009fd2:	bf00      	nop
 8009fd4:	bf00      	nop
 8009fd6:	3710      	adds	r7, #16
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	885b      	ldrh	r3, [r3, #2]
 8009fee:	b2da      	uxtb	r2, r3
 8009ff0:	4b4e      	ldr	r3, [pc, #312]	@ (800a12c <USBD_SetConfig+0x150>)
 8009ff2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ff4:	4b4d      	ldr	r3, [pc, #308]	@ (800a12c <USBD_SetConfig+0x150>)
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d905      	bls.n	800a008 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009ffc:	6839      	ldr	r1, [r7, #0]
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 f985 	bl	800a30e <USBD_CtlError>
    return USBD_FAIL;
 800a004:	2303      	movs	r3, #3
 800a006:	e08c      	b.n	800a122 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	2b02      	cmp	r3, #2
 800a012:	d002      	beq.n	800a01a <USBD_SetConfig+0x3e>
 800a014:	2b03      	cmp	r3, #3
 800a016:	d029      	beq.n	800a06c <USBD_SetConfig+0x90>
 800a018:	e075      	b.n	800a106 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a01a:	4b44      	ldr	r3, [pc, #272]	@ (800a12c <USBD_SetConfig+0x150>)
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d020      	beq.n	800a064 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a022:	4b42      	ldr	r3, [pc, #264]	@ (800a12c <USBD_SetConfig+0x150>)
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	461a      	mov	r2, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a02c:	4b3f      	ldr	r3, [pc, #252]	@ (800a12c <USBD_SetConfig+0x150>)
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	4619      	mov	r1, r3
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f7fe ffec 	bl	8009010 <USBD_SetClassConfig>
 800a038:	4603      	mov	r3, r0
 800a03a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a03c:	7bfb      	ldrb	r3, [r7, #15]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d008      	beq.n	800a054 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a042:	6839      	ldr	r1, [r7, #0]
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 f962 	bl	800a30e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2202      	movs	r2, #2
 800a04e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a052:	e065      	b.n	800a120 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 fa24 	bl	800a4a2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2203      	movs	r2, #3
 800a05e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a062:	e05d      	b.n	800a120 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 fa1c 	bl	800a4a2 <USBD_CtlSendStatus>
      break;
 800a06a:	e059      	b.n	800a120 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a06c:	4b2f      	ldr	r3, [pc, #188]	@ (800a12c <USBD_SetConfig+0x150>)
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d112      	bne.n	800a09a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2202      	movs	r2, #2
 800a078:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a07c:	4b2b      	ldr	r3, [pc, #172]	@ (800a12c <USBD_SetConfig+0x150>)
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	461a      	mov	r2, r3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a086:	4b29      	ldr	r3, [pc, #164]	@ (800a12c <USBD_SetConfig+0x150>)
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	4619      	mov	r1, r3
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f7fe ffdb 	bl	8009048 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 fa05 	bl	800a4a2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a098:	e042      	b.n	800a120 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a09a:	4b24      	ldr	r3, [pc, #144]	@ (800a12c <USBD_SetConfig+0x150>)
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d02a      	beq.n	800a0fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f7fe ffc9 	bl	8009048 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a0b6:	4b1d      	ldr	r3, [pc, #116]	@ (800a12c <USBD_SetConfig+0x150>)
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a0c0:	4b1a      	ldr	r3, [pc, #104]	@ (800a12c <USBD_SetConfig+0x150>)
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f7fe ffa2 	bl	8009010 <USBD_SetClassConfig>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a0d0:	7bfb      	ldrb	r3, [r7, #15]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00f      	beq.n	800a0f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a0d6:	6839      	ldr	r1, [r7, #0]
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 f918 	bl	800a30e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7fe ffae 	bl	8009048 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a0f4:	e014      	b.n	800a120 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 f9d3 	bl	800a4a2 <USBD_CtlSendStatus>
      break;
 800a0fc:	e010      	b.n	800a120 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f9cf 	bl	800a4a2 <USBD_CtlSendStatus>
      break;
 800a104:	e00c      	b.n	800a120 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a106:	6839      	ldr	r1, [r7, #0]
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 f900 	bl	800a30e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a10e:	4b07      	ldr	r3, [pc, #28]	@ (800a12c <USBD_SetConfig+0x150>)
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	4619      	mov	r1, r3
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f7fe ff97 	bl	8009048 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a11a:	2303      	movs	r3, #3
 800a11c:	73fb      	strb	r3, [r7, #15]
      break;
 800a11e:	bf00      	nop
  }

  return ret;
 800a120:	7bfb      	ldrb	r3, [r7, #15]
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	20000500 	.word	0x20000500

0800a130 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	88db      	ldrh	r3, [r3, #6]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d004      	beq.n	800a14c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a142:	6839      	ldr	r1, [r7, #0]
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 f8e2 	bl	800a30e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a14a:	e023      	b.n	800a194 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a152:	b2db      	uxtb	r3, r3
 800a154:	2b02      	cmp	r3, #2
 800a156:	dc02      	bgt.n	800a15e <USBD_GetConfig+0x2e>
 800a158:	2b00      	cmp	r3, #0
 800a15a:	dc03      	bgt.n	800a164 <USBD_GetConfig+0x34>
 800a15c:	e015      	b.n	800a18a <USBD_GetConfig+0x5a>
 800a15e:	2b03      	cmp	r3, #3
 800a160:	d00b      	beq.n	800a17a <USBD_GetConfig+0x4a>
 800a162:	e012      	b.n	800a18a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	3308      	adds	r3, #8
 800a16e:	2201      	movs	r2, #1
 800a170:	4619      	mov	r1, r3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f93b 	bl	800a3ee <USBD_CtlSendData>
        break;
 800a178:	e00c      	b.n	800a194 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	3304      	adds	r3, #4
 800a17e:	2201      	movs	r2, #1
 800a180:	4619      	mov	r1, r3
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f933 	bl	800a3ee <USBD_CtlSendData>
        break;
 800a188:	e004      	b.n	800a194 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a18a:	6839      	ldr	r1, [r7, #0]
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 f8be 	bl	800a30e <USBD_CtlError>
        break;
 800a192:	bf00      	nop
}
 800a194:	bf00      	nop
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d81e      	bhi.n	800a1f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	88db      	ldrh	r3, [r3, #6]
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d004      	beq.n	800a1c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a1bc:	6839      	ldr	r1, [r7, #0]
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 f8a5 	bl	800a30e <USBD_CtlError>
        break;
 800a1c4:	e01a      	b.n	800a1fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d005      	beq.n	800a1e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	f043 0202 	orr.w	r2, r3, #2
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	330c      	adds	r3, #12
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 f8ff 	bl	800a3ee <USBD_CtlSendData>
      break;
 800a1f0:	e004      	b.n	800a1fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a1f2:	6839      	ldr	r1, [r7, #0]
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 f88a 	bl	800a30e <USBD_CtlError>
      break;
 800a1fa:	bf00      	nop
  }
}
 800a1fc:	bf00      	nop
 800a1fe:	3708      	adds	r7, #8
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	885b      	ldrh	r3, [r3, #2]
 800a212:	2b01      	cmp	r3, #1
 800a214:	d107      	bne.n	800a226 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f93f 	bl	800a4a2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a224:	e013      	b.n	800a24e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	885b      	ldrh	r3, [r3, #2]
 800a22a:	2b02      	cmp	r3, #2
 800a22c:	d10b      	bne.n	800a246 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	889b      	ldrh	r3, [r3, #4]
 800a232:	0a1b      	lsrs	r3, r3, #8
 800a234:	b29b      	uxth	r3, r3
 800a236:	b2da      	uxtb	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 f92f 	bl	800a4a2 <USBD_CtlSendStatus>
}
 800a244:	e003      	b.n	800a24e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a246:	6839      	ldr	r1, [r7, #0]
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 f860 	bl	800a30e <USBD_CtlError>
}
 800a24e:	bf00      	nop
 800a250:	3708      	adds	r7, #8
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b082      	sub	sp, #8
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
 800a25e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a266:	b2db      	uxtb	r3, r3
 800a268:	3b01      	subs	r3, #1
 800a26a:	2b02      	cmp	r3, #2
 800a26c:	d80b      	bhi.n	800a286 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	885b      	ldrh	r3, [r3, #2]
 800a272:	2b01      	cmp	r3, #1
 800a274:	d10c      	bne.n	800a290 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 f90f 	bl	800a4a2 <USBD_CtlSendStatus>
      }
      break;
 800a284:	e004      	b.n	800a290 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a286:	6839      	ldr	r1, [r7, #0]
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 f840 	bl	800a30e <USBD_CtlError>
      break;
 800a28e:	e000      	b.n	800a292 <USBD_ClrFeature+0x3c>
      break;
 800a290:	bf00      	nop
  }
}
 800a292:	bf00      	nop
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b084      	sub	sp, #16
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
 800a2a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	781a      	ldrb	r2, [r3, #0]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	781a      	ldrb	r2, [r3, #0]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f7ff fa42 	bl	800974e <SWAPBYTE>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a2de:	68f8      	ldr	r0, [r7, #12]
 800a2e0:	f7ff fa35 	bl	800974e <SWAPBYTE>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a2f8:	68f8      	ldr	r0, [r7, #12]
 800a2fa:	f7ff fa28 	bl	800974e <SWAPBYTE>
 800a2fe:	4603      	mov	r3, r0
 800a300:	461a      	mov	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	80da      	strh	r2, [r3, #6]
}
 800a306:	bf00      	nop
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b082      	sub	sp, #8
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a318:	2180      	movs	r1, #128	@ 0x80
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 fcdc 	bl	800acd8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a320:	2100      	movs	r1, #0
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 fcd8 	bl	800acd8 <USBD_LL_StallEP>
}
 800a328:	bf00      	nop
 800a32a:	3708      	adds	r7, #8
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b086      	sub	sp, #24
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a33c:	2300      	movs	r3, #0
 800a33e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d036      	beq.n	800a3b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a34a:	6938      	ldr	r0, [r7, #16]
 800a34c:	f000 f836 	bl	800a3bc <USBD_GetLen>
 800a350:	4603      	mov	r3, r0
 800a352:	3301      	adds	r3, #1
 800a354:	b29b      	uxth	r3, r3
 800a356:	005b      	lsls	r3, r3, #1
 800a358:	b29a      	uxth	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a35e:	7dfb      	ldrb	r3, [r7, #23]
 800a360:	68ba      	ldr	r2, [r7, #8]
 800a362:	4413      	add	r3, r2
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	7812      	ldrb	r2, [r2, #0]
 800a368:	701a      	strb	r2, [r3, #0]
  idx++;
 800a36a:	7dfb      	ldrb	r3, [r7, #23]
 800a36c:	3301      	adds	r3, #1
 800a36e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a370:	7dfb      	ldrb	r3, [r7, #23]
 800a372:	68ba      	ldr	r2, [r7, #8]
 800a374:	4413      	add	r3, r2
 800a376:	2203      	movs	r2, #3
 800a378:	701a      	strb	r2, [r3, #0]
  idx++;
 800a37a:	7dfb      	ldrb	r3, [r7, #23]
 800a37c:	3301      	adds	r3, #1
 800a37e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a380:	e013      	b.n	800a3aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a382:	7dfb      	ldrb	r3, [r7, #23]
 800a384:	68ba      	ldr	r2, [r7, #8]
 800a386:	4413      	add	r3, r2
 800a388:	693a      	ldr	r2, [r7, #16]
 800a38a:	7812      	ldrb	r2, [r2, #0]
 800a38c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	3301      	adds	r3, #1
 800a392:	613b      	str	r3, [r7, #16]
    idx++;
 800a394:	7dfb      	ldrb	r3, [r7, #23]
 800a396:	3301      	adds	r3, #1
 800a398:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a39a:	7dfb      	ldrb	r3, [r7, #23]
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	4413      	add	r3, r2
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	701a      	strb	r2, [r3, #0]
    idx++;
 800a3a4:	7dfb      	ldrb	r3, [r7, #23]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d1e7      	bne.n	800a382 <USBD_GetString+0x52>
 800a3b2:	e000      	b.n	800a3b6 <USBD_GetString+0x86>
    return;
 800a3b4:	bf00      	nop
  }
}
 800a3b6:	3718      	adds	r7, #24
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a3cc:	e005      	b.n	800a3da <USBD_GetLen+0x1e>
  {
    len++;
 800a3ce:	7bfb      	ldrb	r3, [r7, #15]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d1f5      	bne.n	800a3ce <USBD_GetLen+0x12>
  }

  return len;
 800a3e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3714      	adds	r7, #20
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bc80      	pop	{r7}
 800a3ec:	4770      	bx	lr

0800a3ee <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b084      	sub	sp, #16
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	60f8      	str	r0, [r7, #12]
 800a3f6:	60b9      	str	r1, [r7, #8]
 800a3f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2202      	movs	r2, #2
 800a3fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	2100      	movs	r1, #0
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f000 fce7 	bl	800ade8 <USBD_LL_Transmit>

  return USBD_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	68ba      	ldr	r2, [r7, #8]
 800a434:	2100      	movs	r1, #0
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f000 fcd6 	bl	800ade8 <USBD_LL_Transmit>

  return USBD_OK;
 800a43c:	2300      	movs	r3, #0
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b084      	sub	sp, #16
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	60f8      	str	r0, [r7, #12]
 800a44e:	60b9      	str	r1, [r7, #8]
 800a450:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2203      	movs	r2, #3
 800a456:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	2100      	movs	r1, #0
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f000 fcda 	bl	800ae2a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3710      	adds	r7, #16
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	68ba      	ldr	r2, [r7, #8]
 800a490:	2100      	movs	r1, #0
 800a492:	68f8      	ldr	r0, [r7, #12]
 800a494:	f000 fcc9 	bl	800ae2a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a498:	2300      	movs	r3, #0
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}

0800a4a2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a4a2:	b580      	push	{r7, lr}
 800a4a4:	b082      	sub	sp, #8
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2204      	movs	r2, #4
 800a4ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 fc95 	bl	800ade8 <USBD_LL_Transmit>

  return USBD_OK;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2205      	movs	r2, #5
 800a4d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4d8:	2300      	movs	r3, #0
 800a4da:	2200      	movs	r2, #0
 800a4dc:	2100      	movs	r1, #0
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 fca3 	bl	800ae2a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4e4:	2300      	movs	r3, #0
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3708      	adds	r7, #8
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
	...

0800a4f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	4912      	ldr	r1, [pc, #72]	@ (800a540 <MX_USB_DEVICE_Init+0x50>)
 800a4f8:	4812      	ldr	r0, [pc, #72]	@ (800a544 <MX_USB_DEVICE_Init+0x54>)
 800a4fa:	f7fe fd0d 	bl	8008f18 <USBD_Init>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d001      	beq.n	800a508 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a504:	f7f7 fa9e 	bl	8001a44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a508:	490f      	ldr	r1, [pc, #60]	@ (800a548 <MX_USB_DEVICE_Init+0x58>)
 800a50a:	480e      	ldr	r0, [pc, #56]	@ (800a544 <MX_USB_DEVICE_Init+0x54>)
 800a50c:	f7fe fd34 	bl	8008f78 <USBD_RegisterClass>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d001      	beq.n	800a51a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a516:	f7f7 fa95 	bl	8001a44 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a51a:	490c      	ldr	r1, [pc, #48]	@ (800a54c <MX_USB_DEVICE_Init+0x5c>)
 800a51c:	4809      	ldr	r0, [pc, #36]	@ (800a544 <MX_USB_DEVICE_Init+0x54>)
 800a51e:	f7fe fc2f 	bl	8008d80 <USBD_CDC_RegisterInterface>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d001      	beq.n	800a52c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a528:	f7f7 fa8c 	bl	8001a44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a52c:	4805      	ldr	r0, [pc, #20]	@ (800a544 <MX_USB_DEVICE_Init+0x54>)
 800a52e:	f7fe fd59 	bl	8008fe4 <USBD_Start>
 800a532:	4603      	mov	r3, r0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d001      	beq.n	800a53c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a538:	f7f7 fa84 	bl	8001a44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a53c:	bf00      	nop
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	200000ac 	.word	0x200000ac
 800a544:	20000504 	.word	0x20000504
 800a548:	20000018 	.word	0x20000018
 800a54c:	20000098 	.word	0x20000098

0800a550 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a554:	2200      	movs	r2, #0
 800a556:	4905      	ldr	r1, [pc, #20]	@ (800a56c <CDC_Init_FS+0x1c>)
 800a558:	4805      	ldr	r0, [pc, #20]	@ (800a570 <CDC_Init_FS+0x20>)
 800a55a:	f7fe fc2a 	bl	8008db2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a55e:	4905      	ldr	r1, [pc, #20]	@ (800a574 <CDC_Init_FS+0x24>)
 800a560:	4803      	ldr	r0, [pc, #12]	@ (800a570 <CDC_Init_FS+0x20>)
 800a562:	f7fe fc47 	bl	8008df4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a566:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a568:	4618      	mov	r0, r3
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	20000fe0 	.word	0x20000fe0
 800a570:	20000504 	.word	0x20000504
 800a574:	200007e0 	.word	0x200007e0

0800a578 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a578:	b480      	push	{r7}
 800a57a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a57c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a57e:	4618      	mov	r0, r3
 800a580:	46bd      	mov	sp, r7
 800a582:	bc80      	pop	{r7}
 800a584:	4770      	bx	lr
	...

0800a588 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a588:	b480      	push	{r7}
 800a58a:	b083      	sub	sp, #12
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	4603      	mov	r3, r0
 800a590:	6039      	str	r1, [r7, #0]
 800a592:	71fb      	strb	r3, [r7, #7]
 800a594:	4613      	mov	r3, r2
 800a596:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a598:	79fb      	ldrb	r3, [r7, #7]
 800a59a:	2b23      	cmp	r3, #35	@ 0x23
 800a59c:	d84a      	bhi.n	800a634 <CDC_Control_FS+0xac>
 800a59e:	a201      	add	r2, pc, #4	@ (adr r2, 800a5a4 <CDC_Control_FS+0x1c>)
 800a5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a4:	0800a635 	.word	0x0800a635
 800a5a8:	0800a635 	.word	0x0800a635
 800a5ac:	0800a635 	.word	0x0800a635
 800a5b0:	0800a635 	.word	0x0800a635
 800a5b4:	0800a635 	.word	0x0800a635
 800a5b8:	0800a635 	.word	0x0800a635
 800a5bc:	0800a635 	.word	0x0800a635
 800a5c0:	0800a635 	.word	0x0800a635
 800a5c4:	0800a635 	.word	0x0800a635
 800a5c8:	0800a635 	.word	0x0800a635
 800a5cc:	0800a635 	.word	0x0800a635
 800a5d0:	0800a635 	.word	0x0800a635
 800a5d4:	0800a635 	.word	0x0800a635
 800a5d8:	0800a635 	.word	0x0800a635
 800a5dc:	0800a635 	.word	0x0800a635
 800a5e0:	0800a635 	.word	0x0800a635
 800a5e4:	0800a635 	.word	0x0800a635
 800a5e8:	0800a635 	.word	0x0800a635
 800a5ec:	0800a635 	.word	0x0800a635
 800a5f0:	0800a635 	.word	0x0800a635
 800a5f4:	0800a635 	.word	0x0800a635
 800a5f8:	0800a635 	.word	0x0800a635
 800a5fc:	0800a635 	.word	0x0800a635
 800a600:	0800a635 	.word	0x0800a635
 800a604:	0800a635 	.word	0x0800a635
 800a608:	0800a635 	.word	0x0800a635
 800a60c:	0800a635 	.word	0x0800a635
 800a610:	0800a635 	.word	0x0800a635
 800a614:	0800a635 	.word	0x0800a635
 800a618:	0800a635 	.word	0x0800a635
 800a61c:	0800a635 	.word	0x0800a635
 800a620:	0800a635 	.word	0x0800a635
 800a624:	0800a635 	.word	0x0800a635
 800a628:	0800a635 	.word	0x0800a635
 800a62c:	0800a635 	.word	0x0800a635
 800a630:	0800a635 	.word	0x0800a635
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a634:	bf00      	nop
  }

  return (USBD_OK);
 800a636:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a638:	4618      	mov	r0, r3
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bc80      	pop	{r7}
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop

0800a644 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a64e:	6879      	ldr	r1, [r7, #4]
 800a650:	4805      	ldr	r0, [pc, #20]	@ (800a668 <CDC_Receive_FS+0x24>)
 800a652:	f7fe fbcf 	bl	8008df4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a656:	4804      	ldr	r0, [pc, #16]	@ (800a668 <CDC_Receive_FS+0x24>)
 800a658:	f7fe fc28 	bl	8008eac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a65c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3708      	adds	r7, #8
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop
 800a668:	20000504 	.word	0x20000504

0800a66c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	460b      	mov	r3, r1
 800a676:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a678:	2300      	movs	r3, #0
 800a67a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a67c:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b4 <CDC_Transmit_FS+0x48>)
 800a67e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a682:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d001      	beq.n	800a692 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a68e:	2301      	movs	r3, #1
 800a690:	e00b      	b.n	800a6aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a692:	887b      	ldrh	r3, [r7, #2]
 800a694:	461a      	mov	r2, r3
 800a696:	6879      	ldr	r1, [r7, #4]
 800a698:	4806      	ldr	r0, [pc, #24]	@ (800a6b4 <CDC_Transmit_FS+0x48>)
 800a69a:	f7fe fb8a 	bl	8008db2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a69e:	4805      	ldr	r0, [pc, #20]	@ (800a6b4 <CDC_Transmit_FS+0x48>)
 800a6a0:	f7fe fbc4 	bl	8008e2c <USBD_CDC_TransmitPacket>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a6a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	20000504 	.word	0x20000504

0800a6b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b087      	sub	sp, #28
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a6ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	371c      	adds	r7, #28
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bc80      	pop	{r7}
 800a6d6:	4770      	bx	lr

0800a6d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	4603      	mov	r3, r0
 800a6e0:	6039      	str	r1, [r7, #0]
 800a6e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	2212      	movs	r2, #18
 800a6e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a6ea:	4b03      	ldr	r3, [pc, #12]	@ (800a6f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	370c      	adds	r7, #12
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bc80      	pop	{r7}
 800a6f4:	4770      	bx	lr
 800a6f6:	bf00      	nop
 800a6f8:	200000c8 	.word	0x200000c8

0800a6fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	4603      	mov	r3, r0
 800a704:	6039      	str	r1, [r7, #0]
 800a706:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	2204      	movs	r2, #4
 800a70c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a70e:	4b03      	ldr	r3, [pc, #12]	@ (800a71c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a710:	4618      	mov	r0, r3
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	bc80      	pop	{r7}
 800a718:	4770      	bx	lr
 800a71a:	bf00      	nop
 800a71c:	200000dc 	.word	0x200000dc

0800a720 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	4603      	mov	r3, r0
 800a728:	6039      	str	r1, [r7, #0]
 800a72a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a72c:	79fb      	ldrb	r3, [r7, #7]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d105      	bne.n	800a73e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a732:	683a      	ldr	r2, [r7, #0]
 800a734:	4907      	ldr	r1, [pc, #28]	@ (800a754 <USBD_FS_ProductStrDescriptor+0x34>)
 800a736:	4808      	ldr	r0, [pc, #32]	@ (800a758 <USBD_FS_ProductStrDescriptor+0x38>)
 800a738:	f7ff fdfa 	bl	800a330 <USBD_GetString>
 800a73c:	e004      	b.n	800a748 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a73e:	683a      	ldr	r2, [r7, #0]
 800a740:	4904      	ldr	r1, [pc, #16]	@ (800a754 <USBD_FS_ProductStrDescriptor+0x34>)
 800a742:	4805      	ldr	r0, [pc, #20]	@ (800a758 <USBD_FS_ProductStrDescriptor+0x38>)
 800a744:	f7ff fdf4 	bl	800a330 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a748:	4b02      	ldr	r3, [pc, #8]	@ (800a754 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	200017e0 	.word	0x200017e0
 800a758:	0800dbc4 	.word	0x0800dbc4

0800a75c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
 800a762:	4603      	mov	r3, r0
 800a764:	6039      	str	r1, [r7, #0]
 800a766:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a768:	683a      	ldr	r2, [r7, #0]
 800a76a:	4904      	ldr	r1, [pc, #16]	@ (800a77c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a76c:	4804      	ldr	r0, [pc, #16]	@ (800a780 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a76e:	f7ff fddf 	bl	800a330 <USBD_GetString>
  return USBD_StrDesc;
 800a772:	4b02      	ldr	r3, [pc, #8]	@ (800a77c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a774:	4618      	mov	r0, r3
 800a776:	3708      	adds	r7, #8
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	200017e0 	.word	0x200017e0
 800a780:	0800dbdc 	.word	0x0800dbdc

0800a784 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	4603      	mov	r3, r0
 800a78c:	6039      	str	r1, [r7, #0]
 800a78e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	221a      	movs	r2, #26
 800a794:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a796:	f000 f843 	bl	800a820 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a79a:	4b02      	ldr	r3, [pc, #8]	@ (800a7a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	200000e0 	.word	0x200000e0

0800a7a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	6039      	str	r1, [r7, #0]
 800a7b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a7b4:	79fb      	ldrb	r3, [r7, #7]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d105      	bne.n	800a7c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7ba:	683a      	ldr	r2, [r7, #0]
 800a7bc:	4907      	ldr	r1, [pc, #28]	@ (800a7dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7be:	4808      	ldr	r0, [pc, #32]	@ (800a7e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a7c0:	f7ff fdb6 	bl	800a330 <USBD_GetString>
 800a7c4:	e004      	b.n	800a7d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	4904      	ldr	r1, [pc, #16]	@ (800a7dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7ca:	4805      	ldr	r0, [pc, #20]	@ (800a7e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a7cc:	f7ff fdb0 	bl	800a330 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7d0:	4b02      	ldr	r3, [pc, #8]	@ (800a7dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	200017e0 	.word	0x200017e0
 800a7e0:	0800dbf0 	.word	0x0800dbf0

0800a7e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	6039      	str	r1, [r7, #0]
 800a7ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7f0:	79fb      	ldrb	r3, [r7, #7]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d105      	bne.n	800a802 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a7f6:	683a      	ldr	r2, [r7, #0]
 800a7f8:	4907      	ldr	r1, [pc, #28]	@ (800a818 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a7fa:	4808      	ldr	r0, [pc, #32]	@ (800a81c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a7fc:	f7ff fd98 	bl	800a330 <USBD_GetString>
 800a800:	e004      	b.n	800a80c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a802:	683a      	ldr	r2, [r7, #0]
 800a804:	4904      	ldr	r1, [pc, #16]	@ (800a818 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a806:	4805      	ldr	r0, [pc, #20]	@ (800a81c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a808:	f7ff fd92 	bl	800a330 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a80c:	4b02      	ldr	r3, [pc, #8]	@ (800a818 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3708      	adds	r7, #8
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	200017e0 	.word	0x200017e0
 800a81c:	0800dbfc 	.word	0x0800dbfc

0800a820 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a826:	4b0f      	ldr	r3, [pc, #60]	@ (800a864 <Get_SerialNum+0x44>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a82c:	4b0e      	ldr	r3, [pc, #56]	@ (800a868 <Get_SerialNum+0x48>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a832:	4b0e      	ldr	r3, [pc, #56]	@ (800a86c <Get_SerialNum+0x4c>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4413      	add	r3, r2
 800a83e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d009      	beq.n	800a85a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a846:	2208      	movs	r2, #8
 800a848:	4909      	ldr	r1, [pc, #36]	@ (800a870 <Get_SerialNum+0x50>)
 800a84a:	68f8      	ldr	r0, [r7, #12]
 800a84c:	f000 f814 	bl	800a878 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a850:	2204      	movs	r2, #4
 800a852:	4908      	ldr	r1, [pc, #32]	@ (800a874 <Get_SerialNum+0x54>)
 800a854:	68b8      	ldr	r0, [r7, #8]
 800a856:	f000 f80f 	bl	800a878 <IntToUnicode>
  }
}
 800a85a:	bf00      	nop
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	1fff7a10 	.word	0x1fff7a10
 800a868:	1fff7a14 	.word	0x1fff7a14
 800a86c:	1fff7a18 	.word	0x1fff7a18
 800a870:	200000e2 	.word	0x200000e2
 800a874:	200000f2 	.word	0x200000f2

0800a878 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a878:	b480      	push	{r7}
 800a87a:	b087      	sub	sp, #28
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	4613      	mov	r3, r2
 800a884:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a886:	2300      	movs	r3, #0
 800a888:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a88a:	2300      	movs	r3, #0
 800a88c:	75fb      	strb	r3, [r7, #23]
 800a88e:	e027      	b.n	800a8e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	0f1b      	lsrs	r3, r3, #28
 800a894:	2b09      	cmp	r3, #9
 800a896:	d80b      	bhi.n	800a8b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	0f1b      	lsrs	r3, r3, #28
 800a89c:	b2da      	uxtb	r2, r3
 800a89e:	7dfb      	ldrb	r3, [r7, #23]
 800a8a0:	005b      	lsls	r3, r3, #1
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	440b      	add	r3, r1
 800a8a8:	3230      	adds	r2, #48	@ 0x30
 800a8aa:	b2d2      	uxtb	r2, r2
 800a8ac:	701a      	strb	r2, [r3, #0]
 800a8ae:	e00a      	b.n	800a8c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	0f1b      	lsrs	r3, r3, #28
 800a8b4:	b2da      	uxtb	r2, r3
 800a8b6:	7dfb      	ldrb	r3, [r7, #23]
 800a8b8:	005b      	lsls	r3, r3, #1
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	440b      	add	r3, r1
 800a8c0:	3237      	adds	r2, #55	@ 0x37
 800a8c2:	b2d2      	uxtb	r2, r2
 800a8c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	011b      	lsls	r3, r3, #4
 800a8ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a8cc:	7dfb      	ldrb	r3, [r7, #23]
 800a8ce:	005b      	lsls	r3, r3, #1
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	68ba      	ldr	r2, [r7, #8]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a8da:	7dfb      	ldrb	r3, [r7, #23]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	75fb      	strb	r3, [r7, #23]
 800a8e0:	7dfa      	ldrb	r2, [r7, #23]
 800a8e2:	79fb      	ldrb	r3, [r7, #7]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d3d3      	bcc.n	800a890 <IntToUnicode+0x18>
  }
}
 800a8e8:	bf00      	nop
 800a8ea:	bf00      	nop
 800a8ec:	371c      	adds	r7, #28
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bc80      	pop	{r7}
 800a8f2:	4770      	bx	lr

0800a8f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b08a      	sub	sp, #40	@ 0x28
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8fc:	f107 0314 	add.w	r3, r7, #20
 800a900:	2200      	movs	r2, #0
 800a902:	601a      	str	r2, [r3, #0]
 800a904:	605a      	str	r2, [r3, #4]
 800a906:	609a      	str	r2, [r3, #8]
 800a908:	60da      	str	r2, [r3, #12]
 800a90a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a914:	d13a      	bne.n	800a98c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a916:	2300      	movs	r3, #0
 800a918:	613b      	str	r3, [r7, #16]
 800a91a:	4b1e      	ldr	r3, [pc, #120]	@ (800a994 <HAL_PCD_MspInit+0xa0>)
 800a91c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a91e:	4a1d      	ldr	r2, [pc, #116]	@ (800a994 <HAL_PCD_MspInit+0xa0>)
 800a920:	f043 0301 	orr.w	r3, r3, #1
 800a924:	6313      	str	r3, [r2, #48]	@ 0x30
 800a926:	4b1b      	ldr	r3, [pc, #108]	@ (800a994 <HAL_PCD_MspInit+0xa0>)
 800a928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a92a:	f003 0301 	and.w	r3, r3, #1
 800a92e:	613b      	str	r3, [r7, #16]
 800a930:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a932:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a938:	2302      	movs	r3, #2
 800a93a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a93c:	2300      	movs	r3, #0
 800a93e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a940:	2303      	movs	r3, #3
 800a942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a944:	230a      	movs	r3, #10
 800a946:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a948:	f107 0314 	add.w	r3, r7, #20
 800a94c:	4619      	mov	r1, r3
 800a94e:	4812      	ldr	r0, [pc, #72]	@ (800a998 <HAL_PCD_MspInit+0xa4>)
 800a950:	f7f8 f8f0 	bl	8002b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a954:	4b0f      	ldr	r3, [pc, #60]	@ (800a994 <HAL_PCD_MspInit+0xa0>)
 800a956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a958:	4a0e      	ldr	r2, [pc, #56]	@ (800a994 <HAL_PCD_MspInit+0xa0>)
 800a95a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a95e:	6353      	str	r3, [r2, #52]	@ 0x34
 800a960:	2300      	movs	r3, #0
 800a962:	60fb      	str	r3, [r7, #12]
 800a964:	4b0b      	ldr	r3, [pc, #44]	@ (800a994 <HAL_PCD_MspInit+0xa0>)
 800a966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a968:	4a0a      	ldr	r2, [pc, #40]	@ (800a994 <HAL_PCD_MspInit+0xa0>)
 800a96a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a96e:	6453      	str	r3, [r2, #68]	@ 0x44
 800a970:	4b08      	ldr	r3, [pc, #32]	@ (800a994 <HAL_PCD_MspInit+0xa0>)
 800a972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a974:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a978:	60fb      	str	r3, [r7, #12]
 800a97a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a97c:	2200      	movs	r2, #0
 800a97e:	2100      	movs	r1, #0
 800a980:	2043      	movs	r0, #67	@ 0x43
 800a982:	f7f7 fd08 	bl	8002396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a986:	2043      	movs	r0, #67	@ 0x43
 800a988:	f7f7 fd21 	bl	80023ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a98c:	bf00      	nop
 800a98e:	3728      	adds	r7, #40	@ 0x28
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}
 800a994:	40023800 	.word	0x40023800
 800a998:	40020000 	.word	0x40020000

0800a99c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	4610      	mov	r0, r2
 800a9b4:	f7fe fb62 	bl	800907c <USBD_LL_SetupStage>
}
 800a9b8:	bf00      	nop
 800a9ba:	3708      	adds	r7, #8
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b082      	sub	sp, #8
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a9d2:	78fa      	ldrb	r2, [r7, #3]
 800a9d4:	6879      	ldr	r1, [r7, #4]
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	00db      	lsls	r3, r3, #3
 800a9da:	4413      	add	r3, r2
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	440b      	add	r3, r1
 800a9e0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	78fb      	ldrb	r3, [r7, #3]
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	f7fe fb9c 	bl	8009126 <USBD_LL_DataOutStage>
}
 800a9ee:	bf00      	nop
 800a9f0:	3708      	adds	r7, #8
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b082      	sub	sp, #8
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
 800a9fe:	460b      	mov	r3, r1
 800aa00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aa08:	78fa      	ldrb	r2, [r7, #3]
 800aa0a:	6879      	ldr	r1, [r7, #4]
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	00db      	lsls	r3, r3, #3
 800aa10:	4413      	add	r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	440b      	add	r3, r1
 800aa16:	3320      	adds	r3, #32
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	78fb      	ldrb	r3, [r7, #3]
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	f7fe fc35 	bl	800928c <USBD_LL_DataInStage>
}
 800aa22:	bf00      	nop
 800aa24:	3708      	adds	r7, #8
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b082      	sub	sp, #8
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7fe fd6c 	bl	8009516 <USBD_LL_SOF>
}
 800aa3e:	bf00      	nop
 800aa40:	3708      	adds	r7, #8
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b084      	sub	sp, #16
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	79db      	ldrb	r3, [r3, #7]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d102      	bne.n	800aa60 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	73fb      	strb	r3, [r7, #15]
 800aa5e:	e008      	b.n	800aa72 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	79db      	ldrb	r3, [r3, #7]
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d102      	bne.n	800aa6e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	73fb      	strb	r3, [r7, #15]
 800aa6c:	e001      	b.n	800aa72 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800aa6e:	f7f6 ffe9 	bl	8001a44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa78:	7bfa      	ldrb	r2, [r7, #15]
 800aa7a:	4611      	mov	r1, r2
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7fe fd09 	bl	8009494 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7fe fcb1 	bl	80093f0 <USBD_LL_Reset>
}
 800aa8e:	bf00      	nop
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
	...

0800aa98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fe fd03 	bl	80094b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	6812      	ldr	r2, [r2, #0]
 800aaba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aabe:	f043 0301 	orr.w	r3, r3, #1
 800aac2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	7adb      	ldrb	r3, [r3, #11]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d005      	beq.n	800aad8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aacc:	4b04      	ldr	r3, [pc, #16]	@ (800aae0 <HAL_PCD_SuspendCallback+0x48>)
 800aace:	691b      	ldr	r3, [r3, #16]
 800aad0:	4a03      	ldr	r2, [pc, #12]	@ (800aae0 <HAL_PCD_SuspendCallback+0x48>)
 800aad2:	f043 0306 	orr.w	r3, r3, #6
 800aad6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aad8:	bf00      	nop
 800aada:	3708      	adds	r7, #8
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	e000ed00 	.word	0xe000ed00

0800aae4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7fe fcf8 	bl	80094e8 <USBD_LL_Resume>
}
 800aaf8:	bf00      	nop
 800aafa:	3708      	adds	r7, #8
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	460b      	mov	r3, r1
 800ab0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab12:	78fa      	ldrb	r2, [r7, #3]
 800ab14:	4611      	mov	r1, r2
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7fe fd4f 	bl	80095ba <USBD_LL_IsoOUTIncomplete>
}
 800ab1c:	bf00      	nop
 800ab1e:	3708      	adds	r7, #8
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab36:	78fa      	ldrb	r2, [r7, #3]
 800ab38:	4611      	mov	r1, r2
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7fe fd0b 	bl	8009556 <USBD_LL_IsoINIncomplete>
}
 800ab40:	bf00      	nop
 800ab42:	3708      	adds	r7, #8
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7fe fd61 	bl	800961e <USBD_LL_DevConnected>
}
 800ab5c:	bf00      	nop
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7fe fd5d 	bl	8009632 <USBD_LL_DevDisconnected>
}
 800ab78:	bf00      	nop
 800ab7a:	3708      	adds	r7, #8
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d13c      	bne.n	800ac0a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ab90:	4a20      	ldr	r2, [pc, #128]	@ (800ac14 <USBD_LL_Init+0x94>)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	4a1e      	ldr	r2, [pc, #120]	@ (800ac14 <USBD_LL_Init+0x94>)
 800ab9c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aba0:	4b1c      	ldr	r3, [pc, #112]	@ (800ac14 <USBD_LL_Init+0x94>)
 800aba2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800aba6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800aba8:	4b1a      	ldr	r3, [pc, #104]	@ (800ac14 <USBD_LL_Init+0x94>)
 800abaa:	2204      	movs	r2, #4
 800abac:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800abae:	4b19      	ldr	r3, [pc, #100]	@ (800ac14 <USBD_LL_Init+0x94>)
 800abb0:	2202      	movs	r2, #2
 800abb2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800abb4:	4b17      	ldr	r3, [pc, #92]	@ (800ac14 <USBD_LL_Init+0x94>)
 800abb6:	2200      	movs	r2, #0
 800abb8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800abba:	4b16      	ldr	r3, [pc, #88]	@ (800ac14 <USBD_LL_Init+0x94>)
 800abbc:	2202      	movs	r2, #2
 800abbe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800abc0:	4b14      	ldr	r3, [pc, #80]	@ (800ac14 <USBD_LL_Init+0x94>)
 800abc2:	2200      	movs	r2, #0
 800abc4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800abc6:	4b13      	ldr	r3, [pc, #76]	@ (800ac14 <USBD_LL_Init+0x94>)
 800abc8:	2200      	movs	r2, #0
 800abca:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800abcc:	4b11      	ldr	r3, [pc, #68]	@ (800ac14 <USBD_LL_Init+0x94>)
 800abce:	2200      	movs	r2, #0
 800abd0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800abd2:	4b10      	ldr	r3, [pc, #64]	@ (800ac14 <USBD_LL_Init+0x94>)
 800abd4:	2200      	movs	r2, #0
 800abd6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800abd8:	4b0e      	ldr	r3, [pc, #56]	@ (800ac14 <USBD_LL_Init+0x94>)
 800abda:	2200      	movs	r2, #0
 800abdc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800abde:	480d      	ldr	r0, [pc, #52]	@ (800ac14 <USBD_LL_Init+0x94>)
 800abe0:	f7f9 fc4d 	bl	800447e <HAL_PCD_Init>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d001      	beq.n	800abee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800abea:	f7f6 ff2b 	bl	8001a44 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800abee:	2180      	movs	r1, #128	@ 0x80
 800abf0:	4808      	ldr	r0, [pc, #32]	@ (800ac14 <USBD_LL_Init+0x94>)
 800abf2:	f7fa fe75 	bl	80058e0 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800abf6:	2240      	movs	r2, #64	@ 0x40
 800abf8:	2100      	movs	r1, #0
 800abfa:	4806      	ldr	r0, [pc, #24]	@ (800ac14 <USBD_LL_Init+0x94>)
 800abfc:	f7fa fe2a 	bl	8005854 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ac00:	2280      	movs	r2, #128	@ 0x80
 800ac02:	2101      	movs	r1, #1
 800ac04:	4803      	ldr	r0, [pc, #12]	@ (800ac14 <USBD_LL_Init+0x94>)
 800ac06:	f7fa fe25 	bl	8005854 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ac0a:	2300      	movs	r3, #0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	200019e0 	.word	0x200019e0

0800ac18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac20:	2300      	movs	r3, #0
 800ac22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac24:	2300      	movs	r3, #0
 800ac26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7f9 fd34 	bl	800469c <HAL_PCD_Start>
 800ac34:	4603      	mov	r3, r0
 800ac36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac38:	7bfb      	ldrb	r3, [r7, #15]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 f940 	bl	800aec0 <USBD_Get_USB_Status>
 800ac40:	4603      	mov	r3, r0
 800ac42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac44:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b084      	sub	sp, #16
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
 800ac56:	4608      	mov	r0, r1
 800ac58:	4611      	mov	r1, r2
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	70fb      	strb	r3, [r7, #3]
 800ac60:	460b      	mov	r3, r1
 800ac62:	70bb      	strb	r3, [r7, #2]
 800ac64:	4613      	mov	r3, r2
 800ac66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ac76:	78bb      	ldrb	r3, [r7, #2]
 800ac78:	883a      	ldrh	r2, [r7, #0]
 800ac7a:	78f9      	ldrb	r1, [r7, #3]
 800ac7c:	f7fa fa08 	bl	8005090 <HAL_PCD_EP_Open>
 800ac80:	4603      	mov	r3, r0
 800ac82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac84:	7bfb      	ldrb	r3, [r7, #15]
 800ac86:	4618      	mov	r0, r3
 800ac88:	f000 f91a 	bl	800aec0 <USBD_Get_USB_Status>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac90:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3710      	adds	r7, #16
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b084      	sub	sp, #16
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
 800aca2:	460b      	mov	r3, r1
 800aca4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aca6:	2300      	movs	r3, #0
 800aca8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acaa:	2300      	movs	r3, #0
 800acac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800acb4:	78fa      	ldrb	r2, [r7, #3]
 800acb6:	4611      	mov	r1, r2
 800acb8:	4618      	mov	r0, r3
 800acba:	f7fa fa51 	bl	8005160 <HAL_PCD_EP_Close>
 800acbe:	4603      	mov	r3, r0
 800acc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acc2:	7bfb      	ldrb	r3, [r7, #15]
 800acc4:	4618      	mov	r0, r3
 800acc6:	f000 f8fb 	bl	800aec0 <USBD_Get_USB_Status>
 800acca:	4603      	mov	r3, r0
 800accc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acce:	7bbb      	ldrb	r3, [r7, #14]
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3710      	adds	r7, #16
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	460b      	mov	r3, r1
 800ace2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ace4:	2300      	movs	r3, #0
 800ace6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ace8:	2300      	movs	r3, #0
 800acea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800acf2:	78fa      	ldrb	r2, [r7, #3]
 800acf4:	4611      	mov	r1, r2
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7fa fb08 	bl	800530c <HAL_PCD_EP_SetStall>
 800acfc:	4603      	mov	r3, r0
 800acfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad00:	7bfb      	ldrb	r3, [r7, #15]
 800ad02:	4618      	mov	r0, r3
 800ad04:	f000 f8dc 	bl	800aec0 <USBD_Get_USB_Status>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3710      	adds	r7, #16
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b084      	sub	sp, #16
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
 800ad1e:	460b      	mov	r3, r1
 800ad20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad22:	2300      	movs	r3, #0
 800ad24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad26:	2300      	movs	r3, #0
 800ad28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad30:	78fa      	ldrb	r2, [r7, #3]
 800ad32:	4611      	mov	r1, r2
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7fa fb4c 	bl	80053d2 <HAL_PCD_EP_ClrStall>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
 800ad40:	4618      	mov	r0, r3
 800ad42:	f000 f8bd 	bl	800aec0 <USBD_Get_USB_Status>
 800ad46:	4603      	mov	r3, r0
 800ad48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3710      	adds	r7, #16
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	da0b      	bge.n	800ad88 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad70:	78fb      	ldrb	r3, [r7, #3]
 800ad72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad76:	68f9      	ldr	r1, [r7, #12]
 800ad78:	4613      	mov	r3, r2
 800ad7a:	00db      	lsls	r3, r3, #3
 800ad7c:	4413      	add	r3, r2
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	440b      	add	r3, r1
 800ad82:	3316      	adds	r3, #22
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	e00b      	b.n	800ada0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad88:	78fb      	ldrb	r3, [r7, #3]
 800ad8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad8e:	68f9      	ldr	r1, [r7, #12]
 800ad90:	4613      	mov	r3, r2
 800ad92:	00db      	lsls	r3, r3, #3
 800ad94:	4413      	add	r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	440b      	add	r3, r1
 800ad9a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ad9e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3714      	adds	r7, #20
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bc80      	pop	{r7}
 800ada8:	4770      	bx	lr

0800adaa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800adaa:	b580      	push	{r7, lr}
 800adac:	b084      	sub	sp, #16
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
 800adb2:	460b      	mov	r3, r1
 800adb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adb6:	2300      	movs	r3, #0
 800adb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adba:	2300      	movs	r3, #0
 800adbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800adc4:	78fa      	ldrb	r2, [r7, #3]
 800adc6:	4611      	mov	r1, r2
 800adc8:	4618      	mov	r0, r3
 800adca:	f7fa f93d 	bl	8005048 <HAL_PCD_SetAddress>
 800adce:	4603      	mov	r3, r0
 800add0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800add2:	7bfb      	ldrb	r3, [r7, #15]
 800add4:	4618      	mov	r0, r3
 800add6:	f000 f873 	bl	800aec0 <USBD_Get_USB_Status>
 800adda:	4603      	mov	r3, r0
 800addc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adde:	7bbb      	ldrb	r3, [r7, #14]
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3710      	adds	r7, #16
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b086      	sub	sp, #24
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	607a      	str	r2, [r7, #4]
 800adf2:	603b      	str	r3, [r7, #0]
 800adf4:	460b      	mov	r3, r1
 800adf6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adf8:	2300      	movs	r3, #0
 800adfa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adfc:	2300      	movs	r3, #0
 800adfe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ae06:	7af9      	ldrb	r1, [r7, #11]
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	f7fa fa44 	bl	8005298 <HAL_PCD_EP_Transmit>
 800ae10:	4603      	mov	r3, r0
 800ae12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae14:	7dfb      	ldrb	r3, [r7, #23]
 800ae16:	4618      	mov	r0, r3
 800ae18:	f000 f852 	bl	800aec0 <USBD_Get_USB_Status>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae20:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3718      	adds	r7, #24
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b086      	sub	sp, #24
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	60f8      	str	r0, [r7, #12]
 800ae32:	607a      	str	r2, [r7, #4]
 800ae34:	603b      	str	r3, [r7, #0]
 800ae36:	460b      	mov	r3, r1
 800ae38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ae48:	7af9      	ldrb	r1, [r7, #11]
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	f7fa f9d1 	bl	80051f4 <HAL_PCD_EP_Receive>
 800ae52:	4603      	mov	r3, r0
 800ae54:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae56:	7dfb      	ldrb	r3, [r7, #23]
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f000 f831 	bl	800aec0 <USBD_Get_USB_Status>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae62:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3718      	adds	r7, #24
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	460b      	mov	r3, r1
 800ae76:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae7e:	78fa      	ldrb	r2, [r7, #3]
 800ae80:	4611      	mov	r1, r2
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7fa f9f1 	bl	800526a <HAL_PCD_EP_GetRxCount>
 800ae88:	4603      	mov	r3, r0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3708      	adds	r7, #8
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
	...

0800ae94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ae9c:	4b02      	ldr	r3, [pc, #8]	@ (800aea8 <USBD_static_malloc+0x14>)
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	370c      	adds	r7, #12
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bc80      	pop	{r7}
 800aea6:	4770      	bx	lr
 800aea8:	20001ec4 	.word	0x20001ec4

0800aeac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]

}
 800aeb4:	bf00      	nop
 800aeb6:	370c      	adds	r7, #12
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bc80      	pop	{r7}
 800aebc:	4770      	bx	lr
	...

0800aec0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b085      	sub	sp, #20
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	4603      	mov	r3, r0
 800aec8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeca:	2300      	movs	r3, #0
 800aecc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aece:	79fb      	ldrb	r3, [r7, #7]
 800aed0:	2b03      	cmp	r3, #3
 800aed2:	d817      	bhi.n	800af04 <USBD_Get_USB_Status+0x44>
 800aed4:	a201      	add	r2, pc, #4	@ (adr r2, 800aedc <USBD_Get_USB_Status+0x1c>)
 800aed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeda:	bf00      	nop
 800aedc:	0800aeed 	.word	0x0800aeed
 800aee0:	0800aef3 	.word	0x0800aef3
 800aee4:	0800aef9 	.word	0x0800aef9
 800aee8:	0800aeff 	.word	0x0800aeff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aeec:	2300      	movs	r3, #0
 800aeee:	73fb      	strb	r3, [r7, #15]
    break;
 800aef0:	e00b      	b.n	800af0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aef2:	2303      	movs	r3, #3
 800aef4:	73fb      	strb	r3, [r7, #15]
    break;
 800aef6:	e008      	b.n	800af0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aef8:	2301      	movs	r3, #1
 800aefa:	73fb      	strb	r3, [r7, #15]
    break;
 800aefc:	e005      	b.n	800af0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aefe:	2303      	movs	r3, #3
 800af00:	73fb      	strb	r3, [r7, #15]
    break;
 800af02:	e002      	b.n	800af0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af04:	2303      	movs	r3, #3
 800af06:	73fb      	strb	r3, [r7, #15]
    break;
 800af08:	bf00      	nop
  }
  return usb_status;
 800af0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3714      	adds	r7, #20
 800af10:	46bd      	mov	sp, r7
 800af12:	bc80      	pop	{r7}
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop

0800af18 <__cvt>:
 800af18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af1c:	b088      	sub	sp, #32
 800af1e:	2b00      	cmp	r3, #0
 800af20:	461d      	mov	r5, r3
 800af22:	4614      	mov	r4, r2
 800af24:	bfbc      	itt	lt
 800af26:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800af2a:	4614      	movlt	r4, r2
 800af2c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800af2e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800af30:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800af34:	bfb6      	itet	lt
 800af36:	461d      	movlt	r5, r3
 800af38:	2300      	movge	r3, #0
 800af3a:	232d      	movlt	r3, #45	@ 0x2d
 800af3c:	7013      	strb	r3, [r2, #0]
 800af3e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800af40:	f023 0820 	bic.w	r8, r3, #32
 800af44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800af48:	d005      	beq.n	800af56 <__cvt+0x3e>
 800af4a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800af4e:	d100      	bne.n	800af52 <__cvt+0x3a>
 800af50:	3601      	adds	r6, #1
 800af52:	2302      	movs	r3, #2
 800af54:	e000      	b.n	800af58 <__cvt+0x40>
 800af56:	2303      	movs	r3, #3
 800af58:	aa07      	add	r2, sp, #28
 800af5a:	9204      	str	r2, [sp, #16]
 800af5c:	aa06      	add	r2, sp, #24
 800af5e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800af62:	e9cd 3600 	strd	r3, r6, [sp]
 800af66:	4622      	mov	r2, r4
 800af68:	462b      	mov	r3, r5
 800af6a:	f000 fe5d 	bl	800bc28 <_dtoa_r>
 800af6e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800af72:	4607      	mov	r7, r0
 800af74:	d119      	bne.n	800afaa <__cvt+0x92>
 800af76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800af78:	07db      	lsls	r3, r3, #31
 800af7a:	d50e      	bpl.n	800af9a <__cvt+0x82>
 800af7c:	eb00 0906 	add.w	r9, r0, r6
 800af80:	2200      	movs	r2, #0
 800af82:	2300      	movs	r3, #0
 800af84:	4620      	mov	r0, r4
 800af86:	4629      	mov	r1, r5
 800af88:	f7f5 fd9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800af8c:	b108      	cbz	r0, 800af92 <__cvt+0x7a>
 800af8e:	f8cd 901c 	str.w	r9, [sp, #28]
 800af92:	2230      	movs	r2, #48	@ 0x30
 800af94:	9b07      	ldr	r3, [sp, #28]
 800af96:	454b      	cmp	r3, r9
 800af98:	d31e      	bcc.n	800afd8 <__cvt+0xc0>
 800af9a:	9b07      	ldr	r3, [sp, #28]
 800af9c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800af9e:	1bdb      	subs	r3, r3, r7
 800afa0:	4638      	mov	r0, r7
 800afa2:	6013      	str	r3, [r2, #0]
 800afa4:	b008      	add	sp, #32
 800afa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afaa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800afae:	eb00 0906 	add.w	r9, r0, r6
 800afb2:	d1e5      	bne.n	800af80 <__cvt+0x68>
 800afb4:	7803      	ldrb	r3, [r0, #0]
 800afb6:	2b30      	cmp	r3, #48	@ 0x30
 800afb8:	d10a      	bne.n	800afd0 <__cvt+0xb8>
 800afba:	2200      	movs	r2, #0
 800afbc:	2300      	movs	r3, #0
 800afbe:	4620      	mov	r0, r4
 800afc0:	4629      	mov	r1, r5
 800afc2:	f7f5 fd81 	bl	8000ac8 <__aeabi_dcmpeq>
 800afc6:	b918      	cbnz	r0, 800afd0 <__cvt+0xb8>
 800afc8:	f1c6 0601 	rsb	r6, r6, #1
 800afcc:	f8ca 6000 	str.w	r6, [sl]
 800afd0:	f8da 3000 	ldr.w	r3, [sl]
 800afd4:	4499      	add	r9, r3
 800afd6:	e7d3      	b.n	800af80 <__cvt+0x68>
 800afd8:	1c59      	adds	r1, r3, #1
 800afda:	9107      	str	r1, [sp, #28]
 800afdc:	701a      	strb	r2, [r3, #0]
 800afde:	e7d9      	b.n	800af94 <__cvt+0x7c>

0800afe0 <__exponent>:
 800afe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afe2:	2900      	cmp	r1, #0
 800afe4:	bfba      	itte	lt
 800afe6:	4249      	neglt	r1, r1
 800afe8:	232d      	movlt	r3, #45	@ 0x2d
 800afea:	232b      	movge	r3, #43	@ 0x2b
 800afec:	2909      	cmp	r1, #9
 800afee:	7002      	strb	r2, [r0, #0]
 800aff0:	7043      	strb	r3, [r0, #1]
 800aff2:	dd29      	ble.n	800b048 <__exponent+0x68>
 800aff4:	f10d 0307 	add.w	r3, sp, #7
 800aff8:	461d      	mov	r5, r3
 800affa:	270a      	movs	r7, #10
 800affc:	461a      	mov	r2, r3
 800affe:	fbb1 f6f7 	udiv	r6, r1, r7
 800b002:	fb07 1416 	mls	r4, r7, r6, r1
 800b006:	3430      	adds	r4, #48	@ 0x30
 800b008:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b00c:	460c      	mov	r4, r1
 800b00e:	2c63      	cmp	r4, #99	@ 0x63
 800b010:	f103 33ff 	add.w	r3, r3, #4294967295
 800b014:	4631      	mov	r1, r6
 800b016:	dcf1      	bgt.n	800affc <__exponent+0x1c>
 800b018:	3130      	adds	r1, #48	@ 0x30
 800b01a:	1e94      	subs	r4, r2, #2
 800b01c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b020:	1c41      	adds	r1, r0, #1
 800b022:	4623      	mov	r3, r4
 800b024:	42ab      	cmp	r3, r5
 800b026:	d30a      	bcc.n	800b03e <__exponent+0x5e>
 800b028:	f10d 0309 	add.w	r3, sp, #9
 800b02c:	1a9b      	subs	r3, r3, r2
 800b02e:	42ac      	cmp	r4, r5
 800b030:	bf88      	it	hi
 800b032:	2300      	movhi	r3, #0
 800b034:	3302      	adds	r3, #2
 800b036:	4403      	add	r3, r0
 800b038:	1a18      	subs	r0, r3, r0
 800b03a:	b003      	add	sp, #12
 800b03c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b03e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b042:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b046:	e7ed      	b.n	800b024 <__exponent+0x44>
 800b048:	2330      	movs	r3, #48	@ 0x30
 800b04a:	3130      	adds	r1, #48	@ 0x30
 800b04c:	7083      	strb	r3, [r0, #2]
 800b04e:	70c1      	strb	r1, [r0, #3]
 800b050:	1d03      	adds	r3, r0, #4
 800b052:	e7f1      	b.n	800b038 <__exponent+0x58>

0800b054 <_printf_float>:
 800b054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b058:	b091      	sub	sp, #68	@ 0x44
 800b05a:	460c      	mov	r4, r1
 800b05c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800b060:	4616      	mov	r6, r2
 800b062:	461f      	mov	r7, r3
 800b064:	4605      	mov	r5, r0
 800b066:	f000 fcdd 	bl	800ba24 <_localeconv_r>
 800b06a:	6803      	ldr	r3, [r0, #0]
 800b06c:	9308      	str	r3, [sp, #32]
 800b06e:	4618      	mov	r0, r3
 800b070:	f7f5 f8fe 	bl	8000270 <strlen>
 800b074:	2300      	movs	r3, #0
 800b076:	930e      	str	r3, [sp, #56]	@ 0x38
 800b078:	f8d8 3000 	ldr.w	r3, [r8]
 800b07c:	9009      	str	r0, [sp, #36]	@ 0x24
 800b07e:	3307      	adds	r3, #7
 800b080:	f023 0307 	bic.w	r3, r3, #7
 800b084:	f103 0208 	add.w	r2, r3, #8
 800b088:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b08c:	f8d4 b000 	ldr.w	fp, [r4]
 800b090:	f8c8 2000 	str.w	r2, [r8]
 800b094:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b098:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b09c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b09e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b0a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b0a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b0aa:	4b9d      	ldr	r3, [pc, #628]	@ (800b320 <_printf_float+0x2cc>)
 800b0ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b0b0:	f7f5 fd3c 	bl	8000b2c <__aeabi_dcmpun>
 800b0b4:	bb70      	cbnz	r0, 800b114 <_printf_float+0xc0>
 800b0b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b0ba:	4b99      	ldr	r3, [pc, #612]	@ (800b320 <_printf_float+0x2cc>)
 800b0bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c0:	f7f5 fd16 	bl	8000af0 <__aeabi_dcmple>
 800b0c4:	bb30      	cbnz	r0, 800b114 <_printf_float+0xc0>
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	4640      	mov	r0, r8
 800b0cc:	4649      	mov	r1, r9
 800b0ce:	f7f5 fd05 	bl	8000adc <__aeabi_dcmplt>
 800b0d2:	b110      	cbz	r0, 800b0da <_printf_float+0x86>
 800b0d4:	232d      	movs	r3, #45	@ 0x2d
 800b0d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0da:	4a92      	ldr	r2, [pc, #584]	@ (800b324 <_printf_float+0x2d0>)
 800b0dc:	4b92      	ldr	r3, [pc, #584]	@ (800b328 <_printf_float+0x2d4>)
 800b0de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b0e2:	bf94      	ite	ls
 800b0e4:	4690      	movls	r8, r2
 800b0e6:	4698      	movhi	r8, r3
 800b0e8:	2303      	movs	r3, #3
 800b0ea:	6123      	str	r3, [r4, #16]
 800b0ec:	f02b 0304 	bic.w	r3, fp, #4
 800b0f0:	6023      	str	r3, [r4, #0]
 800b0f2:	f04f 0900 	mov.w	r9, #0
 800b0f6:	9700      	str	r7, [sp, #0]
 800b0f8:	4633      	mov	r3, r6
 800b0fa:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b0fc:	4621      	mov	r1, r4
 800b0fe:	4628      	mov	r0, r5
 800b100:	f000 f9d4 	bl	800b4ac <_printf_common>
 800b104:	3001      	adds	r0, #1
 800b106:	f040 808f 	bne.w	800b228 <_printf_float+0x1d4>
 800b10a:	f04f 30ff 	mov.w	r0, #4294967295
 800b10e:	b011      	add	sp, #68	@ 0x44
 800b110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b114:	4642      	mov	r2, r8
 800b116:	464b      	mov	r3, r9
 800b118:	4640      	mov	r0, r8
 800b11a:	4649      	mov	r1, r9
 800b11c:	f7f5 fd06 	bl	8000b2c <__aeabi_dcmpun>
 800b120:	b140      	cbz	r0, 800b134 <_printf_float+0xe0>
 800b122:	464b      	mov	r3, r9
 800b124:	2b00      	cmp	r3, #0
 800b126:	bfbc      	itt	lt
 800b128:	232d      	movlt	r3, #45	@ 0x2d
 800b12a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b12e:	4a7f      	ldr	r2, [pc, #508]	@ (800b32c <_printf_float+0x2d8>)
 800b130:	4b7f      	ldr	r3, [pc, #508]	@ (800b330 <_printf_float+0x2dc>)
 800b132:	e7d4      	b.n	800b0de <_printf_float+0x8a>
 800b134:	6863      	ldr	r3, [r4, #4]
 800b136:	1c5a      	adds	r2, r3, #1
 800b138:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800b13c:	d13f      	bne.n	800b1be <_printf_float+0x16a>
 800b13e:	2306      	movs	r3, #6
 800b140:	6063      	str	r3, [r4, #4]
 800b142:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800b146:	2200      	movs	r2, #0
 800b148:	6023      	str	r3, [r4, #0]
 800b14a:	9206      	str	r2, [sp, #24]
 800b14c:	aa0e      	add	r2, sp, #56	@ 0x38
 800b14e:	e9cd a204 	strd	sl, r2, [sp, #16]
 800b152:	aa0d      	add	r2, sp, #52	@ 0x34
 800b154:	9203      	str	r2, [sp, #12]
 800b156:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800b15a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b15e:	6863      	ldr	r3, [r4, #4]
 800b160:	9300      	str	r3, [sp, #0]
 800b162:	4642      	mov	r2, r8
 800b164:	464b      	mov	r3, r9
 800b166:	4628      	mov	r0, r5
 800b168:	910a      	str	r1, [sp, #40]	@ 0x28
 800b16a:	f7ff fed5 	bl	800af18 <__cvt>
 800b16e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b170:	2947      	cmp	r1, #71	@ 0x47
 800b172:	4680      	mov	r8, r0
 800b174:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b176:	d128      	bne.n	800b1ca <_printf_float+0x176>
 800b178:	1cc8      	adds	r0, r1, #3
 800b17a:	db02      	blt.n	800b182 <_printf_float+0x12e>
 800b17c:	6863      	ldr	r3, [r4, #4]
 800b17e:	4299      	cmp	r1, r3
 800b180:	dd40      	ble.n	800b204 <_printf_float+0x1b0>
 800b182:	f1aa 0a02 	sub.w	sl, sl, #2
 800b186:	fa5f fa8a 	uxtb.w	sl, sl
 800b18a:	3901      	subs	r1, #1
 800b18c:	4652      	mov	r2, sl
 800b18e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b192:	910d      	str	r1, [sp, #52]	@ 0x34
 800b194:	f7ff ff24 	bl	800afe0 <__exponent>
 800b198:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b19a:	1813      	adds	r3, r2, r0
 800b19c:	2a01      	cmp	r2, #1
 800b19e:	4681      	mov	r9, r0
 800b1a0:	6123      	str	r3, [r4, #16]
 800b1a2:	dc02      	bgt.n	800b1aa <_printf_float+0x156>
 800b1a4:	6822      	ldr	r2, [r4, #0]
 800b1a6:	07d2      	lsls	r2, r2, #31
 800b1a8:	d501      	bpl.n	800b1ae <_printf_float+0x15a>
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	6123      	str	r3, [r4, #16]
 800b1ae:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d09f      	beq.n	800b0f6 <_printf_float+0xa2>
 800b1b6:	232d      	movs	r3, #45	@ 0x2d
 800b1b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1bc:	e79b      	b.n	800b0f6 <_printf_float+0xa2>
 800b1be:	2947      	cmp	r1, #71	@ 0x47
 800b1c0:	d1bf      	bne.n	800b142 <_printf_float+0xee>
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d1bd      	bne.n	800b142 <_printf_float+0xee>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e7ba      	b.n	800b140 <_printf_float+0xec>
 800b1ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b1ce:	d9dc      	bls.n	800b18a <_printf_float+0x136>
 800b1d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b1d4:	d118      	bne.n	800b208 <_printf_float+0x1b4>
 800b1d6:	2900      	cmp	r1, #0
 800b1d8:	6863      	ldr	r3, [r4, #4]
 800b1da:	dd0b      	ble.n	800b1f4 <_printf_float+0x1a0>
 800b1dc:	6121      	str	r1, [r4, #16]
 800b1de:	b913      	cbnz	r3, 800b1e6 <_printf_float+0x192>
 800b1e0:	6822      	ldr	r2, [r4, #0]
 800b1e2:	07d0      	lsls	r0, r2, #31
 800b1e4:	d502      	bpl.n	800b1ec <_printf_float+0x198>
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	440b      	add	r3, r1
 800b1ea:	6123      	str	r3, [r4, #16]
 800b1ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b1ee:	f04f 0900 	mov.w	r9, #0
 800b1f2:	e7dc      	b.n	800b1ae <_printf_float+0x15a>
 800b1f4:	b913      	cbnz	r3, 800b1fc <_printf_float+0x1a8>
 800b1f6:	6822      	ldr	r2, [r4, #0]
 800b1f8:	07d2      	lsls	r2, r2, #31
 800b1fa:	d501      	bpl.n	800b200 <_printf_float+0x1ac>
 800b1fc:	3302      	adds	r3, #2
 800b1fe:	e7f4      	b.n	800b1ea <_printf_float+0x196>
 800b200:	2301      	movs	r3, #1
 800b202:	e7f2      	b.n	800b1ea <_printf_float+0x196>
 800b204:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b208:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b20a:	4299      	cmp	r1, r3
 800b20c:	db05      	blt.n	800b21a <_printf_float+0x1c6>
 800b20e:	6823      	ldr	r3, [r4, #0]
 800b210:	6121      	str	r1, [r4, #16]
 800b212:	07d8      	lsls	r0, r3, #31
 800b214:	d5ea      	bpl.n	800b1ec <_printf_float+0x198>
 800b216:	1c4b      	adds	r3, r1, #1
 800b218:	e7e7      	b.n	800b1ea <_printf_float+0x196>
 800b21a:	2900      	cmp	r1, #0
 800b21c:	bfd4      	ite	le
 800b21e:	f1c1 0202 	rsble	r2, r1, #2
 800b222:	2201      	movgt	r2, #1
 800b224:	4413      	add	r3, r2
 800b226:	e7e0      	b.n	800b1ea <_printf_float+0x196>
 800b228:	6823      	ldr	r3, [r4, #0]
 800b22a:	055a      	lsls	r2, r3, #21
 800b22c:	d407      	bmi.n	800b23e <_printf_float+0x1ea>
 800b22e:	6923      	ldr	r3, [r4, #16]
 800b230:	4642      	mov	r2, r8
 800b232:	4631      	mov	r1, r6
 800b234:	4628      	mov	r0, r5
 800b236:	47b8      	blx	r7
 800b238:	3001      	adds	r0, #1
 800b23a:	d12b      	bne.n	800b294 <_printf_float+0x240>
 800b23c:	e765      	b.n	800b10a <_printf_float+0xb6>
 800b23e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b242:	f240 80dd 	bls.w	800b400 <_printf_float+0x3ac>
 800b246:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b24a:	2200      	movs	r2, #0
 800b24c:	2300      	movs	r3, #0
 800b24e:	f7f5 fc3b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b252:	2800      	cmp	r0, #0
 800b254:	d033      	beq.n	800b2be <_printf_float+0x26a>
 800b256:	4a37      	ldr	r2, [pc, #220]	@ (800b334 <_printf_float+0x2e0>)
 800b258:	2301      	movs	r3, #1
 800b25a:	4631      	mov	r1, r6
 800b25c:	4628      	mov	r0, r5
 800b25e:	47b8      	blx	r7
 800b260:	3001      	adds	r0, #1
 800b262:	f43f af52 	beq.w	800b10a <_printf_float+0xb6>
 800b266:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800b26a:	4543      	cmp	r3, r8
 800b26c:	db02      	blt.n	800b274 <_printf_float+0x220>
 800b26e:	6823      	ldr	r3, [r4, #0]
 800b270:	07d8      	lsls	r0, r3, #31
 800b272:	d50f      	bpl.n	800b294 <_printf_float+0x240>
 800b274:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b278:	4631      	mov	r1, r6
 800b27a:	4628      	mov	r0, r5
 800b27c:	47b8      	blx	r7
 800b27e:	3001      	adds	r0, #1
 800b280:	f43f af43 	beq.w	800b10a <_printf_float+0xb6>
 800b284:	f04f 0900 	mov.w	r9, #0
 800b288:	f108 38ff 	add.w	r8, r8, #4294967295
 800b28c:	f104 0a1a 	add.w	sl, r4, #26
 800b290:	45c8      	cmp	r8, r9
 800b292:	dc09      	bgt.n	800b2a8 <_printf_float+0x254>
 800b294:	6823      	ldr	r3, [r4, #0]
 800b296:	079b      	lsls	r3, r3, #30
 800b298:	f100 8103 	bmi.w	800b4a2 <_printf_float+0x44e>
 800b29c:	68e0      	ldr	r0, [r4, #12]
 800b29e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2a0:	4298      	cmp	r0, r3
 800b2a2:	bfb8      	it	lt
 800b2a4:	4618      	movlt	r0, r3
 800b2a6:	e732      	b.n	800b10e <_printf_float+0xba>
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	4652      	mov	r2, sl
 800b2ac:	4631      	mov	r1, r6
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	47b8      	blx	r7
 800b2b2:	3001      	adds	r0, #1
 800b2b4:	f43f af29 	beq.w	800b10a <_printf_float+0xb6>
 800b2b8:	f109 0901 	add.w	r9, r9, #1
 800b2bc:	e7e8      	b.n	800b290 <_printf_float+0x23c>
 800b2be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	dc39      	bgt.n	800b338 <_printf_float+0x2e4>
 800b2c4:	4a1b      	ldr	r2, [pc, #108]	@ (800b334 <_printf_float+0x2e0>)
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	4631      	mov	r1, r6
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	47b8      	blx	r7
 800b2ce:	3001      	adds	r0, #1
 800b2d0:	f43f af1b 	beq.w	800b10a <_printf_float+0xb6>
 800b2d4:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800b2d8:	ea59 0303 	orrs.w	r3, r9, r3
 800b2dc:	d102      	bne.n	800b2e4 <_printf_float+0x290>
 800b2de:	6823      	ldr	r3, [r4, #0]
 800b2e0:	07d9      	lsls	r1, r3, #31
 800b2e2:	d5d7      	bpl.n	800b294 <_printf_float+0x240>
 800b2e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b2e8:	4631      	mov	r1, r6
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	47b8      	blx	r7
 800b2ee:	3001      	adds	r0, #1
 800b2f0:	f43f af0b 	beq.w	800b10a <_printf_float+0xb6>
 800b2f4:	f04f 0a00 	mov.w	sl, #0
 800b2f8:	f104 0b1a 	add.w	fp, r4, #26
 800b2fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2fe:	425b      	negs	r3, r3
 800b300:	4553      	cmp	r3, sl
 800b302:	dc01      	bgt.n	800b308 <_printf_float+0x2b4>
 800b304:	464b      	mov	r3, r9
 800b306:	e793      	b.n	800b230 <_printf_float+0x1dc>
 800b308:	2301      	movs	r3, #1
 800b30a:	465a      	mov	r2, fp
 800b30c:	4631      	mov	r1, r6
 800b30e:	4628      	mov	r0, r5
 800b310:	47b8      	blx	r7
 800b312:	3001      	adds	r0, #1
 800b314:	f43f aef9 	beq.w	800b10a <_printf_float+0xb6>
 800b318:	f10a 0a01 	add.w	sl, sl, #1
 800b31c:	e7ee      	b.n	800b2fc <_printf_float+0x2a8>
 800b31e:	bf00      	nop
 800b320:	7fefffff 	.word	0x7fefffff
 800b324:	0800dc2c 	.word	0x0800dc2c
 800b328:	0800dc30 	.word	0x0800dc30
 800b32c:	0800dc34 	.word	0x0800dc34
 800b330:	0800dc38 	.word	0x0800dc38
 800b334:	0800dc3c 	.word	0x0800dc3c
 800b338:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b33a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b33e:	4553      	cmp	r3, sl
 800b340:	bfa8      	it	ge
 800b342:	4653      	movge	r3, sl
 800b344:	2b00      	cmp	r3, #0
 800b346:	4699      	mov	r9, r3
 800b348:	dc36      	bgt.n	800b3b8 <_printf_float+0x364>
 800b34a:	f04f 0b00 	mov.w	fp, #0
 800b34e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b352:	f104 021a 	add.w	r2, r4, #26
 800b356:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b358:	930a      	str	r3, [sp, #40]	@ 0x28
 800b35a:	eba3 0309 	sub.w	r3, r3, r9
 800b35e:	455b      	cmp	r3, fp
 800b360:	dc31      	bgt.n	800b3c6 <_printf_float+0x372>
 800b362:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b364:	459a      	cmp	sl, r3
 800b366:	dc3a      	bgt.n	800b3de <_printf_float+0x38a>
 800b368:	6823      	ldr	r3, [r4, #0]
 800b36a:	07da      	lsls	r2, r3, #31
 800b36c:	d437      	bmi.n	800b3de <_printf_float+0x38a>
 800b36e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b370:	ebaa 0903 	sub.w	r9, sl, r3
 800b374:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b376:	ebaa 0303 	sub.w	r3, sl, r3
 800b37a:	4599      	cmp	r9, r3
 800b37c:	bfa8      	it	ge
 800b37e:	4699      	movge	r9, r3
 800b380:	f1b9 0f00 	cmp.w	r9, #0
 800b384:	dc33      	bgt.n	800b3ee <_printf_float+0x39a>
 800b386:	f04f 0800 	mov.w	r8, #0
 800b38a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b38e:	f104 0b1a 	add.w	fp, r4, #26
 800b392:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b394:	ebaa 0303 	sub.w	r3, sl, r3
 800b398:	eba3 0309 	sub.w	r3, r3, r9
 800b39c:	4543      	cmp	r3, r8
 800b39e:	f77f af79 	ble.w	800b294 <_printf_float+0x240>
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	465a      	mov	r2, fp
 800b3a6:	4631      	mov	r1, r6
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	47b8      	blx	r7
 800b3ac:	3001      	adds	r0, #1
 800b3ae:	f43f aeac 	beq.w	800b10a <_printf_float+0xb6>
 800b3b2:	f108 0801 	add.w	r8, r8, #1
 800b3b6:	e7ec      	b.n	800b392 <_printf_float+0x33e>
 800b3b8:	4642      	mov	r2, r8
 800b3ba:	4631      	mov	r1, r6
 800b3bc:	4628      	mov	r0, r5
 800b3be:	47b8      	blx	r7
 800b3c0:	3001      	adds	r0, #1
 800b3c2:	d1c2      	bne.n	800b34a <_printf_float+0x2f6>
 800b3c4:	e6a1      	b.n	800b10a <_printf_float+0xb6>
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	4631      	mov	r1, r6
 800b3ca:	4628      	mov	r0, r5
 800b3cc:	920a      	str	r2, [sp, #40]	@ 0x28
 800b3ce:	47b8      	blx	r7
 800b3d0:	3001      	adds	r0, #1
 800b3d2:	f43f ae9a 	beq.w	800b10a <_printf_float+0xb6>
 800b3d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3d8:	f10b 0b01 	add.w	fp, fp, #1
 800b3dc:	e7bb      	b.n	800b356 <_printf_float+0x302>
 800b3de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b3e2:	4631      	mov	r1, r6
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	47b8      	blx	r7
 800b3e8:	3001      	adds	r0, #1
 800b3ea:	d1c0      	bne.n	800b36e <_printf_float+0x31a>
 800b3ec:	e68d      	b.n	800b10a <_printf_float+0xb6>
 800b3ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3f0:	464b      	mov	r3, r9
 800b3f2:	4442      	add	r2, r8
 800b3f4:	4631      	mov	r1, r6
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	47b8      	blx	r7
 800b3fa:	3001      	adds	r0, #1
 800b3fc:	d1c3      	bne.n	800b386 <_printf_float+0x332>
 800b3fe:	e684      	b.n	800b10a <_printf_float+0xb6>
 800b400:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b404:	f1ba 0f01 	cmp.w	sl, #1
 800b408:	dc01      	bgt.n	800b40e <_printf_float+0x3ba>
 800b40a:	07db      	lsls	r3, r3, #31
 800b40c:	d536      	bpl.n	800b47c <_printf_float+0x428>
 800b40e:	2301      	movs	r3, #1
 800b410:	4642      	mov	r2, r8
 800b412:	4631      	mov	r1, r6
 800b414:	4628      	mov	r0, r5
 800b416:	47b8      	blx	r7
 800b418:	3001      	adds	r0, #1
 800b41a:	f43f ae76 	beq.w	800b10a <_printf_float+0xb6>
 800b41e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b422:	4631      	mov	r1, r6
 800b424:	4628      	mov	r0, r5
 800b426:	47b8      	blx	r7
 800b428:	3001      	adds	r0, #1
 800b42a:	f43f ae6e 	beq.w	800b10a <_printf_float+0xb6>
 800b42e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b432:	2200      	movs	r2, #0
 800b434:	2300      	movs	r3, #0
 800b436:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b43a:	f7f5 fb45 	bl	8000ac8 <__aeabi_dcmpeq>
 800b43e:	b9c0      	cbnz	r0, 800b472 <_printf_float+0x41e>
 800b440:	4653      	mov	r3, sl
 800b442:	f108 0201 	add.w	r2, r8, #1
 800b446:	4631      	mov	r1, r6
 800b448:	4628      	mov	r0, r5
 800b44a:	47b8      	blx	r7
 800b44c:	3001      	adds	r0, #1
 800b44e:	d10c      	bne.n	800b46a <_printf_float+0x416>
 800b450:	e65b      	b.n	800b10a <_printf_float+0xb6>
 800b452:	2301      	movs	r3, #1
 800b454:	465a      	mov	r2, fp
 800b456:	4631      	mov	r1, r6
 800b458:	4628      	mov	r0, r5
 800b45a:	47b8      	blx	r7
 800b45c:	3001      	adds	r0, #1
 800b45e:	f43f ae54 	beq.w	800b10a <_printf_float+0xb6>
 800b462:	f108 0801 	add.w	r8, r8, #1
 800b466:	45d0      	cmp	r8, sl
 800b468:	dbf3      	blt.n	800b452 <_printf_float+0x3fe>
 800b46a:	464b      	mov	r3, r9
 800b46c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b470:	e6df      	b.n	800b232 <_printf_float+0x1de>
 800b472:	f04f 0800 	mov.w	r8, #0
 800b476:	f104 0b1a 	add.w	fp, r4, #26
 800b47a:	e7f4      	b.n	800b466 <_printf_float+0x412>
 800b47c:	2301      	movs	r3, #1
 800b47e:	4642      	mov	r2, r8
 800b480:	e7e1      	b.n	800b446 <_printf_float+0x3f2>
 800b482:	2301      	movs	r3, #1
 800b484:	464a      	mov	r2, r9
 800b486:	4631      	mov	r1, r6
 800b488:	4628      	mov	r0, r5
 800b48a:	47b8      	blx	r7
 800b48c:	3001      	adds	r0, #1
 800b48e:	f43f ae3c 	beq.w	800b10a <_printf_float+0xb6>
 800b492:	f108 0801 	add.w	r8, r8, #1
 800b496:	68e3      	ldr	r3, [r4, #12]
 800b498:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b49a:	1a5b      	subs	r3, r3, r1
 800b49c:	4543      	cmp	r3, r8
 800b49e:	dcf0      	bgt.n	800b482 <_printf_float+0x42e>
 800b4a0:	e6fc      	b.n	800b29c <_printf_float+0x248>
 800b4a2:	f04f 0800 	mov.w	r8, #0
 800b4a6:	f104 0919 	add.w	r9, r4, #25
 800b4aa:	e7f4      	b.n	800b496 <_printf_float+0x442>

0800b4ac <_printf_common>:
 800b4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4b0:	4616      	mov	r6, r2
 800b4b2:	4698      	mov	r8, r3
 800b4b4:	688a      	ldr	r2, [r1, #8]
 800b4b6:	690b      	ldr	r3, [r1, #16]
 800b4b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	bfb8      	it	lt
 800b4c0:	4613      	movlt	r3, r2
 800b4c2:	6033      	str	r3, [r6, #0]
 800b4c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b4c8:	4607      	mov	r7, r0
 800b4ca:	460c      	mov	r4, r1
 800b4cc:	b10a      	cbz	r2, 800b4d2 <_printf_common+0x26>
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	6033      	str	r3, [r6, #0]
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	0699      	lsls	r1, r3, #26
 800b4d6:	bf42      	ittt	mi
 800b4d8:	6833      	ldrmi	r3, [r6, #0]
 800b4da:	3302      	addmi	r3, #2
 800b4dc:	6033      	strmi	r3, [r6, #0]
 800b4de:	6825      	ldr	r5, [r4, #0]
 800b4e0:	f015 0506 	ands.w	r5, r5, #6
 800b4e4:	d106      	bne.n	800b4f4 <_printf_common+0x48>
 800b4e6:	f104 0a19 	add.w	sl, r4, #25
 800b4ea:	68e3      	ldr	r3, [r4, #12]
 800b4ec:	6832      	ldr	r2, [r6, #0]
 800b4ee:	1a9b      	subs	r3, r3, r2
 800b4f0:	42ab      	cmp	r3, r5
 800b4f2:	dc26      	bgt.n	800b542 <_printf_common+0x96>
 800b4f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b4f8:	6822      	ldr	r2, [r4, #0]
 800b4fa:	3b00      	subs	r3, #0
 800b4fc:	bf18      	it	ne
 800b4fe:	2301      	movne	r3, #1
 800b500:	0692      	lsls	r2, r2, #26
 800b502:	d42b      	bmi.n	800b55c <_printf_common+0xb0>
 800b504:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b508:	4641      	mov	r1, r8
 800b50a:	4638      	mov	r0, r7
 800b50c:	47c8      	blx	r9
 800b50e:	3001      	adds	r0, #1
 800b510:	d01e      	beq.n	800b550 <_printf_common+0xa4>
 800b512:	6823      	ldr	r3, [r4, #0]
 800b514:	6922      	ldr	r2, [r4, #16]
 800b516:	f003 0306 	and.w	r3, r3, #6
 800b51a:	2b04      	cmp	r3, #4
 800b51c:	bf02      	ittt	eq
 800b51e:	68e5      	ldreq	r5, [r4, #12]
 800b520:	6833      	ldreq	r3, [r6, #0]
 800b522:	1aed      	subeq	r5, r5, r3
 800b524:	68a3      	ldr	r3, [r4, #8]
 800b526:	bf0c      	ite	eq
 800b528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b52c:	2500      	movne	r5, #0
 800b52e:	4293      	cmp	r3, r2
 800b530:	bfc4      	itt	gt
 800b532:	1a9b      	subgt	r3, r3, r2
 800b534:	18ed      	addgt	r5, r5, r3
 800b536:	2600      	movs	r6, #0
 800b538:	341a      	adds	r4, #26
 800b53a:	42b5      	cmp	r5, r6
 800b53c:	d11a      	bne.n	800b574 <_printf_common+0xc8>
 800b53e:	2000      	movs	r0, #0
 800b540:	e008      	b.n	800b554 <_printf_common+0xa8>
 800b542:	2301      	movs	r3, #1
 800b544:	4652      	mov	r2, sl
 800b546:	4641      	mov	r1, r8
 800b548:	4638      	mov	r0, r7
 800b54a:	47c8      	blx	r9
 800b54c:	3001      	adds	r0, #1
 800b54e:	d103      	bne.n	800b558 <_printf_common+0xac>
 800b550:	f04f 30ff 	mov.w	r0, #4294967295
 800b554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b558:	3501      	adds	r5, #1
 800b55a:	e7c6      	b.n	800b4ea <_printf_common+0x3e>
 800b55c:	18e1      	adds	r1, r4, r3
 800b55e:	1c5a      	adds	r2, r3, #1
 800b560:	2030      	movs	r0, #48	@ 0x30
 800b562:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b566:	4422      	add	r2, r4
 800b568:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b56c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b570:	3302      	adds	r3, #2
 800b572:	e7c7      	b.n	800b504 <_printf_common+0x58>
 800b574:	2301      	movs	r3, #1
 800b576:	4622      	mov	r2, r4
 800b578:	4641      	mov	r1, r8
 800b57a:	4638      	mov	r0, r7
 800b57c:	47c8      	blx	r9
 800b57e:	3001      	adds	r0, #1
 800b580:	d0e6      	beq.n	800b550 <_printf_common+0xa4>
 800b582:	3601      	adds	r6, #1
 800b584:	e7d9      	b.n	800b53a <_printf_common+0x8e>
	...

0800b588 <_printf_i>:
 800b588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b58c:	7e0f      	ldrb	r7, [r1, #24]
 800b58e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b590:	2f78      	cmp	r7, #120	@ 0x78
 800b592:	4691      	mov	r9, r2
 800b594:	4680      	mov	r8, r0
 800b596:	460c      	mov	r4, r1
 800b598:	469a      	mov	sl, r3
 800b59a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b59e:	d807      	bhi.n	800b5b0 <_printf_i+0x28>
 800b5a0:	2f62      	cmp	r7, #98	@ 0x62
 800b5a2:	d80a      	bhi.n	800b5ba <_printf_i+0x32>
 800b5a4:	2f00      	cmp	r7, #0
 800b5a6:	f000 80d2 	beq.w	800b74e <_printf_i+0x1c6>
 800b5aa:	2f58      	cmp	r7, #88	@ 0x58
 800b5ac:	f000 80b9 	beq.w	800b722 <_printf_i+0x19a>
 800b5b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b5b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b5b8:	e03a      	b.n	800b630 <_printf_i+0xa8>
 800b5ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b5be:	2b15      	cmp	r3, #21
 800b5c0:	d8f6      	bhi.n	800b5b0 <_printf_i+0x28>
 800b5c2:	a101      	add	r1, pc, #4	@ (adr r1, 800b5c8 <_printf_i+0x40>)
 800b5c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b5c8:	0800b621 	.word	0x0800b621
 800b5cc:	0800b635 	.word	0x0800b635
 800b5d0:	0800b5b1 	.word	0x0800b5b1
 800b5d4:	0800b5b1 	.word	0x0800b5b1
 800b5d8:	0800b5b1 	.word	0x0800b5b1
 800b5dc:	0800b5b1 	.word	0x0800b5b1
 800b5e0:	0800b635 	.word	0x0800b635
 800b5e4:	0800b5b1 	.word	0x0800b5b1
 800b5e8:	0800b5b1 	.word	0x0800b5b1
 800b5ec:	0800b5b1 	.word	0x0800b5b1
 800b5f0:	0800b5b1 	.word	0x0800b5b1
 800b5f4:	0800b735 	.word	0x0800b735
 800b5f8:	0800b65f 	.word	0x0800b65f
 800b5fc:	0800b6ef 	.word	0x0800b6ef
 800b600:	0800b5b1 	.word	0x0800b5b1
 800b604:	0800b5b1 	.word	0x0800b5b1
 800b608:	0800b757 	.word	0x0800b757
 800b60c:	0800b5b1 	.word	0x0800b5b1
 800b610:	0800b65f 	.word	0x0800b65f
 800b614:	0800b5b1 	.word	0x0800b5b1
 800b618:	0800b5b1 	.word	0x0800b5b1
 800b61c:	0800b6f7 	.word	0x0800b6f7
 800b620:	6833      	ldr	r3, [r6, #0]
 800b622:	1d1a      	adds	r2, r3, #4
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	6032      	str	r2, [r6, #0]
 800b628:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b62c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b630:	2301      	movs	r3, #1
 800b632:	e09d      	b.n	800b770 <_printf_i+0x1e8>
 800b634:	6833      	ldr	r3, [r6, #0]
 800b636:	6820      	ldr	r0, [r4, #0]
 800b638:	1d19      	adds	r1, r3, #4
 800b63a:	6031      	str	r1, [r6, #0]
 800b63c:	0606      	lsls	r6, r0, #24
 800b63e:	d501      	bpl.n	800b644 <_printf_i+0xbc>
 800b640:	681d      	ldr	r5, [r3, #0]
 800b642:	e003      	b.n	800b64c <_printf_i+0xc4>
 800b644:	0645      	lsls	r5, r0, #25
 800b646:	d5fb      	bpl.n	800b640 <_printf_i+0xb8>
 800b648:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b64c:	2d00      	cmp	r5, #0
 800b64e:	da03      	bge.n	800b658 <_printf_i+0xd0>
 800b650:	232d      	movs	r3, #45	@ 0x2d
 800b652:	426d      	negs	r5, r5
 800b654:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b658:	4859      	ldr	r0, [pc, #356]	@ (800b7c0 <_printf_i+0x238>)
 800b65a:	230a      	movs	r3, #10
 800b65c:	e011      	b.n	800b682 <_printf_i+0xfa>
 800b65e:	6821      	ldr	r1, [r4, #0]
 800b660:	6833      	ldr	r3, [r6, #0]
 800b662:	0608      	lsls	r0, r1, #24
 800b664:	f853 5b04 	ldr.w	r5, [r3], #4
 800b668:	d402      	bmi.n	800b670 <_printf_i+0xe8>
 800b66a:	0649      	lsls	r1, r1, #25
 800b66c:	bf48      	it	mi
 800b66e:	b2ad      	uxthmi	r5, r5
 800b670:	2f6f      	cmp	r7, #111	@ 0x6f
 800b672:	4853      	ldr	r0, [pc, #332]	@ (800b7c0 <_printf_i+0x238>)
 800b674:	6033      	str	r3, [r6, #0]
 800b676:	bf14      	ite	ne
 800b678:	230a      	movne	r3, #10
 800b67a:	2308      	moveq	r3, #8
 800b67c:	2100      	movs	r1, #0
 800b67e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b682:	6866      	ldr	r6, [r4, #4]
 800b684:	60a6      	str	r6, [r4, #8]
 800b686:	2e00      	cmp	r6, #0
 800b688:	bfa2      	ittt	ge
 800b68a:	6821      	ldrge	r1, [r4, #0]
 800b68c:	f021 0104 	bicge.w	r1, r1, #4
 800b690:	6021      	strge	r1, [r4, #0]
 800b692:	b90d      	cbnz	r5, 800b698 <_printf_i+0x110>
 800b694:	2e00      	cmp	r6, #0
 800b696:	d04b      	beq.n	800b730 <_printf_i+0x1a8>
 800b698:	4616      	mov	r6, r2
 800b69a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b69e:	fb03 5711 	mls	r7, r3, r1, r5
 800b6a2:	5dc7      	ldrb	r7, [r0, r7]
 800b6a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b6a8:	462f      	mov	r7, r5
 800b6aa:	42bb      	cmp	r3, r7
 800b6ac:	460d      	mov	r5, r1
 800b6ae:	d9f4      	bls.n	800b69a <_printf_i+0x112>
 800b6b0:	2b08      	cmp	r3, #8
 800b6b2:	d10b      	bne.n	800b6cc <_printf_i+0x144>
 800b6b4:	6823      	ldr	r3, [r4, #0]
 800b6b6:	07df      	lsls	r7, r3, #31
 800b6b8:	d508      	bpl.n	800b6cc <_printf_i+0x144>
 800b6ba:	6923      	ldr	r3, [r4, #16]
 800b6bc:	6861      	ldr	r1, [r4, #4]
 800b6be:	4299      	cmp	r1, r3
 800b6c0:	bfde      	ittt	le
 800b6c2:	2330      	movle	r3, #48	@ 0x30
 800b6c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b6c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b6cc:	1b92      	subs	r2, r2, r6
 800b6ce:	6122      	str	r2, [r4, #16]
 800b6d0:	f8cd a000 	str.w	sl, [sp]
 800b6d4:	464b      	mov	r3, r9
 800b6d6:	aa03      	add	r2, sp, #12
 800b6d8:	4621      	mov	r1, r4
 800b6da:	4640      	mov	r0, r8
 800b6dc:	f7ff fee6 	bl	800b4ac <_printf_common>
 800b6e0:	3001      	adds	r0, #1
 800b6e2:	d14a      	bne.n	800b77a <_printf_i+0x1f2>
 800b6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e8:	b004      	add	sp, #16
 800b6ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ee:	6823      	ldr	r3, [r4, #0]
 800b6f0:	f043 0320 	orr.w	r3, r3, #32
 800b6f4:	6023      	str	r3, [r4, #0]
 800b6f6:	4833      	ldr	r0, [pc, #204]	@ (800b7c4 <_printf_i+0x23c>)
 800b6f8:	2778      	movs	r7, #120	@ 0x78
 800b6fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b6fe:	6823      	ldr	r3, [r4, #0]
 800b700:	6831      	ldr	r1, [r6, #0]
 800b702:	061f      	lsls	r7, r3, #24
 800b704:	f851 5b04 	ldr.w	r5, [r1], #4
 800b708:	d402      	bmi.n	800b710 <_printf_i+0x188>
 800b70a:	065f      	lsls	r7, r3, #25
 800b70c:	bf48      	it	mi
 800b70e:	b2ad      	uxthmi	r5, r5
 800b710:	6031      	str	r1, [r6, #0]
 800b712:	07d9      	lsls	r1, r3, #31
 800b714:	bf44      	itt	mi
 800b716:	f043 0320 	orrmi.w	r3, r3, #32
 800b71a:	6023      	strmi	r3, [r4, #0]
 800b71c:	b11d      	cbz	r5, 800b726 <_printf_i+0x19e>
 800b71e:	2310      	movs	r3, #16
 800b720:	e7ac      	b.n	800b67c <_printf_i+0xf4>
 800b722:	4827      	ldr	r0, [pc, #156]	@ (800b7c0 <_printf_i+0x238>)
 800b724:	e7e9      	b.n	800b6fa <_printf_i+0x172>
 800b726:	6823      	ldr	r3, [r4, #0]
 800b728:	f023 0320 	bic.w	r3, r3, #32
 800b72c:	6023      	str	r3, [r4, #0]
 800b72e:	e7f6      	b.n	800b71e <_printf_i+0x196>
 800b730:	4616      	mov	r6, r2
 800b732:	e7bd      	b.n	800b6b0 <_printf_i+0x128>
 800b734:	6833      	ldr	r3, [r6, #0]
 800b736:	6825      	ldr	r5, [r4, #0]
 800b738:	6961      	ldr	r1, [r4, #20]
 800b73a:	1d18      	adds	r0, r3, #4
 800b73c:	6030      	str	r0, [r6, #0]
 800b73e:	062e      	lsls	r6, r5, #24
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	d501      	bpl.n	800b748 <_printf_i+0x1c0>
 800b744:	6019      	str	r1, [r3, #0]
 800b746:	e002      	b.n	800b74e <_printf_i+0x1c6>
 800b748:	0668      	lsls	r0, r5, #25
 800b74a:	d5fb      	bpl.n	800b744 <_printf_i+0x1bc>
 800b74c:	8019      	strh	r1, [r3, #0]
 800b74e:	2300      	movs	r3, #0
 800b750:	6123      	str	r3, [r4, #16]
 800b752:	4616      	mov	r6, r2
 800b754:	e7bc      	b.n	800b6d0 <_printf_i+0x148>
 800b756:	6833      	ldr	r3, [r6, #0]
 800b758:	1d1a      	adds	r2, r3, #4
 800b75a:	6032      	str	r2, [r6, #0]
 800b75c:	681e      	ldr	r6, [r3, #0]
 800b75e:	6862      	ldr	r2, [r4, #4]
 800b760:	2100      	movs	r1, #0
 800b762:	4630      	mov	r0, r6
 800b764:	f7f4 fd34 	bl	80001d0 <memchr>
 800b768:	b108      	cbz	r0, 800b76e <_printf_i+0x1e6>
 800b76a:	1b80      	subs	r0, r0, r6
 800b76c:	6060      	str	r0, [r4, #4]
 800b76e:	6863      	ldr	r3, [r4, #4]
 800b770:	6123      	str	r3, [r4, #16]
 800b772:	2300      	movs	r3, #0
 800b774:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b778:	e7aa      	b.n	800b6d0 <_printf_i+0x148>
 800b77a:	6923      	ldr	r3, [r4, #16]
 800b77c:	4632      	mov	r2, r6
 800b77e:	4649      	mov	r1, r9
 800b780:	4640      	mov	r0, r8
 800b782:	47d0      	blx	sl
 800b784:	3001      	adds	r0, #1
 800b786:	d0ad      	beq.n	800b6e4 <_printf_i+0x15c>
 800b788:	6823      	ldr	r3, [r4, #0]
 800b78a:	079b      	lsls	r3, r3, #30
 800b78c:	d413      	bmi.n	800b7b6 <_printf_i+0x22e>
 800b78e:	68e0      	ldr	r0, [r4, #12]
 800b790:	9b03      	ldr	r3, [sp, #12]
 800b792:	4298      	cmp	r0, r3
 800b794:	bfb8      	it	lt
 800b796:	4618      	movlt	r0, r3
 800b798:	e7a6      	b.n	800b6e8 <_printf_i+0x160>
 800b79a:	2301      	movs	r3, #1
 800b79c:	4632      	mov	r2, r6
 800b79e:	4649      	mov	r1, r9
 800b7a0:	4640      	mov	r0, r8
 800b7a2:	47d0      	blx	sl
 800b7a4:	3001      	adds	r0, #1
 800b7a6:	d09d      	beq.n	800b6e4 <_printf_i+0x15c>
 800b7a8:	3501      	adds	r5, #1
 800b7aa:	68e3      	ldr	r3, [r4, #12]
 800b7ac:	9903      	ldr	r1, [sp, #12]
 800b7ae:	1a5b      	subs	r3, r3, r1
 800b7b0:	42ab      	cmp	r3, r5
 800b7b2:	dcf2      	bgt.n	800b79a <_printf_i+0x212>
 800b7b4:	e7eb      	b.n	800b78e <_printf_i+0x206>
 800b7b6:	2500      	movs	r5, #0
 800b7b8:	f104 0619 	add.w	r6, r4, #25
 800b7bc:	e7f5      	b.n	800b7aa <_printf_i+0x222>
 800b7be:	bf00      	nop
 800b7c0:	0800dc3e 	.word	0x0800dc3e
 800b7c4:	0800dc4f 	.word	0x0800dc4f

0800b7c8 <std>:
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	b510      	push	{r4, lr}
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	e9c0 3300 	strd	r3, r3, [r0]
 800b7d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7d6:	6083      	str	r3, [r0, #8]
 800b7d8:	8181      	strh	r1, [r0, #12]
 800b7da:	6643      	str	r3, [r0, #100]	@ 0x64
 800b7dc:	81c2      	strh	r2, [r0, #14]
 800b7de:	6183      	str	r3, [r0, #24]
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	2208      	movs	r2, #8
 800b7e4:	305c      	adds	r0, #92	@ 0x5c
 800b7e6:	f000 f914 	bl	800ba12 <memset>
 800b7ea:	4b0d      	ldr	r3, [pc, #52]	@ (800b820 <std+0x58>)
 800b7ec:	6263      	str	r3, [r4, #36]	@ 0x24
 800b7ee:	4b0d      	ldr	r3, [pc, #52]	@ (800b824 <std+0x5c>)
 800b7f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b7f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b828 <std+0x60>)
 800b7f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b7f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b82c <std+0x64>)
 800b7f8:	6323      	str	r3, [r4, #48]	@ 0x30
 800b7fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b830 <std+0x68>)
 800b7fc:	6224      	str	r4, [r4, #32]
 800b7fe:	429c      	cmp	r4, r3
 800b800:	d006      	beq.n	800b810 <std+0x48>
 800b802:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b806:	4294      	cmp	r4, r2
 800b808:	d002      	beq.n	800b810 <std+0x48>
 800b80a:	33d0      	adds	r3, #208	@ 0xd0
 800b80c:	429c      	cmp	r4, r3
 800b80e:	d105      	bne.n	800b81c <std+0x54>
 800b810:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b818:	f000 b978 	b.w	800bb0c <__retarget_lock_init_recursive>
 800b81c:	bd10      	pop	{r4, pc}
 800b81e:	bf00      	nop
 800b820:	0800b98d 	.word	0x0800b98d
 800b824:	0800b9af 	.word	0x0800b9af
 800b828:	0800b9e7 	.word	0x0800b9e7
 800b82c:	0800ba0b 	.word	0x0800ba0b
 800b830:	200020e4 	.word	0x200020e4

0800b834 <stdio_exit_handler>:
 800b834:	4a02      	ldr	r2, [pc, #8]	@ (800b840 <stdio_exit_handler+0xc>)
 800b836:	4903      	ldr	r1, [pc, #12]	@ (800b844 <stdio_exit_handler+0x10>)
 800b838:	4803      	ldr	r0, [pc, #12]	@ (800b848 <stdio_exit_handler+0x14>)
 800b83a:	f000 b869 	b.w	800b910 <_fwalk_sglue>
 800b83e:	bf00      	nop
 800b840:	200000fc 	.word	0x200000fc
 800b844:	0800d469 	.word	0x0800d469
 800b848:	2000010c 	.word	0x2000010c

0800b84c <cleanup_stdio>:
 800b84c:	6841      	ldr	r1, [r0, #4]
 800b84e:	4b0c      	ldr	r3, [pc, #48]	@ (800b880 <cleanup_stdio+0x34>)
 800b850:	4299      	cmp	r1, r3
 800b852:	b510      	push	{r4, lr}
 800b854:	4604      	mov	r4, r0
 800b856:	d001      	beq.n	800b85c <cleanup_stdio+0x10>
 800b858:	f001 fe06 	bl	800d468 <_fflush_r>
 800b85c:	68a1      	ldr	r1, [r4, #8]
 800b85e:	4b09      	ldr	r3, [pc, #36]	@ (800b884 <cleanup_stdio+0x38>)
 800b860:	4299      	cmp	r1, r3
 800b862:	d002      	beq.n	800b86a <cleanup_stdio+0x1e>
 800b864:	4620      	mov	r0, r4
 800b866:	f001 fdff 	bl	800d468 <_fflush_r>
 800b86a:	68e1      	ldr	r1, [r4, #12]
 800b86c:	4b06      	ldr	r3, [pc, #24]	@ (800b888 <cleanup_stdio+0x3c>)
 800b86e:	4299      	cmp	r1, r3
 800b870:	d004      	beq.n	800b87c <cleanup_stdio+0x30>
 800b872:	4620      	mov	r0, r4
 800b874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b878:	f001 bdf6 	b.w	800d468 <_fflush_r>
 800b87c:	bd10      	pop	{r4, pc}
 800b87e:	bf00      	nop
 800b880:	200020e4 	.word	0x200020e4
 800b884:	2000214c 	.word	0x2000214c
 800b888:	200021b4 	.word	0x200021b4

0800b88c <global_stdio_init.part.0>:
 800b88c:	b510      	push	{r4, lr}
 800b88e:	4b0b      	ldr	r3, [pc, #44]	@ (800b8bc <global_stdio_init.part.0+0x30>)
 800b890:	4c0b      	ldr	r4, [pc, #44]	@ (800b8c0 <global_stdio_init.part.0+0x34>)
 800b892:	4a0c      	ldr	r2, [pc, #48]	@ (800b8c4 <global_stdio_init.part.0+0x38>)
 800b894:	601a      	str	r2, [r3, #0]
 800b896:	4620      	mov	r0, r4
 800b898:	2200      	movs	r2, #0
 800b89a:	2104      	movs	r1, #4
 800b89c:	f7ff ff94 	bl	800b7c8 <std>
 800b8a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	2109      	movs	r1, #9
 800b8a8:	f7ff ff8e 	bl	800b7c8 <std>
 800b8ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b8b0:	2202      	movs	r2, #2
 800b8b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8b6:	2112      	movs	r1, #18
 800b8b8:	f7ff bf86 	b.w	800b7c8 <std>
 800b8bc:	2000221c 	.word	0x2000221c
 800b8c0:	200020e4 	.word	0x200020e4
 800b8c4:	0800b835 	.word	0x0800b835

0800b8c8 <__sfp_lock_acquire>:
 800b8c8:	4801      	ldr	r0, [pc, #4]	@ (800b8d0 <__sfp_lock_acquire+0x8>)
 800b8ca:	f000 b920 	b.w	800bb0e <__retarget_lock_acquire_recursive>
 800b8ce:	bf00      	nop
 800b8d0:	20002225 	.word	0x20002225

0800b8d4 <__sfp_lock_release>:
 800b8d4:	4801      	ldr	r0, [pc, #4]	@ (800b8dc <__sfp_lock_release+0x8>)
 800b8d6:	f000 b91b 	b.w	800bb10 <__retarget_lock_release_recursive>
 800b8da:	bf00      	nop
 800b8dc:	20002225 	.word	0x20002225

0800b8e0 <__sinit>:
 800b8e0:	b510      	push	{r4, lr}
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	f7ff fff0 	bl	800b8c8 <__sfp_lock_acquire>
 800b8e8:	6a23      	ldr	r3, [r4, #32]
 800b8ea:	b11b      	cbz	r3, 800b8f4 <__sinit+0x14>
 800b8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8f0:	f7ff bff0 	b.w	800b8d4 <__sfp_lock_release>
 800b8f4:	4b04      	ldr	r3, [pc, #16]	@ (800b908 <__sinit+0x28>)
 800b8f6:	6223      	str	r3, [r4, #32]
 800b8f8:	4b04      	ldr	r3, [pc, #16]	@ (800b90c <__sinit+0x2c>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d1f5      	bne.n	800b8ec <__sinit+0xc>
 800b900:	f7ff ffc4 	bl	800b88c <global_stdio_init.part.0>
 800b904:	e7f2      	b.n	800b8ec <__sinit+0xc>
 800b906:	bf00      	nop
 800b908:	0800b84d 	.word	0x0800b84d
 800b90c:	2000221c 	.word	0x2000221c

0800b910 <_fwalk_sglue>:
 800b910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b914:	4607      	mov	r7, r0
 800b916:	4688      	mov	r8, r1
 800b918:	4614      	mov	r4, r2
 800b91a:	2600      	movs	r6, #0
 800b91c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b920:	f1b9 0901 	subs.w	r9, r9, #1
 800b924:	d505      	bpl.n	800b932 <_fwalk_sglue+0x22>
 800b926:	6824      	ldr	r4, [r4, #0]
 800b928:	2c00      	cmp	r4, #0
 800b92a:	d1f7      	bne.n	800b91c <_fwalk_sglue+0xc>
 800b92c:	4630      	mov	r0, r6
 800b92e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b932:	89ab      	ldrh	r3, [r5, #12]
 800b934:	2b01      	cmp	r3, #1
 800b936:	d907      	bls.n	800b948 <_fwalk_sglue+0x38>
 800b938:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b93c:	3301      	adds	r3, #1
 800b93e:	d003      	beq.n	800b948 <_fwalk_sglue+0x38>
 800b940:	4629      	mov	r1, r5
 800b942:	4638      	mov	r0, r7
 800b944:	47c0      	blx	r8
 800b946:	4306      	orrs	r6, r0
 800b948:	3568      	adds	r5, #104	@ 0x68
 800b94a:	e7e9      	b.n	800b920 <_fwalk_sglue+0x10>

0800b94c <siprintf>:
 800b94c:	b40e      	push	{r1, r2, r3}
 800b94e:	b500      	push	{lr}
 800b950:	b09c      	sub	sp, #112	@ 0x70
 800b952:	ab1d      	add	r3, sp, #116	@ 0x74
 800b954:	9002      	str	r0, [sp, #8]
 800b956:	9006      	str	r0, [sp, #24]
 800b958:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b95c:	4809      	ldr	r0, [pc, #36]	@ (800b984 <siprintf+0x38>)
 800b95e:	9107      	str	r1, [sp, #28]
 800b960:	9104      	str	r1, [sp, #16]
 800b962:	4909      	ldr	r1, [pc, #36]	@ (800b988 <siprintf+0x3c>)
 800b964:	f853 2b04 	ldr.w	r2, [r3], #4
 800b968:	9105      	str	r1, [sp, #20]
 800b96a:	6800      	ldr	r0, [r0, #0]
 800b96c:	9301      	str	r3, [sp, #4]
 800b96e:	a902      	add	r1, sp, #8
 800b970:	f001 fbfe 	bl	800d170 <_svfiprintf_r>
 800b974:	9b02      	ldr	r3, [sp, #8]
 800b976:	2200      	movs	r2, #0
 800b978:	701a      	strb	r2, [r3, #0]
 800b97a:	b01c      	add	sp, #112	@ 0x70
 800b97c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b980:	b003      	add	sp, #12
 800b982:	4770      	bx	lr
 800b984:	20000108 	.word	0x20000108
 800b988:	ffff0208 	.word	0xffff0208

0800b98c <__sread>:
 800b98c:	b510      	push	{r4, lr}
 800b98e:	460c      	mov	r4, r1
 800b990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b994:	f000 f86c 	bl	800ba70 <_read_r>
 800b998:	2800      	cmp	r0, #0
 800b99a:	bfab      	itete	ge
 800b99c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b99e:	89a3      	ldrhlt	r3, [r4, #12]
 800b9a0:	181b      	addge	r3, r3, r0
 800b9a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b9a6:	bfac      	ite	ge
 800b9a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b9aa:	81a3      	strhlt	r3, [r4, #12]
 800b9ac:	bd10      	pop	{r4, pc}

0800b9ae <__swrite>:
 800b9ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9b2:	461f      	mov	r7, r3
 800b9b4:	898b      	ldrh	r3, [r1, #12]
 800b9b6:	05db      	lsls	r3, r3, #23
 800b9b8:	4605      	mov	r5, r0
 800b9ba:	460c      	mov	r4, r1
 800b9bc:	4616      	mov	r6, r2
 800b9be:	d505      	bpl.n	800b9cc <__swrite+0x1e>
 800b9c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9c4:	2302      	movs	r3, #2
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f000 f840 	bl	800ba4c <_lseek_r>
 800b9cc:	89a3      	ldrh	r3, [r4, #12]
 800b9ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b9d6:	81a3      	strh	r3, [r4, #12]
 800b9d8:	4632      	mov	r2, r6
 800b9da:	463b      	mov	r3, r7
 800b9dc:	4628      	mov	r0, r5
 800b9de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e2:	f000 b857 	b.w	800ba94 <_write_r>

0800b9e6 <__sseek>:
 800b9e6:	b510      	push	{r4, lr}
 800b9e8:	460c      	mov	r4, r1
 800b9ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ee:	f000 f82d 	bl	800ba4c <_lseek_r>
 800b9f2:	1c43      	adds	r3, r0, #1
 800b9f4:	89a3      	ldrh	r3, [r4, #12]
 800b9f6:	bf15      	itete	ne
 800b9f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b9fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b9fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ba02:	81a3      	strheq	r3, [r4, #12]
 800ba04:	bf18      	it	ne
 800ba06:	81a3      	strhne	r3, [r4, #12]
 800ba08:	bd10      	pop	{r4, pc}

0800ba0a <__sclose>:
 800ba0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba0e:	f000 b80d 	b.w	800ba2c <_close_r>

0800ba12 <memset>:
 800ba12:	4402      	add	r2, r0
 800ba14:	4603      	mov	r3, r0
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d100      	bne.n	800ba1c <memset+0xa>
 800ba1a:	4770      	bx	lr
 800ba1c:	f803 1b01 	strb.w	r1, [r3], #1
 800ba20:	e7f9      	b.n	800ba16 <memset+0x4>
	...

0800ba24 <_localeconv_r>:
 800ba24:	4800      	ldr	r0, [pc, #0]	@ (800ba28 <_localeconv_r+0x4>)
 800ba26:	4770      	bx	lr
 800ba28:	20000248 	.word	0x20000248

0800ba2c <_close_r>:
 800ba2c:	b538      	push	{r3, r4, r5, lr}
 800ba2e:	4d06      	ldr	r5, [pc, #24]	@ (800ba48 <_close_r+0x1c>)
 800ba30:	2300      	movs	r3, #0
 800ba32:	4604      	mov	r4, r0
 800ba34:	4608      	mov	r0, r1
 800ba36:	602b      	str	r3, [r5, #0]
 800ba38:	f7f6 faad 	bl	8001f96 <_close>
 800ba3c:	1c43      	adds	r3, r0, #1
 800ba3e:	d102      	bne.n	800ba46 <_close_r+0x1a>
 800ba40:	682b      	ldr	r3, [r5, #0]
 800ba42:	b103      	cbz	r3, 800ba46 <_close_r+0x1a>
 800ba44:	6023      	str	r3, [r4, #0]
 800ba46:	bd38      	pop	{r3, r4, r5, pc}
 800ba48:	20002220 	.word	0x20002220

0800ba4c <_lseek_r>:
 800ba4c:	b538      	push	{r3, r4, r5, lr}
 800ba4e:	4d07      	ldr	r5, [pc, #28]	@ (800ba6c <_lseek_r+0x20>)
 800ba50:	4604      	mov	r4, r0
 800ba52:	4608      	mov	r0, r1
 800ba54:	4611      	mov	r1, r2
 800ba56:	2200      	movs	r2, #0
 800ba58:	602a      	str	r2, [r5, #0]
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	f7f6 fabf 	bl	8001fde <_lseek>
 800ba60:	1c43      	adds	r3, r0, #1
 800ba62:	d102      	bne.n	800ba6a <_lseek_r+0x1e>
 800ba64:	682b      	ldr	r3, [r5, #0]
 800ba66:	b103      	cbz	r3, 800ba6a <_lseek_r+0x1e>
 800ba68:	6023      	str	r3, [r4, #0]
 800ba6a:	bd38      	pop	{r3, r4, r5, pc}
 800ba6c:	20002220 	.word	0x20002220

0800ba70 <_read_r>:
 800ba70:	b538      	push	{r3, r4, r5, lr}
 800ba72:	4d07      	ldr	r5, [pc, #28]	@ (800ba90 <_read_r+0x20>)
 800ba74:	4604      	mov	r4, r0
 800ba76:	4608      	mov	r0, r1
 800ba78:	4611      	mov	r1, r2
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	602a      	str	r2, [r5, #0]
 800ba7e:	461a      	mov	r2, r3
 800ba80:	f7f6 fa50 	bl	8001f24 <_read>
 800ba84:	1c43      	adds	r3, r0, #1
 800ba86:	d102      	bne.n	800ba8e <_read_r+0x1e>
 800ba88:	682b      	ldr	r3, [r5, #0]
 800ba8a:	b103      	cbz	r3, 800ba8e <_read_r+0x1e>
 800ba8c:	6023      	str	r3, [r4, #0]
 800ba8e:	bd38      	pop	{r3, r4, r5, pc}
 800ba90:	20002220 	.word	0x20002220

0800ba94 <_write_r>:
 800ba94:	b538      	push	{r3, r4, r5, lr}
 800ba96:	4d07      	ldr	r5, [pc, #28]	@ (800bab4 <_write_r+0x20>)
 800ba98:	4604      	mov	r4, r0
 800ba9a:	4608      	mov	r0, r1
 800ba9c:	4611      	mov	r1, r2
 800ba9e:	2200      	movs	r2, #0
 800baa0:	602a      	str	r2, [r5, #0]
 800baa2:	461a      	mov	r2, r3
 800baa4:	f7f6 fa5b 	bl	8001f5e <_write>
 800baa8:	1c43      	adds	r3, r0, #1
 800baaa:	d102      	bne.n	800bab2 <_write_r+0x1e>
 800baac:	682b      	ldr	r3, [r5, #0]
 800baae:	b103      	cbz	r3, 800bab2 <_write_r+0x1e>
 800bab0:	6023      	str	r3, [r4, #0]
 800bab2:	bd38      	pop	{r3, r4, r5, pc}
 800bab4:	20002220 	.word	0x20002220

0800bab8 <__errno>:
 800bab8:	4b01      	ldr	r3, [pc, #4]	@ (800bac0 <__errno+0x8>)
 800baba:	6818      	ldr	r0, [r3, #0]
 800babc:	4770      	bx	lr
 800babe:	bf00      	nop
 800bac0:	20000108 	.word	0x20000108

0800bac4 <__libc_init_array>:
 800bac4:	b570      	push	{r4, r5, r6, lr}
 800bac6:	4d0d      	ldr	r5, [pc, #52]	@ (800bafc <__libc_init_array+0x38>)
 800bac8:	4c0d      	ldr	r4, [pc, #52]	@ (800bb00 <__libc_init_array+0x3c>)
 800baca:	1b64      	subs	r4, r4, r5
 800bacc:	10a4      	asrs	r4, r4, #2
 800bace:	2600      	movs	r6, #0
 800bad0:	42a6      	cmp	r6, r4
 800bad2:	d109      	bne.n	800bae8 <__libc_init_array+0x24>
 800bad4:	4d0b      	ldr	r5, [pc, #44]	@ (800bb04 <__libc_init_array+0x40>)
 800bad6:	4c0c      	ldr	r4, [pc, #48]	@ (800bb08 <__libc_init_array+0x44>)
 800bad8:	f002 f862 	bl	800dba0 <_init>
 800badc:	1b64      	subs	r4, r4, r5
 800bade:	10a4      	asrs	r4, r4, #2
 800bae0:	2600      	movs	r6, #0
 800bae2:	42a6      	cmp	r6, r4
 800bae4:	d105      	bne.n	800baf2 <__libc_init_array+0x2e>
 800bae6:	bd70      	pop	{r4, r5, r6, pc}
 800bae8:	f855 3b04 	ldr.w	r3, [r5], #4
 800baec:	4798      	blx	r3
 800baee:	3601      	adds	r6, #1
 800baf0:	e7ee      	b.n	800bad0 <__libc_init_array+0xc>
 800baf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800baf6:	4798      	blx	r3
 800baf8:	3601      	adds	r6, #1
 800bafa:	e7f2      	b.n	800bae2 <__libc_init_array+0x1e>
 800bafc:	0800dfa8 	.word	0x0800dfa8
 800bb00:	0800dfa8 	.word	0x0800dfa8
 800bb04:	0800dfa8 	.word	0x0800dfa8
 800bb08:	0800dfac 	.word	0x0800dfac

0800bb0c <__retarget_lock_init_recursive>:
 800bb0c:	4770      	bx	lr

0800bb0e <__retarget_lock_acquire_recursive>:
 800bb0e:	4770      	bx	lr

0800bb10 <__retarget_lock_release_recursive>:
 800bb10:	4770      	bx	lr

0800bb12 <quorem>:
 800bb12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb16:	6903      	ldr	r3, [r0, #16]
 800bb18:	690c      	ldr	r4, [r1, #16]
 800bb1a:	42a3      	cmp	r3, r4
 800bb1c:	4607      	mov	r7, r0
 800bb1e:	db7e      	blt.n	800bc1e <quorem+0x10c>
 800bb20:	3c01      	subs	r4, #1
 800bb22:	f101 0814 	add.w	r8, r1, #20
 800bb26:	00a3      	lsls	r3, r4, #2
 800bb28:	f100 0514 	add.w	r5, r0, #20
 800bb2c:	9300      	str	r3, [sp, #0]
 800bb2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb32:	9301      	str	r3, [sp, #4]
 800bb34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bb44:	fbb2 f6f3 	udiv	r6, r2, r3
 800bb48:	d32e      	bcc.n	800bba8 <quorem+0x96>
 800bb4a:	f04f 0a00 	mov.w	sl, #0
 800bb4e:	46c4      	mov	ip, r8
 800bb50:	46ae      	mov	lr, r5
 800bb52:	46d3      	mov	fp, sl
 800bb54:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bb58:	b298      	uxth	r0, r3
 800bb5a:	fb06 a000 	mla	r0, r6, r0, sl
 800bb5e:	0c02      	lsrs	r2, r0, #16
 800bb60:	0c1b      	lsrs	r3, r3, #16
 800bb62:	fb06 2303 	mla	r3, r6, r3, r2
 800bb66:	f8de 2000 	ldr.w	r2, [lr]
 800bb6a:	b280      	uxth	r0, r0
 800bb6c:	b292      	uxth	r2, r2
 800bb6e:	1a12      	subs	r2, r2, r0
 800bb70:	445a      	add	r2, fp
 800bb72:	f8de 0000 	ldr.w	r0, [lr]
 800bb76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bb80:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bb84:	b292      	uxth	r2, r2
 800bb86:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bb8a:	45e1      	cmp	r9, ip
 800bb8c:	f84e 2b04 	str.w	r2, [lr], #4
 800bb90:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bb94:	d2de      	bcs.n	800bb54 <quorem+0x42>
 800bb96:	9b00      	ldr	r3, [sp, #0]
 800bb98:	58eb      	ldr	r3, [r5, r3]
 800bb9a:	b92b      	cbnz	r3, 800bba8 <quorem+0x96>
 800bb9c:	9b01      	ldr	r3, [sp, #4]
 800bb9e:	3b04      	subs	r3, #4
 800bba0:	429d      	cmp	r5, r3
 800bba2:	461a      	mov	r2, r3
 800bba4:	d32f      	bcc.n	800bc06 <quorem+0xf4>
 800bba6:	613c      	str	r4, [r7, #16]
 800bba8:	4638      	mov	r0, r7
 800bbaa:	f001 f97f 	bl	800ceac <__mcmp>
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	db25      	blt.n	800bbfe <quorem+0xec>
 800bbb2:	4629      	mov	r1, r5
 800bbb4:	2000      	movs	r0, #0
 800bbb6:	f858 2b04 	ldr.w	r2, [r8], #4
 800bbba:	f8d1 c000 	ldr.w	ip, [r1]
 800bbbe:	fa1f fe82 	uxth.w	lr, r2
 800bbc2:	fa1f f38c 	uxth.w	r3, ip
 800bbc6:	eba3 030e 	sub.w	r3, r3, lr
 800bbca:	4403      	add	r3, r0
 800bbcc:	0c12      	lsrs	r2, r2, #16
 800bbce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bbd2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbdc:	45c1      	cmp	r9, r8
 800bbde:	f841 3b04 	str.w	r3, [r1], #4
 800bbe2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bbe6:	d2e6      	bcs.n	800bbb6 <quorem+0xa4>
 800bbe8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bbf0:	b922      	cbnz	r2, 800bbfc <quorem+0xea>
 800bbf2:	3b04      	subs	r3, #4
 800bbf4:	429d      	cmp	r5, r3
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	d30b      	bcc.n	800bc12 <quorem+0x100>
 800bbfa:	613c      	str	r4, [r7, #16]
 800bbfc:	3601      	adds	r6, #1
 800bbfe:	4630      	mov	r0, r6
 800bc00:	b003      	add	sp, #12
 800bc02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc06:	6812      	ldr	r2, [r2, #0]
 800bc08:	3b04      	subs	r3, #4
 800bc0a:	2a00      	cmp	r2, #0
 800bc0c:	d1cb      	bne.n	800bba6 <quorem+0x94>
 800bc0e:	3c01      	subs	r4, #1
 800bc10:	e7c6      	b.n	800bba0 <quorem+0x8e>
 800bc12:	6812      	ldr	r2, [r2, #0]
 800bc14:	3b04      	subs	r3, #4
 800bc16:	2a00      	cmp	r2, #0
 800bc18:	d1ef      	bne.n	800bbfa <quorem+0xe8>
 800bc1a:	3c01      	subs	r4, #1
 800bc1c:	e7ea      	b.n	800bbf4 <quorem+0xe2>
 800bc1e:	2000      	movs	r0, #0
 800bc20:	e7ee      	b.n	800bc00 <quorem+0xee>
 800bc22:	0000      	movs	r0, r0
 800bc24:	0000      	movs	r0, r0
	...

0800bc28 <_dtoa_r>:
 800bc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc2c:	69c7      	ldr	r7, [r0, #28]
 800bc2e:	b097      	sub	sp, #92	@ 0x5c
 800bc30:	4614      	mov	r4, r2
 800bc32:	461d      	mov	r5, r3
 800bc34:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bc38:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800bc3a:	4683      	mov	fp, r0
 800bc3c:	b97f      	cbnz	r7, 800bc5e <_dtoa_r+0x36>
 800bc3e:	2010      	movs	r0, #16
 800bc40:	f000 fe04 	bl	800c84c <malloc>
 800bc44:	4602      	mov	r2, r0
 800bc46:	f8cb 001c 	str.w	r0, [fp, #28]
 800bc4a:	b920      	cbnz	r0, 800bc56 <_dtoa_r+0x2e>
 800bc4c:	4ba8      	ldr	r3, [pc, #672]	@ (800bef0 <_dtoa_r+0x2c8>)
 800bc4e:	21ef      	movs	r1, #239	@ 0xef
 800bc50:	48a8      	ldr	r0, [pc, #672]	@ (800bef4 <_dtoa_r+0x2cc>)
 800bc52:	f001 fc69 	bl	800d528 <__assert_func>
 800bc56:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bc5a:	6007      	str	r7, [r0, #0]
 800bc5c:	60c7      	str	r7, [r0, #12]
 800bc5e:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bc62:	6819      	ldr	r1, [r3, #0]
 800bc64:	b159      	cbz	r1, 800bc7e <_dtoa_r+0x56>
 800bc66:	685a      	ldr	r2, [r3, #4]
 800bc68:	604a      	str	r2, [r1, #4]
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	4093      	lsls	r3, r2
 800bc6e:	608b      	str	r3, [r1, #8]
 800bc70:	4658      	mov	r0, fp
 800bc72:	f000 fee1 	bl	800ca38 <_Bfree>
 800bc76:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	601a      	str	r2, [r3, #0]
 800bc7e:	1e2b      	subs	r3, r5, #0
 800bc80:	bfb9      	ittee	lt
 800bc82:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bc86:	9303      	strlt	r3, [sp, #12]
 800bc88:	2300      	movge	r3, #0
 800bc8a:	6033      	strge	r3, [r6, #0]
 800bc8c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bc90:	4b99      	ldr	r3, [pc, #612]	@ (800bef8 <_dtoa_r+0x2d0>)
 800bc92:	bfbc      	itt	lt
 800bc94:	2201      	movlt	r2, #1
 800bc96:	6032      	strlt	r2, [r6, #0]
 800bc98:	ea33 0308 	bics.w	r3, r3, r8
 800bc9c:	d112      	bne.n	800bcc4 <_dtoa_r+0x9c>
 800bc9e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bca0:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bca4:	6013      	str	r3, [r2, #0]
 800bca6:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bcaa:	4323      	orrs	r3, r4
 800bcac:	f000 8551 	beq.w	800c752 <_dtoa_r+0xb2a>
 800bcb0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bcb2:	f8df a248 	ldr.w	sl, [pc, #584]	@ 800befc <_dtoa_r+0x2d4>
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	f000 8553 	beq.w	800c762 <_dtoa_r+0xb3a>
 800bcbc:	f10a 0303 	add.w	r3, sl, #3
 800bcc0:	f000 bd4d 	b.w	800c75e <_dtoa_r+0xb36>
 800bcc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcc8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bccc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	f7f4 fef8 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcd8:	4607      	mov	r7, r0
 800bcda:	b158      	cbz	r0, 800bcf4 <_dtoa_r+0xcc>
 800bcdc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bcde:	2301      	movs	r3, #1
 800bce0:	6013      	str	r3, [r2, #0]
 800bce2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bce4:	b113      	cbz	r3, 800bcec <_dtoa_r+0xc4>
 800bce6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bce8:	4b85      	ldr	r3, [pc, #532]	@ (800bf00 <_dtoa_r+0x2d8>)
 800bcea:	6013      	str	r3, [r2, #0]
 800bcec:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800bf04 <_dtoa_r+0x2dc>
 800bcf0:	f000 bd37 	b.w	800c762 <_dtoa_r+0xb3a>
 800bcf4:	ab14      	add	r3, sp, #80	@ 0x50
 800bcf6:	9301      	str	r3, [sp, #4]
 800bcf8:	ab15      	add	r3, sp, #84	@ 0x54
 800bcfa:	9300      	str	r3, [sp, #0]
 800bcfc:	4658      	mov	r0, fp
 800bcfe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bd02:	f001 f981 	bl	800d008 <__d2b>
 800bd06:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800bd0a:	4681      	mov	r9, r0
 800bd0c:	2e00      	cmp	r6, #0
 800bd0e:	d076      	beq.n	800bdfe <_dtoa_r+0x1d6>
 800bd10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd12:	9712      	str	r7, [sp, #72]	@ 0x48
 800bd14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bd20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bd24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bd28:	4619      	mov	r1, r3
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	4b76      	ldr	r3, [pc, #472]	@ (800bf08 <_dtoa_r+0x2e0>)
 800bd2e:	f7f4 faab 	bl	8000288 <__aeabi_dsub>
 800bd32:	a369      	add	r3, pc, #420	@ (adr r3, 800bed8 <_dtoa_r+0x2b0>)
 800bd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd38:	f7f4 fc5e 	bl	80005f8 <__aeabi_dmul>
 800bd3c:	a368      	add	r3, pc, #416	@ (adr r3, 800bee0 <_dtoa_r+0x2b8>)
 800bd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd42:	f7f4 faa3 	bl	800028c <__adddf3>
 800bd46:	4604      	mov	r4, r0
 800bd48:	4630      	mov	r0, r6
 800bd4a:	460d      	mov	r5, r1
 800bd4c:	f7f4 fbea 	bl	8000524 <__aeabi_i2d>
 800bd50:	a365      	add	r3, pc, #404	@ (adr r3, 800bee8 <_dtoa_r+0x2c0>)
 800bd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd56:	f7f4 fc4f 	bl	80005f8 <__aeabi_dmul>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	4620      	mov	r0, r4
 800bd60:	4629      	mov	r1, r5
 800bd62:	f7f4 fa93 	bl	800028c <__adddf3>
 800bd66:	4604      	mov	r4, r0
 800bd68:	460d      	mov	r5, r1
 800bd6a:	f7f4 fef5 	bl	8000b58 <__aeabi_d2iz>
 800bd6e:	2200      	movs	r2, #0
 800bd70:	4607      	mov	r7, r0
 800bd72:	2300      	movs	r3, #0
 800bd74:	4620      	mov	r0, r4
 800bd76:	4629      	mov	r1, r5
 800bd78:	f7f4 feb0 	bl	8000adc <__aeabi_dcmplt>
 800bd7c:	b140      	cbz	r0, 800bd90 <_dtoa_r+0x168>
 800bd7e:	4638      	mov	r0, r7
 800bd80:	f7f4 fbd0 	bl	8000524 <__aeabi_i2d>
 800bd84:	4622      	mov	r2, r4
 800bd86:	462b      	mov	r3, r5
 800bd88:	f7f4 fe9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd8c:	b900      	cbnz	r0, 800bd90 <_dtoa_r+0x168>
 800bd8e:	3f01      	subs	r7, #1
 800bd90:	2f16      	cmp	r7, #22
 800bd92:	d852      	bhi.n	800be3a <_dtoa_r+0x212>
 800bd94:	4b5d      	ldr	r3, [pc, #372]	@ (800bf0c <_dtoa_r+0x2e4>)
 800bd96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bda2:	f7f4 fe9b 	bl	8000adc <__aeabi_dcmplt>
 800bda6:	2800      	cmp	r0, #0
 800bda8:	d049      	beq.n	800be3e <_dtoa_r+0x216>
 800bdaa:	3f01      	subs	r7, #1
 800bdac:	2300      	movs	r3, #0
 800bdae:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bdb0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bdb2:	1b9b      	subs	r3, r3, r6
 800bdb4:	1e5a      	subs	r2, r3, #1
 800bdb6:	bf44      	itt	mi
 800bdb8:	f1c3 0801 	rsbmi	r8, r3, #1
 800bdbc:	2300      	movmi	r3, #0
 800bdbe:	9209      	str	r2, [sp, #36]	@ 0x24
 800bdc0:	bf54      	ite	pl
 800bdc2:	f04f 0800 	movpl.w	r8, #0
 800bdc6:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800bdc8:	2f00      	cmp	r7, #0
 800bdca:	db3a      	blt.n	800be42 <_dtoa_r+0x21a>
 800bdcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdce:	970e      	str	r7, [sp, #56]	@ 0x38
 800bdd0:	443b      	add	r3, r7
 800bdd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bdd8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bdda:	2b09      	cmp	r3, #9
 800bddc:	d865      	bhi.n	800beaa <_dtoa_r+0x282>
 800bdde:	2b05      	cmp	r3, #5
 800bde0:	bfc4      	itt	gt
 800bde2:	3b04      	subgt	r3, #4
 800bde4:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800bde6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bde8:	f1a3 0302 	sub.w	r3, r3, #2
 800bdec:	bfcc      	ite	gt
 800bdee:	2400      	movgt	r4, #0
 800bdf0:	2401      	movle	r4, #1
 800bdf2:	2b03      	cmp	r3, #3
 800bdf4:	d864      	bhi.n	800bec0 <_dtoa_r+0x298>
 800bdf6:	e8df f003 	tbb	[pc, r3]
 800bdfa:	382b      	.short	0x382b
 800bdfc:	5636      	.short	0x5636
 800bdfe:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800be02:	441e      	add	r6, r3
 800be04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800be08:	2b20      	cmp	r3, #32
 800be0a:	bfc1      	itttt	gt
 800be0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800be10:	fa08 f803 	lslgt.w	r8, r8, r3
 800be14:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800be18:	fa24 f303 	lsrgt.w	r3, r4, r3
 800be1c:	bfd6      	itet	le
 800be1e:	f1c3 0320 	rsble	r3, r3, #32
 800be22:	ea48 0003 	orrgt.w	r0, r8, r3
 800be26:	fa04 f003 	lslle.w	r0, r4, r3
 800be2a:	f7f4 fb6b 	bl	8000504 <__aeabi_ui2d>
 800be2e:	2201      	movs	r2, #1
 800be30:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800be34:	3e01      	subs	r6, #1
 800be36:	9212      	str	r2, [sp, #72]	@ 0x48
 800be38:	e776      	b.n	800bd28 <_dtoa_r+0x100>
 800be3a:	2301      	movs	r3, #1
 800be3c:	e7b7      	b.n	800bdae <_dtoa_r+0x186>
 800be3e:	900f      	str	r0, [sp, #60]	@ 0x3c
 800be40:	e7b6      	b.n	800bdb0 <_dtoa_r+0x188>
 800be42:	427b      	negs	r3, r7
 800be44:	930a      	str	r3, [sp, #40]	@ 0x28
 800be46:	2300      	movs	r3, #0
 800be48:	eba8 0807 	sub.w	r8, r8, r7
 800be4c:	930e      	str	r3, [sp, #56]	@ 0x38
 800be4e:	e7c3      	b.n	800bdd8 <_dtoa_r+0x1b0>
 800be50:	2300      	movs	r3, #0
 800be52:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be54:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800be56:	2b00      	cmp	r3, #0
 800be58:	dc35      	bgt.n	800bec6 <_dtoa_r+0x29e>
 800be5a:	2301      	movs	r3, #1
 800be5c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800be60:	461a      	mov	r2, r3
 800be62:	9221      	str	r2, [sp, #132]	@ 0x84
 800be64:	e00b      	b.n	800be7e <_dtoa_r+0x256>
 800be66:	2301      	movs	r3, #1
 800be68:	e7f3      	b.n	800be52 <_dtoa_r+0x22a>
 800be6a:	2300      	movs	r3, #0
 800be6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be6e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800be70:	18fb      	adds	r3, r7, r3
 800be72:	9308      	str	r3, [sp, #32]
 800be74:	3301      	adds	r3, #1
 800be76:	2b01      	cmp	r3, #1
 800be78:	9307      	str	r3, [sp, #28]
 800be7a:	bfb8      	it	lt
 800be7c:	2301      	movlt	r3, #1
 800be7e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800be82:	2100      	movs	r1, #0
 800be84:	2204      	movs	r2, #4
 800be86:	f102 0514 	add.w	r5, r2, #20
 800be8a:	429d      	cmp	r5, r3
 800be8c:	d91f      	bls.n	800bece <_dtoa_r+0x2a6>
 800be8e:	6041      	str	r1, [r0, #4]
 800be90:	4658      	mov	r0, fp
 800be92:	f000 fd91 	bl	800c9b8 <_Balloc>
 800be96:	4682      	mov	sl, r0
 800be98:	2800      	cmp	r0, #0
 800be9a:	d13b      	bne.n	800bf14 <_dtoa_r+0x2ec>
 800be9c:	4b1c      	ldr	r3, [pc, #112]	@ (800bf10 <_dtoa_r+0x2e8>)
 800be9e:	4602      	mov	r2, r0
 800bea0:	f240 11af 	movw	r1, #431	@ 0x1af
 800bea4:	e6d4      	b.n	800bc50 <_dtoa_r+0x28>
 800bea6:	2301      	movs	r3, #1
 800bea8:	e7e0      	b.n	800be6c <_dtoa_r+0x244>
 800beaa:	2401      	movs	r4, #1
 800beac:	2300      	movs	r3, #0
 800beae:	9320      	str	r3, [sp, #128]	@ 0x80
 800beb0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800beb2:	f04f 33ff 	mov.w	r3, #4294967295
 800beb6:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800beba:	2200      	movs	r2, #0
 800bebc:	2312      	movs	r3, #18
 800bebe:	e7d0      	b.n	800be62 <_dtoa_r+0x23a>
 800bec0:	2301      	movs	r3, #1
 800bec2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bec4:	e7f5      	b.n	800beb2 <_dtoa_r+0x28a>
 800bec6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bec8:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800becc:	e7d7      	b.n	800be7e <_dtoa_r+0x256>
 800bece:	3101      	adds	r1, #1
 800bed0:	0052      	lsls	r2, r2, #1
 800bed2:	e7d8      	b.n	800be86 <_dtoa_r+0x25e>
 800bed4:	f3af 8000 	nop.w
 800bed8:	636f4361 	.word	0x636f4361
 800bedc:	3fd287a7 	.word	0x3fd287a7
 800bee0:	8b60c8b3 	.word	0x8b60c8b3
 800bee4:	3fc68a28 	.word	0x3fc68a28
 800bee8:	509f79fb 	.word	0x509f79fb
 800beec:	3fd34413 	.word	0x3fd34413
 800bef0:	0800dc6d 	.word	0x0800dc6d
 800bef4:	0800dc84 	.word	0x0800dc84
 800bef8:	7ff00000 	.word	0x7ff00000
 800befc:	0800dc69 	.word	0x0800dc69
 800bf00:	0800dc3d 	.word	0x0800dc3d
 800bf04:	0800dc3c 	.word	0x0800dc3c
 800bf08:	3ff80000 	.word	0x3ff80000
 800bf0c:	0800dd80 	.word	0x0800dd80
 800bf10:	0800dcdc 	.word	0x0800dcdc
 800bf14:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bf18:	6018      	str	r0, [r3, #0]
 800bf1a:	9b07      	ldr	r3, [sp, #28]
 800bf1c:	2b0e      	cmp	r3, #14
 800bf1e:	f200 80a4 	bhi.w	800c06a <_dtoa_r+0x442>
 800bf22:	2c00      	cmp	r4, #0
 800bf24:	f000 80a1 	beq.w	800c06a <_dtoa_r+0x442>
 800bf28:	2f00      	cmp	r7, #0
 800bf2a:	dd33      	ble.n	800bf94 <_dtoa_r+0x36c>
 800bf2c:	4b86      	ldr	r3, [pc, #536]	@ (800c148 <_dtoa_r+0x520>)
 800bf2e:	f007 020f 	and.w	r2, r7, #15
 800bf32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf36:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bf3a:	05f8      	lsls	r0, r7, #23
 800bf3c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bf40:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bf44:	d516      	bpl.n	800bf74 <_dtoa_r+0x34c>
 800bf46:	4b81      	ldr	r3, [pc, #516]	@ (800c14c <_dtoa_r+0x524>)
 800bf48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bf50:	f7f4 fc7c 	bl	800084c <__aeabi_ddiv>
 800bf54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf58:	f004 040f 	and.w	r4, r4, #15
 800bf5c:	2603      	movs	r6, #3
 800bf5e:	4d7b      	ldr	r5, [pc, #492]	@ (800c14c <_dtoa_r+0x524>)
 800bf60:	b954      	cbnz	r4, 800bf78 <_dtoa_r+0x350>
 800bf62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf6a:	f7f4 fc6f 	bl	800084c <__aeabi_ddiv>
 800bf6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf72:	e028      	b.n	800bfc6 <_dtoa_r+0x39e>
 800bf74:	2602      	movs	r6, #2
 800bf76:	e7f2      	b.n	800bf5e <_dtoa_r+0x336>
 800bf78:	07e1      	lsls	r1, r4, #31
 800bf7a:	d508      	bpl.n	800bf8e <_dtoa_r+0x366>
 800bf7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf80:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf84:	f7f4 fb38 	bl	80005f8 <__aeabi_dmul>
 800bf88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf8c:	3601      	adds	r6, #1
 800bf8e:	1064      	asrs	r4, r4, #1
 800bf90:	3508      	adds	r5, #8
 800bf92:	e7e5      	b.n	800bf60 <_dtoa_r+0x338>
 800bf94:	f000 80d2 	beq.w	800c13c <_dtoa_r+0x514>
 800bf98:	427c      	negs	r4, r7
 800bf9a:	4b6b      	ldr	r3, [pc, #428]	@ (800c148 <_dtoa_r+0x520>)
 800bf9c:	4d6b      	ldr	r5, [pc, #428]	@ (800c14c <_dtoa_r+0x524>)
 800bf9e:	f004 020f 	and.w	r2, r4, #15
 800bfa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfaa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bfae:	f7f4 fb23 	bl	80005f8 <__aeabi_dmul>
 800bfb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfb6:	1124      	asrs	r4, r4, #4
 800bfb8:	2300      	movs	r3, #0
 800bfba:	2602      	movs	r6, #2
 800bfbc:	2c00      	cmp	r4, #0
 800bfbe:	f040 80b2 	bne.w	800c126 <_dtoa_r+0x4fe>
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d1d3      	bne.n	800bf6e <_dtoa_r+0x346>
 800bfc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfc8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	f000 80b7 	beq.w	800c140 <_dtoa_r+0x518>
 800bfd2:	4b5f      	ldr	r3, [pc, #380]	@ (800c150 <_dtoa_r+0x528>)
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	4629      	mov	r1, r5
 800bfda:	f7f4 fd7f 	bl	8000adc <__aeabi_dcmplt>
 800bfde:	2800      	cmp	r0, #0
 800bfe0:	f000 80ae 	beq.w	800c140 <_dtoa_r+0x518>
 800bfe4:	9b07      	ldr	r3, [sp, #28]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	f000 80aa 	beq.w	800c140 <_dtoa_r+0x518>
 800bfec:	9b08      	ldr	r3, [sp, #32]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	dd37      	ble.n	800c062 <_dtoa_r+0x43a>
 800bff2:	1e7b      	subs	r3, r7, #1
 800bff4:	9304      	str	r3, [sp, #16]
 800bff6:	4620      	mov	r0, r4
 800bff8:	4b56      	ldr	r3, [pc, #344]	@ (800c154 <_dtoa_r+0x52c>)
 800bffa:	2200      	movs	r2, #0
 800bffc:	4629      	mov	r1, r5
 800bffe:	f7f4 fafb 	bl	80005f8 <__aeabi_dmul>
 800c002:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c006:	9c08      	ldr	r4, [sp, #32]
 800c008:	3601      	adds	r6, #1
 800c00a:	4630      	mov	r0, r6
 800c00c:	f7f4 fa8a 	bl	8000524 <__aeabi_i2d>
 800c010:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c014:	f7f4 faf0 	bl	80005f8 <__aeabi_dmul>
 800c018:	4b4f      	ldr	r3, [pc, #316]	@ (800c158 <_dtoa_r+0x530>)
 800c01a:	2200      	movs	r2, #0
 800c01c:	f7f4 f936 	bl	800028c <__adddf3>
 800c020:	4605      	mov	r5, r0
 800c022:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c026:	2c00      	cmp	r4, #0
 800c028:	f040 809a 	bne.w	800c160 <_dtoa_r+0x538>
 800c02c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c030:	4b4a      	ldr	r3, [pc, #296]	@ (800c15c <_dtoa_r+0x534>)
 800c032:	2200      	movs	r2, #0
 800c034:	f7f4 f928 	bl	8000288 <__aeabi_dsub>
 800c038:	4602      	mov	r2, r0
 800c03a:	460b      	mov	r3, r1
 800c03c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c040:	462a      	mov	r2, r5
 800c042:	4633      	mov	r3, r6
 800c044:	f7f4 fd68 	bl	8000b18 <__aeabi_dcmpgt>
 800c048:	2800      	cmp	r0, #0
 800c04a:	f040 828e 	bne.w	800c56a <_dtoa_r+0x942>
 800c04e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c052:	462a      	mov	r2, r5
 800c054:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c058:	f7f4 fd40 	bl	8000adc <__aeabi_dcmplt>
 800c05c:	2800      	cmp	r0, #0
 800c05e:	f040 8127 	bne.w	800c2b0 <_dtoa_r+0x688>
 800c062:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c066:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c06a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f2c0 8163 	blt.w	800c338 <_dtoa_r+0x710>
 800c072:	2f0e      	cmp	r7, #14
 800c074:	f300 8160 	bgt.w	800c338 <_dtoa_r+0x710>
 800c078:	4b33      	ldr	r3, [pc, #204]	@ (800c148 <_dtoa_r+0x520>)
 800c07a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c07e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c082:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c086:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c088:	2b00      	cmp	r3, #0
 800c08a:	da03      	bge.n	800c094 <_dtoa_r+0x46c>
 800c08c:	9b07      	ldr	r3, [sp, #28]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	f340 8100 	ble.w	800c294 <_dtoa_r+0x66c>
 800c094:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c098:	4656      	mov	r6, sl
 800c09a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c09e:	4620      	mov	r0, r4
 800c0a0:	4629      	mov	r1, r5
 800c0a2:	f7f4 fbd3 	bl	800084c <__aeabi_ddiv>
 800c0a6:	f7f4 fd57 	bl	8000b58 <__aeabi_d2iz>
 800c0aa:	4680      	mov	r8, r0
 800c0ac:	f7f4 fa3a 	bl	8000524 <__aeabi_i2d>
 800c0b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0b4:	f7f4 faa0 	bl	80005f8 <__aeabi_dmul>
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	4620      	mov	r0, r4
 800c0be:	4629      	mov	r1, r5
 800c0c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c0c4:	f7f4 f8e0 	bl	8000288 <__aeabi_dsub>
 800c0c8:	f806 4b01 	strb.w	r4, [r6], #1
 800c0cc:	9d07      	ldr	r5, [sp, #28]
 800c0ce:	eba6 040a 	sub.w	r4, r6, sl
 800c0d2:	42a5      	cmp	r5, r4
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	460b      	mov	r3, r1
 800c0d8:	f040 8116 	bne.w	800c308 <_dtoa_r+0x6e0>
 800c0dc:	f7f4 f8d6 	bl	800028c <__adddf3>
 800c0e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0e4:	4604      	mov	r4, r0
 800c0e6:	460d      	mov	r5, r1
 800c0e8:	f7f4 fd16 	bl	8000b18 <__aeabi_dcmpgt>
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	f040 80f8 	bne.w	800c2e2 <_dtoa_r+0x6ba>
 800c0f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	4629      	mov	r1, r5
 800c0fa:	f7f4 fce5 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0fe:	b118      	cbz	r0, 800c108 <_dtoa_r+0x4e0>
 800c100:	f018 0f01 	tst.w	r8, #1
 800c104:	f040 80ed 	bne.w	800c2e2 <_dtoa_r+0x6ba>
 800c108:	4649      	mov	r1, r9
 800c10a:	4658      	mov	r0, fp
 800c10c:	f000 fc94 	bl	800ca38 <_Bfree>
 800c110:	2300      	movs	r3, #0
 800c112:	7033      	strb	r3, [r6, #0]
 800c114:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c116:	3701      	adds	r7, #1
 800c118:	601f      	str	r7, [r3, #0]
 800c11a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	f000 8320 	beq.w	800c762 <_dtoa_r+0xb3a>
 800c122:	601e      	str	r6, [r3, #0]
 800c124:	e31d      	b.n	800c762 <_dtoa_r+0xb3a>
 800c126:	07e2      	lsls	r2, r4, #31
 800c128:	d505      	bpl.n	800c136 <_dtoa_r+0x50e>
 800c12a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c12e:	f7f4 fa63 	bl	80005f8 <__aeabi_dmul>
 800c132:	3601      	adds	r6, #1
 800c134:	2301      	movs	r3, #1
 800c136:	1064      	asrs	r4, r4, #1
 800c138:	3508      	adds	r5, #8
 800c13a:	e73f      	b.n	800bfbc <_dtoa_r+0x394>
 800c13c:	2602      	movs	r6, #2
 800c13e:	e742      	b.n	800bfc6 <_dtoa_r+0x39e>
 800c140:	9c07      	ldr	r4, [sp, #28]
 800c142:	9704      	str	r7, [sp, #16]
 800c144:	e761      	b.n	800c00a <_dtoa_r+0x3e2>
 800c146:	bf00      	nop
 800c148:	0800dd80 	.word	0x0800dd80
 800c14c:	0800dd58 	.word	0x0800dd58
 800c150:	3ff00000 	.word	0x3ff00000
 800c154:	40240000 	.word	0x40240000
 800c158:	401c0000 	.word	0x401c0000
 800c15c:	40140000 	.word	0x40140000
 800c160:	4b70      	ldr	r3, [pc, #448]	@ (800c324 <_dtoa_r+0x6fc>)
 800c162:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c164:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c168:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c16c:	4454      	add	r4, sl
 800c16e:	2900      	cmp	r1, #0
 800c170:	d045      	beq.n	800c1fe <_dtoa_r+0x5d6>
 800c172:	496d      	ldr	r1, [pc, #436]	@ (800c328 <_dtoa_r+0x700>)
 800c174:	2000      	movs	r0, #0
 800c176:	f7f4 fb69 	bl	800084c <__aeabi_ddiv>
 800c17a:	4633      	mov	r3, r6
 800c17c:	462a      	mov	r2, r5
 800c17e:	f7f4 f883 	bl	8000288 <__aeabi_dsub>
 800c182:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c186:	4656      	mov	r6, sl
 800c188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c18c:	f7f4 fce4 	bl	8000b58 <__aeabi_d2iz>
 800c190:	4605      	mov	r5, r0
 800c192:	f7f4 f9c7 	bl	8000524 <__aeabi_i2d>
 800c196:	4602      	mov	r2, r0
 800c198:	460b      	mov	r3, r1
 800c19a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c19e:	f7f4 f873 	bl	8000288 <__aeabi_dsub>
 800c1a2:	3530      	adds	r5, #48	@ 0x30
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c1ac:	f806 5b01 	strb.w	r5, [r6], #1
 800c1b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c1b4:	f7f4 fc92 	bl	8000adc <__aeabi_dcmplt>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d163      	bne.n	800c284 <_dtoa_r+0x65c>
 800c1bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1c0:	495a      	ldr	r1, [pc, #360]	@ (800c32c <_dtoa_r+0x704>)
 800c1c2:	2000      	movs	r0, #0
 800c1c4:	f7f4 f860 	bl	8000288 <__aeabi_dsub>
 800c1c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c1cc:	f7f4 fc86 	bl	8000adc <__aeabi_dcmplt>
 800c1d0:	2800      	cmp	r0, #0
 800c1d2:	f040 8087 	bne.w	800c2e4 <_dtoa_r+0x6bc>
 800c1d6:	42a6      	cmp	r6, r4
 800c1d8:	f43f af43 	beq.w	800c062 <_dtoa_r+0x43a>
 800c1dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c1e0:	4b53      	ldr	r3, [pc, #332]	@ (800c330 <_dtoa_r+0x708>)
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f7f4 fa08 	bl	80005f8 <__aeabi_dmul>
 800c1e8:	4b51      	ldr	r3, [pc, #324]	@ (800c330 <_dtoa_r+0x708>)
 800c1ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1f4:	f7f4 fa00 	bl	80005f8 <__aeabi_dmul>
 800c1f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1fc:	e7c4      	b.n	800c188 <_dtoa_r+0x560>
 800c1fe:	4631      	mov	r1, r6
 800c200:	4628      	mov	r0, r5
 800c202:	f7f4 f9f9 	bl	80005f8 <__aeabi_dmul>
 800c206:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c20a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c20c:	4656      	mov	r6, sl
 800c20e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c212:	f7f4 fca1 	bl	8000b58 <__aeabi_d2iz>
 800c216:	4605      	mov	r5, r0
 800c218:	f7f4 f984 	bl	8000524 <__aeabi_i2d>
 800c21c:	4602      	mov	r2, r0
 800c21e:	460b      	mov	r3, r1
 800c220:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c224:	f7f4 f830 	bl	8000288 <__aeabi_dsub>
 800c228:	3530      	adds	r5, #48	@ 0x30
 800c22a:	f806 5b01 	strb.w	r5, [r6], #1
 800c22e:	4602      	mov	r2, r0
 800c230:	460b      	mov	r3, r1
 800c232:	42a6      	cmp	r6, r4
 800c234:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c238:	f04f 0200 	mov.w	r2, #0
 800c23c:	d124      	bne.n	800c288 <_dtoa_r+0x660>
 800c23e:	4b3a      	ldr	r3, [pc, #232]	@ (800c328 <_dtoa_r+0x700>)
 800c240:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c244:	f7f4 f822 	bl	800028c <__adddf3>
 800c248:	4602      	mov	r2, r0
 800c24a:	460b      	mov	r3, r1
 800c24c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c250:	f7f4 fc62 	bl	8000b18 <__aeabi_dcmpgt>
 800c254:	2800      	cmp	r0, #0
 800c256:	d145      	bne.n	800c2e4 <_dtoa_r+0x6bc>
 800c258:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c25c:	4932      	ldr	r1, [pc, #200]	@ (800c328 <_dtoa_r+0x700>)
 800c25e:	2000      	movs	r0, #0
 800c260:	f7f4 f812 	bl	8000288 <__aeabi_dsub>
 800c264:	4602      	mov	r2, r0
 800c266:	460b      	mov	r3, r1
 800c268:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c26c:	f7f4 fc36 	bl	8000adc <__aeabi_dcmplt>
 800c270:	2800      	cmp	r0, #0
 800c272:	f43f aef6 	beq.w	800c062 <_dtoa_r+0x43a>
 800c276:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c278:	1e73      	subs	r3, r6, #1
 800c27a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c27c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c280:	2b30      	cmp	r3, #48	@ 0x30
 800c282:	d0f8      	beq.n	800c276 <_dtoa_r+0x64e>
 800c284:	9f04      	ldr	r7, [sp, #16]
 800c286:	e73f      	b.n	800c108 <_dtoa_r+0x4e0>
 800c288:	4b29      	ldr	r3, [pc, #164]	@ (800c330 <_dtoa_r+0x708>)
 800c28a:	f7f4 f9b5 	bl	80005f8 <__aeabi_dmul>
 800c28e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c292:	e7bc      	b.n	800c20e <_dtoa_r+0x5e6>
 800c294:	d10c      	bne.n	800c2b0 <_dtoa_r+0x688>
 800c296:	4b27      	ldr	r3, [pc, #156]	@ (800c334 <_dtoa_r+0x70c>)
 800c298:	2200      	movs	r2, #0
 800c29a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c29e:	f7f4 f9ab 	bl	80005f8 <__aeabi_dmul>
 800c2a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2a6:	f7f4 fc2d 	bl	8000b04 <__aeabi_dcmpge>
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	f000 815b 	beq.w	800c566 <_dtoa_r+0x93e>
 800c2b0:	2400      	movs	r4, #0
 800c2b2:	4625      	mov	r5, r4
 800c2b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c2b6:	43db      	mvns	r3, r3
 800c2b8:	9304      	str	r3, [sp, #16]
 800c2ba:	4656      	mov	r6, sl
 800c2bc:	2700      	movs	r7, #0
 800c2be:	4621      	mov	r1, r4
 800c2c0:	4658      	mov	r0, fp
 800c2c2:	f000 fbb9 	bl	800ca38 <_Bfree>
 800c2c6:	2d00      	cmp	r5, #0
 800c2c8:	d0dc      	beq.n	800c284 <_dtoa_r+0x65c>
 800c2ca:	b12f      	cbz	r7, 800c2d8 <_dtoa_r+0x6b0>
 800c2cc:	42af      	cmp	r7, r5
 800c2ce:	d003      	beq.n	800c2d8 <_dtoa_r+0x6b0>
 800c2d0:	4639      	mov	r1, r7
 800c2d2:	4658      	mov	r0, fp
 800c2d4:	f000 fbb0 	bl	800ca38 <_Bfree>
 800c2d8:	4629      	mov	r1, r5
 800c2da:	4658      	mov	r0, fp
 800c2dc:	f000 fbac 	bl	800ca38 <_Bfree>
 800c2e0:	e7d0      	b.n	800c284 <_dtoa_r+0x65c>
 800c2e2:	9704      	str	r7, [sp, #16]
 800c2e4:	4633      	mov	r3, r6
 800c2e6:	461e      	mov	r6, r3
 800c2e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c2ec:	2a39      	cmp	r2, #57	@ 0x39
 800c2ee:	d107      	bne.n	800c300 <_dtoa_r+0x6d8>
 800c2f0:	459a      	cmp	sl, r3
 800c2f2:	d1f8      	bne.n	800c2e6 <_dtoa_r+0x6be>
 800c2f4:	9a04      	ldr	r2, [sp, #16]
 800c2f6:	3201      	adds	r2, #1
 800c2f8:	9204      	str	r2, [sp, #16]
 800c2fa:	2230      	movs	r2, #48	@ 0x30
 800c2fc:	f88a 2000 	strb.w	r2, [sl]
 800c300:	781a      	ldrb	r2, [r3, #0]
 800c302:	3201      	adds	r2, #1
 800c304:	701a      	strb	r2, [r3, #0]
 800c306:	e7bd      	b.n	800c284 <_dtoa_r+0x65c>
 800c308:	4b09      	ldr	r3, [pc, #36]	@ (800c330 <_dtoa_r+0x708>)
 800c30a:	2200      	movs	r2, #0
 800c30c:	f7f4 f974 	bl	80005f8 <__aeabi_dmul>
 800c310:	2200      	movs	r2, #0
 800c312:	2300      	movs	r3, #0
 800c314:	4604      	mov	r4, r0
 800c316:	460d      	mov	r5, r1
 800c318:	f7f4 fbd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800c31c:	2800      	cmp	r0, #0
 800c31e:	f43f aebc 	beq.w	800c09a <_dtoa_r+0x472>
 800c322:	e6f1      	b.n	800c108 <_dtoa_r+0x4e0>
 800c324:	0800dd80 	.word	0x0800dd80
 800c328:	3fe00000 	.word	0x3fe00000
 800c32c:	3ff00000 	.word	0x3ff00000
 800c330:	40240000 	.word	0x40240000
 800c334:	40140000 	.word	0x40140000
 800c338:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c33a:	2a00      	cmp	r2, #0
 800c33c:	f000 80db 	beq.w	800c4f6 <_dtoa_r+0x8ce>
 800c340:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c342:	2a01      	cmp	r2, #1
 800c344:	f300 80bf 	bgt.w	800c4c6 <_dtoa_r+0x89e>
 800c348:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c34a:	2a00      	cmp	r2, #0
 800c34c:	f000 80b7 	beq.w	800c4be <_dtoa_r+0x896>
 800c350:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c354:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c356:	4646      	mov	r6, r8
 800c358:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c35a:	2101      	movs	r1, #1
 800c35c:	441a      	add	r2, r3
 800c35e:	4658      	mov	r0, fp
 800c360:	4498      	add	r8, r3
 800c362:	9209      	str	r2, [sp, #36]	@ 0x24
 800c364:	f000 fc1c 	bl	800cba0 <__i2b>
 800c368:	4605      	mov	r5, r0
 800c36a:	b15e      	cbz	r6, 800c384 <_dtoa_r+0x75c>
 800c36c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c36e:	2b00      	cmp	r3, #0
 800c370:	dd08      	ble.n	800c384 <_dtoa_r+0x75c>
 800c372:	42b3      	cmp	r3, r6
 800c374:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c376:	bfa8      	it	ge
 800c378:	4633      	movge	r3, r6
 800c37a:	eba8 0803 	sub.w	r8, r8, r3
 800c37e:	1af6      	subs	r6, r6, r3
 800c380:	1ad3      	subs	r3, r2, r3
 800c382:	9309      	str	r3, [sp, #36]	@ 0x24
 800c384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c386:	b1f3      	cbz	r3, 800c3c6 <_dtoa_r+0x79e>
 800c388:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	f000 80b7 	beq.w	800c4fe <_dtoa_r+0x8d6>
 800c390:	b18c      	cbz	r4, 800c3b6 <_dtoa_r+0x78e>
 800c392:	4629      	mov	r1, r5
 800c394:	4622      	mov	r2, r4
 800c396:	4658      	mov	r0, fp
 800c398:	f000 fcc2 	bl	800cd20 <__pow5mult>
 800c39c:	464a      	mov	r2, r9
 800c39e:	4601      	mov	r1, r0
 800c3a0:	4605      	mov	r5, r0
 800c3a2:	4658      	mov	r0, fp
 800c3a4:	f000 fc12 	bl	800cbcc <__multiply>
 800c3a8:	4649      	mov	r1, r9
 800c3aa:	9004      	str	r0, [sp, #16]
 800c3ac:	4658      	mov	r0, fp
 800c3ae:	f000 fb43 	bl	800ca38 <_Bfree>
 800c3b2:	9b04      	ldr	r3, [sp, #16]
 800c3b4:	4699      	mov	r9, r3
 800c3b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3b8:	1b1a      	subs	r2, r3, r4
 800c3ba:	d004      	beq.n	800c3c6 <_dtoa_r+0x79e>
 800c3bc:	4649      	mov	r1, r9
 800c3be:	4658      	mov	r0, fp
 800c3c0:	f000 fcae 	bl	800cd20 <__pow5mult>
 800c3c4:	4681      	mov	r9, r0
 800c3c6:	2101      	movs	r1, #1
 800c3c8:	4658      	mov	r0, fp
 800c3ca:	f000 fbe9 	bl	800cba0 <__i2b>
 800c3ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3d0:	4604      	mov	r4, r0
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	f000 81c9 	beq.w	800c76a <_dtoa_r+0xb42>
 800c3d8:	461a      	mov	r2, r3
 800c3da:	4601      	mov	r1, r0
 800c3dc:	4658      	mov	r0, fp
 800c3de:	f000 fc9f 	bl	800cd20 <__pow5mult>
 800c3e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	4604      	mov	r4, r0
 800c3e8:	f300 808f 	bgt.w	800c50a <_dtoa_r+0x8e2>
 800c3ec:	9b02      	ldr	r3, [sp, #8]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	f040 8087 	bne.w	800c502 <_dtoa_r+0x8da>
 800c3f4:	9b03      	ldr	r3, [sp, #12]
 800c3f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	f040 8083 	bne.w	800c506 <_dtoa_r+0x8de>
 800c400:	9b03      	ldr	r3, [sp, #12]
 800c402:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c406:	0d1b      	lsrs	r3, r3, #20
 800c408:	051b      	lsls	r3, r3, #20
 800c40a:	b12b      	cbz	r3, 800c418 <_dtoa_r+0x7f0>
 800c40c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c40e:	3301      	adds	r3, #1
 800c410:	9309      	str	r3, [sp, #36]	@ 0x24
 800c412:	f108 0801 	add.w	r8, r8, #1
 800c416:	2301      	movs	r3, #1
 800c418:	930a      	str	r3, [sp, #40]	@ 0x28
 800c41a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	f000 81aa 	beq.w	800c776 <_dtoa_r+0xb4e>
 800c422:	6923      	ldr	r3, [r4, #16]
 800c424:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c428:	6918      	ldr	r0, [r3, #16]
 800c42a:	f000 fb6d 	bl	800cb08 <__hi0bits>
 800c42e:	f1c0 0020 	rsb	r0, r0, #32
 800c432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c434:	4418      	add	r0, r3
 800c436:	f010 001f 	ands.w	r0, r0, #31
 800c43a:	d071      	beq.n	800c520 <_dtoa_r+0x8f8>
 800c43c:	f1c0 0320 	rsb	r3, r0, #32
 800c440:	2b04      	cmp	r3, #4
 800c442:	dd65      	ble.n	800c510 <_dtoa_r+0x8e8>
 800c444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c446:	f1c0 001c 	rsb	r0, r0, #28
 800c44a:	4403      	add	r3, r0
 800c44c:	4480      	add	r8, r0
 800c44e:	4406      	add	r6, r0
 800c450:	9309      	str	r3, [sp, #36]	@ 0x24
 800c452:	f1b8 0f00 	cmp.w	r8, #0
 800c456:	dd05      	ble.n	800c464 <_dtoa_r+0x83c>
 800c458:	4649      	mov	r1, r9
 800c45a:	4642      	mov	r2, r8
 800c45c:	4658      	mov	r0, fp
 800c45e:	f000 fcb9 	bl	800cdd4 <__lshift>
 800c462:	4681      	mov	r9, r0
 800c464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c466:	2b00      	cmp	r3, #0
 800c468:	dd05      	ble.n	800c476 <_dtoa_r+0x84e>
 800c46a:	4621      	mov	r1, r4
 800c46c:	461a      	mov	r2, r3
 800c46e:	4658      	mov	r0, fp
 800c470:	f000 fcb0 	bl	800cdd4 <__lshift>
 800c474:	4604      	mov	r4, r0
 800c476:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d053      	beq.n	800c524 <_dtoa_r+0x8fc>
 800c47c:	4621      	mov	r1, r4
 800c47e:	4648      	mov	r0, r9
 800c480:	f000 fd14 	bl	800ceac <__mcmp>
 800c484:	2800      	cmp	r0, #0
 800c486:	da4d      	bge.n	800c524 <_dtoa_r+0x8fc>
 800c488:	1e7b      	subs	r3, r7, #1
 800c48a:	9304      	str	r3, [sp, #16]
 800c48c:	4649      	mov	r1, r9
 800c48e:	2300      	movs	r3, #0
 800c490:	220a      	movs	r2, #10
 800c492:	4658      	mov	r0, fp
 800c494:	f000 faf2 	bl	800ca7c <__multadd>
 800c498:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c49a:	4681      	mov	r9, r0
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f000 816c 	beq.w	800c77a <_dtoa_r+0xb52>
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	4629      	mov	r1, r5
 800c4a6:	220a      	movs	r2, #10
 800c4a8:	4658      	mov	r0, fp
 800c4aa:	f000 fae7 	bl	800ca7c <__multadd>
 800c4ae:	9b08      	ldr	r3, [sp, #32]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	4605      	mov	r5, r0
 800c4b4:	dc61      	bgt.n	800c57a <_dtoa_r+0x952>
 800c4b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c4b8:	2b02      	cmp	r3, #2
 800c4ba:	dc3b      	bgt.n	800c534 <_dtoa_r+0x90c>
 800c4bc:	e05d      	b.n	800c57a <_dtoa_r+0x952>
 800c4be:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c4c0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c4c4:	e746      	b.n	800c354 <_dtoa_r+0x72c>
 800c4c6:	9b07      	ldr	r3, [sp, #28]
 800c4c8:	1e5c      	subs	r4, r3, #1
 800c4ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4cc:	42a3      	cmp	r3, r4
 800c4ce:	bfbf      	itttt	lt
 800c4d0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c4d2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800c4d4:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c4d6:	1ae3      	sublt	r3, r4, r3
 800c4d8:	bfb4      	ite	lt
 800c4da:	18d2      	addlt	r2, r2, r3
 800c4dc:	1b1c      	subge	r4, r3, r4
 800c4de:	9b07      	ldr	r3, [sp, #28]
 800c4e0:	bfbc      	itt	lt
 800c4e2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800c4e4:	2400      	movlt	r4, #0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	bfb5      	itete	lt
 800c4ea:	eba8 0603 	sublt.w	r6, r8, r3
 800c4ee:	9b07      	ldrge	r3, [sp, #28]
 800c4f0:	2300      	movlt	r3, #0
 800c4f2:	4646      	movge	r6, r8
 800c4f4:	e730      	b.n	800c358 <_dtoa_r+0x730>
 800c4f6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c4f8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c4fa:	4646      	mov	r6, r8
 800c4fc:	e735      	b.n	800c36a <_dtoa_r+0x742>
 800c4fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c500:	e75c      	b.n	800c3bc <_dtoa_r+0x794>
 800c502:	2300      	movs	r3, #0
 800c504:	e788      	b.n	800c418 <_dtoa_r+0x7f0>
 800c506:	9b02      	ldr	r3, [sp, #8]
 800c508:	e786      	b.n	800c418 <_dtoa_r+0x7f0>
 800c50a:	2300      	movs	r3, #0
 800c50c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c50e:	e788      	b.n	800c422 <_dtoa_r+0x7fa>
 800c510:	d09f      	beq.n	800c452 <_dtoa_r+0x82a>
 800c512:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c514:	331c      	adds	r3, #28
 800c516:	441a      	add	r2, r3
 800c518:	4498      	add	r8, r3
 800c51a:	441e      	add	r6, r3
 800c51c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c51e:	e798      	b.n	800c452 <_dtoa_r+0x82a>
 800c520:	4603      	mov	r3, r0
 800c522:	e7f6      	b.n	800c512 <_dtoa_r+0x8ea>
 800c524:	9b07      	ldr	r3, [sp, #28]
 800c526:	9704      	str	r7, [sp, #16]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	dc20      	bgt.n	800c56e <_dtoa_r+0x946>
 800c52c:	9308      	str	r3, [sp, #32]
 800c52e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c530:	2b02      	cmp	r3, #2
 800c532:	dd1e      	ble.n	800c572 <_dtoa_r+0x94a>
 800c534:	9b08      	ldr	r3, [sp, #32]
 800c536:	2b00      	cmp	r3, #0
 800c538:	f47f aebc 	bne.w	800c2b4 <_dtoa_r+0x68c>
 800c53c:	4621      	mov	r1, r4
 800c53e:	2205      	movs	r2, #5
 800c540:	4658      	mov	r0, fp
 800c542:	f000 fa9b 	bl	800ca7c <__multadd>
 800c546:	4601      	mov	r1, r0
 800c548:	4604      	mov	r4, r0
 800c54a:	4648      	mov	r0, r9
 800c54c:	f000 fcae 	bl	800ceac <__mcmp>
 800c550:	2800      	cmp	r0, #0
 800c552:	f77f aeaf 	ble.w	800c2b4 <_dtoa_r+0x68c>
 800c556:	4656      	mov	r6, sl
 800c558:	2331      	movs	r3, #49	@ 0x31
 800c55a:	f806 3b01 	strb.w	r3, [r6], #1
 800c55e:	9b04      	ldr	r3, [sp, #16]
 800c560:	3301      	adds	r3, #1
 800c562:	9304      	str	r3, [sp, #16]
 800c564:	e6aa      	b.n	800c2bc <_dtoa_r+0x694>
 800c566:	9c07      	ldr	r4, [sp, #28]
 800c568:	9704      	str	r7, [sp, #16]
 800c56a:	4625      	mov	r5, r4
 800c56c:	e7f3      	b.n	800c556 <_dtoa_r+0x92e>
 800c56e:	9b07      	ldr	r3, [sp, #28]
 800c570:	9308      	str	r3, [sp, #32]
 800c572:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c574:	2b00      	cmp	r3, #0
 800c576:	f000 8104 	beq.w	800c782 <_dtoa_r+0xb5a>
 800c57a:	2e00      	cmp	r6, #0
 800c57c:	dd05      	ble.n	800c58a <_dtoa_r+0x962>
 800c57e:	4629      	mov	r1, r5
 800c580:	4632      	mov	r2, r6
 800c582:	4658      	mov	r0, fp
 800c584:	f000 fc26 	bl	800cdd4 <__lshift>
 800c588:	4605      	mov	r5, r0
 800c58a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d05a      	beq.n	800c646 <_dtoa_r+0xa1e>
 800c590:	6869      	ldr	r1, [r5, #4]
 800c592:	4658      	mov	r0, fp
 800c594:	f000 fa10 	bl	800c9b8 <_Balloc>
 800c598:	4606      	mov	r6, r0
 800c59a:	b928      	cbnz	r0, 800c5a8 <_dtoa_r+0x980>
 800c59c:	4b84      	ldr	r3, [pc, #528]	@ (800c7b0 <_dtoa_r+0xb88>)
 800c59e:	4602      	mov	r2, r0
 800c5a0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c5a4:	f7ff bb54 	b.w	800bc50 <_dtoa_r+0x28>
 800c5a8:	692a      	ldr	r2, [r5, #16]
 800c5aa:	3202      	adds	r2, #2
 800c5ac:	0092      	lsls	r2, r2, #2
 800c5ae:	f105 010c 	add.w	r1, r5, #12
 800c5b2:	300c      	adds	r0, #12
 800c5b4:	f000 ffaa 	bl	800d50c <memcpy>
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	4631      	mov	r1, r6
 800c5bc:	4658      	mov	r0, fp
 800c5be:	f000 fc09 	bl	800cdd4 <__lshift>
 800c5c2:	f10a 0301 	add.w	r3, sl, #1
 800c5c6:	9307      	str	r3, [sp, #28]
 800c5c8:	9b08      	ldr	r3, [sp, #32]
 800c5ca:	4453      	add	r3, sl
 800c5cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c5ce:	9b02      	ldr	r3, [sp, #8]
 800c5d0:	f003 0301 	and.w	r3, r3, #1
 800c5d4:	462f      	mov	r7, r5
 800c5d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5d8:	4605      	mov	r5, r0
 800c5da:	9b07      	ldr	r3, [sp, #28]
 800c5dc:	4621      	mov	r1, r4
 800c5de:	3b01      	subs	r3, #1
 800c5e0:	4648      	mov	r0, r9
 800c5e2:	9302      	str	r3, [sp, #8]
 800c5e4:	f7ff fa95 	bl	800bb12 <quorem>
 800c5e8:	4639      	mov	r1, r7
 800c5ea:	9008      	str	r0, [sp, #32]
 800c5ec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c5f0:	4648      	mov	r0, r9
 800c5f2:	f000 fc5b 	bl	800ceac <__mcmp>
 800c5f6:	462a      	mov	r2, r5
 800c5f8:	9009      	str	r0, [sp, #36]	@ 0x24
 800c5fa:	4621      	mov	r1, r4
 800c5fc:	4658      	mov	r0, fp
 800c5fe:	f000 fc71 	bl	800cee4 <__mdiff>
 800c602:	68c2      	ldr	r2, [r0, #12]
 800c604:	4606      	mov	r6, r0
 800c606:	bb02      	cbnz	r2, 800c64a <_dtoa_r+0xa22>
 800c608:	4601      	mov	r1, r0
 800c60a:	4648      	mov	r0, r9
 800c60c:	f000 fc4e 	bl	800ceac <__mcmp>
 800c610:	4602      	mov	r2, r0
 800c612:	4631      	mov	r1, r6
 800c614:	4658      	mov	r0, fp
 800c616:	920c      	str	r2, [sp, #48]	@ 0x30
 800c618:	f000 fa0e 	bl	800ca38 <_Bfree>
 800c61c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c61e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c620:	9e07      	ldr	r6, [sp, #28]
 800c622:	ea43 0102 	orr.w	r1, r3, r2
 800c626:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c628:	4319      	orrs	r1, r3
 800c62a:	d110      	bne.n	800c64e <_dtoa_r+0xa26>
 800c62c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c630:	d029      	beq.n	800c686 <_dtoa_r+0xa5e>
 800c632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c634:	2b00      	cmp	r3, #0
 800c636:	dd02      	ble.n	800c63e <_dtoa_r+0xa16>
 800c638:	9b08      	ldr	r3, [sp, #32]
 800c63a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c63e:	9b02      	ldr	r3, [sp, #8]
 800c640:	f883 8000 	strb.w	r8, [r3]
 800c644:	e63b      	b.n	800c2be <_dtoa_r+0x696>
 800c646:	4628      	mov	r0, r5
 800c648:	e7bb      	b.n	800c5c2 <_dtoa_r+0x99a>
 800c64a:	2201      	movs	r2, #1
 800c64c:	e7e1      	b.n	800c612 <_dtoa_r+0x9ea>
 800c64e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c650:	2b00      	cmp	r3, #0
 800c652:	db04      	blt.n	800c65e <_dtoa_r+0xa36>
 800c654:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800c656:	430b      	orrs	r3, r1
 800c658:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c65a:	430b      	orrs	r3, r1
 800c65c:	d120      	bne.n	800c6a0 <_dtoa_r+0xa78>
 800c65e:	2a00      	cmp	r2, #0
 800c660:	dded      	ble.n	800c63e <_dtoa_r+0xa16>
 800c662:	4649      	mov	r1, r9
 800c664:	2201      	movs	r2, #1
 800c666:	4658      	mov	r0, fp
 800c668:	f000 fbb4 	bl	800cdd4 <__lshift>
 800c66c:	4621      	mov	r1, r4
 800c66e:	4681      	mov	r9, r0
 800c670:	f000 fc1c 	bl	800ceac <__mcmp>
 800c674:	2800      	cmp	r0, #0
 800c676:	dc03      	bgt.n	800c680 <_dtoa_r+0xa58>
 800c678:	d1e1      	bne.n	800c63e <_dtoa_r+0xa16>
 800c67a:	f018 0f01 	tst.w	r8, #1
 800c67e:	d0de      	beq.n	800c63e <_dtoa_r+0xa16>
 800c680:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c684:	d1d8      	bne.n	800c638 <_dtoa_r+0xa10>
 800c686:	9a02      	ldr	r2, [sp, #8]
 800c688:	2339      	movs	r3, #57	@ 0x39
 800c68a:	7013      	strb	r3, [r2, #0]
 800c68c:	4633      	mov	r3, r6
 800c68e:	461e      	mov	r6, r3
 800c690:	3b01      	subs	r3, #1
 800c692:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c696:	2a39      	cmp	r2, #57	@ 0x39
 800c698:	d052      	beq.n	800c740 <_dtoa_r+0xb18>
 800c69a:	3201      	adds	r2, #1
 800c69c:	701a      	strb	r2, [r3, #0]
 800c69e:	e60e      	b.n	800c2be <_dtoa_r+0x696>
 800c6a0:	2a00      	cmp	r2, #0
 800c6a2:	dd07      	ble.n	800c6b4 <_dtoa_r+0xa8c>
 800c6a4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c6a8:	d0ed      	beq.n	800c686 <_dtoa_r+0xa5e>
 800c6aa:	9a02      	ldr	r2, [sp, #8]
 800c6ac:	f108 0301 	add.w	r3, r8, #1
 800c6b0:	7013      	strb	r3, [r2, #0]
 800c6b2:	e604      	b.n	800c2be <_dtoa_r+0x696>
 800c6b4:	9b07      	ldr	r3, [sp, #28]
 800c6b6:	9a07      	ldr	r2, [sp, #28]
 800c6b8:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c6bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d028      	beq.n	800c714 <_dtoa_r+0xaec>
 800c6c2:	4649      	mov	r1, r9
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	220a      	movs	r2, #10
 800c6c8:	4658      	mov	r0, fp
 800c6ca:	f000 f9d7 	bl	800ca7c <__multadd>
 800c6ce:	42af      	cmp	r7, r5
 800c6d0:	4681      	mov	r9, r0
 800c6d2:	f04f 0300 	mov.w	r3, #0
 800c6d6:	f04f 020a 	mov.w	r2, #10
 800c6da:	4639      	mov	r1, r7
 800c6dc:	4658      	mov	r0, fp
 800c6de:	d107      	bne.n	800c6f0 <_dtoa_r+0xac8>
 800c6e0:	f000 f9cc 	bl	800ca7c <__multadd>
 800c6e4:	4607      	mov	r7, r0
 800c6e6:	4605      	mov	r5, r0
 800c6e8:	9b07      	ldr	r3, [sp, #28]
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	9307      	str	r3, [sp, #28]
 800c6ee:	e774      	b.n	800c5da <_dtoa_r+0x9b2>
 800c6f0:	f000 f9c4 	bl	800ca7c <__multadd>
 800c6f4:	4629      	mov	r1, r5
 800c6f6:	4607      	mov	r7, r0
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	220a      	movs	r2, #10
 800c6fc:	4658      	mov	r0, fp
 800c6fe:	f000 f9bd 	bl	800ca7c <__multadd>
 800c702:	4605      	mov	r5, r0
 800c704:	e7f0      	b.n	800c6e8 <_dtoa_r+0xac0>
 800c706:	9b08      	ldr	r3, [sp, #32]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	bfcc      	ite	gt
 800c70c:	461e      	movgt	r6, r3
 800c70e:	2601      	movle	r6, #1
 800c710:	4456      	add	r6, sl
 800c712:	2700      	movs	r7, #0
 800c714:	4649      	mov	r1, r9
 800c716:	2201      	movs	r2, #1
 800c718:	4658      	mov	r0, fp
 800c71a:	f000 fb5b 	bl	800cdd4 <__lshift>
 800c71e:	4621      	mov	r1, r4
 800c720:	4681      	mov	r9, r0
 800c722:	f000 fbc3 	bl	800ceac <__mcmp>
 800c726:	2800      	cmp	r0, #0
 800c728:	dcb0      	bgt.n	800c68c <_dtoa_r+0xa64>
 800c72a:	d102      	bne.n	800c732 <_dtoa_r+0xb0a>
 800c72c:	f018 0f01 	tst.w	r8, #1
 800c730:	d1ac      	bne.n	800c68c <_dtoa_r+0xa64>
 800c732:	4633      	mov	r3, r6
 800c734:	461e      	mov	r6, r3
 800c736:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c73a:	2a30      	cmp	r2, #48	@ 0x30
 800c73c:	d0fa      	beq.n	800c734 <_dtoa_r+0xb0c>
 800c73e:	e5be      	b.n	800c2be <_dtoa_r+0x696>
 800c740:	459a      	cmp	sl, r3
 800c742:	d1a4      	bne.n	800c68e <_dtoa_r+0xa66>
 800c744:	9b04      	ldr	r3, [sp, #16]
 800c746:	3301      	adds	r3, #1
 800c748:	9304      	str	r3, [sp, #16]
 800c74a:	2331      	movs	r3, #49	@ 0x31
 800c74c:	f88a 3000 	strb.w	r3, [sl]
 800c750:	e5b5      	b.n	800c2be <_dtoa_r+0x696>
 800c752:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c754:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c7b4 <_dtoa_r+0xb8c>
 800c758:	b11b      	cbz	r3, 800c762 <_dtoa_r+0xb3a>
 800c75a:	f10a 0308 	add.w	r3, sl, #8
 800c75e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c760:	6013      	str	r3, [r2, #0]
 800c762:	4650      	mov	r0, sl
 800c764:	b017      	add	sp, #92	@ 0x5c
 800c766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c76a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	f77f ae3d 	ble.w	800c3ec <_dtoa_r+0x7c4>
 800c772:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c774:	930a      	str	r3, [sp, #40]	@ 0x28
 800c776:	2001      	movs	r0, #1
 800c778:	e65b      	b.n	800c432 <_dtoa_r+0x80a>
 800c77a:	9b08      	ldr	r3, [sp, #32]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	f77f aed6 	ble.w	800c52e <_dtoa_r+0x906>
 800c782:	4656      	mov	r6, sl
 800c784:	4621      	mov	r1, r4
 800c786:	4648      	mov	r0, r9
 800c788:	f7ff f9c3 	bl	800bb12 <quorem>
 800c78c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c790:	f806 8b01 	strb.w	r8, [r6], #1
 800c794:	9b08      	ldr	r3, [sp, #32]
 800c796:	eba6 020a 	sub.w	r2, r6, sl
 800c79a:	4293      	cmp	r3, r2
 800c79c:	ddb3      	ble.n	800c706 <_dtoa_r+0xade>
 800c79e:	4649      	mov	r1, r9
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	220a      	movs	r2, #10
 800c7a4:	4658      	mov	r0, fp
 800c7a6:	f000 f969 	bl	800ca7c <__multadd>
 800c7aa:	4681      	mov	r9, r0
 800c7ac:	e7ea      	b.n	800c784 <_dtoa_r+0xb5c>
 800c7ae:	bf00      	nop
 800c7b0:	0800dcdc 	.word	0x0800dcdc
 800c7b4:	0800dc60 	.word	0x0800dc60

0800c7b8 <_free_r>:
 800c7b8:	b538      	push	{r3, r4, r5, lr}
 800c7ba:	4605      	mov	r5, r0
 800c7bc:	2900      	cmp	r1, #0
 800c7be:	d041      	beq.n	800c844 <_free_r+0x8c>
 800c7c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7c4:	1f0c      	subs	r4, r1, #4
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	bfb8      	it	lt
 800c7ca:	18e4      	addlt	r4, r4, r3
 800c7cc:	f000 f8e8 	bl	800c9a0 <__malloc_lock>
 800c7d0:	4a1d      	ldr	r2, [pc, #116]	@ (800c848 <_free_r+0x90>)
 800c7d2:	6813      	ldr	r3, [r2, #0]
 800c7d4:	b933      	cbnz	r3, 800c7e4 <_free_r+0x2c>
 800c7d6:	6063      	str	r3, [r4, #4]
 800c7d8:	6014      	str	r4, [r2, #0]
 800c7da:	4628      	mov	r0, r5
 800c7dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7e0:	f000 b8e4 	b.w	800c9ac <__malloc_unlock>
 800c7e4:	42a3      	cmp	r3, r4
 800c7e6:	d908      	bls.n	800c7fa <_free_r+0x42>
 800c7e8:	6820      	ldr	r0, [r4, #0]
 800c7ea:	1821      	adds	r1, r4, r0
 800c7ec:	428b      	cmp	r3, r1
 800c7ee:	bf01      	itttt	eq
 800c7f0:	6819      	ldreq	r1, [r3, #0]
 800c7f2:	685b      	ldreq	r3, [r3, #4]
 800c7f4:	1809      	addeq	r1, r1, r0
 800c7f6:	6021      	streq	r1, [r4, #0]
 800c7f8:	e7ed      	b.n	800c7d6 <_free_r+0x1e>
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	b10b      	cbz	r3, 800c804 <_free_r+0x4c>
 800c800:	42a3      	cmp	r3, r4
 800c802:	d9fa      	bls.n	800c7fa <_free_r+0x42>
 800c804:	6811      	ldr	r1, [r2, #0]
 800c806:	1850      	adds	r0, r2, r1
 800c808:	42a0      	cmp	r0, r4
 800c80a:	d10b      	bne.n	800c824 <_free_r+0x6c>
 800c80c:	6820      	ldr	r0, [r4, #0]
 800c80e:	4401      	add	r1, r0
 800c810:	1850      	adds	r0, r2, r1
 800c812:	4283      	cmp	r3, r0
 800c814:	6011      	str	r1, [r2, #0]
 800c816:	d1e0      	bne.n	800c7da <_free_r+0x22>
 800c818:	6818      	ldr	r0, [r3, #0]
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	6053      	str	r3, [r2, #4]
 800c81e:	4408      	add	r0, r1
 800c820:	6010      	str	r0, [r2, #0]
 800c822:	e7da      	b.n	800c7da <_free_r+0x22>
 800c824:	d902      	bls.n	800c82c <_free_r+0x74>
 800c826:	230c      	movs	r3, #12
 800c828:	602b      	str	r3, [r5, #0]
 800c82a:	e7d6      	b.n	800c7da <_free_r+0x22>
 800c82c:	6820      	ldr	r0, [r4, #0]
 800c82e:	1821      	adds	r1, r4, r0
 800c830:	428b      	cmp	r3, r1
 800c832:	bf04      	itt	eq
 800c834:	6819      	ldreq	r1, [r3, #0]
 800c836:	685b      	ldreq	r3, [r3, #4]
 800c838:	6063      	str	r3, [r4, #4]
 800c83a:	bf04      	itt	eq
 800c83c:	1809      	addeq	r1, r1, r0
 800c83e:	6021      	streq	r1, [r4, #0]
 800c840:	6054      	str	r4, [r2, #4]
 800c842:	e7ca      	b.n	800c7da <_free_r+0x22>
 800c844:	bd38      	pop	{r3, r4, r5, pc}
 800c846:	bf00      	nop
 800c848:	2000222c 	.word	0x2000222c

0800c84c <malloc>:
 800c84c:	4b02      	ldr	r3, [pc, #8]	@ (800c858 <malloc+0xc>)
 800c84e:	4601      	mov	r1, r0
 800c850:	6818      	ldr	r0, [r3, #0]
 800c852:	f000 b825 	b.w	800c8a0 <_malloc_r>
 800c856:	bf00      	nop
 800c858:	20000108 	.word	0x20000108

0800c85c <sbrk_aligned>:
 800c85c:	b570      	push	{r4, r5, r6, lr}
 800c85e:	4e0f      	ldr	r6, [pc, #60]	@ (800c89c <sbrk_aligned+0x40>)
 800c860:	460c      	mov	r4, r1
 800c862:	6831      	ldr	r1, [r6, #0]
 800c864:	4605      	mov	r5, r0
 800c866:	b911      	cbnz	r1, 800c86e <sbrk_aligned+0x12>
 800c868:	f000 fe40 	bl	800d4ec <_sbrk_r>
 800c86c:	6030      	str	r0, [r6, #0]
 800c86e:	4621      	mov	r1, r4
 800c870:	4628      	mov	r0, r5
 800c872:	f000 fe3b 	bl	800d4ec <_sbrk_r>
 800c876:	1c43      	adds	r3, r0, #1
 800c878:	d103      	bne.n	800c882 <sbrk_aligned+0x26>
 800c87a:	f04f 34ff 	mov.w	r4, #4294967295
 800c87e:	4620      	mov	r0, r4
 800c880:	bd70      	pop	{r4, r5, r6, pc}
 800c882:	1cc4      	adds	r4, r0, #3
 800c884:	f024 0403 	bic.w	r4, r4, #3
 800c888:	42a0      	cmp	r0, r4
 800c88a:	d0f8      	beq.n	800c87e <sbrk_aligned+0x22>
 800c88c:	1a21      	subs	r1, r4, r0
 800c88e:	4628      	mov	r0, r5
 800c890:	f000 fe2c 	bl	800d4ec <_sbrk_r>
 800c894:	3001      	adds	r0, #1
 800c896:	d1f2      	bne.n	800c87e <sbrk_aligned+0x22>
 800c898:	e7ef      	b.n	800c87a <sbrk_aligned+0x1e>
 800c89a:	bf00      	nop
 800c89c:	20002228 	.word	0x20002228

0800c8a0 <_malloc_r>:
 800c8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8a4:	1ccd      	adds	r5, r1, #3
 800c8a6:	f025 0503 	bic.w	r5, r5, #3
 800c8aa:	3508      	adds	r5, #8
 800c8ac:	2d0c      	cmp	r5, #12
 800c8ae:	bf38      	it	cc
 800c8b0:	250c      	movcc	r5, #12
 800c8b2:	2d00      	cmp	r5, #0
 800c8b4:	4606      	mov	r6, r0
 800c8b6:	db01      	blt.n	800c8bc <_malloc_r+0x1c>
 800c8b8:	42a9      	cmp	r1, r5
 800c8ba:	d904      	bls.n	800c8c6 <_malloc_r+0x26>
 800c8bc:	230c      	movs	r3, #12
 800c8be:	6033      	str	r3, [r6, #0]
 800c8c0:	2000      	movs	r0, #0
 800c8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c99c <_malloc_r+0xfc>
 800c8ca:	f000 f869 	bl	800c9a0 <__malloc_lock>
 800c8ce:	f8d8 3000 	ldr.w	r3, [r8]
 800c8d2:	461c      	mov	r4, r3
 800c8d4:	bb44      	cbnz	r4, 800c928 <_malloc_r+0x88>
 800c8d6:	4629      	mov	r1, r5
 800c8d8:	4630      	mov	r0, r6
 800c8da:	f7ff ffbf 	bl	800c85c <sbrk_aligned>
 800c8de:	1c43      	adds	r3, r0, #1
 800c8e0:	4604      	mov	r4, r0
 800c8e2:	d158      	bne.n	800c996 <_malloc_r+0xf6>
 800c8e4:	f8d8 4000 	ldr.w	r4, [r8]
 800c8e8:	4627      	mov	r7, r4
 800c8ea:	2f00      	cmp	r7, #0
 800c8ec:	d143      	bne.n	800c976 <_malloc_r+0xd6>
 800c8ee:	2c00      	cmp	r4, #0
 800c8f0:	d04b      	beq.n	800c98a <_malloc_r+0xea>
 800c8f2:	6823      	ldr	r3, [r4, #0]
 800c8f4:	4639      	mov	r1, r7
 800c8f6:	4630      	mov	r0, r6
 800c8f8:	eb04 0903 	add.w	r9, r4, r3
 800c8fc:	f000 fdf6 	bl	800d4ec <_sbrk_r>
 800c900:	4581      	cmp	r9, r0
 800c902:	d142      	bne.n	800c98a <_malloc_r+0xea>
 800c904:	6821      	ldr	r1, [r4, #0]
 800c906:	1a6d      	subs	r5, r5, r1
 800c908:	4629      	mov	r1, r5
 800c90a:	4630      	mov	r0, r6
 800c90c:	f7ff ffa6 	bl	800c85c <sbrk_aligned>
 800c910:	3001      	adds	r0, #1
 800c912:	d03a      	beq.n	800c98a <_malloc_r+0xea>
 800c914:	6823      	ldr	r3, [r4, #0]
 800c916:	442b      	add	r3, r5
 800c918:	6023      	str	r3, [r4, #0]
 800c91a:	f8d8 3000 	ldr.w	r3, [r8]
 800c91e:	685a      	ldr	r2, [r3, #4]
 800c920:	bb62      	cbnz	r2, 800c97c <_malloc_r+0xdc>
 800c922:	f8c8 7000 	str.w	r7, [r8]
 800c926:	e00f      	b.n	800c948 <_malloc_r+0xa8>
 800c928:	6822      	ldr	r2, [r4, #0]
 800c92a:	1b52      	subs	r2, r2, r5
 800c92c:	d420      	bmi.n	800c970 <_malloc_r+0xd0>
 800c92e:	2a0b      	cmp	r2, #11
 800c930:	d917      	bls.n	800c962 <_malloc_r+0xc2>
 800c932:	1961      	adds	r1, r4, r5
 800c934:	42a3      	cmp	r3, r4
 800c936:	6025      	str	r5, [r4, #0]
 800c938:	bf18      	it	ne
 800c93a:	6059      	strne	r1, [r3, #4]
 800c93c:	6863      	ldr	r3, [r4, #4]
 800c93e:	bf08      	it	eq
 800c940:	f8c8 1000 	streq.w	r1, [r8]
 800c944:	5162      	str	r2, [r4, r5]
 800c946:	604b      	str	r3, [r1, #4]
 800c948:	4630      	mov	r0, r6
 800c94a:	f000 f82f 	bl	800c9ac <__malloc_unlock>
 800c94e:	f104 000b 	add.w	r0, r4, #11
 800c952:	1d23      	adds	r3, r4, #4
 800c954:	f020 0007 	bic.w	r0, r0, #7
 800c958:	1ac2      	subs	r2, r0, r3
 800c95a:	bf1c      	itt	ne
 800c95c:	1a1b      	subne	r3, r3, r0
 800c95e:	50a3      	strne	r3, [r4, r2]
 800c960:	e7af      	b.n	800c8c2 <_malloc_r+0x22>
 800c962:	6862      	ldr	r2, [r4, #4]
 800c964:	42a3      	cmp	r3, r4
 800c966:	bf0c      	ite	eq
 800c968:	f8c8 2000 	streq.w	r2, [r8]
 800c96c:	605a      	strne	r2, [r3, #4]
 800c96e:	e7eb      	b.n	800c948 <_malloc_r+0xa8>
 800c970:	4623      	mov	r3, r4
 800c972:	6864      	ldr	r4, [r4, #4]
 800c974:	e7ae      	b.n	800c8d4 <_malloc_r+0x34>
 800c976:	463c      	mov	r4, r7
 800c978:	687f      	ldr	r7, [r7, #4]
 800c97a:	e7b6      	b.n	800c8ea <_malloc_r+0x4a>
 800c97c:	461a      	mov	r2, r3
 800c97e:	685b      	ldr	r3, [r3, #4]
 800c980:	42a3      	cmp	r3, r4
 800c982:	d1fb      	bne.n	800c97c <_malloc_r+0xdc>
 800c984:	2300      	movs	r3, #0
 800c986:	6053      	str	r3, [r2, #4]
 800c988:	e7de      	b.n	800c948 <_malloc_r+0xa8>
 800c98a:	230c      	movs	r3, #12
 800c98c:	6033      	str	r3, [r6, #0]
 800c98e:	4630      	mov	r0, r6
 800c990:	f000 f80c 	bl	800c9ac <__malloc_unlock>
 800c994:	e794      	b.n	800c8c0 <_malloc_r+0x20>
 800c996:	6005      	str	r5, [r0, #0]
 800c998:	e7d6      	b.n	800c948 <_malloc_r+0xa8>
 800c99a:	bf00      	nop
 800c99c:	2000222c 	.word	0x2000222c

0800c9a0 <__malloc_lock>:
 800c9a0:	4801      	ldr	r0, [pc, #4]	@ (800c9a8 <__malloc_lock+0x8>)
 800c9a2:	f7ff b8b4 	b.w	800bb0e <__retarget_lock_acquire_recursive>
 800c9a6:	bf00      	nop
 800c9a8:	20002224 	.word	0x20002224

0800c9ac <__malloc_unlock>:
 800c9ac:	4801      	ldr	r0, [pc, #4]	@ (800c9b4 <__malloc_unlock+0x8>)
 800c9ae:	f7ff b8af 	b.w	800bb10 <__retarget_lock_release_recursive>
 800c9b2:	bf00      	nop
 800c9b4:	20002224 	.word	0x20002224

0800c9b8 <_Balloc>:
 800c9b8:	b570      	push	{r4, r5, r6, lr}
 800c9ba:	69c6      	ldr	r6, [r0, #28]
 800c9bc:	4604      	mov	r4, r0
 800c9be:	460d      	mov	r5, r1
 800c9c0:	b976      	cbnz	r6, 800c9e0 <_Balloc+0x28>
 800c9c2:	2010      	movs	r0, #16
 800c9c4:	f7ff ff42 	bl	800c84c <malloc>
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	61e0      	str	r0, [r4, #28]
 800c9cc:	b920      	cbnz	r0, 800c9d8 <_Balloc+0x20>
 800c9ce:	4b18      	ldr	r3, [pc, #96]	@ (800ca30 <_Balloc+0x78>)
 800c9d0:	4818      	ldr	r0, [pc, #96]	@ (800ca34 <_Balloc+0x7c>)
 800c9d2:	216b      	movs	r1, #107	@ 0x6b
 800c9d4:	f000 fda8 	bl	800d528 <__assert_func>
 800c9d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9dc:	6006      	str	r6, [r0, #0]
 800c9de:	60c6      	str	r6, [r0, #12]
 800c9e0:	69e6      	ldr	r6, [r4, #28]
 800c9e2:	68f3      	ldr	r3, [r6, #12]
 800c9e4:	b183      	cbz	r3, 800ca08 <_Balloc+0x50>
 800c9e6:	69e3      	ldr	r3, [r4, #28]
 800c9e8:	68db      	ldr	r3, [r3, #12]
 800c9ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c9ee:	b9b8      	cbnz	r0, 800ca20 <_Balloc+0x68>
 800c9f0:	2101      	movs	r1, #1
 800c9f2:	fa01 f605 	lsl.w	r6, r1, r5
 800c9f6:	1d72      	adds	r2, r6, #5
 800c9f8:	0092      	lsls	r2, r2, #2
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	f000 fdb2 	bl	800d564 <_calloc_r>
 800ca00:	b160      	cbz	r0, 800ca1c <_Balloc+0x64>
 800ca02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ca06:	e00e      	b.n	800ca26 <_Balloc+0x6e>
 800ca08:	2221      	movs	r2, #33	@ 0x21
 800ca0a:	2104      	movs	r1, #4
 800ca0c:	4620      	mov	r0, r4
 800ca0e:	f000 fda9 	bl	800d564 <_calloc_r>
 800ca12:	69e3      	ldr	r3, [r4, #28]
 800ca14:	60f0      	str	r0, [r6, #12]
 800ca16:	68db      	ldr	r3, [r3, #12]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d1e4      	bne.n	800c9e6 <_Balloc+0x2e>
 800ca1c:	2000      	movs	r0, #0
 800ca1e:	bd70      	pop	{r4, r5, r6, pc}
 800ca20:	6802      	ldr	r2, [r0, #0]
 800ca22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca26:	2300      	movs	r3, #0
 800ca28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca2c:	e7f7      	b.n	800ca1e <_Balloc+0x66>
 800ca2e:	bf00      	nop
 800ca30:	0800dc6d 	.word	0x0800dc6d
 800ca34:	0800dced 	.word	0x0800dced

0800ca38 <_Bfree>:
 800ca38:	b570      	push	{r4, r5, r6, lr}
 800ca3a:	69c6      	ldr	r6, [r0, #28]
 800ca3c:	4605      	mov	r5, r0
 800ca3e:	460c      	mov	r4, r1
 800ca40:	b976      	cbnz	r6, 800ca60 <_Bfree+0x28>
 800ca42:	2010      	movs	r0, #16
 800ca44:	f7ff ff02 	bl	800c84c <malloc>
 800ca48:	4602      	mov	r2, r0
 800ca4a:	61e8      	str	r0, [r5, #28]
 800ca4c:	b920      	cbnz	r0, 800ca58 <_Bfree+0x20>
 800ca4e:	4b09      	ldr	r3, [pc, #36]	@ (800ca74 <_Bfree+0x3c>)
 800ca50:	4809      	ldr	r0, [pc, #36]	@ (800ca78 <_Bfree+0x40>)
 800ca52:	218f      	movs	r1, #143	@ 0x8f
 800ca54:	f000 fd68 	bl	800d528 <__assert_func>
 800ca58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca5c:	6006      	str	r6, [r0, #0]
 800ca5e:	60c6      	str	r6, [r0, #12]
 800ca60:	b13c      	cbz	r4, 800ca72 <_Bfree+0x3a>
 800ca62:	69eb      	ldr	r3, [r5, #28]
 800ca64:	6862      	ldr	r2, [r4, #4]
 800ca66:	68db      	ldr	r3, [r3, #12]
 800ca68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca6c:	6021      	str	r1, [r4, #0]
 800ca6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ca72:	bd70      	pop	{r4, r5, r6, pc}
 800ca74:	0800dc6d 	.word	0x0800dc6d
 800ca78:	0800dced 	.word	0x0800dced

0800ca7c <__multadd>:
 800ca7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca80:	690d      	ldr	r5, [r1, #16]
 800ca82:	4607      	mov	r7, r0
 800ca84:	460c      	mov	r4, r1
 800ca86:	461e      	mov	r6, r3
 800ca88:	f101 0c14 	add.w	ip, r1, #20
 800ca8c:	2000      	movs	r0, #0
 800ca8e:	f8dc 3000 	ldr.w	r3, [ip]
 800ca92:	b299      	uxth	r1, r3
 800ca94:	fb02 6101 	mla	r1, r2, r1, r6
 800ca98:	0c1e      	lsrs	r6, r3, #16
 800ca9a:	0c0b      	lsrs	r3, r1, #16
 800ca9c:	fb02 3306 	mla	r3, r2, r6, r3
 800caa0:	b289      	uxth	r1, r1
 800caa2:	3001      	adds	r0, #1
 800caa4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800caa8:	4285      	cmp	r5, r0
 800caaa:	f84c 1b04 	str.w	r1, [ip], #4
 800caae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cab2:	dcec      	bgt.n	800ca8e <__multadd+0x12>
 800cab4:	b30e      	cbz	r6, 800cafa <__multadd+0x7e>
 800cab6:	68a3      	ldr	r3, [r4, #8]
 800cab8:	42ab      	cmp	r3, r5
 800caba:	dc19      	bgt.n	800caf0 <__multadd+0x74>
 800cabc:	6861      	ldr	r1, [r4, #4]
 800cabe:	4638      	mov	r0, r7
 800cac0:	3101      	adds	r1, #1
 800cac2:	f7ff ff79 	bl	800c9b8 <_Balloc>
 800cac6:	4680      	mov	r8, r0
 800cac8:	b928      	cbnz	r0, 800cad6 <__multadd+0x5a>
 800caca:	4602      	mov	r2, r0
 800cacc:	4b0c      	ldr	r3, [pc, #48]	@ (800cb00 <__multadd+0x84>)
 800cace:	480d      	ldr	r0, [pc, #52]	@ (800cb04 <__multadd+0x88>)
 800cad0:	21ba      	movs	r1, #186	@ 0xba
 800cad2:	f000 fd29 	bl	800d528 <__assert_func>
 800cad6:	6922      	ldr	r2, [r4, #16]
 800cad8:	3202      	adds	r2, #2
 800cada:	f104 010c 	add.w	r1, r4, #12
 800cade:	0092      	lsls	r2, r2, #2
 800cae0:	300c      	adds	r0, #12
 800cae2:	f000 fd13 	bl	800d50c <memcpy>
 800cae6:	4621      	mov	r1, r4
 800cae8:	4638      	mov	r0, r7
 800caea:	f7ff ffa5 	bl	800ca38 <_Bfree>
 800caee:	4644      	mov	r4, r8
 800caf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800caf4:	3501      	adds	r5, #1
 800caf6:	615e      	str	r6, [r3, #20]
 800caf8:	6125      	str	r5, [r4, #16]
 800cafa:	4620      	mov	r0, r4
 800cafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb00:	0800dcdc 	.word	0x0800dcdc
 800cb04:	0800dced 	.word	0x0800dced

0800cb08 <__hi0bits>:
 800cb08:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	bf36      	itet	cc
 800cb10:	0403      	lslcc	r3, r0, #16
 800cb12:	2000      	movcs	r0, #0
 800cb14:	2010      	movcc	r0, #16
 800cb16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cb1a:	bf3c      	itt	cc
 800cb1c:	021b      	lslcc	r3, r3, #8
 800cb1e:	3008      	addcc	r0, #8
 800cb20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb24:	bf3c      	itt	cc
 800cb26:	011b      	lslcc	r3, r3, #4
 800cb28:	3004      	addcc	r0, #4
 800cb2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb2e:	bf3c      	itt	cc
 800cb30:	009b      	lslcc	r3, r3, #2
 800cb32:	3002      	addcc	r0, #2
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	db05      	blt.n	800cb44 <__hi0bits+0x3c>
 800cb38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cb3c:	f100 0001 	add.w	r0, r0, #1
 800cb40:	bf08      	it	eq
 800cb42:	2020      	moveq	r0, #32
 800cb44:	4770      	bx	lr

0800cb46 <__lo0bits>:
 800cb46:	6803      	ldr	r3, [r0, #0]
 800cb48:	4602      	mov	r2, r0
 800cb4a:	f013 0007 	ands.w	r0, r3, #7
 800cb4e:	d00b      	beq.n	800cb68 <__lo0bits+0x22>
 800cb50:	07d9      	lsls	r1, r3, #31
 800cb52:	d421      	bmi.n	800cb98 <__lo0bits+0x52>
 800cb54:	0798      	lsls	r0, r3, #30
 800cb56:	bf49      	itett	mi
 800cb58:	085b      	lsrmi	r3, r3, #1
 800cb5a:	089b      	lsrpl	r3, r3, #2
 800cb5c:	2001      	movmi	r0, #1
 800cb5e:	6013      	strmi	r3, [r2, #0]
 800cb60:	bf5c      	itt	pl
 800cb62:	6013      	strpl	r3, [r2, #0]
 800cb64:	2002      	movpl	r0, #2
 800cb66:	4770      	bx	lr
 800cb68:	b299      	uxth	r1, r3
 800cb6a:	b909      	cbnz	r1, 800cb70 <__lo0bits+0x2a>
 800cb6c:	0c1b      	lsrs	r3, r3, #16
 800cb6e:	2010      	movs	r0, #16
 800cb70:	b2d9      	uxtb	r1, r3
 800cb72:	b909      	cbnz	r1, 800cb78 <__lo0bits+0x32>
 800cb74:	3008      	adds	r0, #8
 800cb76:	0a1b      	lsrs	r3, r3, #8
 800cb78:	0719      	lsls	r1, r3, #28
 800cb7a:	bf04      	itt	eq
 800cb7c:	091b      	lsreq	r3, r3, #4
 800cb7e:	3004      	addeq	r0, #4
 800cb80:	0799      	lsls	r1, r3, #30
 800cb82:	bf04      	itt	eq
 800cb84:	089b      	lsreq	r3, r3, #2
 800cb86:	3002      	addeq	r0, #2
 800cb88:	07d9      	lsls	r1, r3, #31
 800cb8a:	d403      	bmi.n	800cb94 <__lo0bits+0x4e>
 800cb8c:	085b      	lsrs	r3, r3, #1
 800cb8e:	f100 0001 	add.w	r0, r0, #1
 800cb92:	d003      	beq.n	800cb9c <__lo0bits+0x56>
 800cb94:	6013      	str	r3, [r2, #0]
 800cb96:	4770      	bx	lr
 800cb98:	2000      	movs	r0, #0
 800cb9a:	4770      	bx	lr
 800cb9c:	2020      	movs	r0, #32
 800cb9e:	4770      	bx	lr

0800cba0 <__i2b>:
 800cba0:	b510      	push	{r4, lr}
 800cba2:	460c      	mov	r4, r1
 800cba4:	2101      	movs	r1, #1
 800cba6:	f7ff ff07 	bl	800c9b8 <_Balloc>
 800cbaa:	4602      	mov	r2, r0
 800cbac:	b928      	cbnz	r0, 800cbba <__i2b+0x1a>
 800cbae:	4b05      	ldr	r3, [pc, #20]	@ (800cbc4 <__i2b+0x24>)
 800cbb0:	4805      	ldr	r0, [pc, #20]	@ (800cbc8 <__i2b+0x28>)
 800cbb2:	f240 1145 	movw	r1, #325	@ 0x145
 800cbb6:	f000 fcb7 	bl	800d528 <__assert_func>
 800cbba:	2301      	movs	r3, #1
 800cbbc:	6144      	str	r4, [r0, #20]
 800cbbe:	6103      	str	r3, [r0, #16]
 800cbc0:	bd10      	pop	{r4, pc}
 800cbc2:	bf00      	nop
 800cbc4:	0800dcdc 	.word	0x0800dcdc
 800cbc8:	0800dced 	.word	0x0800dced

0800cbcc <__multiply>:
 800cbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbd0:	4614      	mov	r4, r2
 800cbd2:	690a      	ldr	r2, [r1, #16]
 800cbd4:	6923      	ldr	r3, [r4, #16]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	bfa8      	it	ge
 800cbda:	4623      	movge	r3, r4
 800cbdc:	460f      	mov	r7, r1
 800cbde:	bfa4      	itt	ge
 800cbe0:	460c      	movge	r4, r1
 800cbe2:	461f      	movge	r7, r3
 800cbe4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cbe8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cbec:	68a3      	ldr	r3, [r4, #8]
 800cbee:	6861      	ldr	r1, [r4, #4]
 800cbf0:	eb0a 0609 	add.w	r6, sl, r9
 800cbf4:	42b3      	cmp	r3, r6
 800cbf6:	b085      	sub	sp, #20
 800cbf8:	bfb8      	it	lt
 800cbfa:	3101      	addlt	r1, #1
 800cbfc:	f7ff fedc 	bl	800c9b8 <_Balloc>
 800cc00:	b930      	cbnz	r0, 800cc10 <__multiply+0x44>
 800cc02:	4602      	mov	r2, r0
 800cc04:	4b44      	ldr	r3, [pc, #272]	@ (800cd18 <__multiply+0x14c>)
 800cc06:	4845      	ldr	r0, [pc, #276]	@ (800cd1c <__multiply+0x150>)
 800cc08:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cc0c:	f000 fc8c 	bl	800d528 <__assert_func>
 800cc10:	f100 0514 	add.w	r5, r0, #20
 800cc14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cc18:	462b      	mov	r3, r5
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	4543      	cmp	r3, r8
 800cc1e:	d321      	bcc.n	800cc64 <__multiply+0x98>
 800cc20:	f107 0114 	add.w	r1, r7, #20
 800cc24:	f104 0214 	add.w	r2, r4, #20
 800cc28:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cc2c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cc30:	9302      	str	r3, [sp, #8]
 800cc32:	1b13      	subs	r3, r2, r4
 800cc34:	3b15      	subs	r3, #21
 800cc36:	f023 0303 	bic.w	r3, r3, #3
 800cc3a:	3304      	adds	r3, #4
 800cc3c:	f104 0715 	add.w	r7, r4, #21
 800cc40:	42ba      	cmp	r2, r7
 800cc42:	bf38      	it	cc
 800cc44:	2304      	movcc	r3, #4
 800cc46:	9301      	str	r3, [sp, #4]
 800cc48:	9b02      	ldr	r3, [sp, #8]
 800cc4a:	9103      	str	r1, [sp, #12]
 800cc4c:	428b      	cmp	r3, r1
 800cc4e:	d80c      	bhi.n	800cc6a <__multiply+0x9e>
 800cc50:	2e00      	cmp	r6, #0
 800cc52:	dd03      	ble.n	800cc5c <__multiply+0x90>
 800cc54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d05a      	beq.n	800cd12 <__multiply+0x146>
 800cc5c:	6106      	str	r6, [r0, #16]
 800cc5e:	b005      	add	sp, #20
 800cc60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc64:	f843 2b04 	str.w	r2, [r3], #4
 800cc68:	e7d8      	b.n	800cc1c <__multiply+0x50>
 800cc6a:	f8b1 a000 	ldrh.w	sl, [r1]
 800cc6e:	f1ba 0f00 	cmp.w	sl, #0
 800cc72:	d023      	beq.n	800ccbc <__multiply+0xf0>
 800cc74:	f104 0e14 	add.w	lr, r4, #20
 800cc78:	46a9      	mov	r9, r5
 800cc7a:	f04f 0c00 	mov.w	ip, #0
 800cc7e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cc82:	f8d9 3000 	ldr.w	r3, [r9]
 800cc86:	fa1f fb87 	uxth.w	fp, r7
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	fb0a 330b 	mla	r3, sl, fp, r3
 800cc90:	4463      	add	r3, ip
 800cc92:	f8d9 c000 	ldr.w	ip, [r9]
 800cc96:	0c3f      	lsrs	r7, r7, #16
 800cc98:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cc9c:	fb0a c707 	mla	r7, sl, r7, ip
 800cca0:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ccaa:	4572      	cmp	r2, lr
 800ccac:	f849 3b04 	str.w	r3, [r9], #4
 800ccb0:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ccb4:	d8e3      	bhi.n	800cc7e <__multiply+0xb2>
 800ccb6:	9b01      	ldr	r3, [sp, #4]
 800ccb8:	f845 c003 	str.w	ip, [r5, r3]
 800ccbc:	9b03      	ldr	r3, [sp, #12]
 800ccbe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ccc2:	3104      	adds	r1, #4
 800ccc4:	f1b9 0f00 	cmp.w	r9, #0
 800ccc8:	d021      	beq.n	800cd0e <__multiply+0x142>
 800ccca:	682b      	ldr	r3, [r5, #0]
 800cccc:	f104 0c14 	add.w	ip, r4, #20
 800ccd0:	46ae      	mov	lr, r5
 800ccd2:	f04f 0a00 	mov.w	sl, #0
 800ccd6:	f8bc b000 	ldrh.w	fp, [ip]
 800ccda:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ccde:	fb09 770b 	mla	r7, r9, fp, r7
 800cce2:	4457      	add	r7, sl
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ccea:	f84e 3b04 	str.w	r3, [lr], #4
 800ccee:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ccf2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ccf6:	f8be 3000 	ldrh.w	r3, [lr]
 800ccfa:	fb09 330a 	mla	r3, r9, sl, r3
 800ccfe:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cd02:	4562      	cmp	r2, ip
 800cd04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd08:	d8e5      	bhi.n	800ccd6 <__multiply+0x10a>
 800cd0a:	9f01      	ldr	r7, [sp, #4]
 800cd0c:	51eb      	str	r3, [r5, r7]
 800cd0e:	3504      	adds	r5, #4
 800cd10:	e79a      	b.n	800cc48 <__multiply+0x7c>
 800cd12:	3e01      	subs	r6, #1
 800cd14:	e79c      	b.n	800cc50 <__multiply+0x84>
 800cd16:	bf00      	nop
 800cd18:	0800dcdc 	.word	0x0800dcdc
 800cd1c:	0800dced 	.word	0x0800dced

0800cd20 <__pow5mult>:
 800cd20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd24:	4615      	mov	r5, r2
 800cd26:	f012 0203 	ands.w	r2, r2, #3
 800cd2a:	4607      	mov	r7, r0
 800cd2c:	460e      	mov	r6, r1
 800cd2e:	d007      	beq.n	800cd40 <__pow5mult+0x20>
 800cd30:	4c25      	ldr	r4, [pc, #148]	@ (800cdc8 <__pow5mult+0xa8>)
 800cd32:	3a01      	subs	r2, #1
 800cd34:	2300      	movs	r3, #0
 800cd36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd3a:	f7ff fe9f 	bl	800ca7c <__multadd>
 800cd3e:	4606      	mov	r6, r0
 800cd40:	10ad      	asrs	r5, r5, #2
 800cd42:	d03d      	beq.n	800cdc0 <__pow5mult+0xa0>
 800cd44:	69fc      	ldr	r4, [r7, #28]
 800cd46:	b97c      	cbnz	r4, 800cd68 <__pow5mult+0x48>
 800cd48:	2010      	movs	r0, #16
 800cd4a:	f7ff fd7f 	bl	800c84c <malloc>
 800cd4e:	4602      	mov	r2, r0
 800cd50:	61f8      	str	r0, [r7, #28]
 800cd52:	b928      	cbnz	r0, 800cd60 <__pow5mult+0x40>
 800cd54:	4b1d      	ldr	r3, [pc, #116]	@ (800cdcc <__pow5mult+0xac>)
 800cd56:	481e      	ldr	r0, [pc, #120]	@ (800cdd0 <__pow5mult+0xb0>)
 800cd58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cd5c:	f000 fbe4 	bl	800d528 <__assert_func>
 800cd60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd64:	6004      	str	r4, [r0, #0]
 800cd66:	60c4      	str	r4, [r0, #12]
 800cd68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cd6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd70:	b94c      	cbnz	r4, 800cd86 <__pow5mult+0x66>
 800cd72:	f240 2171 	movw	r1, #625	@ 0x271
 800cd76:	4638      	mov	r0, r7
 800cd78:	f7ff ff12 	bl	800cba0 <__i2b>
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd82:	4604      	mov	r4, r0
 800cd84:	6003      	str	r3, [r0, #0]
 800cd86:	f04f 0900 	mov.w	r9, #0
 800cd8a:	07eb      	lsls	r3, r5, #31
 800cd8c:	d50a      	bpl.n	800cda4 <__pow5mult+0x84>
 800cd8e:	4631      	mov	r1, r6
 800cd90:	4622      	mov	r2, r4
 800cd92:	4638      	mov	r0, r7
 800cd94:	f7ff ff1a 	bl	800cbcc <__multiply>
 800cd98:	4631      	mov	r1, r6
 800cd9a:	4680      	mov	r8, r0
 800cd9c:	4638      	mov	r0, r7
 800cd9e:	f7ff fe4b 	bl	800ca38 <_Bfree>
 800cda2:	4646      	mov	r6, r8
 800cda4:	106d      	asrs	r5, r5, #1
 800cda6:	d00b      	beq.n	800cdc0 <__pow5mult+0xa0>
 800cda8:	6820      	ldr	r0, [r4, #0]
 800cdaa:	b938      	cbnz	r0, 800cdbc <__pow5mult+0x9c>
 800cdac:	4622      	mov	r2, r4
 800cdae:	4621      	mov	r1, r4
 800cdb0:	4638      	mov	r0, r7
 800cdb2:	f7ff ff0b 	bl	800cbcc <__multiply>
 800cdb6:	6020      	str	r0, [r4, #0]
 800cdb8:	f8c0 9000 	str.w	r9, [r0]
 800cdbc:	4604      	mov	r4, r0
 800cdbe:	e7e4      	b.n	800cd8a <__pow5mult+0x6a>
 800cdc0:	4630      	mov	r0, r6
 800cdc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdc6:	bf00      	nop
 800cdc8:	0800dd48 	.word	0x0800dd48
 800cdcc:	0800dc6d 	.word	0x0800dc6d
 800cdd0:	0800dced 	.word	0x0800dced

0800cdd4 <__lshift>:
 800cdd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdd8:	460c      	mov	r4, r1
 800cdda:	6849      	ldr	r1, [r1, #4]
 800cddc:	6923      	ldr	r3, [r4, #16]
 800cdde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cde2:	68a3      	ldr	r3, [r4, #8]
 800cde4:	4607      	mov	r7, r0
 800cde6:	4691      	mov	r9, r2
 800cde8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cdec:	f108 0601 	add.w	r6, r8, #1
 800cdf0:	42b3      	cmp	r3, r6
 800cdf2:	db0b      	blt.n	800ce0c <__lshift+0x38>
 800cdf4:	4638      	mov	r0, r7
 800cdf6:	f7ff fddf 	bl	800c9b8 <_Balloc>
 800cdfa:	4605      	mov	r5, r0
 800cdfc:	b948      	cbnz	r0, 800ce12 <__lshift+0x3e>
 800cdfe:	4602      	mov	r2, r0
 800ce00:	4b28      	ldr	r3, [pc, #160]	@ (800cea4 <__lshift+0xd0>)
 800ce02:	4829      	ldr	r0, [pc, #164]	@ (800cea8 <__lshift+0xd4>)
 800ce04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ce08:	f000 fb8e 	bl	800d528 <__assert_func>
 800ce0c:	3101      	adds	r1, #1
 800ce0e:	005b      	lsls	r3, r3, #1
 800ce10:	e7ee      	b.n	800cdf0 <__lshift+0x1c>
 800ce12:	2300      	movs	r3, #0
 800ce14:	f100 0114 	add.w	r1, r0, #20
 800ce18:	f100 0210 	add.w	r2, r0, #16
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	4553      	cmp	r3, sl
 800ce20:	db33      	blt.n	800ce8a <__lshift+0xb6>
 800ce22:	6920      	ldr	r0, [r4, #16]
 800ce24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce28:	f104 0314 	add.w	r3, r4, #20
 800ce2c:	f019 091f 	ands.w	r9, r9, #31
 800ce30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ce38:	d02b      	beq.n	800ce92 <__lshift+0xbe>
 800ce3a:	f1c9 0e20 	rsb	lr, r9, #32
 800ce3e:	468a      	mov	sl, r1
 800ce40:	2200      	movs	r2, #0
 800ce42:	6818      	ldr	r0, [r3, #0]
 800ce44:	fa00 f009 	lsl.w	r0, r0, r9
 800ce48:	4310      	orrs	r0, r2
 800ce4a:	f84a 0b04 	str.w	r0, [sl], #4
 800ce4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce52:	459c      	cmp	ip, r3
 800ce54:	fa22 f20e 	lsr.w	r2, r2, lr
 800ce58:	d8f3      	bhi.n	800ce42 <__lshift+0x6e>
 800ce5a:	ebac 0304 	sub.w	r3, ip, r4
 800ce5e:	3b15      	subs	r3, #21
 800ce60:	f023 0303 	bic.w	r3, r3, #3
 800ce64:	3304      	adds	r3, #4
 800ce66:	f104 0015 	add.w	r0, r4, #21
 800ce6a:	4584      	cmp	ip, r0
 800ce6c:	bf38      	it	cc
 800ce6e:	2304      	movcc	r3, #4
 800ce70:	50ca      	str	r2, [r1, r3]
 800ce72:	b10a      	cbz	r2, 800ce78 <__lshift+0xa4>
 800ce74:	f108 0602 	add.w	r6, r8, #2
 800ce78:	3e01      	subs	r6, #1
 800ce7a:	4638      	mov	r0, r7
 800ce7c:	612e      	str	r6, [r5, #16]
 800ce7e:	4621      	mov	r1, r4
 800ce80:	f7ff fdda 	bl	800ca38 <_Bfree>
 800ce84:	4628      	mov	r0, r5
 800ce86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce8a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce8e:	3301      	adds	r3, #1
 800ce90:	e7c5      	b.n	800ce1e <__lshift+0x4a>
 800ce92:	3904      	subs	r1, #4
 800ce94:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce98:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce9c:	459c      	cmp	ip, r3
 800ce9e:	d8f9      	bhi.n	800ce94 <__lshift+0xc0>
 800cea0:	e7ea      	b.n	800ce78 <__lshift+0xa4>
 800cea2:	bf00      	nop
 800cea4:	0800dcdc 	.word	0x0800dcdc
 800cea8:	0800dced 	.word	0x0800dced

0800ceac <__mcmp>:
 800ceac:	690a      	ldr	r2, [r1, #16]
 800ceae:	4603      	mov	r3, r0
 800ceb0:	6900      	ldr	r0, [r0, #16]
 800ceb2:	1a80      	subs	r0, r0, r2
 800ceb4:	b530      	push	{r4, r5, lr}
 800ceb6:	d10e      	bne.n	800ced6 <__mcmp+0x2a>
 800ceb8:	3314      	adds	r3, #20
 800ceba:	3114      	adds	r1, #20
 800cebc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cec0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cec4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cec8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cecc:	4295      	cmp	r5, r2
 800cece:	d003      	beq.n	800ced8 <__mcmp+0x2c>
 800ced0:	d205      	bcs.n	800cede <__mcmp+0x32>
 800ced2:	f04f 30ff 	mov.w	r0, #4294967295
 800ced6:	bd30      	pop	{r4, r5, pc}
 800ced8:	42a3      	cmp	r3, r4
 800ceda:	d3f3      	bcc.n	800cec4 <__mcmp+0x18>
 800cedc:	e7fb      	b.n	800ced6 <__mcmp+0x2a>
 800cede:	2001      	movs	r0, #1
 800cee0:	e7f9      	b.n	800ced6 <__mcmp+0x2a>
	...

0800cee4 <__mdiff>:
 800cee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee8:	4689      	mov	r9, r1
 800ceea:	4606      	mov	r6, r0
 800ceec:	4611      	mov	r1, r2
 800ceee:	4648      	mov	r0, r9
 800cef0:	4614      	mov	r4, r2
 800cef2:	f7ff ffdb 	bl	800ceac <__mcmp>
 800cef6:	1e05      	subs	r5, r0, #0
 800cef8:	d112      	bne.n	800cf20 <__mdiff+0x3c>
 800cefa:	4629      	mov	r1, r5
 800cefc:	4630      	mov	r0, r6
 800cefe:	f7ff fd5b 	bl	800c9b8 <_Balloc>
 800cf02:	4602      	mov	r2, r0
 800cf04:	b928      	cbnz	r0, 800cf12 <__mdiff+0x2e>
 800cf06:	4b3e      	ldr	r3, [pc, #248]	@ (800d000 <__mdiff+0x11c>)
 800cf08:	f240 2137 	movw	r1, #567	@ 0x237
 800cf0c:	483d      	ldr	r0, [pc, #244]	@ (800d004 <__mdiff+0x120>)
 800cf0e:	f000 fb0b 	bl	800d528 <__assert_func>
 800cf12:	2301      	movs	r3, #1
 800cf14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cf18:	4610      	mov	r0, r2
 800cf1a:	b003      	add	sp, #12
 800cf1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf20:	bfbc      	itt	lt
 800cf22:	464b      	movlt	r3, r9
 800cf24:	46a1      	movlt	r9, r4
 800cf26:	4630      	mov	r0, r6
 800cf28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cf2c:	bfba      	itte	lt
 800cf2e:	461c      	movlt	r4, r3
 800cf30:	2501      	movlt	r5, #1
 800cf32:	2500      	movge	r5, #0
 800cf34:	f7ff fd40 	bl	800c9b8 <_Balloc>
 800cf38:	4602      	mov	r2, r0
 800cf3a:	b918      	cbnz	r0, 800cf44 <__mdiff+0x60>
 800cf3c:	4b30      	ldr	r3, [pc, #192]	@ (800d000 <__mdiff+0x11c>)
 800cf3e:	f240 2145 	movw	r1, #581	@ 0x245
 800cf42:	e7e3      	b.n	800cf0c <__mdiff+0x28>
 800cf44:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cf48:	6926      	ldr	r6, [r4, #16]
 800cf4a:	60c5      	str	r5, [r0, #12]
 800cf4c:	f109 0310 	add.w	r3, r9, #16
 800cf50:	f109 0514 	add.w	r5, r9, #20
 800cf54:	f104 0e14 	add.w	lr, r4, #20
 800cf58:	f100 0b14 	add.w	fp, r0, #20
 800cf5c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cf60:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cf64:	9301      	str	r3, [sp, #4]
 800cf66:	46d9      	mov	r9, fp
 800cf68:	f04f 0c00 	mov.w	ip, #0
 800cf6c:	9b01      	ldr	r3, [sp, #4]
 800cf6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cf72:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cf76:	9301      	str	r3, [sp, #4]
 800cf78:	b281      	uxth	r1, r0
 800cf7a:	fa1f f38a 	uxth.w	r3, sl
 800cf7e:	1a5b      	subs	r3, r3, r1
 800cf80:	0c00      	lsrs	r0, r0, #16
 800cf82:	4463      	add	r3, ip
 800cf84:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cf88:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cf92:	4576      	cmp	r6, lr
 800cf94:	f849 3b04 	str.w	r3, [r9], #4
 800cf98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cf9c:	d8e6      	bhi.n	800cf6c <__mdiff+0x88>
 800cf9e:	1b33      	subs	r3, r6, r4
 800cfa0:	3b15      	subs	r3, #21
 800cfa2:	f023 0303 	bic.w	r3, r3, #3
 800cfa6:	3415      	adds	r4, #21
 800cfa8:	3304      	adds	r3, #4
 800cfaa:	42a6      	cmp	r6, r4
 800cfac:	bf38      	it	cc
 800cfae:	2304      	movcc	r3, #4
 800cfb0:	441d      	add	r5, r3
 800cfb2:	445b      	add	r3, fp
 800cfb4:	461e      	mov	r6, r3
 800cfb6:	462c      	mov	r4, r5
 800cfb8:	4544      	cmp	r4, r8
 800cfba:	d30e      	bcc.n	800cfda <__mdiff+0xf6>
 800cfbc:	f108 0103 	add.w	r1, r8, #3
 800cfc0:	1b49      	subs	r1, r1, r5
 800cfc2:	f021 0103 	bic.w	r1, r1, #3
 800cfc6:	3d03      	subs	r5, #3
 800cfc8:	45a8      	cmp	r8, r5
 800cfca:	bf38      	it	cc
 800cfcc:	2100      	movcc	r1, #0
 800cfce:	440b      	add	r3, r1
 800cfd0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cfd4:	b191      	cbz	r1, 800cffc <__mdiff+0x118>
 800cfd6:	6117      	str	r7, [r2, #16]
 800cfd8:	e79e      	b.n	800cf18 <__mdiff+0x34>
 800cfda:	f854 1b04 	ldr.w	r1, [r4], #4
 800cfde:	46e6      	mov	lr, ip
 800cfe0:	0c08      	lsrs	r0, r1, #16
 800cfe2:	fa1c fc81 	uxtah	ip, ip, r1
 800cfe6:	4471      	add	r1, lr
 800cfe8:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cfec:	b289      	uxth	r1, r1
 800cfee:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cff2:	f846 1b04 	str.w	r1, [r6], #4
 800cff6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cffa:	e7dd      	b.n	800cfb8 <__mdiff+0xd4>
 800cffc:	3f01      	subs	r7, #1
 800cffe:	e7e7      	b.n	800cfd0 <__mdiff+0xec>
 800d000:	0800dcdc 	.word	0x0800dcdc
 800d004:	0800dced 	.word	0x0800dced

0800d008 <__d2b>:
 800d008:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d00c:	2101      	movs	r1, #1
 800d00e:	9e08      	ldr	r6, [sp, #32]
 800d010:	4690      	mov	r8, r2
 800d012:	4699      	mov	r9, r3
 800d014:	f7ff fcd0 	bl	800c9b8 <_Balloc>
 800d018:	4604      	mov	r4, r0
 800d01a:	b930      	cbnz	r0, 800d02a <__d2b+0x22>
 800d01c:	4602      	mov	r2, r0
 800d01e:	4b24      	ldr	r3, [pc, #144]	@ (800d0b0 <__d2b+0xa8>)
 800d020:	4824      	ldr	r0, [pc, #144]	@ (800d0b4 <__d2b+0xac>)
 800d022:	f240 310f 	movw	r1, #783	@ 0x30f
 800d026:	f000 fa7f 	bl	800d528 <__assert_func>
 800d02a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d02e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d032:	b10d      	cbz	r5, 800d038 <__d2b+0x30>
 800d034:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d038:	9301      	str	r3, [sp, #4]
 800d03a:	f1b8 0300 	subs.w	r3, r8, #0
 800d03e:	d024      	beq.n	800d08a <__d2b+0x82>
 800d040:	4668      	mov	r0, sp
 800d042:	9300      	str	r3, [sp, #0]
 800d044:	f7ff fd7f 	bl	800cb46 <__lo0bits>
 800d048:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d04c:	b1d8      	cbz	r0, 800d086 <__d2b+0x7e>
 800d04e:	f1c0 0320 	rsb	r3, r0, #32
 800d052:	fa02 f303 	lsl.w	r3, r2, r3
 800d056:	430b      	orrs	r3, r1
 800d058:	40c2      	lsrs	r2, r0
 800d05a:	6163      	str	r3, [r4, #20]
 800d05c:	9201      	str	r2, [sp, #4]
 800d05e:	9b01      	ldr	r3, [sp, #4]
 800d060:	61a3      	str	r3, [r4, #24]
 800d062:	2b00      	cmp	r3, #0
 800d064:	bf0c      	ite	eq
 800d066:	2201      	moveq	r2, #1
 800d068:	2202      	movne	r2, #2
 800d06a:	6122      	str	r2, [r4, #16]
 800d06c:	b1ad      	cbz	r5, 800d09a <__d2b+0x92>
 800d06e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d072:	4405      	add	r5, r0
 800d074:	6035      	str	r5, [r6, #0]
 800d076:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d07a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d07c:	6018      	str	r0, [r3, #0]
 800d07e:	4620      	mov	r0, r4
 800d080:	b002      	add	sp, #8
 800d082:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d086:	6161      	str	r1, [r4, #20]
 800d088:	e7e9      	b.n	800d05e <__d2b+0x56>
 800d08a:	a801      	add	r0, sp, #4
 800d08c:	f7ff fd5b 	bl	800cb46 <__lo0bits>
 800d090:	9b01      	ldr	r3, [sp, #4]
 800d092:	6163      	str	r3, [r4, #20]
 800d094:	3020      	adds	r0, #32
 800d096:	2201      	movs	r2, #1
 800d098:	e7e7      	b.n	800d06a <__d2b+0x62>
 800d09a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d09e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d0a2:	6030      	str	r0, [r6, #0]
 800d0a4:	6918      	ldr	r0, [r3, #16]
 800d0a6:	f7ff fd2f 	bl	800cb08 <__hi0bits>
 800d0aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d0ae:	e7e4      	b.n	800d07a <__d2b+0x72>
 800d0b0:	0800dcdc 	.word	0x0800dcdc
 800d0b4:	0800dced 	.word	0x0800dced

0800d0b8 <__ssputs_r>:
 800d0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0bc:	688e      	ldr	r6, [r1, #8]
 800d0be:	461f      	mov	r7, r3
 800d0c0:	42be      	cmp	r6, r7
 800d0c2:	680b      	ldr	r3, [r1, #0]
 800d0c4:	4682      	mov	sl, r0
 800d0c6:	460c      	mov	r4, r1
 800d0c8:	4690      	mov	r8, r2
 800d0ca:	d82d      	bhi.n	800d128 <__ssputs_r+0x70>
 800d0cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d0d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d0d4:	d026      	beq.n	800d124 <__ssputs_r+0x6c>
 800d0d6:	6965      	ldr	r5, [r4, #20]
 800d0d8:	6909      	ldr	r1, [r1, #16]
 800d0da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0de:	eba3 0901 	sub.w	r9, r3, r1
 800d0e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d0e6:	1c7b      	adds	r3, r7, #1
 800d0e8:	444b      	add	r3, r9
 800d0ea:	106d      	asrs	r5, r5, #1
 800d0ec:	429d      	cmp	r5, r3
 800d0ee:	bf38      	it	cc
 800d0f0:	461d      	movcc	r5, r3
 800d0f2:	0553      	lsls	r3, r2, #21
 800d0f4:	d527      	bpl.n	800d146 <__ssputs_r+0x8e>
 800d0f6:	4629      	mov	r1, r5
 800d0f8:	f7ff fbd2 	bl	800c8a0 <_malloc_r>
 800d0fc:	4606      	mov	r6, r0
 800d0fe:	b360      	cbz	r0, 800d15a <__ssputs_r+0xa2>
 800d100:	6921      	ldr	r1, [r4, #16]
 800d102:	464a      	mov	r2, r9
 800d104:	f000 fa02 	bl	800d50c <memcpy>
 800d108:	89a3      	ldrh	r3, [r4, #12]
 800d10a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d10e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d112:	81a3      	strh	r3, [r4, #12]
 800d114:	6126      	str	r6, [r4, #16]
 800d116:	6165      	str	r5, [r4, #20]
 800d118:	444e      	add	r6, r9
 800d11a:	eba5 0509 	sub.w	r5, r5, r9
 800d11e:	6026      	str	r6, [r4, #0]
 800d120:	60a5      	str	r5, [r4, #8]
 800d122:	463e      	mov	r6, r7
 800d124:	42be      	cmp	r6, r7
 800d126:	d900      	bls.n	800d12a <__ssputs_r+0x72>
 800d128:	463e      	mov	r6, r7
 800d12a:	6820      	ldr	r0, [r4, #0]
 800d12c:	4632      	mov	r2, r6
 800d12e:	4641      	mov	r1, r8
 800d130:	f000 f9c2 	bl	800d4b8 <memmove>
 800d134:	68a3      	ldr	r3, [r4, #8]
 800d136:	1b9b      	subs	r3, r3, r6
 800d138:	60a3      	str	r3, [r4, #8]
 800d13a:	6823      	ldr	r3, [r4, #0]
 800d13c:	4433      	add	r3, r6
 800d13e:	6023      	str	r3, [r4, #0]
 800d140:	2000      	movs	r0, #0
 800d142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d146:	462a      	mov	r2, r5
 800d148:	f000 fa32 	bl	800d5b0 <_realloc_r>
 800d14c:	4606      	mov	r6, r0
 800d14e:	2800      	cmp	r0, #0
 800d150:	d1e0      	bne.n	800d114 <__ssputs_r+0x5c>
 800d152:	6921      	ldr	r1, [r4, #16]
 800d154:	4650      	mov	r0, sl
 800d156:	f7ff fb2f 	bl	800c7b8 <_free_r>
 800d15a:	230c      	movs	r3, #12
 800d15c:	f8ca 3000 	str.w	r3, [sl]
 800d160:	89a3      	ldrh	r3, [r4, #12]
 800d162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d166:	81a3      	strh	r3, [r4, #12]
 800d168:	f04f 30ff 	mov.w	r0, #4294967295
 800d16c:	e7e9      	b.n	800d142 <__ssputs_r+0x8a>
	...

0800d170 <_svfiprintf_r>:
 800d170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d174:	4698      	mov	r8, r3
 800d176:	898b      	ldrh	r3, [r1, #12]
 800d178:	061b      	lsls	r3, r3, #24
 800d17a:	b09d      	sub	sp, #116	@ 0x74
 800d17c:	4607      	mov	r7, r0
 800d17e:	460d      	mov	r5, r1
 800d180:	4614      	mov	r4, r2
 800d182:	d510      	bpl.n	800d1a6 <_svfiprintf_r+0x36>
 800d184:	690b      	ldr	r3, [r1, #16]
 800d186:	b973      	cbnz	r3, 800d1a6 <_svfiprintf_r+0x36>
 800d188:	2140      	movs	r1, #64	@ 0x40
 800d18a:	f7ff fb89 	bl	800c8a0 <_malloc_r>
 800d18e:	6028      	str	r0, [r5, #0]
 800d190:	6128      	str	r0, [r5, #16]
 800d192:	b930      	cbnz	r0, 800d1a2 <_svfiprintf_r+0x32>
 800d194:	230c      	movs	r3, #12
 800d196:	603b      	str	r3, [r7, #0]
 800d198:	f04f 30ff 	mov.w	r0, #4294967295
 800d19c:	b01d      	add	sp, #116	@ 0x74
 800d19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1a2:	2340      	movs	r3, #64	@ 0x40
 800d1a4:	616b      	str	r3, [r5, #20]
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1aa:	2320      	movs	r3, #32
 800d1ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d1b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1b4:	2330      	movs	r3, #48	@ 0x30
 800d1b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d354 <_svfiprintf_r+0x1e4>
 800d1ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d1be:	f04f 0901 	mov.w	r9, #1
 800d1c2:	4623      	mov	r3, r4
 800d1c4:	469a      	mov	sl, r3
 800d1c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1ca:	b10a      	cbz	r2, 800d1d0 <_svfiprintf_r+0x60>
 800d1cc:	2a25      	cmp	r2, #37	@ 0x25
 800d1ce:	d1f9      	bne.n	800d1c4 <_svfiprintf_r+0x54>
 800d1d0:	ebba 0b04 	subs.w	fp, sl, r4
 800d1d4:	d00b      	beq.n	800d1ee <_svfiprintf_r+0x7e>
 800d1d6:	465b      	mov	r3, fp
 800d1d8:	4622      	mov	r2, r4
 800d1da:	4629      	mov	r1, r5
 800d1dc:	4638      	mov	r0, r7
 800d1de:	f7ff ff6b 	bl	800d0b8 <__ssputs_r>
 800d1e2:	3001      	adds	r0, #1
 800d1e4:	f000 80a7 	beq.w	800d336 <_svfiprintf_r+0x1c6>
 800d1e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1ea:	445a      	add	r2, fp
 800d1ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800d1ee:	f89a 3000 	ldrb.w	r3, [sl]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	f000 809f 	beq.w	800d336 <_svfiprintf_r+0x1c6>
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d1fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d202:	f10a 0a01 	add.w	sl, sl, #1
 800d206:	9304      	str	r3, [sp, #16]
 800d208:	9307      	str	r3, [sp, #28]
 800d20a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d20e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d210:	4654      	mov	r4, sl
 800d212:	2205      	movs	r2, #5
 800d214:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d218:	484e      	ldr	r0, [pc, #312]	@ (800d354 <_svfiprintf_r+0x1e4>)
 800d21a:	f7f2 ffd9 	bl	80001d0 <memchr>
 800d21e:	9a04      	ldr	r2, [sp, #16]
 800d220:	b9d8      	cbnz	r0, 800d25a <_svfiprintf_r+0xea>
 800d222:	06d0      	lsls	r0, r2, #27
 800d224:	bf44      	itt	mi
 800d226:	2320      	movmi	r3, #32
 800d228:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d22c:	0711      	lsls	r1, r2, #28
 800d22e:	bf44      	itt	mi
 800d230:	232b      	movmi	r3, #43	@ 0x2b
 800d232:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d236:	f89a 3000 	ldrb.w	r3, [sl]
 800d23a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d23c:	d015      	beq.n	800d26a <_svfiprintf_r+0xfa>
 800d23e:	9a07      	ldr	r2, [sp, #28]
 800d240:	4654      	mov	r4, sl
 800d242:	2000      	movs	r0, #0
 800d244:	f04f 0c0a 	mov.w	ip, #10
 800d248:	4621      	mov	r1, r4
 800d24a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d24e:	3b30      	subs	r3, #48	@ 0x30
 800d250:	2b09      	cmp	r3, #9
 800d252:	d94b      	bls.n	800d2ec <_svfiprintf_r+0x17c>
 800d254:	b1b0      	cbz	r0, 800d284 <_svfiprintf_r+0x114>
 800d256:	9207      	str	r2, [sp, #28]
 800d258:	e014      	b.n	800d284 <_svfiprintf_r+0x114>
 800d25a:	eba0 0308 	sub.w	r3, r0, r8
 800d25e:	fa09 f303 	lsl.w	r3, r9, r3
 800d262:	4313      	orrs	r3, r2
 800d264:	9304      	str	r3, [sp, #16]
 800d266:	46a2      	mov	sl, r4
 800d268:	e7d2      	b.n	800d210 <_svfiprintf_r+0xa0>
 800d26a:	9b03      	ldr	r3, [sp, #12]
 800d26c:	1d19      	adds	r1, r3, #4
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	9103      	str	r1, [sp, #12]
 800d272:	2b00      	cmp	r3, #0
 800d274:	bfbb      	ittet	lt
 800d276:	425b      	neglt	r3, r3
 800d278:	f042 0202 	orrlt.w	r2, r2, #2
 800d27c:	9307      	strge	r3, [sp, #28]
 800d27e:	9307      	strlt	r3, [sp, #28]
 800d280:	bfb8      	it	lt
 800d282:	9204      	strlt	r2, [sp, #16]
 800d284:	7823      	ldrb	r3, [r4, #0]
 800d286:	2b2e      	cmp	r3, #46	@ 0x2e
 800d288:	d10a      	bne.n	800d2a0 <_svfiprintf_r+0x130>
 800d28a:	7863      	ldrb	r3, [r4, #1]
 800d28c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d28e:	d132      	bne.n	800d2f6 <_svfiprintf_r+0x186>
 800d290:	9b03      	ldr	r3, [sp, #12]
 800d292:	1d1a      	adds	r2, r3, #4
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	9203      	str	r2, [sp, #12]
 800d298:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d29c:	3402      	adds	r4, #2
 800d29e:	9305      	str	r3, [sp, #20]
 800d2a0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d358 <_svfiprintf_r+0x1e8>
 800d2a4:	7821      	ldrb	r1, [r4, #0]
 800d2a6:	2203      	movs	r2, #3
 800d2a8:	4650      	mov	r0, sl
 800d2aa:	f7f2 ff91 	bl	80001d0 <memchr>
 800d2ae:	b138      	cbz	r0, 800d2c0 <_svfiprintf_r+0x150>
 800d2b0:	9b04      	ldr	r3, [sp, #16]
 800d2b2:	eba0 000a 	sub.w	r0, r0, sl
 800d2b6:	2240      	movs	r2, #64	@ 0x40
 800d2b8:	4082      	lsls	r2, r0
 800d2ba:	4313      	orrs	r3, r2
 800d2bc:	3401      	adds	r4, #1
 800d2be:	9304      	str	r3, [sp, #16]
 800d2c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2c4:	4825      	ldr	r0, [pc, #148]	@ (800d35c <_svfiprintf_r+0x1ec>)
 800d2c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d2ca:	2206      	movs	r2, #6
 800d2cc:	f7f2 ff80 	bl	80001d0 <memchr>
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	d036      	beq.n	800d342 <_svfiprintf_r+0x1d2>
 800d2d4:	4b22      	ldr	r3, [pc, #136]	@ (800d360 <_svfiprintf_r+0x1f0>)
 800d2d6:	bb1b      	cbnz	r3, 800d320 <_svfiprintf_r+0x1b0>
 800d2d8:	9b03      	ldr	r3, [sp, #12]
 800d2da:	3307      	adds	r3, #7
 800d2dc:	f023 0307 	bic.w	r3, r3, #7
 800d2e0:	3308      	adds	r3, #8
 800d2e2:	9303      	str	r3, [sp, #12]
 800d2e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2e6:	4433      	add	r3, r6
 800d2e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2ea:	e76a      	b.n	800d1c2 <_svfiprintf_r+0x52>
 800d2ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2f0:	460c      	mov	r4, r1
 800d2f2:	2001      	movs	r0, #1
 800d2f4:	e7a8      	b.n	800d248 <_svfiprintf_r+0xd8>
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	3401      	adds	r4, #1
 800d2fa:	9305      	str	r3, [sp, #20]
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	f04f 0c0a 	mov.w	ip, #10
 800d302:	4620      	mov	r0, r4
 800d304:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d308:	3a30      	subs	r2, #48	@ 0x30
 800d30a:	2a09      	cmp	r2, #9
 800d30c:	d903      	bls.n	800d316 <_svfiprintf_r+0x1a6>
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d0c6      	beq.n	800d2a0 <_svfiprintf_r+0x130>
 800d312:	9105      	str	r1, [sp, #20]
 800d314:	e7c4      	b.n	800d2a0 <_svfiprintf_r+0x130>
 800d316:	fb0c 2101 	mla	r1, ip, r1, r2
 800d31a:	4604      	mov	r4, r0
 800d31c:	2301      	movs	r3, #1
 800d31e:	e7f0      	b.n	800d302 <_svfiprintf_r+0x192>
 800d320:	ab03      	add	r3, sp, #12
 800d322:	9300      	str	r3, [sp, #0]
 800d324:	462a      	mov	r2, r5
 800d326:	4b0f      	ldr	r3, [pc, #60]	@ (800d364 <_svfiprintf_r+0x1f4>)
 800d328:	a904      	add	r1, sp, #16
 800d32a:	4638      	mov	r0, r7
 800d32c:	f7fd fe92 	bl	800b054 <_printf_float>
 800d330:	1c42      	adds	r2, r0, #1
 800d332:	4606      	mov	r6, r0
 800d334:	d1d6      	bne.n	800d2e4 <_svfiprintf_r+0x174>
 800d336:	89ab      	ldrh	r3, [r5, #12]
 800d338:	065b      	lsls	r3, r3, #25
 800d33a:	f53f af2d 	bmi.w	800d198 <_svfiprintf_r+0x28>
 800d33e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d340:	e72c      	b.n	800d19c <_svfiprintf_r+0x2c>
 800d342:	ab03      	add	r3, sp, #12
 800d344:	9300      	str	r3, [sp, #0]
 800d346:	462a      	mov	r2, r5
 800d348:	4b06      	ldr	r3, [pc, #24]	@ (800d364 <_svfiprintf_r+0x1f4>)
 800d34a:	a904      	add	r1, sp, #16
 800d34c:	4638      	mov	r0, r7
 800d34e:	f7fe f91b 	bl	800b588 <_printf_i>
 800d352:	e7ed      	b.n	800d330 <_svfiprintf_r+0x1c0>
 800d354:	0800de48 	.word	0x0800de48
 800d358:	0800de4e 	.word	0x0800de4e
 800d35c:	0800de52 	.word	0x0800de52
 800d360:	0800b055 	.word	0x0800b055
 800d364:	0800d0b9 	.word	0x0800d0b9

0800d368 <__sflush_r>:
 800d368:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d36e:	0716      	lsls	r6, r2, #28
 800d370:	4605      	mov	r5, r0
 800d372:	460c      	mov	r4, r1
 800d374:	d454      	bmi.n	800d420 <__sflush_r+0xb8>
 800d376:	684b      	ldr	r3, [r1, #4]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	dc02      	bgt.n	800d382 <__sflush_r+0x1a>
 800d37c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d37e:	2b00      	cmp	r3, #0
 800d380:	dd48      	ble.n	800d414 <__sflush_r+0xac>
 800d382:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d384:	2e00      	cmp	r6, #0
 800d386:	d045      	beq.n	800d414 <__sflush_r+0xac>
 800d388:	2300      	movs	r3, #0
 800d38a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d38e:	682f      	ldr	r7, [r5, #0]
 800d390:	6a21      	ldr	r1, [r4, #32]
 800d392:	602b      	str	r3, [r5, #0]
 800d394:	d030      	beq.n	800d3f8 <__sflush_r+0x90>
 800d396:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d398:	89a3      	ldrh	r3, [r4, #12]
 800d39a:	0759      	lsls	r1, r3, #29
 800d39c:	d505      	bpl.n	800d3aa <__sflush_r+0x42>
 800d39e:	6863      	ldr	r3, [r4, #4]
 800d3a0:	1ad2      	subs	r2, r2, r3
 800d3a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d3a4:	b10b      	cbz	r3, 800d3aa <__sflush_r+0x42>
 800d3a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d3a8:	1ad2      	subs	r2, r2, r3
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d3ae:	6a21      	ldr	r1, [r4, #32]
 800d3b0:	4628      	mov	r0, r5
 800d3b2:	47b0      	blx	r6
 800d3b4:	1c43      	adds	r3, r0, #1
 800d3b6:	89a3      	ldrh	r3, [r4, #12]
 800d3b8:	d106      	bne.n	800d3c8 <__sflush_r+0x60>
 800d3ba:	6829      	ldr	r1, [r5, #0]
 800d3bc:	291d      	cmp	r1, #29
 800d3be:	d82b      	bhi.n	800d418 <__sflush_r+0xb0>
 800d3c0:	4a28      	ldr	r2, [pc, #160]	@ (800d464 <__sflush_r+0xfc>)
 800d3c2:	410a      	asrs	r2, r1
 800d3c4:	07d6      	lsls	r6, r2, #31
 800d3c6:	d427      	bmi.n	800d418 <__sflush_r+0xb0>
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	6062      	str	r2, [r4, #4]
 800d3cc:	04d9      	lsls	r1, r3, #19
 800d3ce:	6922      	ldr	r2, [r4, #16]
 800d3d0:	6022      	str	r2, [r4, #0]
 800d3d2:	d504      	bpl.n	800d3de <__sflush_r+0x76>
 800d3d4:	1c42      	adds	r2, r0, #1
 800d3d6:	d101      	bne.n	800d3dc <__sflush_r+0x74>
 800d3d8:	682b      	ldr	r3, [r5, #0]
 800d3da:	b903      	cbnz	r3, 800d3de <__sflush_r+0x76>
 800d3dc:	6560      	str	r0, [r4, #84]	@ 0x54
 800d3de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d3e0:	602f      	str	r7, [r5, #0]
 800d3e2:	b1b9      	cbz	r1, 800d414 <__sflush_r+0xac>
 800d3e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d3e8:	4299      	cmp	r1, r3
 800d3ea:	d002      	beq.n	800d3f2 <__sflush_r+0x8a>
 800d3ec:	4628      	mov	r0, r5
 800d3ee:	f7ff f9e3 	bl	800c7b8 <_free_r>
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d3f6:	e00d      	b.n	800d414 <__sflush_r+0xac>
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	4628      	mov	r0, r5
 800d3fc:	47b0      	blx	r6
 800d3fe:	4602      	mov	r2, r0
 800d400:	1c50      	adds	r0, r2, #1
 800d402:	d1c9      	bne.n	800d398 <__sflush_r+0x30>
 800d404:	682b      	ldr	r3, [r5, #0]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d0c6      	beq.n	800d398 <__sflush_r+0x30>
 800d40a:	2b1d      	cmp	r3, #29
 800d40c:	d001      	beq.n	800d412 <__sflush_r+0xaa>
 800d40e:	2b16      	cmp	r3, #22
 800d410:	d11d      	bne.n	800d44e <__sflush_r+0xe6>
 800d412:	602f      	str	r7, [r5, #0]
 800d414:	2000      	movs	r0, #0
 800d416:	e021      	b.n	800d45c <__sflush_r+0xf4>
 800d418:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d41c:	b21b      	sxth	r3, r3
 800d41e:	e01a      	b.n	800d456 <__sflush_r+0xee>
 800d420:	690f      	ldr	r7, [r1, #16]
 800d422:	2f00      	cmp	r7, #0
 800d424:	d0f6      	beq.n	800d414 <__sflush_r+0xac>
 800d426:	0793      	lsls	r3, r2, #30
 800d428:	680e      	ldr	r6, [r1, #0]
 800d42a:	bf08      	it	eq
 800d42c:	694b      	ldreq	r3, [r1, #20]
 800d42e:	600f      	str	r7, [r1, #0]
 800d430:	bf18      	it	ne
 800d432:	2300      	movne	r3, #0
 800d434:	1bf6      	subs	r6, r6, r7
 800d436:	608b      	str	r3, [r1, #8]
 800d438:	2e00      	cmp	r6, #0
 800d43a:	ddeb      	ble.n	800d414 <__sflush_r+0xac>
 800d43c:	6a21      	ldr	r1, [r4, #32]
 800d43e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d442:	4633      	mov	r3, r6
 800d444:	463a      	mov	r2, r7
 800d446:	4628      	mov	r0, r5
 800d448:	47e0      	blx	ip
 800d44a:	2800      	cmp	r0, #0
 800d44c:	dc07      	bgt.n	800d45e <__sflush_r+0xf6>
 800d44e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d456:	81a3      	strh	r3, [r4, #12]
 800d458:	f04f 30ff 	mov.w	r0, #4294967295
 800d45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d45e:	4407      	add	r7, r0
 800d460:	1a36      	subs	r6, r6, r0
 800d462:	e7e9      	b.n	800d438 <__sflush_r+0xd0>
 800d464:	dfbffffe 	.word	0xdfbffffe

0800d468 <_fflush_r>:
 800d468:	b538      	push	{r3, r4, r5, lr}
 800d46a:	690b      	ldr	r3, [r1, #16]
 800d46c:	4605      	mov	r5, r0
 800d46e:	460c      	mov	r4, r1
 800d470:	b913      	cbnz	r3, 800d478 <_fflush_r+0x10>
 800d472:	2500      	movs	r5, #0
 800d474:	4628      	mov	r0, r5
 800d476:	bd38      	pop	{r3, r4, r5, pc}
 800d478:	b118      	cbz	r0, 800d482 <_fflush_r+0x1a>
 800d47a:	6a03      	ldr	r3, [r0, #32]
 800d47c:	b90b      	cbnz	r3, 800d482 <_fflush_r+0x1a>
 800d47e:	f7fe fa2f 	bl	800b8e0 <__sinit>
 800d482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d0f3      	beq.n	800d472 <_fflush_r+0xa>
 800d48a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d48c:	07d0      	lsls	r0, r2, #31
 800d48e:	d404      	bmi.n	800d49a <_fflush_r+0x32>
 800d490:	0599      	lsls	r1, r3, #22
 800d492:	d402      	bmi.n	800d49a <_fflush_r+0x32>
 800d494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d496:	f7fe fb3a 	bl	800bb0e <__retarget_lock_acquire_recursive>
 800d49a:	4628      	mov	r0, r5
 800d49c:	4621      	mov	r1, r4
 800d49e:	f7ff ff63 	bl	800d368 <__sflush_r>
 800d4a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d4a4:	07da      	lsls	r2, r3, #31
 800d4a6:	4605      	mov	r5, r0
 800d4a8:	d4e4      	bmi.n	800d474 <_fflush_r+0xc>
 800d4aa:	89a3      	ldrh	r3, [r4, #12]
 800d4ac:	059b      	lsls	r3, r3, #22
 800d4ae:	d4e1      	bmi.n	800d474 <_fflush_r+0xc>
 800d4b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d4b2:	f7fe fb2d 	bl	800bb10 <__retarget_lock_release_recursive>
 800d4b6:	e7dd      	b.n	800d474 <_fflush_r+0xc>

0800d4b8 <memmove>:
 800d4b8:	4288      	cmp	r0, r1
 800d4ba:	b510      	push	{r4, lr}
 800d4bc:	eb01 0402 	add.w	r4, r1, r2
 800d4c0:	d902      	bls.n	800d4c8 <memmove+0x10>
 800d4c2:	4284      	cmp	r4, r0
 800d4c4:	4623      	mov	r3, r4
 800d4c6:	d807      	bhi.n	800d4d8 <memmove+0x20>
 800d4c8:	1e43      	subs	r3, r0, #1
 800d4ca:	42a1      	cmp	r1, r4
 800d4cc:	d008      	beq.n	800d4e0 <memmove+0x28>
 800d4ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4d6:	e7f8      	b.n	800d4ca <memmove+0x12>
 800d4d8:	4402      	add	r2, r0
 800d4da:	4601      	mov	r1, r0
 800d4dc:	428a      	cmp	r2, r1
 800d4de:	d100      	bne.n	800d4e2 <memmove+0x2a>
 800d4e0:	bd10      	pop	{r4, pc}
 800d4e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4ea:	e7f7      	b.n	800d4dc <memmove+0x24>

0800d4ec <_sbrk_r>:
 800d4ec:	b538      	push	{r3, r4, r5, lr}
 800d4ee:	4d06      	ldr	r5, [pc, #24]	@ (800d508 <_sbrk_r+0x1c>)
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	4604      	mov	r4, r0
 800d4f4:	4608      	mov	r0, r1
 800d4f6:	602b      	str	r3, [r5, #0]
 800d4f8:	f7f4 fd7e 	bl	8001ff8 <_sbrk>
 800d4fc:	1c43      	adds	r3, r0, #1
 800d4fe:	d102      	bne.n	800d506 <_sbrk_r+0x1a>
 800d500:	682b      	ldr	r3, [r5, #0]
 800d502:	b103      	cbz	r3, 800d506 <_sbrk_r+0x1a>
 800d504:	6023      	str	r3, [r4, #0]
 800d506:	bd38      	pop	{r3, r4, r5, pc}
 800d508:	20002220 	.word	0x20002220

0800d50c <memcpy>:
 800d50c:	440a      	add	r2, r1
 800d50e:	4291      	cmp	r1, r2
 800d510:	f100 33ff 	add.w	r3, r0, #4294967295
 800d514:	d100      	bne.n	800d518 <memcpy+0xc>
 800d516:	4770      	bx	lr
 800d518:	b510      	push	{r4, lr}
 800d51a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d51e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d522:	4291      	cmp	r1, r2
 800d524:	d1f9      	bne.n	800d51a <memcpy+0xe>
 800d526:	bd10      	pop	{r4, pc}

0800d528 <__assert_func>:
 800d528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d52a:	4614      	mov	r4, r2
 800d52c:	461a      	mov	r2, r3
 800d52e:	4b09      	ldr	r3, [pc, #36]	@ (800d554 <__assert_func+0x2c>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	4605      	mov	r5, r0
 800d534:	68d8      	ldr	r0, [r3, #12]
 800d536:	b954      	cbnz	r4, 800d54e <__assert_func+0x26>
 800d538:	4b07      	ldr	r3, [pc, #28]	@ (800d558 <__assert_func+0x30>)
 800d53a:	461c      	mov	r4, r3
 800d53c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d540:	9100      	str	r1, [sp, #0]
 800d542:	462b      	mov	r3, r5
 800d544:	4905      	ldr	r1, [pc, #20]	@ (800d55c <__assert_func+0x34>)
 800d546:	f000 f86f 	bl	800d628 <fiprintf>
 800d54a:	f000 f87f 	bl	800d64c <abort>
 800d54e:	4b04      	ldr	r3, [pc, #16]	@ (800d560 <__assert_func+0x38>)
 800d550:	e7f4      	b.n	800d53c <__assert_func+0x14>
 800d552:	bf00      	nop
 800d554:	20000108 	.word	0x20000108
 800d558:	0800de9e 	.word	0x0800de9e
 800d55c:	0800de70 	.word	0x0800de70
 800d560:	0800de63 	.word	0x0800de63

0800d564 <_calloc_r>:
 800d564:	b570      	push	{r4, r5, r6, lr}
 800d566:	fba1 5402 	umull	r5, r4, r1, r2
 800d56a:	b93c      	cbnz	r4, 800d57c <_calloc_r+0x18>
 800d56c:	4629      	mov	r1, r5
 800d56e:	f7ff f997 	bl	800c8a0 <_malloc_r>
 800d572:	4606      	mov	r6, r0
 800d574:	b928      	cbnz	r0, 800d582 <_calloc_r+0x1e>
 800d576:	2600      	movs	r6, #0
 800d578:	4630      	mov	r0, r6
 800d57a:	bd70      	pop	{r4, r5, r6, pc}
 800d57c:	220c      	movs	r2, #12
 800d57e:	6002      	str	r2, [r0, #0]
 800d580:	e7f9      	b.n	800d576 <_calloc_r+0x12>
 800d582:	462a      	mov	r2, r5
 800d584:	4621      	mov	r1, r4
 800d586:	f7fe fa44 	bl	800ba12 <memset>
 800d58a:	e7f5      	b.n	800d578 <_calloc_r+0x14>

0800d58c <__ascii_mbtowc>:
 800d58c:	b082      	sub	sp, #8
 800d58e:	b901      	cbnz	r1, 800d592 <__ascii_mbtowc+0x6>
 800d590:	a901      	add	r1, sp, #4
 800d592:	b142      	cbz	r2, 800d5a6 <__ascii_mbtowc+0x1a>
 800d594:	b14b      	cbz	r3, 800d5aa <__ascii_mbtowc+0x1e>
 800d596:	7813      	ldrb	r3, [r2, #0]
 800d598:	600b      	str	r3, [r1, #0]
 800d59a:	7812      	ldrb	r2, [r2, #0]
 800d59c:	1e10      	subs	r0, r2, #0
 800d59e:	bf18      	it	ne
 800d5a0:	2001      	movne	r0, #1
 800d5a2:	b002      	add	sp, #8
 800d5a4:	4770      	bx	lr
 800d5a6:	4610      	mov	r0, r2
 800d5a8:	e7fb      	b.n	800d5a2 <__ascii_mbtowc+0x16>
 800d5aa:	f06f 0001 	mvn.w	r0, #1
 800d5ae:	e7f8      	b.n	800d5a2 <__ascii_mbtowc+0x16>

0800d5b0 <_realloc_r>:
 800d5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b4:	4680      	mov	r8, r0
 800d5b6:	4615      	mov	r5, r2
 800d5b8:	460c      	mov	r4, r1
 800d5ba:	b921      	cbnz	r1, 800d5c6 <_realloc_r+0x16>
 800d5bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5c0:	4611      	mov	r1, r2
 800d5c2:	f7ff b96d 	b.w	800c8a0 <_malloc_r>
 800d5c6:	b92a      	cbnz	r2, 800d5d4 <_realloc_r+0x24>
 800d5c8:	f7ff f8f6 	bl	800c7b8 <_free_r>
 800d5cc:	2400      	movs	r4, #0
 800d5ce:	4620      	mov	r0, r4
 800d5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5d4:	f000 f841 	bl	800d65a <_malloc_usable_size_r>
 800d5d8:	4285      	cmp	r5, r0
 800d5da:	4606      	mov	r6, r0
 800d5dc:	d802      	bhi.n	800d5e4 <_realloc_r+0x34>
 800d5de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d5e2:	d8f4      	bhi.n	800d5ce <_realloc_r+0x1e>
 800d5e4:	4629      	mov	r1, r5
 800d5e6:	4640      	mov	r0, r8
 800d5e8:	f7ff f95a 	bl	800c8a0 <_malloc_r>
 800d5ec:	4607      	mov	r7, r0
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	d0ec      	beq.n	800d5cc <_realloc_r+0x1c>
 800d5f2:	42b5      	cmp	r5, r6
 800d5f4:	462a      	mov	r2, r5
 800d5f6:	4621      	mov	r1, r4
 800d5f8:	bf28      	it	cs
 800d5fa:	4632      	movcs	r2, r6
 800d5fc:	f7ff ff86 	bl	800d50c <memcpy>
 800d600:	4621      	mov	r1, r4
 800d602:	4640      	mov	r0, r8
 800d604:	f7ff f8d8 	bl	800c7b8 <_free_r>
 800d608:	463c      	mov	r4, r7
 800d60a:	e7e0      	b.n	800d5ce <_realloc_r+0x1e>

0800d60c <__ascii_wctomb>:
 800d60c:	4603      	mov	r3, r0
 800d60e:	4608      	mov	r0, r1
 800d610:	b141      	cbz	r1, 800d624 <__ascii_wctomb+0x18>
 800d612:	2aff      	cmp	r2, #255	@ 0xff
 800d614:	d904      	bls.n	800d620 <__ascii_wctomb+0x14>
 800d616:	228a      	movs	r2, #138	@ 0x8a
 800d618:	601a      	str	r2, [r3, #0]
 800d61a:	f04f 30ff 	mov.w	r0, #4294967295
 800d61e:	4770      	bx	lr
 800d620:	700a      	strb	r2, [r1, #0]
 800d622:	2001      	movs	r0, #1
 800d624:	4770      	bx	lr
	...

0800d628 <fiprintf>:
 800d628:	b40e      	push	{r1, r2, r3}
 800d62a:	b503      	push	{r0, r1, lr}
 800d62c:	4601      	mov	r1, r0
 800d62e:	ab03      	add	r3, sp, #12
 800d630:	4805      	ldr	r0, [pc, #20]	@ (800d648 <fiprintf+0x20>)
 800d632:	f853 2b04 	ldr.w	r2, [r3], #4
 800d636:	6800      	ldr	r0, [r0, #0]
 800d638:	9301      	str	r3, [sp, #4]
 800d63a:	f000 f83d 	bl	800d6b8 <_vfiprintf_r>
 800d63e:	b002      	add	sp, #8
 800d640:	f85d eb04 	ldr.w	lr, [sp], #4
 800d644:	b003      	add	sp, #12
 800d646:	4770      	bx	lr
 800d648:	20000108 	.word	0x20000108

0800d64c <abort>:
 800d64c:	b508      	push	{r3, lr}
 800d64e:	2006      	movs	r0, #6
 800d650:	f000 fa06 	bl	800da60 <raise>
 800d654:	2001      	movs	r0, #1
 800d656:	f7f4 fc5a 	bl	8001f0e <_exit>

0800d65a <_malloc_usable_size_r>:
 800d65a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d65e:	1f18      	subs	r0, r3, #4
 800d660:	2b00      	cmp	r3, #0
 800d662:	bfbc      	itt	lt
 800d664:	580b      	ldrlt	r3, [r1, r0]
 800d666:	18c0      	addlt	r0, r0, r3
 800d668:	4770      	bx	lr

0800d66a <__sfputc_r>:
 800d66a:	6893      	ldr	r3, [r2, #8]
 800d66c:	3b01      	subs	r3, #1
 800d66e:	2b00      	cmp	r3, #0
 800d670:	b410      	push	{r4}
 800d672:	6093      	str	r3, [r2, #8]
 800d674:	da07      	bge.n	800d686 <__sfputc_r+0x1c>
 800d676:	6994      	ldr	r4, [r2, #24]
 800d678:	42a3      	cmp	r3, r4
 800d67a:	db01      	blt.n	800d680 <__sfputc_r+0x16>
 800d67c:	290a      	cmp	r1, #10
 800d67e:	d102      	bne.n	800d686 <__sfputc_r+0x1c>
 800d680:	bc10      	pop	{r4}
 800d682:	f000 b931 	b.w	800d8e8 <__swbuf_r>
 800d686:	6813      	ldr	r3, [r2, #0]
 800d688:	1c58      	adds	r0, r3, #1
 800d68a:	6010      	str	r0, [r2, #0]
 800d68c:	7019      	strb	r1, [r3, #0]
 800d68e:	4608      	mov	r0, r1
 800d690:	bc10      	pop	{r4}
 800d692:	4770      	bx	lr

0800d694 <__sfputs_r>:
 800d694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d696:	4606      	mov	r6, r0
 800d698:	460f      	mov	r7, r1
 800d69a:	4614      	mov	r4, r2
 800d69c:	18d5      	adds	r5, r2, r3
 800d69e:	42ac      	cmp	r4, r5
 800d6a0:	d101      	bne.n	800d6a6 <__sfputs_r+0x12>
 800d6a2:	2000      	movs	r0, #0
 800d6a4:	e007      	b.n	800d6b6 <__sfputs_r+0x22>
 800d6a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6aa:	463a      	mov	r2, r7
 800d6ac:	4630      	mov	r0, r6
 800d6ae:	f7ff ffdc 	bl	800d66a <__sfputc_r>
 800d6b2:	1c43      	adds	r3, r0, #1
 800d6b4:	d1f3      	bne.n	800d69e <__sfputs_r+0xa>
 800d6b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d6b8 <_vfiprintf_r>:
 800d6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6bc:	460d      	mov	r5, r1
 800d6be:	b09d      	sub	sp, #116	@ 0x74
 800d6c0:	4614      	mov	r4, r2
 800d6c2:	4698      	mov	r8, r3
 800d6c4:	4606      	mov	r6, r0
 800d6c6:	b118      	cbz	r0, 800d6d0 <_vfiprintf_r+0x18>
 800d6c8:	6a03      	ldr	r3, [r0, #32]
 800d6ca:	b90b      	cbnz	r3, 800d6d0 <_vfiprintf_r+0x18>
 800d6cc:	f7fe f908 	bl	800b8e0 <__sinit>
 800d6d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d6d2:	07d9      	lsls	r1, r3, #31
 800d6d4:	d405      	bmi.n	800d6e2 <_vfiprintf_r+0x2a>
 800d6d6:	89ab      	ldrh	r3, [r5, #12]
 800d6d8:	059a      	lsls	r2, r3, #22
 800d6da:	d402      	bmi.n	800d6e2 <_vfiprintf_r+0x2a>
 800d6dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d6de:	f7fe fa16 	bl	800bb0e <__retarget_lock_acquire_recursive>
 800d6e2:	89ab      	ldrh	r3, [r5, #12]
 800d6e4:	071b      	lsls	r3, r3, #28
 800d6e6:	d501      	bpl.n	800d6ec <_vfiprintf_r+0x34>
 800d6e8:	692b      	ldr	r3, [r5, #16]
 800d6ea:	b99b      	cbnz	r3, 800d714 <_vfiprintf_r+0x5c>
 800d6ec:	4629      	mov	r1, r5
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	f000 f938 	bl	800d964 <__swsetup_r>
 800d6f4:	b170      	cbz	r0, 800d714 <_vfiprintf_r+0x5c>
 800d6f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d6f8:	07dc      	lsls	r4, r3, #31
 800d6fa:	d504      	bpl.n	800d706 <_vfiprintf_r+0x4e>
 800d6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d700:	b01d      	add	sp, #116	@ 0x74
 800d702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d706:	89ab      	ldrh	r3, [r5, #12]
 800d708:	0598      	lsls	r0, r3, #22
 800d70a:	d4f7      	bmi.n	800d6fc <_vfiprintf_r+0x44>
 800d70c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d70e:	f7fe f9ff 	bl	800bb10 <__retarget_lock_release_recursive>
 800d712:	e7f3      	b.n	800d6fc <_vfiprintf_r+0x44>
 800d714:	2300      	movs	r3, #0
 800d716:	9309      	str	r3, [sp, #36]	@ 0x24
 800d718:	2320      	movs	r3, #32
 800d71a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d71e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d722:	2330      	movs	r3, #48	@ 0x30
 800d724:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d8d4 <_vfiprintf_r+0x21c>
 800d728:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d72c:	f04f 0901 	mov.w	r9, #1
 800d730:	4623      	mov	r3, r4
 800d732:	469a      	mov	sl, r3
 800d734:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d738:	b10a      	cbz	r2, 800d73e <_vfiprintf_r+0x86>
 800d73a:	2a25      	cmp	r2, #37	@ 0x25
 800d73c:	d1f9      	bne.n	800d732 <_vfiprintf_r+0x7a>
 800d73e:	ebba 0b04 	subs.w	fp, sl, r4
 800d742:	d00b      	beq.n	800d75c <_vfiprintf_r+0xa4>
 800d744:	465b      	mov	r3, fp
 800d746:	4622      	mov	r2, r4
 800d748:	4629      	mov	r1, r5
 800d74a:	4630      	mov	r0, r6
 800d74c:	f7ff ffa2 	bl	800d694 <__sfputs_r>
 800d750:	3001      	adds	r0, #1
 800d752:	f000 80a7 	beq.w	800d8a4 <_vfiprintf_r+0x1ec>
 800d756:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d758:	445a      	add	r2, fp
 800d75a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d75c:	f89a 3000 	ldrb.w	r3, [sl]
 800d760:	2b00      	cmp	r3, #0
 800d762:	f000 809f 	beq.w	800d8a4 <_vfiprintf_r+0x1ec>
 800d766:	2300      	movs	r3, #0
 800d768:	f04f 32ff 	mov.w	r2, #4294967295
 800d76c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d770:	f10a 0a01 	add.w	sl, sl, #1
 800d774:	9304      	str	r3, [sp, #16]
 800d776:	9307      	str	r3, [sp, #28]
 800d778:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d77c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d77e:	4654      	mov	r4, sl
 800d780:	2205      	movs	r2, #5
 800d782:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d786:	4853      	ldr	r0, [pc, #332]	@ (800d8d4 <_vfiprintf_r+0x21c>)
 800d788:	f7f2 fd22 	bl	80001d0 <memchr>
 800d78c:	9a04      	ldr	r2, [sp, #16]
 800d78e:	b9d8      	cbnz	r0, 800d7c8 <_vfiprintf_r+0x110>
 800d790:	06d1      	lsls	r1, r2, #27
 800d792:	bf44      	itt	mi
 800d794:	2320      	movmi	r3, #32
 800d796:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d79a:	0713      	lsls	r3, r2, #28
 800d79c:	bf44      	itt	mi
 800d79e:	232b      	movmi	r3, #43	@ 0x2b
 800d7a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7a4:	f89a 3000 	ldrb.w	r3, [sl]
 800d7a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7aa:	d015      	beq.n	800d7d8 <_vfiprintf_r+0x120>
 800d7ac:	9a07      	ldr	r2, [sp, #28]
 800d7ae:	4654      	mov	r4, sl
 800d7b0:	2000      	movs	r0, #0
 800d7b2:	f04f 0c0a 	mov.w	ip, #10
 800d7b6:	4621      	mov	r1, r4
 800d7b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7bc:	3b30      	subs	r3, #48	@ 0x30
 800d7be:	2b09      	cmp	r3, #9
 800d7c0:	d94b      	bls.n	800d85a <_vfiprintf_r+0x1a2>
 800d7c2:	b1b0      	cbz	r0, 800d7f2 <_vfiprintf_r+0x13a>
 800d7c4:	9207      	str	r2, [sp, #28]
 800d7c6:	e014      	b.n	800d7f2 <_vfiprintf_r+0x13a>
 800d7c8:	eba0 0308 	sub.w	r3, r0, r8
 800d7cc:	fa09 f303 	lsl.w	r3, r9, r3
 800d7d0:	4313      	orrs	r3, r2
 800d7d2:	9304      	str	r3, [sp, #16]
 800d7d4:	46a2      	mov	sl, r4
 800d7d6:	e7d2      	b.n	800d77e <_vfiprintf_r+0xc6>
 800d7d8:	9b03      	ldr	r3, [sp, #12]
 800d7da:	1d19      	adds	r1, r3, #4
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	9103      	str	r1, [sp, #12]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	bfbb      	ittet	lt
 800d7e4:	425b      	neglt	r3, r3
 800d7e6:	f042 0202 	orrlt.w	r2, r2, #2
 800d7ea:	9307      	strge	r3, [sp, #28]
 800d7ec:	9307      	strlt	r3, [sp, #28]
 800d7ee:	bfb8      	it	lt
 800d7f0:	9204      	strlt	r2, [sp, #16]
 800d7f2:	7823      	ldrb	r3, [r4, #0]
 800d7f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7f6:	d10a      	bne.n	800d80e <_vfiprintf_r+0x156>
 800d7f8:	7863      	ldrb	r3, [r4, #1]
 800d7fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7fc:	d132      	bne.n	800d864 <_vfiprintf_r+0x1ac>
 800d7fe:	9b03      	ldr	r3, [sp, #12]
 800d800:	1d1a      	adds	r2, r3, #4
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	9203      	str	r2, [sp, #12]
 800d806:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d80a:	3402      	adds	r4, #2
 800d80c:	9305      	str	r3, [sp, #20]
 800d80e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d8d8 <_vfiprintf_r+0x220>
 800d812:	7821      	ldrb	r1, [r4, #0]
 800d814:	2203      	movs	r2, #3
 800d816:	4650      	mov	r0, sl
 800d818:	f7f2 fcda 	bl	80001d0 <memchr>
 800d81c:	b138      	cbz	r0, 800d82e <_vfiprintf_r+0x176>
 800d81e:	9b04      	ldr	r3, [sp, #16]
 800d820:	eba0 000a 	sub.w	r0, r0, sl
 800d824:	2240      	movs	r2, #64	@ 0x40
 800d826:	4082      	lsls	r2, r0
 800d828:	4313      	orrs	r3, r2
 800d82a:	3401      	adds	r4, #1
 800d82c:	9304      	str	r3, [sp, #16]
 800d82e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d832:	482a      	ldr	r0, [pc, #168]	@ (800d8dc <_vfiprintf_r+0x224>)
 800d834:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d838:	2206      	movs	r2, #6
 800d83a:	f7f2 fcc9 	bl	80001d0 <memchr>
 800d83e:	2800      	cmp	r0, #0
 800d840:	d03f      	beq.n	800d8c2 <_vfiprintf_r+0x20a>
 800d842:	4b27      	ldr	r3, [pc, #156]	@ (800d8e0 <_vfiprintf_r+0x228>)
 800d844:	bb1b      	cbnz	r3, 800d88e <_vfiprintf_r+0x1d6>
 800d846:	9b03      	ldr	r3, [sp, #12]
 800d848:	3307      	adds	r3, #7
 800d84a:	f023 0307 	bic.w	r3, r3, #7
 800d84e:	3308      	adds	r3, #8
 800d850:	9303      	str	r3, [sp, #12]
 800d852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d854:	443b      	add	r3, r7
 800d856:	9309      	str	r3, [sp, #36]	@ 0x24
 800d858:	e76a      	b.n	800d730 <_vfiprintf_r+0x78>
 800d85a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d85e:	460c      	mov	r4, r1
 800d860:	2001      	movs	r0, #1
 800d862:	e7a8      	b.n	800d7b6 <_vfiprintf_r+0xfe>
 800d864:	2300      	movs	r3, #0
 800d866:	3401      	adds	r4, #1
 800d868:	9305      	str	r3, [sp, #20]
 800d86a:	4619      	mov	r1, r3
 800d86c:	f04f 0c0a 	mov.w	ip, #10
 800d870:	4620      	mov	r0, r4
 800d872:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d876:	3a30      	subs	r2, #48	@ 0x30
 800d878:	2a09      	cmp	r2, #9
 800d87a:	d903      	bls.n	800d884 <_vfiprintf_r+0x1cc>
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d0c6      	beq.n	800d80e <_vfiprintf_r+0x156>
 800d880:	9105      	str	r1, [sp, #20]
 800d882:	e7c4      	b.n	800d80e <_vfiprintf_r+0x156>
 800d884:	fb0c 2101 	mla	r1, ip, r1, r2
 800d888:	4604      	mov	r4, r0
 800d88a:	2301      	movs	r3, #1
 800d88c:	e7f0      	b.n	800d870 <_vfiprintf_r+0x1b8>
 800d88e:	ab03      	add	r3, sp, #12
 800d890:	9300      	str	r3, [sp, #0]
 800d892:	462a      	mov	r2, r5
 800d894:	4b13      	ldr	r3, [pc, #76]	@ (800d8e4 <_vfiprintf_r+0x22c>)
 800d896:	a904      	add	r1, sp, #16
 800d898:	4630      	mov	r0, r6
 800d89a:	f7fd fbdb 	bl	800b054 <_printf_float>
 800d89e:	4607      	mov	r7, r0
 800d8a0:	1c78      	adds	r0, r7, #1
 800d8a2:	d1d6      	bne.n	800d852 <_vfiprintf_r+0x19a>
 800d8a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d8a6:	07d9      	lsls	r1, r3, #31
 800d8a8:	d405      	bmi.n	800d8b6 <_vfiprintf_r+0x1fe>
 800d8aa:	89ab      	ldrh	r3, [r5, #12]
 800d8ac:	059a      	lsls	r2, r3, #22
 800d8ae:	d402      	bmi.n	800d8b6 <_vfiprintf_r+0x1fe>
 800d8b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8b2:	f7fe f92d 	bl	800bb10 <__retarget_lock_release_recursive>
 800d8b6:	89ab      	ldrh	r3, [r5, #12]
 800d8b8:	065b      	lsls	r3, r3, #25
 800d8ba:	f53f af1f 	bmi.w	800d6fc <_vfiprintf_r+0x44>
 800d8be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d8c0:	e71e      	b.n	800d700 <_vfiprintf_r+0x48>
 800d8c2:	ab03      	add	r3, sp, #12
 800d8c4:	9300      	str	r3, [sp, #0]
 800d8c6:	462a      	mov	r2, r5
 800d8c8:	4b06      	ldr	r3, [pc, #24]	@ (800d8e4 <_vfiprintf_r+0x22c>)
 800d8ca:	a904      	add	r1, sp, #16
 800d8cc:	4630      	mov	r0, r6
 800d8ce:	f7fd fe5b 	bl	800b588 <_printf_i>
 800d8d2:	e7e4      	b.n	800d89e <_vfiprintf_r+0x1e6>
 800d8d4:	0800de48 	.word	0x0800de48
 800d8d8:	0800de4e 	.word	0x0800de4e
 800d8dc:	0800de52 	.word	0x0800de52
 800d8e0:	0800b055 	.word	0x0800b055
 800d8e4:	0800d695 	.word	0x0800d695

0800d8e8 <__swbuf_r>:
 800d8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ea:	460e      	mov	r6, r1
 800d8ec:	4614      	mov	r4, r2
 800d8ee:	4605      	mov	r5, r0
 800d8f0:	b118      	cbz	r0, 800d8fa <__swbuf_r+0x12>
 800d8f2:	6a03      	ldr	r3, [r0, #32]
 800d8f4:	b90b      	cbnz	r3, 800d8fa <__swbuf_r+0x12>
 800d8f6:	f7fd fff3 	bl	800b8e0 <__sinit>
 800d8fa:	69a3      	ldr	r3, [r4, #24]
 800d8fc:	60a3      	str	r3, [r4, #8]
 800d8fe:	89a3      	ldrh	r3, [r4, #12]
 800d900:	071a      	lsls	r2, r3, #28
 800d902:	d501      	bpl.n	800d908 <__swbuf_r+0x20>
 800d904:	6923      	ldr	r3, [r4, #16]
 800d906:	b943      	cbnz	r3, 800d91a <__swbuf_r+0x32>
 800d908:	4621      	mov	r1, r4
 800d90a:	4628      	mov	r0, r5
 800d90c:	f000 f82a 	bl	800d964 <__swsetup_r>
 800d910:	b118      	cbz	r0, 800d91a <__swbuf_r+0x32>
 800d912:	f04f 37ff 	mov.w	r7, #4294967295
 800d916:	4638      	mov	r0, r7
 800d918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d91a:	6823      	ldr	r3, [r4, #0]
 800d91c:	6922      	ldr	r2, [r4, #16]
 800d91e:	1a98      	subs	r0, r3, r2
 800d920:	6963      	ldr	r3, [r4, #20]
 800d922:	b2f6      	uxtb	r6, r6
 800d924:	4283      	cmp	r3, r0
 800d926:	4637      	mov	r7, r6
 800d928:	dc05      	bgt.n	800d936 <__swbuf_r+0x4e>
 800d92a:	4621      	mov	r1, r4
 800d92c:	4628      	mov	r0, r5
 800d92e:	f7ff fd9b 	bl	800d468 <_fflush_r>
 800d932:	2800      	cmp	r0, #0
 800d934:	d1ed      	bne.n	800d912 <__swbuf_r+0x2a>
 800d936:	68a3      	ldr	r3, [r4, #8]
 800d938:	3b01      	subs	r3, #1
 800d93a:	60a3      	str	r3, [r4, #8]
 800d93c:	6823      	ldr	r3, [r4, #0]
 800d93e:	1c5a      	adds	r2, r3, #1
 800d940:	6022      	str	r2, [r4, #0]
 800d942:	701e      	strb	r6, [r3, #0]
 800d944:	6962      	ldr	r2, [r4, #20]
 800d946:	1c43      	adds	r3, r0, #1
 800d948:	429a      	cmp	r2, r3
 800d94a:	d004      	beq.n	800d956 <__swbuf_r+0x6e>
 800d94c:	89a3      	ldrh	r3, [r4, #12]
 800d94e:	07db      	lsls	r3, r3, #31
 800d950:	d5e1      	bpl.n	800d916 <__swbuf_r+0x2e>
 800d952:	2e0a      	cmp	r6, #10
 800d954:	d1df      	bne.n	800d916 <__swbuf_r+0x2e>
 800d956:	4621      	mov	r1, r4
 800d958:	4628      	mov	r0, r5
 800d95a:	f7ff fd85 	bl	800d468 <_fflush_r>
 800d95e:	2800      	cmp	r0, #0
 800d960:	d0d9      	beq.n	800d916 <__swbuf_r+0x2e>
 800d962:	e7d6      	b.n	800d912 <__swbuf_r+0x2a>

0800d964 <__swsetup_r>:
 800d964:	b538      	push	{r3, r4, r5, lr}
 800d966:	4b29      	ldr	r3, [pc, #164]	@ (800da0c <__swsetup_r+0xa8>)
 800d968:	4605      	mov	r5, r0
 800d96a:	6818      	ldr	r0, [r3, #0]
 800d96c:	460c      	mov	r4, r1
 800d96e:	b118      	cbz	r0, 800d978 <__swsetup_r+0x14>
 800d970:	6a03      	ldr	r3, [r0, #32]
 800d972:	b90b      	cbnz	r3, 800d978 <__swsetup_r+0x14>
 800d974:	f7fd ffb4 	bl	800b8e0 <__sinit>
 800d978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d97c:	0719      	lsls	r1, r3, #28
 800d97e:	d422      	bmi.n	800d9c6 <__swsetup_r+0x62>
 800d980:	06da      	lsls	r2, r3, #27
 800d982:	d407      	bmi.n	800d994 <__swsetup_r+0x30>
 800d984:	2209      	movs	r2, #9
 800d986:	602a      	str	r2, [r5, #0]
 800d988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d98c:	81a3      	strh	r3, [r4, #12]
 800d98e:	f04f 30ff 	mov.w	r0, #4294967295
 800d992:	e033      	b.n	800d9fc <__swsetup_r+0x98>
 800d994:	0758      	lsls	r0, r3, #29
 800d996:	d512      	bpl.n	800d9be <__swsetup_r+0x5a>
 800d998:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d99a:	b141      	cbz	r1, 800d9ae <__swsetup_r+0x4a>
 800d99c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d9a0:	4299      	cmp	r1, r3
 800d9a2:	d002      	beq.n	800d9aa <__swsetup_r+0x46>
 800d9a4:	4628      	mov	r0, r5
 800d9a6:	f7fe ff07 	bl	800c7b8 <_free_r>
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	6363      	str	r3, [r4, #52]	@ 0x34
 800d9ae:	89a3      	ldrh	r3, [r4, #12]
 800d9b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d9b4:	81a3      	strh	r3, [r4, #12]
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	6063      	str	r3, [r4, #4]
 800d9ba:	6923      	ldr	r3, [r4, #16]
 800d9bc:	6023      	str	r3, [r4, #0]
 800d9be:	89a3      	ldrh	r3, [r4, #12]
 800d9c0:	f043 0308 	orr.w	r3, r3, #8
 800d9c4:	81a3      	strh	r3, [r4, #12]
 800d9c6:	6923      	ldr	r3, [r4, #16]
 800d9c8:	b94b      	cbnz	r3, 800d9de <__swsetup_r+0x7a>
 800d9ca:	89a3      	ldrh	r3, [r4, #12]
 800d9cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d9d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d9d4:	d003      	beq.n	800d9de <__swsetup_r+0x7a>
 800d9d6:	4621      	mov	r1, r4
 800d9d8:	4628      	mov	r0, r5
 800d9da:	f000 f883 	bl	800dae4 <__smakebuf_r>
 800d9de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9e2:	f013 0201 	ands.w	r2, r3, #1
 800d9e6:	d00a      	beq.n	800d9fe <__swsetup_r+0x9a>
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	60a2      	str	r2, [r4, #8]
 800d9ec:	6962      	ldr	r2, [r4, #20]
 800d9ee:	4252      	negs	r2, r2
 800d9f0:	61a2      	str	r2, [r4, #24]
 800d9f2:	6922      	ldr	r2, [r4, #16]
 800d9f4:	b942      	cbnz	r2, 800da08 <__swsetup_r+0xa4>
 800d9f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d9fa:	d1c5      	bne.n	800d988 <__swsetup_r+0x24>
 800d9fc:	bd38      	pop	{r3, r4, r5, pc}
 800d9fe:	0799      	lsls	r1, r3, #30
 800da00:	bf58      	it	pl
 800da02:	6962      	ldrpl	r2, [r4, #20]
 800da04:	60a2      	str	r2, [r4, #8]
 800da06:	e7f4      	b.n	800d9f2 <__swsetup_r+0x8e>
 800da08:	2000      	movs	r0, #0
 800da0a:	e7f7      	b.n	800d9fc <__swsetup_r+0x98>
 800da0c:	20000108 	.word	0x20000108

0800da10 <_raise_r>:
 800da10:	291f      	cmp	r1, #31
 800da12:	b538      	push	{r3, r4, r5, lr}
 800da14:	4605      	mov	r5, r0
 800da16:	460c      	mov	r4, r1
 800da18:	d904      	bls.n	800da24 <_raise_r+0x14>
 800da1a:	2316      	movs	r3, #22
 800da1c:	6003      	str	r3, [r0, #0]
 800da1e:	f04f 30ff 	mov.w	r0, #4294967295
 800da22:	bd38      	pop	{r3, r4, r5, pc}
 800da24:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800da26:	b112      	cbz	r2, 800da2e <_raise_r+0x1e>
 800da28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da2c:	b94b      	cbnz	r3, 800da42 <_raise_r+0x32>
 800da2e:	4628      	mov	r0, r5
 800da30:	f000 f830 	bl	800da94 <_getpid_r>
 800da34:	4622      	mov	r2, r4
 800da36:	4601      	mov	r1, r0
 800da38:	4628      	mov	r0, r5
 800da3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da3e:	f000 b817 	b.w	800da70 <_kill_r>
 800da42:	2b01      	cmp	r3, #1
 800da44:	d00a      	beq.n	800da5c <_raise_r+0x4c>
 800da46:	1c59      	adds	r1, r3, #1
 800da48:	d103      	bne.n	800da52 <_raise_r+0x42>
 800da4a:	2316      	movs	r3, #22
 800da4c:	6003      	str	r3, [r0, #0]
 800da4e:	2001      	movs	r0, #1
 800da50:	e7e7      	b.n	800da22 <_raise_r+0x12>
 800da52:	2100      	movs	r1, #0
 800da54:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800da58:	4620      	mov	r0, r4
 800da5a:	4798      	blx	r3
 800da5c:	2000      	movs	r0, #0
 800da5e:	e7e0      	b.n	800da22 <_raise_r+0x12>

0800da60 <raise>:
 800da60:	4b02      	ldr	r3, [pc, #8]	@ (800da6c <raise+0xc>)
 800da62:	4601      	mov	r1, r0
 800da64:	6818      	ldr	r0, [r3, #0]
 800da66:	f7ff bfd3 	b.w	800da10 <_raise_r>
 800da6a:	bf00      	nop
 800da6c:	20000108 	.word	0x20000108

0800da70 <_kill_r>:
 800da70:	b538      	push	{r3, r4, r5, lr}
 800da72:	4d07      	ldr	r5, [pc, #28]	@ (800da90 <_kill_r+0x20>)
 800da74:	2300      	movs	r3, #0
 800da76:	4604      	mov	r4, r0
 800da78:	4608      	mov	r0, r1
 800da7a:	4611      	mov	r1, r2
 800da7c:	602b      	str	r3, [r5, #0]
 800da7e:	f7f4 fa36 	bl	8001eee <_kill>
 800da82:	1c43      	adds	r3, r0, #1
 800da84:	d102      	bne.n	800da8c <_kill_r+0x1c>
 800da86:	682b      	ldr	r3, [r5, #0]
 800da88:	b103      	cbz	r3, 800da8c <_kill_r+0x1c>
 800da8a:	6023      	str	r3, [r4, #0]
 800da8c:	bd38      	pop	{r3, r4, r5, pc}
 800da8e:	bf00      	nop
 800da90:	20002220 	.word	0x20002220

0800da94 <_getpid_r>:
 800da94:	f7f4 ba24 	b.w	8001ee0 <_getpid>

0800da98 <__swhatbuf_r>:
 800da98:	b570      	push	{r4, r5, r6, lr}
 800da9a:	460c      	mov	r4, r1
 800da9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daa0:	2900      	cmp	r1, #0
 800daa2:	b096      	sub	sp, #88	@ 0x58
 800daa4:	4615      	mov	r5, r2
 800daa6:	461e      	mov	r6, r3
 800daa8:	da0d      	bge.n	800dac6 <__swhatbuf_r+0x2e>
 800daaa:	89a3      	ldrh	r3, [r4, #12]
 800daac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dab0:	f04f 0100 	mov.w	r1, #0
 800dab4:	bf14      	ite	ne
 800dab6:	2340      	movne	r3, #64	@ 0x40
 800dab8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dabc:	2000      	movs	r0, #0
 800dabe:	6031      	str	r1, [r6, #0]
 800dac0:	602b      	str	r3, [r5, #0]
 800dac2:	b016      	add	sp, #88	@ 0x58
 800dac4:	bd70      	pop	{r4, r5, r6, pc}
 800dac6:	466a      	mov	r2, sp
 800dac8:	f000 f848 	bl	800db5c <_fstat_r>
 800dacc:	2800      	cmp	r0, #0
 800dace:	dbec      	blt.n	800daaa <__swhatbuf_r+0x12>
 800dad0:	9901      	ldr	r1, [sp, #4]
 800dad2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dad6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dada:	4259      	negs	r1, r3
 800dadc:	4159      	adcs	r1, r3
 800dade:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dae2:	e7eb      	b.n	800dabc <__swhatbuf_r+0x24>

0800dae4 <__smakebuf_r>:
 800dae4:	898b      	ldrh	r3, [r1, #12]
 800dae6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dae8:	079d      	lsls	r5, r3, #30
 800daea:	4606      	mov	r6, r0
 800daec:	460c      	mov	r4, r1
 800daee:	d507      	bpl.n	800db00 <__smakebuf_r+0x1c>
 800daf0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800daf4:	6023      	str	r3, [r4, #0]
 800daf6:	6123      	str	r3, [r4, #16]
 800daf8:	2301      	movs	r3, #1
 800dafa:	6163      	str	r3, [r4, #20]
 800dafc:	b003      	add	sp, #12
 800dafe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db00:	ab01      	add	r3, sp, #4
 800db02:	466a      	mov	r2, sp
 800db04:	f7ff ffc8 	bl	800da98 <__swhatbuf_r>
 800db08:	9f00      	ldr	r7, [sp, #0]
 800db0a:	4605      	mov	r5, r0
 800db0c:	4639      	mov	r1, r7
 800db0e:	4630      	mov	r0, r6
 800db10:	f7fe fec6 	bl	800c8a0 <_malloc_r>
 800db14:	b948      	cbnz	r0, 800db2a <__smakebuf_r+0x46>
 800db16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db1a:	059a      	lsls	r2, r3, #22
 800db1c:	d4ee      	bmi.n	800dafc <__smakebuf_r+0x18>
 800db1e:	f023 0303 	bic.w	r3, r3, #3
 800db22:	f043 0302 	orr.w	r3, r3, #2
 800db26:	81a3      	strh	r3, [r4, #12]
 800db28:	e7e2      	b.n	800daf0 <__smakebuf_r+0xc>
 800db2a:	89a3      	ldrh	r3, [r4, #12]
 800db2c:	6020      	str	r0, [r4, #0]
 800db2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db32:	81a3      	strh	r3, [r4, #12]
 800db34:	9b01      	ldr	r3, [sp, #4]
 800db36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800db3a:	b15b      	cbz	r3, 800db54 <__smakebuf_r+0x70>
 800db3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db40:	4630      	mov	r0, r6
 800db42:	f000 f81d 	bl	800db80 <_isatty_r>
 800db46:	b128      	cbz	r0, 800db54 <__smakebuf_r+0x70>
 800db48:	89a3      	ldrh	r3, [r4, #12]
 800db4a:	f023 0303 	bic.w	r3, r3, #3
 800db4e:	f043 0301 	orr.w	r3, r3, #1
 800db52:	81a3      	strh	r3, [r4, #12]
 800db54:	89a3      	ldrh	r3, [r4, #12]
 800db56:	431d      	orrs	r5, r3
 800db58:	81a5      	strh	r5, [r4, #12]
 800db5a:	e7cf      	b.n	800dafc <__smakebuf_r+0x18>

0800db5c <_fstat_r>:
 800db5c:	b538      	push	{r3, r4, r5, lr}
 800db5e:	4d07      	ldr	r5, [pc, #28]	@ (800db7c <_fstat_r+0x20>)
 800db60:	2300      	movs	r3, #0
 800db62:	4604      	mov	r4, r0
 800db64:	4608      	mov	r0, r1
 800db66:	4611      	mov	r1, r2
 800db68:	602b      	str	r3, [r5, #0]
 800db6a:	f7f4 fa1f 	bl	8001fac <_fstat>
 800db6e:	1c43      	adds	r3, r0, #1
 800db70:	d102      	bne.n	800db78 <_fstat_r+0x1c>
 800db72:	682b      	ldr	r3, [r5, #0]
 800db74:	b103      	cbz	r3, 800db78 <_fstat_r+0x1c>
 800db76:	6023      	str	r3, [r4, #0]
 800db78:	bd38      	pop	{r3, r4, r5, pc}
 800db7a:	bf00      	nop
 800db7c:	20002220 	.word	0x20002220

0800db80 <_isatty_r>:
 800db80:	b538      	push	{r3, r4, r5, lr}
 800db82:	4d06      	ldr	r5, [pc, #24]	@ (800db9c <_isatty_r+0x1c>)
 800db84:	2300      	movs	r3, #0
 800db86:	4604      	mov	r4, r0
 800db88:	4608      	mov	r0, r1
 800db8a:	602b      	str	r3, [r5, #0]
 800db8c:	f7f4 fa1d 	bl	8001fca <_isatty>
 800db90:	1c43      	adds	r3, r0, #1
 800db92:	d102      	bne.n	800db9a <_isatty_r+0x1a>
 800db94:	682b      	ldr	r3, [r5, #0]
 800db96:	b103      	cbz	r3, 800db9a <_isatty_r+0x1a>
 800db98:	6023      	str	r3, [r4, #0]
 800db9a:	bd38      	pop	{r3, r4, r5, pc}
 800db9c:	20002220 	.word	0x20002220

0800dba0 <_init>:
 800dba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dba2:	bf00      	nop
 800dba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dba6:	bc08      	pop	{r3}
 800dba8:	469e      	mov	lr, r3
 800dbaa:	4770      	bx	lr

0800dbac <_fini>:
 800dbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbae:	bf00      	nop
 800dbb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbb2:	bc08      	pop	{r3}
 800dbb4:	469e      	mov	lr, r3
 800dbb6:	4770      	bx	lr
